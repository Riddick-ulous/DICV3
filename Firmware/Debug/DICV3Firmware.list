
DICV3Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006de0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  08006ea0  08006ea0  00016ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007598  08007598  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08007598  08007598  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007598  08007598  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007598  08007598  00017598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800759c  0800759c  0001759c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080075a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000111c  20000060  08007600  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000117c  08007600  0002117c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   000113b2  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003004  00000000  00000000  0003147d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b8  00000000  00000000  00034488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d03  00000000  00000000  00035540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001be85  00000000  00000000  00036243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014e1d  00000000  00000000  000520c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d83d  00000000  00000000  00066ee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000406c  00000000  00000000  00104724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00108790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006e88 	.word	0x08006e88

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08006e88 	.word	0x08006e88

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <write_ctrl>:
    ADC_SENSOR_NORMAL, ADC_SENSOR_NORMAL, ADC_SENSOR_NORMAL, ADC_SENSOR_NORMAL
};

// --- kleine Helfer ---
static inline void write_ctrl(uint8_t ch, ADC_SupplyMode_t s)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	0002      	movs	r2, r0
 8000410:	1dfb      	adds	r3, r7, #7
 8000412:	701a      	strb	r2, [r3, #0]
 8000414:	1dbb      	adds	r3, r7, #6
 8000416:	1c0a      	adds	r2, r1, #0
 8000418:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(adc_gpio[ch].ctrl_port, adc_gpio[ch].ctrl_pin,
 800041a:	1dfb      	adds	r3, r7, #7
 800041c:	781a      	ldrb	r2, [r3, #0]
 800041e:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <write_ctrl+0x50>)
 8000420:	0112      	lsls	r2, r2, #4
 8000422:	58d0      	ldr	r0, [r2, r3]
 8000424:	1dfb      	adds	r3, r7, #7
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	4a0b      	ldr	r2, [pc, #44]	; (8000458 <write_ctrl+0x50>)
 800042a:	011b      	lsls	r3, r3, #4
 800042c:	18d3      	adds	r3, r2, r3
 800042e:	3304      	adds	r3, #4
 8000430:	8819      	ldrh	r1, [r3, #0]
 8000432:	1dbb      	adds	r3, r7, #6
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	3b01      	subs	r3, #1
 8000438:	425a      	negs	r2, r3
 800043a:	4153      	adcs	r3, r2
 800043c:	b2db      	uxtb	r3, r3
 800043e:	001a      	movs	r2, r3
 8000440:	f004 fbe0 	bl	8004c04 <HAL_GPIO_WritePin>
                      (s == ADC_SUPPLY_12V) ? GPIO_PIN_SET : GPIO_PIN_RESET);
    g_supply[ch] = s;
 8000444:	1dfb      	adds	r3, r7, #7
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	4a04      	ldr	r2, [pc, #16]	; (800045c <write_ctrl+0x54>)
 800044a:	1db9      	adds	r1, r7, #6
 800044c:	7809      	ldrb	r1, [r1, #0]
 800044e:	54d1      	strb	r1, [r2, r3]
}
 8000450:	46c0      	nop			; (mov r8, r8)
 8000452:	46bd      	mov	sp, r7
 8000454:	b002      	add	sp, #8
 8000456:	bd80      	pop	{r7, pc}
 8000458:	08006ef0 	.word	0x08006ef0
 800045c:	200005a4 	.word	0x200005a4

08000460 <write_ntc>:
static inline void write_ntc(uint8_t ch, ADC_SensorMode_t m)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	0002      	movs	r2, r0
 8000468:	1dfb      	adds	r3, r7, #7
 800046a:	701a      	strb	r2, [r3, #0]
 800046c:	1dbb      	adds	r3, r7, #6
 800046e:	1c0a      	adds	r2, r1, #0
 8000470:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(adc_gpio[ch].ntc_port, adc_gpio[ch].ntc_pin,
 8000472:	1dfb      	adds	r3, r7, #7
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	4a0f      	ldr	r2, [pc, #60]	; (80004b4 <write_ntc+0x54>)
 8000478:	011b      	lsls	r3, r3, #4
 800047a:	18d3      	adds	r3, r2, r3
 800047c:	3308      	adds	r3, #8
 800047e:	6818      	ldr	r0, [r3, #0]
 8000480:	1dfb      	adds	r3, r7, #7
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	4a0b      	ldr	r2, [pc, #44]	; (80004b4 <write_ntc+0x54>)
 8000486:	011b      	lsls	r3, r3, #4
 8000488:	18d3      	adds	r3, r2, r3
 800048a:	330c      	adds	r3, #12
 800048c:	8819      	ldrh	r1, [r3, #0]
 800048e:	1dbb      	adds	r3, r7, #6
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	3b01      	subs	r3, #1
 8000494:	425a      	negs	r2, r3
 8000496:	4153      	adcs	r3, r2
 8000498:	b2db      	uxtb	r3, r3
 800049a:	001a      	movs	r2, r3
 800049c:	f004 fbb2 	bl	8004c04 <HAL_GPIO_WritePin>
                      (m == ADC_SENSOR_NTC) ? GPIO_PIN_SET : GPIO_PIN_RESET);
    g_sensor[ch] = m;
 80004a0:	1dfb      	adds	r3, r7, #7
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	4a04      	ldr	r2, [pc, #16]	; (80004b8 <write_ntc+0x58>)
 80004a6:	1db9      	adds	r1, r7, #6
 80004a8:	7809      	ldrb	r1, [r1, #0]
 80004aa:	54d1      	strb	r1, [r2, r3]
}
 80004ac:	46c0      	nop			; (mov r8, r8)
 80004ae:	46bd      	mov	sp, r7
 80004b0:	b002      	add	sp, #8
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	08006ef0 	.word	0x08006ef0
 80004b8:	200005a8 	.word	0x200005a8

080004bc <ADC_CtrlInitDefaults>:

void ADC_CtrlInitDefaults(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
    for (uint8_t ch = 0; ch < ADC_CHANNEL_COUNT; ch++) {
 80004c2:	1dfb      	adds	r3, r7, #7
 80004c4:	2200      	movs	r2, #0
 80004c6:	701a      	strb	r2, [r3, #0]
 80004c8:	e01d      	b.n	8000506 <ADC_CtrlInitDefaults+0x4a>
        write_ctrl(ch, DEFAULT_SUPPLY[ch]);
 80004ca:	1dfb      	adds	r3, r7, #7
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	4a12      	ldr	r2, [pc, #72]	; (8000518 <ADC_CtrlInitDefaults+0x5c>)
 80004d0:	5cd2      	ldrb	r2, [r2, r3]
 80004d2:	1dfb      	adds	r3, r7, #7
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	0011      	movs	r1, r2
 80004d8:	0018      	movs	r0, r3
 80004da:	f7ff ff95 	bl	8000408 <write_ctrl>
        write_ntc(ch,  DEFAULT_SENSOR[ch]);
 80004de:	1dfb      	adds	r3, r7, #7
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	4a0e      	ldr	r2, [pc, #56]	; (800051c <ADC_CtrlInitDefaults+0x60>)
 80004e4:	5cd2      	ldrb	r2, [r2, r3]
 80004e6:	1dfb      	adds	r3, r7, #7
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	0011      	movs	r1, r2
 80004ec:	0018      	movs	r0, r3
 80004ee:	f7ff ffb7 	bl	8000460 <write_ntc>
        ADC_FlushChannel(ch); // alte Mittelwerte verwerfen (neue HW-Konfig)
 80004f2:	1dfb      	adds	r3, r7, #7
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	0018      	movs	r0, r3
 80004f8:	f000 f86e 	bl	80005d8 <ADC_FlushChannel>
    for (uint8_t ch = 0; ch < ADC_CHANNEL_COUNT; ch++) {
 80004fc:	1dfb      	adds	r3, r7, #7
 80004fe:	781a      	ldrb	r2, [r3, #0]
 8000500:	1dfb      	adds	r3, r7, #7
 8000502:	3201      	adds	r2, #1
 8000504:	701a      	strb	r2, [r3, #0]
 8000506:	1dfb      	adds	r3, r7, #7
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b03      	cmp	r3, #3
 800050c:	d9dd      	bls.n	80004ca <ADC_CtrlInitDefaults+0xe>
    }
}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	46c0      	nop			; (mov r8, r8)
 8000512:	46bd      	mov	sp, r7
 8000514:	b002      	add	sp, #8
 8000516:	bd80      	pop	{r7, pc}
 8000518:	08006f30 	.word	0x08006f30
 800051c:	08006f34 	.word	0x08006f34

08000520 <ADC_CtrlApply>:

void ADC_CtrlApply(uint8_t ch, ADC_SupplyMode_t supply, ADC_SensorMode_t sensor)
{
 8000520:	b590      	push	{r4, r7, lr}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	0004      	movs	r4, r0
 8000528:	0008      	movs	r0, r1
 800052a:	0011      	movs	r1, r2
 800052c:	1dfb      	adds	r3, r7, #7
 800052e:	1c22      	adds	r2, r4, #0
 8000530:	701a      	strb	r2, [r3, #0]
 8000532:	1dbb      	adds	r3, r7, #6
 8000534:	1c02      	adds	r2, r0, #0
 8000536:	701a      	strb	r2, [r3, #0]
 8000538:	1d7b      	adds	r3, r7, #5
 800053a:	1c0a      	adds	r2, r1, #0
 800053c:	701a      	strb	r2, [r3, #0]
    if (ch >= ADC_CHANNEL_COUNT) {
 800053e:	1dfb      	adds	r3, r7, #7
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b03      	cmp	r3, #3
 8000544:	d903      	bls.n	800054e <ADC_CtrlApply+0x2e>
        Error_Register(ERROR_ADC_INVALID_CHANNEL);
 8000546:	2008      	movs	r0, #8
 8000548:	f000 fccc 	bl	8000ee4 <Error_Register>
        return;
 800054c:	e014      	b.n	8000578 <ADC_CtrlApply+0x58>
    }
    write_ctrl(ch, supply);
 800054e:	1dbb      	adds	r3, r7, #6
 8000550:	781a      	ldrb	r2, [r3, #0]
 8000552:	1dfb      	adds	r3, r7, #7
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	0011      	movs	r1, r2
 8000558:	0018      	movs	r0, r3
 800055a:	f7ff ff55 	bl	8000408 <write_ctrl>
    write_ntc(ch,  sensor);
 800055e:	1d7b      	adds	r3, r7, #5
 8000560:	781a      	ldrb	r2, [r3, #0]
 8000562:	1dfb      	adds	r3, r7, #7
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	0011      	movs	r1, r2
 8000568:	0018      	movs	r0, r3
 800056a:	f7ff ff79 	bl	8000460 <write_ntc>
    ADC_FlushChannel(ch);   // nach Umschalten FIFO leeren, um gemischte Mittel zu vermeiden
 800056e:	1dfb      	adds	r3, r7, #7
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	0018      	movs	r0, r3
 8000574:	f000 f830 	bl	80005d8 <ADC_FlushChannel>
}
 8000578:	46bd      	mov	sp, r7
 800057a:	b003      	add	sp, #12
 800057c:	bd90      	pop	{r4, r7, pc}
	...

08000580 <ADC_CtrlGet>:

void ADC_CtrlGet(uint8_t ch, ADC_SupplyMode_t *supply, ADC_SensorMode_t *sensor)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	60b9      	str	r1, [r7, #8]
 8000588:	607a      	str	r2, [r7, #4]
 800058a:	210f      	movs	r1, #15
 800058c:	187b      	adds	r3, r7, r1
 800058e:	1c02      	adds	r2, r0, #0
 8000590:	701a      	strb	r2, [r3, #0]
    if (ch >= ADC_CHANNEL_COUNT) {
 8000592:	187b      	adds	r3, r7, r1
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b03      	cmp	r3, #3
 8000598:	d903      	bls.n	80005a2 <ADC_CtrlGet+0x22>
        Error_Register(ERROR_ADC_INVALID_CHANNEL);
 800059a:	2008      	movs	r0, #8
 800059c:	f000 fca2 	bl	8000ee4 <Error_Register>
        return;
 80005a0:	e013      	b.n	80005ca <ADC_CtrlGet+0x4a>
    }
    if (supply) *supply = g_supply[ch];
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d006      	beq.n	80005b6 <ADC_CtrlGet+0x36>
 80005a8:	230f      	movs	r3, #15
 80005aa:	18fb      	adds	r3, r7, r3
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	4a08      	ldr	r2, [pc, #32]	; (80005d0 <ADC_CtrlGet+0x50>)
 80005b0:	5cd2      	ldrb	r2, [r2, r3]
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	701a      	strb	r2, [r3, #0]
    if (sensor) *sensor = g_sensor[ch];
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d006      	beq.n	80005ca <ADC_CtrlGet+0x4a>
 80005bc:	230f      	movs	r3, #15
 80005be:	18fb      	adds	r3, r7, r3
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	4a04      	ldr	r2, [pc, #16]	; (80005d4 <ADC_CtrlGet+0x54>)
 80005c4:	5cd2      	ldrb	r2, [r2, r3]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	701a      	strb	r2, [r3, #0]
}
 80005ca:	46bd      	mov	sp, r7
 80005cc:	b004      	add	sp, #16
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200005a4 	.word	0x200005a4
 80005d4:	200005a8 	.word	0x200005a8

080005d8 <ADC_FlushChannel>:

void ADC_FlushChannel(uint8_t ch)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	0002      	movs	r2, r0
 80005e0:	1dfb      	adds	r3, r7, #7
 80005e2:	701a      	strb	r2, [r3, #0]
    if (ch >= ADC_CHANNEL_COUNT) {
 80005e4:	1dfb      	adds	r3, r7, #7
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b03      	cmp	r3, #3
 80005ea:	d903      	bls.n	80005f4 <ADC_FlushChannel+0x1c>
        Error_Register(ERROR_ADC_INVALID_CHANNEL);
 80005ec:	2008      	movs	r0, #8
 80005ee:	f000 fc79 	bl	8000ee4 <Error_Register>
        return;
 80005f2:	e00e      	b.n	8000612 <ADC_FlushChannel+0x3a>
    }
    // einfache FIFO-Löschung nur für den Kanal
    fifo_head[ch]  = 0;
 80005f4:	1dfb      	adds	r3, r7, #7
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	4a07      	ldr	r2, [pc, #28]	; (8000618 <ADC_FlushChannel+0x40>)
 80005fa:	2100      	movs	r1, #0
 80005fc:	54d1      	strb	r1, [r2, r3]
    fifo_count[ch] = 0;
 80005fe:	1dfb      	adds	r3, r7, #7
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	4a06      	ldr	r2, [pc, #24]	; (800061c <ADC_FlushChannel+0x44>)
 8000604:	2100      	movs	r1, #0
 8000606:	54d1      	strb	r1, [r2, r3]
    value_read[ch] = 0;
 8000608:	1dfb      	adds	r3, r7, #7
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	4a04      	ldr	r2, [pc, #16]	; (8000620 <ADC_FlushChannel+0x48>)
 800060e:	2100      	movs	r1, #0
 8000610:	54d1      	strb	r1, [r2, r3]
}
 8000612:	46bd      	mov	sp, r7
 8000614:	b002      	add	sp, #8
 8000616:	bd80      	pop	{r7, pc}
 8000618:	2000059c 	.word	0x2000059c
 800061c:	200005a0 	.word	0x200005a0
 8000620:	20000000 	.word	0x20000000

08000624 <ADC_HandleCAN>:

void ADC_HandleCAN(uint16_t id, const uint8_t *data, uint8_t dlc, uint32_t timestamp)
{
 8000624:	b5b0      	push	{r4, r5, r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af00      	add	r7, sp, #0
 800062a:	60b9      	str	r1, [r7, #8]
 800062c:	0011      	movs	r1, r2
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	240e      	movs	r4, #14
 8000632:	193b      	adds	r3, r7, r4
 8000634:	1c02      	adds	r2, r0, #0
 8000636:	801a      	strh	r2, [r3, #0]
 8000638:	200d      	movs	r0, #13
 800063a:	183b      	adds	r3, r7, r0
 800063c:	1c0a      	adds	r2, r1, #0
 800063e:	701a      	strb	r2, [r3, #0]
    if (id != 0x120 || dlc < ADC_CHANNEL_COUNT) return;
 8000640:	193b      	adds	r3, r7, r4
 8000642:	881a      	ldrh	r2, [r3, #0]
 8000644:	2390      	movs	r3, #144	; 0x90
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	429a      	cmp	r2, r3
 800064a:	d137      	bne.n	80006bc <ADC_HandleCAN+0x98>
 800064c:	183b      	adds	r3, r7, r0
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b03      	cmp	r3, #3
 8000652:	d933      	bls.n	80006bc <ADC_HandleCAN+0x98>

    for (uint8_t ch = 0; ch < ADC_CHANNEL_COUNT; ch++) {
 8000654:	2317      	movs	r3, #23
 8000656:	18fb      	adds	r3, r7, r3
 8000658:	2200      	movs	r2, #0
 800065a:	701a      	strb	r2, [r3, #0]
 800065c:	e028      	b.n	80006b0 <ADC_HandleCAN+0x8c>
        uint8_t val = data[ch];
 800065e:	2017      	movs	r0, #23
 8000660:	183b      	adds	r3, r7, r0
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	68ba      	ldr	r2, [r7, #8]
 8000666:	18d2      	adds	r2, r2, r3
 8000668:	2416      	movs	r4, #22
 800066a:	193b      	adds	r3, r7, r4
 800066c:	7812      	ldrb	r2, [r2, #0]
 800066e:	701a      	strb	r2, [r3, #0]
        ADC_SupplyMode_t supply = (val & 0x01) ? ADC_SUPPLY_12V : ADC_SUPPLY_5V;
 8000670:	2515      	movs	r5, #21
 8000672:	197b      	adds	r3, r7, r5
 8000674:	193a      	adds	r2, r7, r4
 8000676:	7812      	ldrb	r2, [r2, #0]
 8000678:	2101      	movs	r1, #1
 800067a:	400a      	ands	r2, r1
 800067c:	701a      	strb	r2, [r3, #0]
        ADC_SensorMode_t sensor = (val & 0x02) ? ADC_SENSOR_NTC  : ADC_SENSOR_NORMAL;
 800067e:	193b      	adds	r3, r7, r4
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	105b      	asrs	r3, r3, #1
 8000684:	b2da      	uxtb	r2, r3
 8000686:	2414      	movs	r4, #20
 8000688:	193b      	adds	r3, r7, r4
 800068a:	2101      	movs	r1, #1
 800068c:	400a      	ands	r2, r1
 800068e:	701a      	strb	r2, [r3, #0]
        ADC_CtrlApply(ch, supply, sensor);
 8000690:	193b      	adds	r3, r7, r4
 8000692:	781a      	ldrb	r2, [r3, #0]
 8000694:	197b      	adds	r3, r7, r5
 8000696:	7819      	ldrb	r1, [r3, #0]
 8000698:	0004      	movs	r4, r0
 800069a:	183b      	adds	r3, r7, r0
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	0018      	movs	r0, r3
 80006a0:	f7ff ff3e 	bl	8000520 <ADC_CtrlApply>
    for (uint8_t ch = 0; ch < ADC_CHANNEL_COUNT; ch++) {
 80006a4:	0020      	movs	r0, r4
 80006a6:	183b      	adds	r3, r7, r0
 80006a8:	781a      	ldrb	r2, [r3, #0]
 80006aa:	183b      	adds	r3, r7, r0
 80006ac:	3201      	adds	r2, #1
 80006ae:	701a      	strb	r2, [r3, #0]
 80006b0:	2317      	movs	r3, #23
 80006b2:	18fb      	adds	r3, r7, r3
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b03      	cmp	r3, #3
 80006b8:	d9d1      	bls.n	800065e <ADC_HandleCAN+0x3a>
 80006ba:	e000      	b.n	80006be <ADC_HandleCAN+0x9a>
    if (id != 0x120 || dlc < ADC_CHANNEL_COUNT) return;
 80006bc:	46c0      	nop			; (mov r8, r8)
    }
}
 80006be:	46bd      	mov	sp, r7
 80006c0:	b006      	add	sp, #24
 80006c2:	bdb0      	pop	{r4, r5, r7, pc}

080006c4 <ADC_SendCurrentConfig>:

void ADC_SendCurrentConfig(void)
{
 80006c4:	b590      	push	{r4, r7, lr}
 80006c6:	b089      	sub	sp, #36	; 0x24
 80006c8:	af00      	add	r7, sp, #0
    CAN_Message_t msg;
    msg.id = 0x121; // Response-ID
 80006ca:	2108      	movs	r1, #8
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2222      	movs	r2, #34	; 0x22
 80006d0:	32ff      	adds	r2, #255	; 0xff
 80006d2:	801a      	strh	r2, [r3, #0]
    msg.dlc = ADC_CHANNEL_COUNT;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2204      	movs	r2, #4
 80006d8:	709a      	strb	r2, [r3, #2]

    for (uint8_t ch = 0; ch < ADC_CHANNEL_COUNT; ch++) {
 80006da:	231f      	movs	r3, #31
 80006dc:	18fb      	adds	r3, r7, r3
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
 80006e2:	e02f      	b.n	8000744 <ADC_SendCurrentConfig+0x80>
        uint8_t val = 0;
 80006e4:	241e      	movs	r4, #30
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
        ADC_SupplyMode_t supply;
        ADC_SensorMode_t sensor;
        ADC_CtrlGet(ch, &supply, &sensor);
 80006ec:	1dba      	adds	r2, r7, #6
 80006ee:	1df9      	adds	r1, r7, #7
 80006f0:	231f      	movs	r3, #31
 80006f2:	18fb      	adds	r3, r7, r3
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	0018      	movs	r0, r3
 80006f8:	f7ff ff42 	bl	8000580 <ADC_CtrlGet>
        if (supply == ADC_SUPPLY_12V) val |= 0x01;
 80006fc:	1dfb      	adds	r3, r7, #7
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d105      	bne.n	8000710 <ADC_SendCurrentConfig+0x4c>
 8000704:	193b      	adds	r3, r7, r4
 8000706:	193a      	adds	r2, r7, r4
 8000708:	7812      	ldrb	r2, [r2, #0]
 800070a:	2101      	movs	r1, #1
 800070c:	430a      	orrs	r2, r1
 800070e:	701a      	strb	r2, [r3, #0]
        if (sensor == ADC_SENSOR_NTC) val |= 0x02;
 8000710:	1dbb      	adds	r3, r7, #6
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d106      	bne.n	8000726 <ADC_SendCurrentConfig+0x62>
 8000718:	221e      	movs	r2, #30
 800071a:	18bb      	adds	r3, r7, r2
 800071c:	18ba      	adds	r2, r7, r2
 800071e:	7812      	ldrb	r2, [r2, #0]
 8000720:	2102      	movs	r1, #2
 8000722:	430a      	orrs	r2, r1
 8000724:	701a      	strb	r2, [r3, #0]
        msg.data[ch] = val;
 8000726:	211f      	movs	r1, #31
 8000728:	187b      	adds	r3, r7, r1
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2208      	movs	r2, #8
 800072e:	18ba      	adds	r2, r7, r2
 8000730:	18d3      	adds	r3, r2, r3
 8000732:	221e      	movs	r2, #30
 8000734:	18ba      	adds	r2, r7, r2
 8000736:	7812      	ldrb	r2, [r2, #0]
 8000738:	70da      	strb	r2, [r3, #3]
    for (uint8_t ch = 0; ch < ADC_CHANNEL_COUNT; ch++) {
 800073a:	187b      	adds	r3, r7, r1
 800073c:	781a      	ldrb	r2, [r3, #0]
 800073e:	187b      	adds	r3, r7, r1
 8000740:	3201      	adds	r2, #1
 8000742:	701a      	strb	r2, [r3, #0]
 8000744:	231f      	movs	r3, #31
 8000746:	18fb      	adds	r3, r7, r3
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b03      	cmp	r3, #3
 800074c:	d9ca      	bls.n	80006e4 <ADC_SendCurrentConfig+0x20>
    }
    CAN_QueueMessage(&msg);
 800074e:	2308      	movs	r3, #8
 8000750:	18fb      	adds	r3, r7, r3
 8000752:	0018      	movs	r0, r3
 8000754:	f000 fb7c 	bl	8000e50 <CAN_QueueMessage>
}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	b009      	add	sp, #36	; 0x24
 800075e:	bd90      	pop	{r4, r7, pc}

08000760 <ADC_Init>:


void ADC_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
    // wie für ~1ms-Mittelung nötig sind.
    if (ADC_DMA_BLOCK_SIZE < ADC_SHORT_AVG_SAMPLES) {
        Error_Register(ERROR_ADC_PARAM);
        // wir starten trotzdem, aber Update() wird dann 0..n behandeln
    } else {
        Error_Clear(ERROR_ADC_PARAM);
 8000764:	200a      	movs	r0, #10
 8000766:	f000 fbdb 	bl	8000f20 <Error_Clear>
    }

    // Erst die Ctrl-Defaults setzen (Transistoren schalten), dann ADC starten
    ADC_CtrlInitDefaults();
 800076a:	f7ff fea7 	bl	80004bc <ADC_CtrlInitDefaults>

    if (HAL_ADC_Start_DMA(&hadc, (uint32_t*)adc_dma_buffer, TOTAL_DMA_SAMPLES) != HAL_OK) {
 800076e:	2380      	movs	r3, #128	; 0x80
 8000770:	005a      	lsls	r2, r3, #1
 8000772:	4908      	ldr	r1, [pc, #32]	; (8000794 <ADC_Init+0x34>)
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <ADC_Init+0x38>)
 8000776:	0018      	movs	r0, r3
 8000778:	f002 fb92 	bl	8002ea0 <HAL_ADC_Start_DMA>
 800077c:	1e03      	subs	r3, r0, #0
 800077e:	d003      	beq.n	8000788 <ADC_Init+0x28>
        Error_Register(ERROR_ADC_DMA_START_FAILED);
 8000780:	2005      	movs	r0, #5
 8000782:	f000 fbaf 	bl	8000ee4 <Error_Register>
        return;
 8000786:	e002      	b.n	800078e <ADC_Init+0x2e>
    } else {
        Error_Clear(ERROR_ADC_DMA_START_FAILED);
 8000788:	2005      	movs	r0, #5
 800078a:	f000 fbc9 	bl	8000f20 <Error_Clear>
        // Falls zuvor "keine Daten" gemeldet wurde, lassen wir das beim ersten Update löschen
    }
}
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	2000007c 	.word	0x2000007c
 8000798:	20000a50 	.word	0x20000a50

0800079c <HAL_ADC_ConvCpltCallback>:
// Voll-Callback
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc_)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
    if (hadc_->Instance != ADC1) return;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a04      	ldr	r2, [pc, #16]	; (80007bc <HAL_ADC_ConvCpltCallback+0x20>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d102      	bne.n	80007b4 <HAL_ADC_ConvCpltCallback+0x18>
    ADC_Update();
 80007ae:	f000 f82b 	bl	8000808 <ADC_Update>
 80007b2:	e000      	b.n	80007b6 <HAL_ADC_ConvCpltCallback+0x1a>
    if (hadc_->Instance != ADC1) return;
 80007b4:	46c0      	nop			; (mov r8, r8)
}
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b002      	add	sp, #8
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40012400 	.word	0x40012400

080007c0 <HAL_ADC_ErrorCallback>:
//     // -> könntest du nutzen, wenn du 2x 1ms-Blöcke in einem DMA-Block löst
// }

// Fehler-Callback der HAL
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef* hadc_)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
    if (hadc_->Instance != ADC1) return;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a0d      	ldr	r2, [pc, #52]	; (8000804 <HAL_ADC_ErrorCallback+0x44>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d114      	bne.n	80007fc <HAL_ADC_ErrorCallback+0x3c>

    uint32_t err = HAL_ADC_GetError(hadc_);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	0018      	movs	r0, r3
 80007d6:	f002 fda7 	bl	8003328 <HAL_ADC_GetError>
 80007da:	0003      	movs	r3, r0
 80007dc:	60fb      	str	r3, [r7, #12]
    if (err & HAL_ADC_ERROR_DMA) Error_Register(ERROR_ADC_DMA_ERROR);
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	2204      	movs	r2, #4
 80007e2:	4013      	ands	r3, r2
 80007e4:	d002      	beq.n	80007ec <HAL_ADC_ErrorCallback+0x2c>
 80007e6:	2006      	movs	r0, #6
 80007e8:	f000 fb7c 	bl	8000ee4 <Error_Register>
    if (err & HAL_ADC_ERROR_OVR) Error_Register(ERROR_ADC_OVERRUN);
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	2202      	movs	r2, #2
 80007f0:	4013      	ands	r3, r2
 80007f2:	d004      	beq.n	80007fe <HAL_ADC_ErrorCallback+0x3e>
 80007f4:	2007      	movs	r0, #7
 80007f6:	f000 fb75 	bl	8000ee4 <Error_Register>
 80007fa:	e000      	b.n	80007fe <HAL_ADC_ErrorCallback+0x3e>
    if (hadc_->Instance != ADC1) return;
 80007fc:	46c0      	nop			; (mov r8, r8)

    // Weitere Fehlerarten (JQOVF etc.) hat F0 nicht, aber hier erweiterbar
}
 80007fe:	46bd      	mov	sp, r7
 8000800:	b004      	add	sp, #16
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40012400 	.word	0x40012400

08000808 <ADC_Update>:

// Rechnet 1ms-Mittelwert(e) und füllt Ringpuffer
void ADC_Update(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b088      	sub	sp, #32
 800080c:	af00      	add	r7, sp, #0
    // Sobald Daten reinkommen, können wir "NO_DATA" ggf. löschen
    // (wir löschen erst NACH erfolgreichem FIFO-Schreiben unten)
    uint32_t temp_sum[ADC_CHANNEL_COUNT] = {0};
 800080e:	003b      	movs	r3, r7
 8000810:	0018      	movs	r0, r3
 8000812:	2310      	movs	r3, #16
 8000814:	001a      	movs	r2, r3
 8000816:	2100      	movs	r1, #0
 8000818:	f005 feb0 	bl	800657c <memset>
        Error_Register(ERROR_ADC_PARAM);
        return;
    }

    // 1-ms-Mittelwert pro Kanal aus Rohsamples berechnen
    for (int i = 0; i < ADC_SHORT_AVG_SAMPLES; i++) {
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
 8000820:	e01b      	b.n	800085a <ADC_Update+0x52>
        for (int ch = 0; ch < ADC_CHANNEL_COUNT; ch++) {
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
 8000826:	e012      	b.n	800084e <ADC_Update+0x46>
            temp_sum[ch] += adc_dma_buffer[i * ADC_CHANNEL_COUNT + ch];
 8000828:	003b      	movs	r3, r7
 800082a:	69ba      	ldr	r2, [r7, #24]
 800082c:	0092      	lsls	r2, r2, #2
 800082e:	58d3      	ldr	r3, [r2, r3]
 8000830:	69fa      	ldr	r2, [r7, #28]
 8000832:	0091      	lsls	r1, r2, #2
 8000834:	69ba      	ldr	r2, [r7, #24]
 8000836:	1889      	adds	r1, r1, r2
 8000838:	4a3a      	ldr	r2, [pc, #232]	; (8000924 <ADC_Update+0x11c>)
 800083a:	0049      	lsls	r1, r1, #1
 800083c:	5a8a      	ldrh	r2, [r1, r2]
 800083e:	1899      	adds	r1, r3, r2
 8000840:	003b      	movs	r3, r7
 8000842:	69ba      	ldr	r2, [r7, #24]
 8000844:	0092      	lsls	r2, r2, #2
 8000846:	50d1      	str	r1, [r2, r3]
        for (int ch = 0; ch < ADC_CHANNEL_COUNT; ch++) {
 8000848:	69bb      	ldr	r3, [r7, #24]
 800084a:	3301      	adds	r3, #1
 800084c:	61bb      	str	r3, [r7, #24]
 800084e:	69bb      	ldr	r3, [r7, #24]
 8000850:	2b03      	cmp	r3, #3
 8000852:	dde9      	ble.n	8000828 <ADC_Update+0x20>
    for (int i = 0; i < ADC_SHORT_AVG_SAMPLES; i++) {
 8000854:	69fb      	ldr	r3, [r7, #28]
 8000856:	3301      	adds	r3, #1
 8000858:	61fb      	str	r3, [r7, #28]
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	2b0b      	cmp	r3, #11
 800085e:	dde0      	ble.n	8000822 <ADC_Update+0x1a>
        }
    }

    for (int ch = 0; ch < ADC_CHANNEL_COUNT; ch++) {
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	e054      	b.n	8000910 <ADC_Update+0x108>
        uint16_t one_ms_avg = (uint16_t)(temp_sum[ch] / ADC_SHORT_AVG_SAMPLES);
 8000866:	003b      	movs	r3, r7
 8000868:	697a      	ldr	r2, [r7, #20]
 800086a:	0092      	lsls	r2, r2, #2
 800086c:	58d3      	ldr	r3, [r2, r3]
 800086e:	210c      	movs	r1, #12
 8000870:	0018      	movs	r0, r3
 8000872:	f7ff fc53 	bl	800011c <__udivsi3>
 8000876:	0003      	movs	r3, r0
 8000878:	001a      	movs	r2, r3
 800087a:	2312      	movs	r3, #18
 800087c:	18fb      	adds	r3, r7, r3
 800087e:	801a      	strh	r2, [r3, #0]

        if (value_read[ch]) {
 8000880:	4a29      	ldr	r2, [pc, #164]	; (8000928 <ADC_Update+0x120>)
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	18d3      	adds	r3, r2, r3
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d00e      	beq.n	80008aa <ADC_Update+0xa2>
            // FIFO leeren, wenn seit letzter Abfrage gelesen wurde
            fifo_count[ch] = 0;
 800088c:	4a27      	ldr	r2, [pc, #156]	; (800092c <ADC_Update+0x124>)
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	18d3      	adds	r3, r2, r3
 8000892:	2200      	movs	r2, #0
 8000894:	701a      	strb	r2, [r3, #0]
            fifo_head[ch]  = 0;
 8000896:	4a26      	ldr	r2, [pc, #152]	; (8000930 <ADC_Update+0x128>)
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	18d3      	adds	r3, r2, r3
 800089c:	2200      	movs	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]
            value_read[ch] = 0;
 80008a0:	4a21      	ldr	r2, [pc, #132]	; (8000928 <ADC_Update+0x120>)
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	18d3      	adds	r3, r2, r3
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
        }

        // Neuen 1ms-Wert in den Ringpuffer schreiben (zirkular)
        avg_fifo[ch][fifo_head[ch]] = one_ms_avg;
 80008aa:	4a21      	ldr	r2, [pc, #132]	; (8000930 <ADC_Update+0x128>)
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	18d3      	adds	r3, r2, r3
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	0018      	movs	r0, r3
 80008b4:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <ADC_Update+0x12c>)
 80008b6:	697a      	ldr	r2, [r7, #20]
 80008b8:	2164      	movs	r1, #100	; 0x64
 80008ba:	434a      	muls	r2, r1
 80008bc:	1812      	adds	r2, r2, r0
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	2112      	movs	r1, #18
 80008c2:	1879      	adds	r1, r7, r1
 80008c4:	8809      	ldrh	r1, [r1, #0]
 80008c6:	52d1      	strh	r1, [r2, r3]
        fifo_head[ch] = (fifo_head[ch] + 1) % ADC_AGGREGATION_LIMIT;
 80008c8:	4a19      	ldr	r2, [pc, #100]	; (8000930 <ADC_Update+0x128>)
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	18d3      	adds	r3, r2, r3
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	3301      	adds	r3, #1
 80008d2:	2164      	movs	r1, #100	; 0x64
 80008d4:	0018      	movs	r0, r3
 80008d6:	f7ff fd91 	bl	80003fc <__aeabi_idivmod>
 80008da:	000b      	movs	r3, r1
 80008dc:	b2d9      	uxtb	r1, r3
 80008de:	4a14      	ldr	r2, [pc, #80]	; (8000930 <ADC_Update+0x128>)
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	18d3      	adds	r3, r2, r3
 80008e4:	1c0a      	adds	r2, r1, #0
 80008e6:	701a      	strb	r2, [r3, #0]

        if (fifo_count[ch] < ADC_AGGREGATION_LIMIT) {
 80008e8:	4a10      	ldr	r2, [pc, #64]	; (800092c <ADC_Update+0x124>)
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	18d3      	adds	r3, r2, r3
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b63      	cmp	r3, #99	; 0x63
 80008f2:	d80a      	bhi.n	800090a <ADC_Update+0x102>
            fifo_count[ch]++;
 80008f4:	4a0d      	ldr	r2, [pc, #52]	; (800092c <ADC_Update+0x124>)
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	18d3      	adds	r3, r2, r3
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	3301      	adds	r3, #1
 80008fe:	b2d9      	uxtb	r1, r3
 8000900:	4a0a      	ldr	r2, [pc, #40]	; (800092c <ADC_Update+0x124>)
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	18d3      	adds	r3, r2, r3
 8000906:	1c0a      	adds	r2, r1, #0
 8000908:	701a      	strb	r2, [r3, #0]
    for (int ch = 0; ch < ADC_CHANNEL_COUNT; ch++) {
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	3301      	adds	r3, #1
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	2b03      	cmp	r3, #3
 8000914:	dda7      	ble.n	8000866 <ADC_Update+0x5e>
        }
    }

    // Wenn wir hier waren, haben wir Daten -> NO_DATA zurücksetzen
    Error_Clear(ERROR_ADC_NO_DATA);
 8000916:	2009      	movs	r0, #9
 8000918:	f000 fb02 	bl	8000f20 <Error_Clear>
}
 800091c:	46bd      	mov	sp, r7
 800091e:	b008      	add	sp, #32
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	2000007c 	.word	0x2000007c
 8000928:	20000000 	.word	0x20000000
 800092c:	200005a0 	.word	0x200005a0
 8000930:	2000059c 	.word	0x2000059c
 8000934:	2000027c 	.word	0x2000027c

08000938 <ADC_GetAverage>:

uint16_t ADC_GetAverage(uint8_t channel)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	0002      	movs	r2, r0
 8000940:	1dfb      	adds	r3, r7, #7
 8000942:	701a      	strb	r2, [r3, #0]
    if (channel >= ADC_CHANNEL_COUNT) {
 8000944:	1dfb      	adds	r3, r7, #7
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b03      	cmp	r3, #3
 800094a:	d904      	bls.n	8000956 <ADC_GetAverage+0x1e>
        Error_Register(ERROR_ADC_INVALID_CHANNEL);
 800094c:	2008      	movs	r0, #8
 800094e:	f000 fac9 	bl	8000ee4 <Error_Register>
        return 0;
 8000952:	2300      	movs	r3, #0
 8000954:	e039      	b.n	80009ca <ADC_GetAverage+0x92>
    }

    if (fifo_count[channel] == 0) {
 8000956:	1dfb      	adds	r3, r7, #7
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	4a1e      	ldr	r2, [pc, #120]	; (80009d4 <ADC_GetAverage+0x9c>)
 800095c:	5cd3      	ldrb	r3, [r2, r3]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d104      	bne.n	800096c <ADC_GetAverage+0x34>
        Error_Register(ERROR_ADC_NO_DATA);
 8000962:	2009      	movs	r0, #9
 8000964:	f000 fabe 	bl	8000ee4 <Error_Register>
        return 0;
 8000968:	2300      	movs	r3, #0
 800096a:	e02e      	b.n	80009ca <ADC_GetAverage+0x92>
    }

    // Summe bilden (O(n)); wenn du O(1) willst, sag Bescheid -> dann halten wir pro FIFO die laufende Summe mit.
    uint32_t sum = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]
    // FIFO ist zirkular – aber wir mitteln über ALLE aktuell gespeicherten Werte,
    // Reihenfolge ist für den Durchschnitt egal, daher einfacher: linear über 0..fifo_count-1
    for (int i = 0; i < fifo_count[channel]; i++) {
 8000970:	2300      	movs	r3, #0
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	e00f      	b.n	8000996 <ADC_GetAverage+0x5e>
        sum += avg_fifo[channel][i];
 8000976:	1dfb      	adds	r3, r7, #7
 8000978:	781a      	ldrb	r2, [r3, #0]
 800097a:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <ADC_GetAverage+0xa0>)
 800097c:	2164      	movs	r1, #100	; 0x64
 800097e:	4351      	muls	r1, r2
 8000980:	68ba      	ldr	r2, [r7, #8]
 8000982:	188a      	adds	r2, r1, r2
 8000984:	0052      	lsls	r2, r2, #1
 8000986:	5ad3      	ldrh	r3, [r2, r3]
 8000988:	001a      	movs	r2, r3
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	189b      	adds	r3, r3, r2
 800098e:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < fifo_count[channel]; i++) {
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	3301      	adds	r3, #1
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	1dfb      	adds	r3, r7, #7
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	4a0e      	ldr	r2, [pc, #56]	; (80009d4 <ADC_GetAverage+0x9c>)
 800099c:	5cd3      	ldrb	r3, [r2, r3]
 800099e:	001a      	movs	r2, r3
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	4293      	cmp	r3, r2
 80009a4:	dbe7      	blt.n	8000976 <ADC_GetAverage+0x3e>
    }

    value_read[channel] = 1; // markiert, dass beim nächsten Update neu begonnen wird (FIFO wird geleert)
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	4a0c      	ldr	r2, [pc, #48]	; (80009dc <ADC_GetAverage+0xa4>)
 80009ac:	2101      	movs	r1, #1
 80009ae:	54d1      	strb	r1, [r2, r3]

    // wir haben erfolgreich geliefert -> offensichtliche Fehler löschen
    Error_Clear(ERROR_ADC_INVALID_CHANNEL);
 80009b0:	2008      	movs	r0, #8
 80009b2:	f000 fab5 	bl	8000f20 <Error_Clear>
    // ERROR_ADC_NO_DATA wurde schon in Update() gelöscht, wenn Daten rein kamen

    return (uint16_t)(sum / fifo_count[channel]);
 80009b6:	1dfb      	adds	r3, r7, #7
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	4a06      	ldr	r2, [pc, #24]	; (80009d4 <ADC_GetAverage+0x9c>)
 80009bc:	5cd3      	ldrb	r3, [r2, r3]
 80009be:	0019      	movs	r1, r3
 80009c0:	68f8      	ldr	r0, [r7, #12]
 80009c2:	f7ff fbab 	bl	800011c <__udivsi3>
 80009c6:	0003      	movs	r3, r0
 80009c8:	b29b      	uxth	r3, r3
}
 80009ca:	0018      	movs	r0, r3
 80009cc:	46bd      	mov	sp, r7
 80009ce:	b004      	add	sp, #16
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	200005a0 	.word	0x200005a0
 80009d8:	2000027c 	.word	0x2000027c
 80009dc:	20000000 	.word	0x20000000

080009e0 <CAN_RegisterRxCallback>:
static volatile uint8_t TxQueueTail = 0;

static CAN_RxCallback_t can_rx_callback = NULL;

void CAN_RegisterRxCallback(CAN_RxCallback_t cb)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
    can_rx_callback = cb;
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <CAN_RegisterRxCallback+0x18>)
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	601a      	str	r2, [r3, #0]
}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b002      	add	sp, #8
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	20000970 	.word	0x20000970

080009fc <HAL_CAN_RxFifo0MsgPendingCallback>:

// ---------- Empfang ----------

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80009fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009fe:	b08f      	sub	sp, #60	; 0x3c
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8];

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK) {
 8000a04:	230c      	movs	r3, #12
 8000a06:	18fb      	adds	r3, r7, r3
 8000a08:	2214      	movs	r2, #20
 8000a0a:	18ba      	adds	r2, r7, r2
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	2100      	movs	r1, #0
 8000a10:	f003 f973 	bl	8003cfa <HAL_CAN_GetRxMessage>
 8000a14:	1e03      	subs	r3, r0, #0
 8000a16:	d001      	beq.n	8000a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
        Error_Handler();
 8000a18:	f001 fb30 	bl	800207c <Error_Handler>
    }

    // Callback aufrufen, falls registriert
    if (can_rx_callback) {
 8000a1c:	4b59      	ldr	r3, [pc, #356]	; (8000b84 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d010      	beq.n	8000a46 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
        can_rx_callback(rxHeader.StdId, rxData, rxHeader.DLC, HAL_GetTick());
 8000a24:	4b57      	ldr	r3, [pc, #348]	; (8000b84 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8000a26:	681c      	ldr	r4, [r3, #0]
 8000a28:	2214      	movs	r2, #20
 8000a2a:	18bb      	adds	r3, r7, r2
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	b29d      	uxth	r5, r3
 8000a30:	18bb      	adds	r3, r7, r2
 8000a32:	691b      	ldr	r3, [r3, #16]
 8000a34:	b2de      	uxtb	r6, r3
 8000a36:	f002 f8c5 	bl	8002bc4 <HAL_GetTick>
 8000a3a:	0003      	movs	r3, r0
 8000a3c:	220c      	movs	r2, #12
 8000a3e:	18b9      	adds	r1, r7, r2
 8000a40:	0032      	movs	r2, r6
 8000a42:	0028      	movs	r0, r5
 8000a44:	47a0      	blx	r4
    }

    // Update bestehende Nachricht
    for (int i = 0; i < MAX_CAN_MESSAGES; i++) {
 8000a46:	2300      	movs	r3, #0
 8000a48:	637b      	str	r3, [r7, #52]	; 0x34
 8000a4a:	e042      	b.n	8000ad2 <HAL_CAN_RxFifo0MsgPendingCallback+0xd6>
        if (CAN_MessageDB[i].valid && CAN_MessageDB[i].id == rxHeader.StdId) {
 8000a4c:	494e      	ldr	r1, [pc, #312]	; (8000b88 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8000a4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a50:	0013      	movs	r3, r2
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	189b      	adds	r3, r3, r2
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	18cb      	adds	r3, r1, r3
 8000a5a:	3310      	adds	r3, #16
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d034      	beq.n	8000acc <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>
 8000a62:	4949      	ldr	r1, [pc, #292]	; (8000b88 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8000a64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a66:	0013      	movs	r3, r2
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	189b      	adds	r3, r3, r2
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	5a5b      	ldrh	r3, [r3, r1]
 8000a70:	001a      	movs	r2, r3
 8000a72:	2414      	movs	r4, #20
 8000a74:	193b      	adds	r3, r7, r4
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d127      	bne.n	8000acc <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>
            CAN_MessageDB[i].dlc = rxHeader.DLC;
 8000a7c:	193b      	adds	r3, r7, r4
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	b2d8      	uxtb	r0, r3
 8000a82:	4941      	ldr	r1, [pc, #260]	; (8000b88 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8000a84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a86:	0013      	movs	r3, r2
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	189b      	adds	r3, r3, r2
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	18cb      	adds	r3, r1, r3
 8000a90:	3302      	adds	r3, #2
 8000a92:	1c02      	adds	r2, r0, #0
 8000a94:	701a      	strb	r2, [r3, #0]
            memcpy(CAN_MessageDB[i].data, rxData, rxHeader.DLC);
 8000a96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a98:	0013      	movs	r3, r2
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	189b      	adds	r3, r3, r2
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	4a39      	ldr	r2, [pc, #228]	; (8000b88 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8000aa2:	189b      	adds	r3, r3, r2
 8000aa4:	1cd8      	adds	r0, r3, #3
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	691a      	ldr	r2, [r3, #16]
 8000aaa:	230c      	movs	r3, #12
 8000aac:	18fb      	adds	r3, r7, r3
 8000aae:	0019      	movs	r1, r3
 8000ab0:	f005 fd98 	bl	80065e4 <memcpy>
            CAN_MessageDB[i].timestamp = HAL_GetTick();
 8000ab4:	f002 f886 	bl	8002bc4 <HAL_GetTick>
 8000ab8:	4933      	ldr	r1, [pc, #204]	; (8000b88 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8000aba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000abc:	0013      	movs	r3, r2
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	189b      	adds	r3, r3, r2
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	18cb      	adds	r3, r1, r3
 8000ac6:	330c      	adds	r3, #12
 8000ac8:	6018      	str	r0, [r3, #0]
            return;
 8000aca:	e057      	b.n	8000b7c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
    for (int i = 0; i < MAX_CAN_MESSAGES; i++) {
 8000acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ace:	3301      	adds	r3, #1
 8000ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8000ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad4:	2b0f      	cmp	r3, #15
 8000ad6:	ddb9      	ble.n	8000a4c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
        }
    }

    // Neuen Slot belegen
    for (int i = 0; i < MAX_CAN_MESSAGES; i++) {
 8000ad8:	2300      	movs	r3, #0
 8000ada:	633b      	str	r3, [r7, #48]	; 0x30
 8000adc:	e04b      	b.n	8000b76 <HAL_CAN_RxFifo0MsgPendingCallback+0x17a>
        if (!CAN_MessageDB[i].valid) {
 8000ade:	492a      	ldr	r1, [pc, #168]	; (8000b88 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8000ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ae2:	0013      	movs	r3, r2
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	189b      	adds	r3, r3, r2
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	18cb      	adds	r3, r1, r3
 8000aec:	3310      	adds	r3, #16
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d13d      	bne.n	8000b70 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>
            CAN_MessageDB[i].id = rxHeader.StdId;
 8000af4:	2414      	movs	r4, #20
 8000af6:	193b      	adds	r3, r7, r4
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	b298      	uxth	r0, r3
 8000afc:	4922      	ldr	r1, [pc, #136]	; (8000b88 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8000afe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b00:	0013      	movs	r3, r2
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	189b      	adds	r3, r3, r2
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	1c02      	adds	r2, r0, #0
 8000b0a:	525a      	strh	r2, [r3, r1]
            CAN_MessageDB[i].dlc = rxHeader.DLC;
 8000b0c:	193b      	adds	r3, r7, r4
 8000b0e:	691b      	ldr	r3, [r3, #16]
 8000b10:	b2d8      	uxtb	r0, r3
 8000b12:	491d      	ldr	r1, [pc, #116]	; (8000b88 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8000b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b16:	0013      	movs	r3, r2
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	189b      	adds	r3, r3, r2
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	18cb      	adds	r3, r1, r3
 8000b20:	3302      	adds	r3, #2
 8000b22:	1c02      	adds	r2, r0, #0
 8000b24:	701a      	strb	r2, [r3, #0]
            memcpy(CAN_MessageDB[i].data, rxData, rxHeader.DLC);
 8000b26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b28:	0013      	movs	r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	189b      	adds	r3, r3, r2
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	4a15      	ldr	r2, [pc, #84]	; (8000b88 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8000b32:	189b      	adds	r3, r3, r2
 8000b34:	1cd8      	adds	r0, r3, #3
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	691a      	ldr	r2, [r3, #16]
 8000b3a:	230c      	movs	r3, #12
 8000b3c:	18fb      	adds	r3, r7, r3
 8000b3e:	0019      	movs	r1, r3
 8000b40:	f005 fd50 	bl	80065e4 <memcpy>
            CAN_MessageDB[i].timestamp = HAL_GetTick();
 8000b44:	f002 f83e 	bl	8002bc4 <HAL_GetTick>
 8000b48:	490f      	ldr	r1, [pc, #60]	; (8000b88 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8000b4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b4c:	0013      	movs	r3, r2
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	189b      	adds	r3, r3, r2
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	18cb      	adds	r3, r1, r3
 8000b56:	330c      	adds	r3, #12
 8000b58:	6018      	str	r0, [r3, #0]
            CAN_MessageDB[i].valid = 1;
 8000b5a:	490b      	ldr	r1, [pc, #44]	; (8000b88 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8000b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b5e:	0013      	movs	r3, r2
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	189b      	adds	r3, r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	18cb      	adds	r3, r1, r3
 8000b68:	3310      	adds	r3, #16
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	701a      	strb	r2, [r3, #0]
            return;
 8000b6e:	e005      	b.n	8000b7c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
    for (int i = 0; i < MAX_CAN_MESSAGES; i++) {
 8000b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b72:	3301      	adds	r3, #1
 8000b74:	633b      	str	r3, [r7, #48]	; 0x30
 8000b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b78:	2b0f      	cmp	r3, #15
 8000b7a:	ddb0      	ble.n	8000ade <HAL_CAN_RxFifo0MsgPendingCallback+0xe2>
        }
    }
}
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b00f      	add	sp, #60	; 0x3c
 8000b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	20000970 	.word	0x20000970
 8000b88:	200005ac 	.word	0x200005ac

08000b8c <CAN_Init>:

// ---------- Initialisierung ----------

void CAN_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
    // Alle Filter durchlassen
    CAN_FilterTypeDef sFilterConfig;

    sFilterConfig.FilterBank = 0;
 8000b92:	003b      	movs	r3, r7
 8000b94:	2200      	movs	r2, #0
 8000b96:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b98:	003b      	movs	r3, r7
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b9e:	003b      	movs	r3, r7
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdHigh = 0x0000;
 8000ba4:	003b      	movs	r3, r7
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIdLow = 0x0000;
 8000baa:	003b      	movs	r3, r7
 8000bac:	2200      	movs	r2, #0
 8000bae:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000bb0:	003b      	movs	r3, r7
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 8000bb6:	003b      	movs	r3, r7
 8000bb8:	2200      	movs	r2, #0
 8000bba:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000bbc:	003b      	movs	r3, r7
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 8000bc2:	003b      	movs	r3, r7
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	621a      	str	r2, [r3, #32]
    sFilterConfig.SlaveStartFilterBank = 14;
 8000bc8:	003b      	movs	r3, r7
 8000bca:	220e      	movs	r2, #14
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24

    HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8000bce:	003a      	movs	r2, r7
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <CAN_Init+0x9c>)
 8000bd2:	0011      	movs	r1, r2
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f002 fe5f 	bl	8003898 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan);
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <CAN_Init+0x9c>)
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f002 ff4d 	bl	8003a7c <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <CAN_Init+0x9c>)
 8000be4:	2102      	movs	r1, #2
 8000be6:	0018      	movs	r0, r3
 8000be8:	f003 f9b2 	bl	8003f50 <HAL_CAN_ActivateNotification>
    HAL_CAN_ActivateNotification(&hcan, CAN_IT_TX_MAILBOX_EMPTY);  // wichtig
 8000bec:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <CAN_Init+0x9c>)
 8000bee:	2101      	movs	r1, #1
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f003 f9ad 	bl	8003f50 <HAL_CAN_ActivateNotification>

    memset(CAN_MessageDB, 0, sizeof(CAN_MessageDB));
 8000bf6:	23a0      	movs	r3, #160	; 0xa0
 8000bf8:	005a      	lsls	r2, r3, #1
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <CAN_Init+0xa0>)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f005 fcbc 	bl	800657c <memset>
    memset(TxQueue, 0, sizeof(TxQueue));
 8000c04:	23a0      	movs	r3, #160	; 0xa0
 8000c06:	009a      	lsls	r2, r3, #2
 8000c08:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <CAN_Init+0xa4>)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f005 fcb5 	bl	800657c <memset>
    TxQueueHead = TxQueueTail = 0;
 8000c12:	2100      	movs	r1, #0
 8000c14:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <CAN_Init+0xa8>)
 8000c16:	1c0a      	adds	r2, r1, #0
 8000c18:	701a      	strb	r2, [r3, #0]
 8000c1a:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <CAN_Init+0xac>)
 8000c1c:	1c0a      	adds	r2, r1, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
}
 8000c20:	46c0      	nop			; (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	b00a      	add	sp, #40	; 0x28
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000ad4 	.word	0x20000ad4
 8000c2c:	200005ac 	.word	0x200005ac
 8000c30:	200006ec 	.word	0x200006ec
 8000c34:	2000096d 	.word	0x2000096d
 8000c38:	2000096c 	.word	0x2000096c

08000c3c <TxQueue_IsFull>:

// ---------- Senden ----------

static uint8_t TxQueue_IsFull(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
    return ((TxQueueHead + 1) % CAN_TX_QUEUE_LENGTH) == TxQueueTail;
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <TxQueue_IsFull+0x34>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	3301      	adds	r3, #1
 8000c48:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <TxQueue_IsFull+0x38>)
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	d504      	bpl.n	8000c58 <TxQueue_IsFull+0x1c>
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	2220      	movs	r2, #32
 8000c52:	4252      	negs	r2, r2
 8000c54:	4313      	orrs	r3, r2
 8000c56:	3301      	adds	r3, #1
 8000c58:	001a      	movs	r2, r3
 8000c5a:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <TxQueue_IsFull+0x3c>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	425a      	negs	r2, r3
 8000c64:	4153      	adcs	r3, r2
 8000c66:	b2db      	uxtb	r3, r3
}
 8000c68:	0018      	movs	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	2000096c 	.word	0x2000096c
 8000c74:	8000001f 	.word	0x8000001f
 8000c78:	2000096d 	.word	0x2000096d

08000c7c <TxQueue_IsEmpty>:

static uint8_t TxQueue_IsEmpty(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
    return TxQueueHead == TxQueueTail;
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <TxQueue_IsEmpty+0x20>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <TxQueue_IsEmpty+0x24>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	425a      	negs	r2, r3
 8000c90:	4153      	adcs	r3, r2
 8000c92:	b2db      	uxtb	r3, r3
}
 8000c94:	0018      	movs	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	2000096c 	.word	0x2000096c
 8000ca0:	2000096d 	.word	0x2000096d

08000ca4 <TxQueue_Push>:

static void TxQueue_Push(const CAN_Message_t* msg)
{
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
    TxQueue[TxQueueHead] = *msg;
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <TxQueue_Push+0x50>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	0019      	movs	r1, r3
 8000cb4:	4a10      	ldr	r2, [pc, #64]	; (8000cf8 <TxQueue_Push+0x54>)
 8000cb6:	000b      	movs	r3, r1
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	185b      	adds	r3, r3, r1
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	18d3      	adds	r3, r2, r3
 8000cc2:	000a      	movs	r2, r1
 8000cc4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000cc6:	c313      	stmia	r3!, {r0, r1, r4}
 8000cc8:	ca03      	ldmia	r2!, {r0, r1}
 8000cca:	c303      	stmia	r3!, {r0, r1}
    TxQueueHead = (TxQueueHead + 1) % CAN_TX_QUEUE_LENGTH;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <TxQueue_Push+0x50>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	4a09      	ldr	r2, [pc, #36]	; (8000cfc <TxQueue_Push+0x58>)
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	d504      	bpl.n	8000ce4 <TxQueue_Push+0x40>
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	2220      	movs	r2, #32
 8000cde:	4252      	negs	r2, r2
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <TxQueue_Push+0x50>)
 8000ce8:	701a      	strb	r2, [r3, #0]
}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b003      	add	sp, #12
 8000cf0:	bd90      	pop	{r4, r7, pc}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	2000096c 	.word	0x2000096c
 8000cf8:	200006ec 	.word	0x200006ec
 8000cfc:	8000001f 	.word	0x8000001f

08000d00 <TxQueue_Peek>:

static CAN_Message_t* TxQueue_Peek(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
    if (TxQueue_IsEmpty()) return NULL;
 8000d04:	f7ff ffba 	bl	8000c7c <TxQueue_IsEmpty>
 8000d08:	1e03      	subs	r3, r0, #0
 8000d0a:	d001      	beq.n	8000d10 <TxQueue_Peek+0x10>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	e009      	b.n	8000d24 <TxQueue_Peek+0x24>
    return &TxQueue[TxQueueTail];
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <TxQueue_Peek+0x2c>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	001a      	movs	r2, r3
 8000d18:	0013      	movs	r3, r2
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	189b      	adds	r3, r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	4a03      	ldr	r2, [pc, #12]	; (8000d30 <TxQueue_Peek+0x30>)
 8000d22:	189b      	adds	r3, r3, r2
}
 8000d24:	0018      	movs	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	2000096d 	.word	0x2000096d
 8000d30:	200006ec 	.word	0x200006ec

08000d34 <TxQueue_Pop>:

static void TxQueue_Pop(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
    if (!TxQueue_IsEmpty()) {
 8000d38:	f7ff ffa0 	bl	8000c7c <TxQueue_IsEmpty>
 8000d3c:	1e03      	subs	r3, r0, #0
 8000d3e:	d10e      	bne.n	8000d5e <TxQueue_Pop+0x2a>
        TxQueueTail = (TxQueueTail + 1) % CAN_TX_QUEUE_LENGTH;
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <TxQueue_Pop+0x30>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	3301      	adds	r3, #1
 8000d48:	4a07      	ldr	r2, [pc, #28]	; (8000d68 <TxQueue_Pop+0x34>)
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	d504      	bpl.n	8000d58 <TxQueue_Pop+0x24>
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	2220      	movs	r2, #32
 8000d52:	4252      	negs	r2, r2
 8000d54:	4313      	orrs	r3, r2
 8000d56:	3301      	adds	r3, #1
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4b02      	ldr	r3, [pc, #8]	; (8000d64 <TxQueue_Pop+0x30>)
 8000d5c:	701a      	strb	r2, [r3, #0]
    }
}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	2000096d 	.word	0x2000096d
 8000d68:	8000001f 	.word	0x8000001f

08000d6c <CAN_ProcessTxQueue>:

// Diese Funktion prüft freie Mailboxen und sendet aus Queue
static void CAN_ProcessTxQueue(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0
    if (TxQueue_IsEmpty()) return;
 8000d72:	f7ff ff83 	bl	8000c7c <TxQueue_IsEmpty>
 8000d76:	1e03      	subs	r3, r0, #0
 8000d78:	d142      	bne.n	8000e00 <CAN_ProcessTxQueue+0x94>

    for (int mbox = 0; mbox < 3; mbox++) {
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d7e:	e03b      	b.n	8000df8 <CAN_ProcessTxQueue+0x8c>
        uint32_t mailbox = (mbox == 0) ? CAN_TX_MAILBOX0 :
 8000d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d006      	beq.n	8000d94 <CAN_ProcessTxQueue+0x28>
 8000d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d101      	bne.n	8000d90 <CAN_ProcessTxQueue+0x24>
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	e002      	b.n	8000d96 <CAN_ProcessTxQueue+0x2a>
 8000d90:	2304      	movs	r3, #4
 8000d92:	e000      	b.n	8000d96 <CAN_ProcessTxQueue+0x2a>
 8000d94:	2301      	movs	r3, #1
 8000d96:	623b      	str	r3, [r7, #32]
                           (mbox == 1) ? CAN_TX_MAILBOX1 :
                                         CAN_TX_MAILBOX2;

        if (!HAL_CAN_IsTxMessagePending(&hcan, mailbox)) {
 8000d98:	6a3a      	ldr	r2, [r7, #32]
 8000d9a:	4b1d      	ldr	r3, [pc, #116]	; (8000e10 <CAN_ProcessTxQueue+0xa4>)
 8000d9c:	0011      	movs	r1, r2
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f002 ff84 	bl	8003cac <HAL_CAN_IsTxMessagePending>
 8000da4:	1e03      	subs	r3, r0, #0
 8000da6:	d124      	bne.n	8000df2 <CAN_ProcessTxQueue+0x86>
            CAN_Message_t* msg = TxQueue_Peek();
 8000da8:	f7ff ffaa 	bl	8000d00 <TxQueue_Peek>
 8000dac:	0003      	movs	r3, r0
 8000dae:	61fb      	str	r3, [r7, #28]
            if (msg == NULL) return;
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d026      	beq.n	8000e04 <CAN_ProcessTxQueue+0x98>

            CAN_TxHeaderTypeDef txHeader;
            uint32_t txMailbox;

            txHeader.StdId = msg->id;
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	001a      	movs	r2, r3
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	601a      	str	r2, [r3, #0]
            txHeader.IDE = CAN_ID_STD;
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
            txHeader.RTR = CAN_RTR_DATA;
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	2200      	movs	r2, #0
 8000dca:	60da      	str	r2, [r3, #12]
            txHeader.DLC = msg->dlc;
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	789b      	ldrb	r3, [r3, #2]
 8000dd0:	001a      	movs	r2, r3
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	611a      	str	r2, [r3, #16]
            txHeader.TransmitGlobalTime = DISABLE;
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	2200      	movs	r2, #0
 8000dda:	751a      	strb	r2, [r3, #20]

            if (HAL_CAN_AddTxMessage(&hcan, &txHeader, msg->data, &txMailbox) == HAL_OK) {
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	1cda      	adds	r2, r3, #3
 8000de0:	003b      	movs	r3, r7
 8000de2:	1d39      	adds	r1, r7, #4
 8000de4:	480a      	ldr	r0, [pc, #40]	; (8000e10 <CAN_ProcessTxQueue+0xa4>)
 8000de6:	f002 fe8f 	bl	8003b08 <HAL_CAN_AddTxMessage>
 8000dea:	1e03      	subs	r3, r0, #0
 8000dec:	d10c      	bne.n	8000e08 <CAN_ProcessTxQueue+0x9c>
                TxQueue_Pop();
 8000dee:	f7ff ffa1 	bl	8000d34 <TxQueue_Pop>
    for (int mbox = 0; mbox < 3; mbox++) {
 8000df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df4:	3301      	adds	r3, #1
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
 8000df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	ddc0      	ble.n	8000d80 <CAN_ProcessTxQueue+0x14>
 8000dfe:	e004      	b.n	8000e0a <CAN_ProcessTxQueue+0x9e>
    if (TxQueue_IsEmpty()) return;
 8000e00:	46c0      	nop			; (mov r8, r8)
 8000e02:	e002      	b.n	8000e0a <CAN_ProcessTxQueue+0x9e>
            if (msg == NULL) return;
 8000e04:	46c0      	nop			; (mov r8, r8)
 8000e06:	e000      	b.n	8000e0a <CAN_ProcessTxQueue+0x9e>
            } else {
                return; // Busy, abbrechen
 8000e08:	46c0      	nop			; (mov r8, r8)
            }
        }
    }
}
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b00a      	add	sp, #40	; 0x28
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000ad4 	.word	0x20000ad4

08000e14 <HAL_CAN_TxMailbox0CompleteCallback>:

// Wird bei Mailbox-Übertragung abgeschlossen aufgerufen
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) { CAN_ProcessTxQueue(); }
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	f7ff ffa6 	bl	8000d6c <CAN_ProcessTxQueue>
 8000e20:	46c0      	nop			; (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b002      	add	sp, #8
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) { CAN_ProcessTxQueue(); }
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	f7ff ff9c 	bl	8000d6c <CAN_ProcessTxQueue>
 8000e34:	46c0      	nop			; (mov r8, r8)
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b002      	add	sp, #8
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) { CAN_ProcessTxQueue(); }
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	f7ff ff92 	bl	8000d6c <CAN_ProcessTxQueue>
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b002      	add	sp, #8
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <CAN_QueueMessage>:

HAL_StatusTypeDef CAN_QueueMessage(const CAN_Message_t* msg)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
    if (TxQueue_IsFull()) {
 8000e58:	f7ff fef0 	bl	8000c3c <TxQueue_IsFull>
 8000e5c:	1e03      	subs	r3, r0, #0
 8000e5e:	d001      	beq.n	8000e64 <CAN_QueueMessage+0x14>
        return HAL_ERROR;  // Queue voll
 8000e60:	2301      	movs	r3, #1
 8000e62:	e006      	b.n	8000e72 <CAN_QueueMessage+0x22>
    }

    TxQueue_Push(msg);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	0018      	movs	r0, r3
 8000e68:	f7ff ff1c 	bl	8000ca4 <TxQueue_Push>
    CAN_ProcessTxQueue();  // direkt versuchen zu senden
 8000e6c:	f7ff ff7e 	bl	8000d6c <CAN_ProcessTxQueue>
    return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	0018      	movs	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b002      	add	sp, #8
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <CAN_GetMessage>:

// ---------- Lesen empfangener Daten ----------

CAN_Message_t* CAN_GetMessage(uint16_t id)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	0002      	movs	r2, r0
 8000e84:	1dbb      	adds	r3, r7, #6
 8000e86:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < MAX_CAN_MESSAGES; i++) {
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	e020      	b.n	8000ed0 <CAN_GetMessage+0x54>
        if (CAN_MessageDB[i].valid && CAN_MessageDB[i].id == id) {
 8000e8e:	4914      	ldr	r1, [pc, #80]	; (8000ee0 <CAN_GetMessage+0x64>)
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	0013      	movs	r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	189b      	adds	r3, r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	18cb      	adds	r3, r1, r3
 8000e9c:	3310      	adds	r3, #16
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d012      	beq.n	8000eca <CAN_GetMessage+0x4e>
 8000ea4:	490e      	ldr	r1, [pc, #56]	; (8000ee0 <CAN_GetMessage+0x64>)
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	0013      	movs	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	189b      	adds	r3, r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	5a5b      	ldrh	r3, [r3, r1]
 8000eb2:	1dba      	adds	r2, r7, #6
 8000eb4:	8812      	ldrh	r2, [r2, #0]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d107      	bne.n	8000eca <CAN_GetMessage+0x4e>
            return &CAN_MessageDB[i];
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	0013      	movs	r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	189b      	adds	r3, r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <CAN_GetMessage+0x64>)
 8000ec6:	189b      	adds	r3, r3, r2
 8000ec8:	e006      	b.n	8000ed8 <CAN_GetMessage+0x5c>
    for (int i = 0; i < MAX_CAN_MESSAGES; i++) {
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2b0f      	cmp	r3, #15
 8000ed4:	dddb      	ble.n	8000e8e <CAN_GetMessage+0x12>
        }
    }
    return NULL;
 8000ed6:	2300      	movs	r3, #0
}
 8000ed8:	0018      	movs	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	b004      	add	sp, #16
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200005ac 	.word	0x200005ac

08000ee4 <Error_Register>:
#include "ssd1306_fonts.h"

static volatile uint32_t errorFlags = 0;

void Error_Register(ErrorCode_t code)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	0002      	movs	r2, r0
 8000eec:	1dfb      	adds	r3, r7, #7
 8000eee:	701a      	strb	r2, [r3, #0]
    if (code > 0 && code < 32) {
 8000ef0:	1dfb      	adds	r3, r7, #7
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d00c      	beq.n	8000f12 <Error_Register+0x2e>
 8000ef8:	1dfb      	adds	r3, r7, #7
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b1f      	cmp	r3, #31
 8000efe:	d808      	bhi.n	8000f12 <Error_Register+0x2e>
        errorFlags |= (1U << code);
 8000f00:	1dfb      	adds	r3, r7, #7
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2201      	movs	r2, #1
 8000f06:	409a      	lsls	r2, r3
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <Error_Register+0x38>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	431a      	orrs	r2, r3
 8000f0e:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <Error_Register+0x38>)
 8000f10:	601a      	str	r2, [r3, #0]
        //printf("Error registered: %u\r\n", code);  // optional
    }
}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	46bd      	mov	sp, r7
 8000f16:	b002      	add	sp, #8
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	20000974 	.word	0x20000974

08000f20 <Error_Clear>:

void Error_Clear(ErrorCode_t code)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	0002      	movs	r2, r0
 8000f28:	1dfb      	adds	r3, r7, #7
 8000f2a:	701a      	strb	r2, [r3, #0]
    if (code > 0 && code < 32) {
 8000f2c:	1dfb      	adds	r3, r7, #7
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d00e      	beq.n	8000f52 <Error_Clear+0x32>
 8000f34:	1dfb      	adds	r3, r7, #7
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b1f      	cmp	r3, #31
 8000f3a:	d80a      	bhi.n	8000f52 <Error_Clear+0x32>
        errorFlags &= ~(1U << code);
 8000f3c:	1dfb      	adds	r3, r7, #7
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2201      	movs	r2, #1
 8000f42:	409a      	lsls	r2, r3
 8000f44:	0013      	movs	r3, r2
 8000f46:	43da      	mvns	r2, r3
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <Error_Clear+0x3c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	401a      	ands	r2, r3
 8000f4e:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <Error_Clear+0x3c>)
 8000f50:	601a      	str	r2, [r3, #0]
    }
}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	46bd      	mov	sp, r7
 8000f56:	b002      	add	sp, #8
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	20000974 	.word	0x20000974

08000f60 <Error_GetAll>:

uint32_t Error_GetAll(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
    return errorFlags;
 8000f64:	4b02      	ldr	r3, [pc, #8]	; (8000f70 <Error_GetAll+0x10>)
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	0018      	movs	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	20000974 	.word	0x20000974

08000f74 <Display_ErrorStatus>:
   printf("Aktive Fehler: 0x%08lX\r\n", errorFlags);
}


void Display_ErrorStatus(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af02      	add	r7, sp, #8
    uint32_t errors = Error_GetAll();
 8000f7a:	f7ff fff1 	bl	8000f60 <Error_GetAll>
 8000f7e:	0003      	movs	r3, r0
 8000f80:	617b      	str	r3, [r7, #20]

    ssd1306_SetCursor(0, 20);
 8000f82:	2114      	movs	r1, #20
 8000f84:	2000      	movs	r0, #0
 8000f86:	f001 fd6b 	bl	8002a60 <ssd1306_SetCursor>

    if (errors == 0) {
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d109      	bne.n	8000fa4 <Display_ErrorStatus+0x30>
        ssd1306_WriteString("Status: OK", Font_6x8, White);
 8000f90:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <Display_ErrorStatus+0x5c>)
 8000f92:	4810      	ldr	r0, [pc, #64]	; (8000fd4 <Display_ErrorStatus+0x60>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	9200      	str	r2, [sp, #0]
 8000f98:	6819      	ldr	r1, [r3, #0]
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f001 fd33 	bl	8002a08 <ssd1306_WriteString>
 8000fa2:	e00e      	b.n	8000fc2 <Display_ErrorStatus+0x4e>
    } else {
        char buffer[20];
        snprintf(buffer, sizeof(buffer), "Err: 0x%08lX", errors);
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	4a0c      	ldr	r2, [pc, #48]	; (8000fd8 <Display_ErrorStatus+0x64>)
 8000fa8:	0038      	movs	r0, r7
 8000faa:	2114      	movs	r1, #20
 8000fac:	f005 fab2 	bl	8006514 <sniprintf>
        ssd1306_WriteString(buffer, Font_6x8, White);
 8000fb0:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <Display_ErrorStatus+0x5c>)
 8000fb2:	0038      	movs	r0, r7
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	9200      	str	r2, [sp, #0]
 8000fb8:	6819      	ldr	r1, [r3, #0]
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	f001 fd23 	bl	8002a08 <ssd1306_WriteString>
    }

    ssd1306_UpdateScreen();
 8000fc2:	f001 fbe7 	bl	8002794 <ssd1306_UpdateScreen>
}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	b006      	add	sp, #24
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	08007538 	.word	0x08007538
 8000fd4:	08006ebc 	.word	0x08006ebc
 8000fd8:	08006ec8 	.word	0x08006ec8

08000fdc <Error_LED_Update>:

// Interner Zustand für Blink-Timing
static uint8_t error_led_state = 0;

void Error_LED_Update(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
    if (Error_GetAll() != 0)
 8000fe0:	f7ff ffbe 	bl	8000f60 <Error_GetAll>
 8000fe4:	1e03      	subs	r3, r0, #0
 8000fe6:	d008      	beq.n	8000ffa <Error_LED_Update+0x1e>
    {
        // Mindestens ein Fehler aktiv → LED toggeln
        HAL_GPIO_TogglePin(Error_GPIO_Port, Error_Pin);
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <Error_LED_Update+0x40>)
 8000fea:	2102      	movs	r1, #2
 8000fec:	0018      	movs	r0, r3
 8000fee:	f003 fe26 	bl	8004c3e <HAL_GPIO_TogglePin>
        error_led_state = 1;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <Error_LED_Update+0x44>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	701a      	strb	r2, [r3, #0]
        {
            HAL_GPIO_WritePin(Error_GPIO_Port, Error_Pin, GPIO_PIN_RESET);
            error_led_state = 0;
        }
    }
}
 8000ff8:	e00c      	b.n	8001014 <Error_LED_Update+0x38>
        if (error_led_state)
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <Error_LED_Update+0x44>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d008      	beq.n	8001014 <Error_LED_Update+0x38>
            HAL_GPIO_WritePin(Error_GPIO_Port, Error_Pin, GPIO_PIN_RESET);
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <Error_LED_Update+0x40>)
 8001004:	2200      	movs	r2, #0
 8001006:	2102      	movs	r1, #2
 8001008:	0018      	movs	r0, r3
 800100a:	f003 fdfb 	bl	8004c04 <HAL_GPIO_WritePin>
            error_led_state = 0;
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <Error_LED_Update+0x44>)
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
}
 8001014:	46c0      	nop			; (mov r8, r8)
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	48000800 	.word	0x48000800
 8001020:	20000978 	.word	0x20000978

08001024 <RGBLED_Init>:

static uint32_t last_led_update_ms = 0;
static uint8_t  led_control_active = 0; // 0 = Testmode, 1 = CAN-Mode

void RGBLED_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < RGBLED_COUNT; i++) {
 800102a:	1dfb      	adds	r3, r7, #7
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]
 8001030:	e022      	b.n	8001078 <RGBLED_Init+0x54>
        leds[i].r = 0;
 8001032:	1dfb      	adds	r3, r7, #7
 8001034:	781a      	ldrb	r2, [r3, #0]
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <RGBLED_Init+0x68>)
 8001038:	0092      	lsls	r2, r2, #2
 800103a:	2100      	movs	r1, #0
 800103c:	54d1      	strb	r1, [r2, r3]
        leds[i].g = 0;
 800103e:	1dfb      	adds	r3, r7, #7
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	4a12      	ldr	r2, [pc, #72]	; (800108c <RGBLED_Init+0x68>)
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	18d3      	adds	r3, r2, r3
 8001048:	3301      	adds	r3, #1
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
        leds[i].b = 0;
 800104e:	1dfb      	adds	r3, r7, #7
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	4a0e      	ldr	r2, [pc, #56]	; (800108c <RGBLED_Init+0x68>)
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	18d3      	adds	r3, r2, r3
 8001058:	3302      	adds	r3, #2
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
        leds[i].brightness = 1; // min
 800105e:	1dfb      	adds	r3, r7, #7
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	4a0a      	ldr	r2, [pc, #40]	; (800108c <RGBLED_Init+0x68>)
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	18d3      	adds	r3, r2, r3
 8001068:	3303      	adds	r3, #3
 800106a:	2201      	movs	r2, #1
 800106c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < RGBLED_COUNT; i++) {
 800106e:	1dfb      	adds	r3, r7, #7
 8001070:	781a      	ldrb	r2, [r3, #0]
 8001072:	1dfb      	adds	r3, r7, #7
 8001074:	3201      	adds	r2, #1
 8001076:	701a      	strb	r2, [r3, #0]
 8001078:	1dfb      	adds	r3, r7, #7
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b17      	cmp	r3, #23
 800107e:	d9d8      	bls.n	8001032 <RGBLED_Init+0xe>
    }
}
 8001080:	46c0      	nop			; (mov r8, r8)
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	46bd      	mov	sp, r7
 8001086:	b002      	add	sp, #8
 8001088:	bd80      	pop	{r7, pc}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	2000097c 	.word	0x2000097c

08001090 <RGBLED_Set>:

void RGBLED_Set(uint8_t index, uint8_t r, uint8_t g, uint8_t b, uint8_t brightness)
{
 8001090:	b5b0      	push	{r4, r5, r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	0005      	movs	r5, r0
 8001098:	000c      	movs	r4, r1
 800109a:	0010      	movs	r0, r2
 800109c:	0019      	movs	r1, r3
 800109e:	1dfb      	adds	r3, r7, #7
 80010a0:	1c2a      	adds	r2, r5, #0
 80010a2:	701a      	strb	r2, [r3, #0]
 80010a4:	1dbb      	adds	r3, r7, #6
 80010a6:	1c22      	adds	r2, r4, #0
 80010a8:	701a      	strb	r2, [r3, #0]
 80010aa:	1d7b      	adds	r3, r7, #5
 80010ac:	1c02      	adds	r2, r0, #0
 80010ae:	701a      	strb	r2, [r3, #0]
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	1c0a      	adds	r2, r1, #0
 80010b4:	701a      	strb	r2, [r3, #0]
    if (index >= RGBLED_COUNT) return;
 80010b6:	1dfb      	adds	r3, r7, #7
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b17      	cmp	r3, #23
 80010bc:	d829      	bhi.n	8001112 <RGBLED_Set+0x82>
    leds[index].r = r;
 80010be:	1dfb      	adds	r3, r7, #7
 80010c0:	781a      	ldrb	r2, [r3, #0]
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <RGBLED_Set+0x8c>)
 80010c4:	0092      	lsls	r2, r2, #2
 80010c6:	1db9      	adds	r1, r7, #6
 80010c8:	7809      	ldrb	r1, [r1, #0]
 80010ca:	54d1      	strb	r1, [r2, r3]
    leds[index].g = g;
 80010cc:	1dfb      	adds	r3, r7, #7
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4a12      	ldr	r2, [pc, #72]	; (800111c <RGBLED_Set+0x8c>)
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	18d3      	adds	r3, r2, r3
 80010d6:	3301      	adds	r3, #1
 80010d8:	1d7a      	adds	r2, r7, #5
 80010da:	7812      	ldrb	r2, [r2, #0]
 80010dc:	701a      	strb	r2, [r3, #0]
    leds[index].b = b;
 80010de:	1dfb      	adds	r3, r7, #7
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	4a0e      	ldr	r2, [pc, #56]	; (800111c <RGBLED_Set+0x8c>)
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	18d3      	adds	r3, r2, r3
 80010e8:	3302      	adds	r3, #2
 80010ea:	1d3a      	adds	r2, r7, #4
 80010ec:	7812      	ldrb	r2, [r2, #0]
 80010ee:	701a      	strb	r2, [r3, #0]
    leds[index].brightness = (brightness > 31) ? 31 : brightness;
 80010f0:	1dfb      	adds	r3, r7, #7
 80010f2:	7819      	ldrb	r1, [r3, #0]
 80010f4:	2318      	movs	r3, #24
 80010f6:	18fb      	adds	r3, r7, r3
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	2a1f      	cmp	r2, #31
 80010fe:	d900      	bls.n	8001102 <RGBLED_Set+0x72>
 8001100:	231f      	movs	r3, #31
 8001102:	b2d8      	uxtb	r0, r3
 8001104:	4a05      	ldr	r2, [pc, #20]	; (800111c <RGBLED_Set+0x8c>)
 8001106:	008b      	lsls	r3, r1, #2
 8001108:	18d3      	adds	r3, r2, r3
 800110a:	3303      	adds	r3, #3
 800110c:	1c02      	adds	r2, r0, #0
 800110e:	701a      	strb	r2, [r3, #0]
 8001110:	e000      	b.n	8001114 <RGBLED_Set+0x84>
    if (index >= RGBLED_COUNT) return;
 8001112:	46c0      	nop			; (mov r8, r8)
}
 8001114:	46bd      	mov	sp, r7
 8001116:	b002      	add	sp, #8
 8001118:	bdb0      	pop	{r4, r5, r7, pc}
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	2000097c 	.word	0x2000097c

08001120 <RGBLED_Update>:

void RGBLED_Update(SPI_HandleTypeDef *hspi)
{
 8001120:	b5b0      	push	{r4, r5, r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
    uint16_t bufIndex = 0;
 8001128:	230e      	movs	r3, #14
 800112a:	18fb      	adds	r3, r7, r3
 800112c:	2200      	movs	r2, #0
 800112e:	801a      	strh	r2, [r3, #0]

    // Startframe (4x 0x00)
    for (uint8_t i = 0; i < 4; i++) {
 8001130:	230d      	movs	r3, #13
 8001132:	18fb      	adds	r3, r7, r3
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]
 8001138:	e00f      	b.n	800115a <RGBLED_Update+0x3a>
        txBuffer[bufIndex++] = 0x00;
 800113a:	220e      	movs	r2, #14
 800113c:	18bb      	adds	r3, r7, r2
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	18ba      	adds	r2, r7, r2
 8001142:	1c59      	adds	r1, r3, #1
 8001144:	8011      	strh	r1, [r2, #0]
 8001146:	001a      	movs	r2, r3
 8001148:	4b3e      	ldr	r3, [pc, #248]	; (8001244 <RGBLED_Update+0x124>)
 800114a:	2100      	movs	r1, #0
 800114c:	5499      	strb	r1, [r3, r2]
    for (uint8_t i = 0; i < 4; i++) {
 800114e:	210d      	movs	r1, #13
 8001150:	187b      	adds	r3, r7, r1
 8001152:	781a      	ldrb	r2, [r3, #0]
 8001154:	187b      	adds	r3, r7, r1
 8001156:	3201      	adds	r2, #1
 8001158:	701a      	strb	r2, [r3, #0]
 800115a:	230d      	movs	r3, #13
 800115c:	18fb      	adds	r3, r7, r3
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b03      	cmp	r3, #3
 8001162:	d9ea      	bls.n	800113a <RGBLED_Update+0x1a>
    }

    // LED-Daten
    for (uint8_t i = 0; i < RGBLED_COUNT; i++) {
 8001164:	230c      	movs	r3, #12
 8001166:	18fb      	adds	r3, r7, r3
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
 800116c:	e044      	b.n	80011f8 <RGBLED_Update+0xd8>
        txBuffer[bufIndex++] = 0b11100000 | (leds[i].brightness & 0x1F); // Helligkeit + Header
 800116e:	250c      	movs	r5, #12
 8001170:	197b      	adds	r3, r7, r5
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	4a34      	ldr	r2, [pc, #208]	; (8001248 <RGBLED_Update+0x128>)
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	18d3      	adds	r3, r2, r3
 800117a:	3303      	adds	r3, #3
 800117c:	781a      	ldrb	r2, [r3, #0]
 800117e:	240e      	movs	r4, #14
 8001180:	193b      	adds	r3, r7, r4
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	1939      	adds	r1, r7, r4
 8001186:	1c58      	adds	r0, r3, #1
 8001188:	8008      	strh	r0, [r1, #0]
 800118a:	0019      	movs	r1, r3
 800118c:	2320      	movs	r3, #32
 800118e:	425b      	negs	r3, r3
 8001190:	4313      	orrs	r3, r2
 8001192:	b2da      	uxtb	r2, r3
 8001194:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <RGBLED_Update+0x124>)
 8001196:	545a      	strb	r2, [r3, r1]
        txBuffer[bufIndex++] = leds[i].b;
 8001198:	197b      	adds	r3, r7, r5
 800119a:	7819      	ldrb	r1, [r3, #0]
 800119c:	193b      	adds	r3, r7, r4
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	193a      	adds	r2, r7, r4
 80011a2:	1c58      	adds	r0, r3, #1
 80011a4:	8010      	strh	r0, [r2, #0]
 80011a6:	0018      	movs	r0, r3
 80011a8:	4a27      	ldr	r2, [pc, #156]	; (8001248 <RGBLED_Update+0x128>)
 80011aa:	008b      	lsls	r3, r1, #2
 80011ac:	18d3      	adds	r3, r2, r3
 80011ae:	3302      	adds	r3, #2
 80011b0:	781a      	ldrb	r2, [r3, #0]
 80011b2:	4b24      	ldr	r3, [pc, #144]	; (8001244 <RGBLED_Update+0x124>)
 80011b4:	541a      	strb	r2, [r3, r0]
        txBuffer[bufIndex++] = leds[i].g;
 80011b6:	197b      	adds	r3, r7, r5
 80011b8:	7819      	ldrb	r1, [r3, #0]
 80011ba:	193b      	adds	r3, r7, r4
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	193a      	adds	r2, r7, r4
 80011c0:	1c58      	adds	r0, r3, #1
 80011c2:	8010      	strh	r0, [r2, #0]
 80011c4:	0018      	movs	r0, r3
 80011c6:	4a20      	ldr	r2, [pc, #128]	; (8001248 <RGBLED_Update+0x128>)
 80011c8:	008b      	lsls	r3, r1, #2
 80011ca:	18d3      	adds	r3, r2, r3
 80011cc:	3301      	adds	r3, #1
 80011ce:	781a      	ldrb	r2, [r3, #0]
 80011d0:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <RGBLED_Update+0x124>)
 80011d2:	541a      	strb	r2, [r3, r0]
        txBuffer[bufIndex++] = leds[i].r;
 80011d4:	197b      	adds	r3, r7, r5
 80011d6:	781a      	ldrb	r2, [r3, #0]
 80011d8:	193b      	adds	r3, r7, r4
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	1939      	adds	r1, r7, r4
 80011de:	1c58      	adds	r0, r3, #1
 80011e0:	8008      	strh	r0, [r1, #0]
 80011e2:	0019      	movs	r1, r3
 80011e4:	4b18      	ldr	r3, [pc, #96]	; (8001248 <RGBLED_Update+0x128>)
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	5cd2      	ldrb	r2, [r2, r3]
 80011ea:	4b16      	ldr	r3, [pc, #88]	; (8001244 <RGBLED_Update+0x124>)
 80011ec:	545a      	strb	r2, [r3, r1]
    for (uint8_t i = 0; i < RGBLED_COUNT; i++) {
 80011ee:	197b      	adds	r3, r7, r5
 80011f0:	781a      	ldrb	r2, [r3, #0]
 80011f2:	197b      	adds	r3, r7, r5
 80011f4:	3201      	adds	r2, #1
 80011f6:	701a      	strb	r2, [r3, #0]
 80011f8:	230c      	movs	r3, #12
 80011fa:	18fb      	adds	r3, r7, r3
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b17      	cmp	r3, #23
 8001200:	d9b5      	bls.n	800116e <RGBLED_Update+0x4e>
    }

    // Endframe: mindestens (N/2) Bits, hier sicherheitshalber 2 Bytes
    txBuffer[bufIndex++] = 0xFF;
 8001202:	200e      	movs	r0, #14
 8001204:	183b      	adds	r3, r7, r0
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	183a      	adds	r2, r7, r0
 800120a:	1c59      	adds	r1, r3, #1
 800120c:	8011      	strh	r1, [r2, #0]
 800120e:	001a      	movs	r2, r3
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <RGBLED_Update+0x124>)
 8001212:	21ff      	movs	r1, #255	; 0xff
 8001214:	5499      	strb	r1, [r3, r2]
    txBuffer[bufIndex++] = 0xFF;
 8001216:	183b      	adds	r3, r7, r0
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	183a      	adds	r2, r7, r0
 800121c:	1c59      	adds	r1, r3, #1
 800121e:	8011      	strh	r1, [r2, #0]
 8001220:	001a      	movs	r2, r3
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <RGBLED_Update+0x124>)
 8001224:	21ff      	movs	r1, #255	; 0xff
 8001226:	5499      	strb	r1, [r3, r2]

    HAL_SPI_Transmit(hspi, txBuffer, bufIndex, HAL_MAX_DELAY);
 8001228:	2301      	movs	r3, #1
 800122a:	425c      	negs	r4, r3
 800122c:	183b      	adds	r3, r7, r0
 800122e:	881a      	ldrh	r2, [r3, #0]
 8001230:	4904      	ldr	r1, [pc, #16]	; (8001244 <RGBLED_Update+0x124>)
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	0023      	movs	r3, r4
 8001236:	f004 faa9 	bl	800578c <HAL_SPI_Transmit>
}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	46bd      	mov	sp, r7
 800123e:	b004      	add	sp, #16
 8001240:	bdb0      	pop	{r4, r5, r7, pc}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	200009dc 	.word	0x200009dc
 8001248:	2000097c 	.word	0x2000097c

0800124c <RGBLED_TestPattern>:

void RGBLED_TestPattern(void)
{
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b085      	sub	sp, #20
 8001250:	af02      	add	r7, sp, #8
    static uint8_t R = 0;
    static uint8_t G = 0;
    static uint8_t B = 0;

    R += 1;
 8001252:	4b22      	ldr	r3, [pc, #136]	; (80012dc <RGBLED_TestPattern+0x90>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	3301      	adds	r3, #1
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4b20      	ldr	r3, [pc, #128]	; (80012dc <RGBLED_TestPattern+0x90>)
 800125c:	701a      	strb	r2, [r3, #0]
    G += 2;
 800125e:	4b20      	ldr	r3, [pc, #128]	; (80012e0 <RGBLED_TestPattern+0x94>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	3302      	adds	r3, #2
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <RGBLED_TestPattern+0x94>)
 8001268:	701a      	strb	r2, [r3, #0]
    B += 3;
 800126a:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <RGBLED_TestPattern+0x98>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	3303      	adds	r3, #3
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <RGBLED_TestPattern+0x98>)
 8001274:	701a      	strb	r2, [r3, #0]

    for (uint8_t i = 0; i < RGBLED_COUNT; i++) {
 8001276:	1dfb      	adds	r3, r7, #7
 8001278:	2200      	movs	r2, #0
 800127a:	701a      	strb	r2, [r3, #0]
 800127c:	e011      	b.n	80012a2 <RGBLED_TestPattern+0x56>
        RGBLED_Set(i, R, G, B, 1);
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <RGBLED_TestPattern+0x90>)
 8001280:	7819      	ldrb	r1, [r3, #0]
 8001282:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <RGBLED_TestPattern+0x94>)
 8001284:	781a      	ldrb	r2, [r3, #0]
 8001286:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <RGBLED_TestPattern+0x98>)
 8001288:	781c      	ldrb	r4, [r3, #0]
 800128a:	1dfb      	adds	r3, r7, #7
 800128c:	7818      	ldrb	r0, [r3, #0]
 800128e:	2301      	movs	r3, #1
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	0023      	movs	r3, r4
 8001294:	f7ff fefc 	bl	8001090 <RGBLED_Set>
    for (uint8_t i = 0; i < RGBLED_COUNT; i++) {
 8001298:	1dfb      	adds	r3, r7, #7
 800129a:	781a      	ldrb	r2, [r3, #0]
 800129c:	1dfb      	adds	r3, r7, #7
 800129e:	3201      	adds	r2, #1
 80012a0:	701a      	strb	r2, [r3, #0]
 80012a2:	1dfb      	adds	r3, r7, #7
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b17      	cmp	r3, #23
 80012a8:	d9e9      	bls.n	800127e <RGBLED_TestPattern+0x32>
    }

    if (R >= 100) R = 0;
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <RGBLED_TestPattern+0x90>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b63      	cmp	r3, #99	; 0x63
 80012b0:	d902      	bls.n	80012b8 <RGBLED_TestPattern+0x6c>
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <RGBLED_TestPattern+0x90>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
    if (G >= 150) G = 0;
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <RGBLED_TestPattern+0x94>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b95      	cmp	r3, #149	; 0x95
 80012be:	d902      	bls.n	80012c6 <RGBLED_TestPattern+0x7a>
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <RGBLED_TestPattern+0x94>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
    if (B >= 200) B = 0;
 80012c6:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <RGBLED_TestPattern+0x98>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2bc7      	cmp	r3, #199	; 0xc7
 80012cc:	d902      	bls.n	80012d4 <RGBLED_TestPattern+0x88>
 80012ce:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <RGBLED_TestPattern+0x98>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
}
 80012d4:	46c0      	nop			; (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	b003      	add	sp, #12
 80012da:	bd90      	pop	{r4, r7, pc}
 80012dc:	20000a49 	.word	0x20000a49
 80012e0:	20000a4a 	.word	0x20000a4a
 80012e4:	20000a4b 	.word	0x20000a4b

080012e8 <RGBLED_HandleCAN>:

// Erwartet CAN-Frame: ID 0x110 bis 0x110 + n, 8 Bytes pro LED-Paar
// Bytes: [Index, R, G, B, Bright, Index, R, G, B, Bright] (max. 2 LEDs pro Frame)
void RGBLED_HandleCAN(uint16_t id, const uint8_t *data, uint8_t dlc, uint32_t now_ms)
{
 80012e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ea:	b089      	sub	sp, #36	; 0x24
 80012ec:	af02      	add	r7, sp, #8
 80012ee:	60b9      	str	r1, [r7, #8]
 80012f0:	0011      	movs	r1, r2
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	240e      	movs	r4, #14
 80012f6:	193b      	adds	r3, r7, r4
 80012f8:	1c02      	adds	r2, r0, #0
 80012fa:	801a      	strh	r2, [r3, #0]
 80012fc:	200d      	movs	r0, #13
 80012fe:	183b      	adds	r3, r7, r0
 8001300:	1c0a      	adds	r2, r1, #0
 8001302:	701a      	strb	r2, [r3, #0]
    // Grund-ID prüfen
    if (id < 0x110 || id > 0x11B) return;
 8001304:	0021      	movs	r1, r4
 8001306:	187b      	adds	r3, r7, r1
 8001308:	881a      	ldrh	r2, [r3, #0]
 800130a:	2388      	movs	r3, #136	; 0x88
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	429a      	cmp	r2, r3
 8001310:	d346      	bcc.n	80013a0 <RGBLED_HandleCAN+0xb8>
 8001312:	187b      	adds	r3, r7, r1
 8001314:	881a      	ldrh	r2, [r3, #0]
 8001316:	238e      	movs	r3, #142	; 0x8e
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	429a      	cmp	r2, r3
 800131c:	d240      	bcs.n	80013a0 <RGBLED_HandleCAN+0xb8>
    if (dlc < 8) return;
 800131e:	183b      	adds	r3, r7, r0
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b07      	cmp	r3, #7
 8001324:	d93e      	bls.n	80013a4 <RGBLED_HandleCAN+0xbc>

    uint8_t base = (uint8_t)((id - 0x110) * 2);
 8001326:	187b      	adds	r3, r7, r1
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	3b11      	subs	r3, #17
 800132c:	3bff      	subs	r3, #255	; 0xff
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2017      	movs	r0, #23
 8001332:	183a      	adds	r2, r7, r0
 8001334:	18db      	adds	r3, r3, r3
 8001336:	7013      	strb	r3, [r2, #0]

    RGBLED_Set(base + 0, data[0], data[1], data[2], data[3] & 0x1F);
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	7819      	ldrb	r1, [r3, #0]
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	3301      	adds	r3, #1
 8001340:	781c      	ldrb	r4, [r3, #0]
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	3302      	adds	r3, #2
 8001346:	781d      	ldrb	r5, [r3, #0]
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	3303      	adds	r3, #3
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	221f      	movs	r2, #31
 8001350:	4013      	ands	r3, r2
 8001352:	b2db      	uxtb	r3, r3
 8001354:	0006      	movs	r6, r0
 8001356:	183a      	adds	r2, r7, r0
 8001358:	7810      	ldrb	r0, [r2, #0]
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	002b      	movs	r3, r5
 800135e:	0022      	movs	r2, r4
 8001360:	f7ff fe96 	bl	8001090 <RGBLED_Set>
    RGBLED_Set(base + 1, data[4], data[5], data[6], data[7] & 0x1F);
 8001364:	19bb      	adds	r3, r7, r6
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	3301      	adds	r3, #1
 800136a:	b2d8      	uxtb	r0, r3
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	3304      	adds	r3, #4
 8001370:	7819      	ldrb	r1, [r3, #0]
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	3305      	adds	r3, #5
 8001376:	781a      	ldrb	r2, [r3, #0]
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	3306      	adds	r3, #6
 800137c:	781c      	ldrb	r4, [r3, #0]
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	3307      	adds	r3, #7
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	251f      	movs	r5, #31
 8001386:	402b      	ands	r3, r5
 8001388:	b2db      	uxtb	r3, r3
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	0023      	movs	r3, r4
 800138e:	f7ff fe7f 	bl	8001090 <RGBLED_Set>

    last_led_update_ms = now_ms;
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <RGBLED_HandleCAN+0xc4>)
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	601a      	str	r2, [r3, #0]
    led_control_active = 1;
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <RGBLED_HandleCAN+0xc8>)
 800139a:	2201      	movs	r2, #1
 800139c:	701a      	strb	r2, [r3, #0]
 800139e:	e002      	b.n	80013a6 <RGBLED_HandleCAN+0xbe>
    if (id < 0x110 || id > 0x11B) return;
 80013a0:	46c0      	nop			; (mov r8, r8)
 80013a2:	e000      	b.n	80013a6 <RGBLED_HandleCAN+0xbe>
    if (dlc < 8) return;
 80013a4:	46c0      	nop			; (mov r8, r8)
}
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b007      	add	sp, #28
 80013aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ac:	20000a44 	.word	0x20000a44
 80013b0:	20000a48 	.word	0x20000a48

080013b4 <RGBLED_TimeoutCheck>:

void RGBLED_TimeoutCheck(uint32_t now_ms, SPI_HandleTypeDef *hspi)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
    if (led_control_active) {
 80013be:	4b20      	ldr	r3, [pc, #128]	; (8001440 <RGBLED_TimeoutCheck+0x8c>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00a      	beq.n	80013dc <RGBLED_TimeoutCheck+0x28>
        // Prüfen ob wir das Timeout überschritten haben → zurück in Testmode
        if ((now_ms - last_led_update_ms) > 1000u) {
 80013c6:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <RGBLED_TimeoutCheck+0x90>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	1ad2      	subs	r2, r2, r3
 80013ce:	23fa      	movs	r3, #250	; 0xfa
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d902      	bls.n	80013dc <RGBLED_TimeoutCheck+0x28>
            led_control_active = 0;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <RGBLED_TimeoutCheck+0x8c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	701a      	strb	r2, [r3, #0]
        }
    }

    if (led_control_active) {
 80013dc:	4b18      	ldr	r3, [pc, #96]	; (8001440 <RGBLED_TimeoutCheck+0x8c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d004      	beq.n	80013ee <RGBLED_TimeoutCheck+0x3a>
        RGBLED_Update(hspi);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	0018      	movs	r0, r3
 80013e8:	f7ff fe9a 	bl	8001120 <RGBLED_Update>
 80013ec:	e012      	b.n	8001414 <RGBLED_TimeoutCheck+0x60>
    } else {
        static uint8_t was_active = 0;

        // Wenn wir gerade aus aktivem CAN-Mode kommen → einmal alles aus
        if (was_active) {
 80013ee:	4b16      	ldr	r3, [pc, #88]	; (8001448 <RGBLED_TimeoutCheck+0x94>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d008      	beq.n	8001408 <RGBLED_TimeoutCheck+0x54>
            RGBLED_AllOff();
 80013f6:	f000 f82b 	bl	8001450 <RGBLED_AllOff>
            RGBLED_Update(hspi);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	0018      	movs	r0, r3
 80013fe:	f7ff fe8f 	bl	8001120 <RGBLED_Update>
            was_active = 0;
 8001402:	4b11      	ldr	r3, [pc, #68]	; (8001448 <RGBLED_TimeoutCheck+0x94>)
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
        }

        RGBLED_TestPattern();
 8001408:	f7ff ff20 	bl	800124c <RGBLED_TestPattern>
        RGBLED_Update(hspi);
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	0018      	movs	r0, r3
 8001410:	f7ff fe86 	bl	8001120 <RGBLED_Update>
    }

    // Merken ob wir vorher aktiv waren, um beim nächsten Wechsel reagieren zu können
    static uint8_t prev_active = 0;
    if (!prev_active && led_control_active) {
 8001414:	4b0d      	ldr	r3, [pc, #52]	; (800144c <RGBLED_TimeoutCheck+0x98>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d109      	bne.n	8001430 <RGBLED_TimeoutCheck+0x7c>
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <RGBLED_TimeoutCheck+0x8c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <RGBLED_TimeoutCheck+0x7c>
        // Wechsel von Testmode → CAN-Mode → vorher alle LEDs aus
        RGBLED_AllOff();
 8001424:	f000 f814 	bl	8001450 <RGBLED_AllOff>
        RGBLED_Update(hspi);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	0018      	movs	r0, r3
 800142c:	f7ff fe78 	bl	8001120 <RGBLED_Update>
    }
    prev_active = led_control_active;
 8001430:	4b03      	ldr	r3, [pc, #12]	; (8001440 <RGBLED_TimeoutCheck+0x8c>)
 8001432:	781a      	ldrb	r2, [r3, #0]
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <RGBLED_TimeoutCheck+0x98>)
 8001436:	701a      	strb	r2, [r3, #0]
}
 8001438:	46c0      	nop			; (mov r8, r8)
 800143a:	46bd      	mov	sp, r7
 800143c:	b002      	add	sp, #8
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000a48 	.word	0x20000a48
 8001444:	20000a44 	.word	0x20000a44
 8001448:	20000a4c 	.word	0x20000a4c
 800144c:	20000a4d 	.word	0x20000a4d

08001450 <RGBLED_AllOff>:

void RGBLED_AllOff(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af02      	add	r7, sp, #8
    for (uint8_t i = 0; i < RGBLED_COUNT; i++) {
 8001456:	1dfb      	adds	r3, r7, #7
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
 800145c:	e00d      	b.n	800147a <RGBLED_AllOff+0x2a>
        RGBLED_Set(i, 0, 0, 0, 0);
 800145e:	1dfb      	adds	r3, r7, #7
 8001460:	7818      	ldrb	r0, [r3, #0]
 8001462:	2300      	movs	r3, #0
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	2300      	movs	r3, #0
 8001468:	2200      	movs	r2, #0
 800146a:	2100      	movs	r1, #0
 800146c:	f7ff fe10 	bl	8001090 <RGBLED_Set>
    for (uint8_t i = 0; i < RGBLED_COUNT; i++) {
 8001470:	1dfb      	adds	r3, r7, #7
 8001472:	781a      	ldrb	r2, [r3, #0]
 8001474:	1dfb      	adds	r3, r7, #7
 8001476:	3201      	adds	r2, #1
 8001478:	701a      	strb	r2, [r3, #0]
 800147a:	1dfb      	adds	r3, r7, #7
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b17      	cmp	r3, #23
 8001480:	d9ed      	bls.n	800145e <RGBLED_AllOff+0xe>
    }
}
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	46c0      	nop			; (mov r8, r8)
 8001486:	46bd      	mov	sp, r7
 8001488:	b002      	add	sp, #8
 800148a:	bd80      	pop	{r7, pc}

0800148c <loop_init>:
#else
  #define LOOP_INLINE static inline
#endif

LOOP_INLINE void loop_init(loop_timer_t *lt, uint32_t period_ms, loop_timer_t *parent)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
    lt->period_ms      = period_ms;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	601a      	str	r2, [r3, #0]
    lt->last_tick_ms   = 0;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2200      	movs	r2, #0
 80014a2:	605a      	str	r2, [r3, #4]
    lt->start_us       = 0;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
    lt->exec_time_us   = 0;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2200      	movs	r2, #0
 80014ae:	60da      	str	r2, [r3, #12]
    lt->usage_x10      = 0;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2200      	movs	r2, #0
 80014b4:	821a      	strh	r2, [r3, #16]
    lt->max_curr_x10   = 0;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2200      	movs	r2, #0
 80014ba:	825a      	strh	r2, [r3, #18]
    lt->max_prev_x10   = 0;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2200      	movs	r2, #0
 80014c0:	829a      	strh	r2, [r3, #20]
    lt->parent         = parent;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	619a      	str	r2, [r3, #24]
}
 80014c8:	46c0      	nop			; (mov r8, r8)
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b004      	add	sp, #16
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <loop_due>:

// fällig? (mit Parent-Kaskade)
LOOP_INLINE uint8_t loop_due(loop_timer_t *lt, uint32_t systime_ms)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
    if (lt->period_ms == 0) return 0; // nicht init
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <loop_due+0x16>
 80014e2:	2300      	movs	r3, #0
 80014e4:	e016      	b.n	8001514 <loop_due+0x44>
    // Parent muss in dieser while-Iteration bereits gelaufen sein
    if (lt->parent && lt->parent->last_tick_ms == lt->last_tick_ms) return 0;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d008      	beq.n	8001500 <loop_due+0x30>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d101      	bne.n	8001500 <loop_due+0x30>
 80014fc:	2300      	movs	r3, #0
 80014fe:	e009      	b.n	8001514 <loop_due+0x44>
    return (systime_ms - lt->last_tick_ms) >= lt->period_ms;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	1ad1      	subs	r1, r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	2300      	movs	r3, #0
 800150e:	4291      	cmp	r1, r2
 8001510:	415b      	adcs	r3, r3
 8001512:	b2db      	uxtb	r3, r3
}
 8001514:	0018      	movs	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	b002      	add	sp, #8
 800151a:	bd80      	pop	{r7, pc}

0800151c <loop_start>:

// neue Periode starten: ROLLOVER des Max-Werts
LOOP_INLINE void loop_start(loop_timer_t *lt, uint32_t systime_ms)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
    // Rollover: abgeschlossene Periode → prev, aktuellen Puffer leeren
    lt->max_prev_x10 = lt->max_curr_x10;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	8a5a      	ldrh	r2, [r3, #18]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	829a      	strh	r2, [r3, #20]
    lt->max_curr_x10 = 0;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	825a      	strh	r2, [r3, #18]

    lt->last_tick_ms = systime_ms;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	605a      	str	r2, [r3, #4]
    lt->start_us     = MICROS();
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <loop_start+0x30>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	609a      	str	r2, [r3, #8]
}
 8001544:	46c0      	nop			; (mov r8, r8)
 8001546:	46bd      	mov	sp, r7
 8001548:	b002      	add	sp, #8
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000bc4 	.word	0x20000bc4

08001550 <loop_end>:

// Periode beenden, Usage & Max der laufenden Periode aktualisieren
LOOP_INLINE void loop_end(loop_timer_t *lt, ErrorCode_t overrun_code)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	000a      	movs	r2, r1
 800155a:	1cfb      	adds	r3, r7, #3
 800155c:	701a      	strb	r2, [r3, #0]
    uint32_t now_us = MICROS();
 800155e:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <loop_end+0x80>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001564:	60fb      	str	r3, [r7, #12]
    lt->exec_time_us = (now_us >= lt->start_us)
                     ? (now_us - lt->start_us)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	1ad2      	subs	r2, r2, r3
    lt->exec_time_us = (now_us >= lt->start_us)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	60da      	str	r2, [r3, #12]
                     : ((0xFFFFFFFFu - lt->start_us) + now_us + 1u);

    // 0.1%-Skala, „round to nearest“
    lt->usage_x10 = (uint16_t)((lt->exec_time_us + (lt->period_ms/2u)) / lt->period_ms);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68da      	ldr	r2, [r3, #12]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	085b      	lsrs	r3, r3, #1
 800157c:	18d2      	adds	r2, r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	0019      	movs	r1, r3
 8001584:	0010      	movs	r0, r2
 8001586:	f7fe fdc9 	bl	800011c <__udivsi3>
 800158a:	0003      	movs	r3, r0
 800158c:	b29a      	uxth	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	821a      	strh	r2, [r3, #16]
    if (lt->usage_x10 > lt->max_curr_x10) lt->max_curr_x10 = lt->usage_x10;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	8a1a      	ldrh	r2, [r3, #16]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	8a5b      	ldrh	r3, [r3, #18]
 800159a:	429a      	cmp	r2, r3
 800159c:	d903      	bls.n	80015a6 <loop_end+0x56>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	8a1a      	ldrh	r2, [r3, #16]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	825a      	strh	r2, [r3, #18]

    // Overrun?
    if (lt->exec_time_us > (lt->period_ms * 1000u)) {
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68d9      	ldr	r1, [r3, #12]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	0013      	movs	r3, r2
 80015b0:	015b      	lsls	r3, r3, #5
 80015b2:	1a9b      	subs	r3, r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	189b      	adds	r3, r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	4299      	cmp	r1, r3
 80015bc:	d904      	bls.n	80015c8 <loop_end+0x78>
        Error_Register(overrun_code);
 80015be:	1cfb      	adds	r3, r7, #3
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	0018      	movs	r0, r3
 80015c4:	f7ff fc8e 	bl	8000ee4 <Error_Register>
    }
}
 80015c8:	46c0      	nop			; (mov r8, r8)
 80015ca:	46bd      	mov	sp, r7
 80015cc:	b004      	add	sp, #16
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000bc4 	.word	0x20000bc4

080015d4 <init_loops.0>:
  loop_timer_t loop_10ms  = {0};
  loop_timer_t loop_100ms = {0};
  loop_timer_t loop_200ms = {0};

  void init_loops(void)
  {
 80015d4:	b590      	push	{r4, r7, lr}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4664      	mov	r4, ip
 80015dc:	4663      	mov	r3, ip
 80015de:	607b      	str	r3, [r7, #4]
      loop_init(&loop_1ms,   1,   NULL);
 80015e0:	0023      	movs	r3, r4
 80015e2:	3354      	adds	r3, #84	; 0x54
 80015e4:	2200      	movs	r2, #0
 80015e6:	2101      	movs	r1, #1
 80015e8:	0018      	movs	r0, r3
 80015ea:	f7ff ff4f 	bl	800148c <loop_init>
      loop_init(&loop_10ms,  10,  &loop_1ms);
 80015ee:	0023      	movs	r3, r4
 80015f0:	3338      	adds	r3, #56	; 0x38
 80015f2:	0022      	movs	r2, r4
 80015f4:	3254      	adds	r2, #84	; 0x54
 80015f6:	210a      	movs	r1, #10
 80015f8:	0018      	movs	r0, r3
 80015fa:	f7ff ff47 	bl	800148c <loop_init>
      loop_init(&loop_100ms, 100, &loop_10ms);
 80015fe:	0023      	movs	r3, r4
 8001600:	331c      	adds	r3, #28
 8001602:	0022      	movs	r2, r4
 8001604:	3238      	adds	r2, #56	; 0x38
 8001606:	2164      	movs	r1, #100	; 0x64
 8001608:	0018      	movs	r0, r3
 800160a:	f7ff ff3f 	bl	800148c <loop_init>
      loop_init(&loop_200ms, 200, &loop_100ms);
 800160e:	0020      	movs	r0, r4
 8001610:	0023      	movs	r3, r4
 8001612:	331c      	adds	r3, #28
 8001614:	001a      	movs	r2, r3
 8001616:	21c8      	movs	r1, #200	; 0xc8
 8001618:	f7ff ff38 	bl	800148c <loop_init>
  }
 800161c:	46c0      	nop			; (mov r8, r8)
 800161e:	46bd      	mov	sp, r7
 8001620:	b003      	add	sp, #12
 8001622:	bd90      	pop	{r4, r7, pc}

08001624 <main>:
{
 8001624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001626:	b0a9      	sub	sp, #164	; 0xa4
 8001628:	af02      	add	r7, sp, #8
int main(void)
 800162a:	23a8      	movs	r3, #168	; 0xa8
 800162c:	2208      	movs	r2, #8
 800162e:	189b      	adds	r3, r3, r2
 8001630:	19da      	adds	r2, r3, r7
 8001632:	2410      	movs	r4, #16
 8001634:	193b      	adds	r3, r7, r4
 8001636:	671a      	str	r2, [r3, #112]	; 0x70
  HAL_Init();
 8001638:	f001 fa6a 	bl	8002b10 <HAL_Init>
  SystemClock_Config();
 800163c:	f000 fa12 	bl	8001a64 <SystemClock_Config>
  MX_GPIO_Init();
 8001640:	f000 fc02 	bl	8001e48 <MX_GPIO_Init>
  MX_DMA_Init();
 8001644:	f000 fbe2 	bl	8001e0c <MX_DMA_Init>
  MX_CAN_Init();
 8001648:	f000 fad6 	bl	8001bf8 <MX_CAN_Init>
  MX_SPI1_Init();
 800164c:	f000 fb0e 	bl	8001c6c <MX_SPI1_Init>
  MX_ADC_Init();
 8001650:	f000 fa50 	bl	8001af4 <MX_ADC_Init>
  MX_SPI2_Init();
 8001654:	f000 fb48 	bl	8001ce8 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001658:	f000 fb84 	bl	8001d64 <MX_TIM2_Init>
  HAL_ADCEx_Calibration_Start(&hadc);
 800165c:	4bd1      	ldr	r3, [pc, #836]	; (80019a4 <main+0x380>)
 800165e:	0018      	movs	r0, r3
 8001660:	f001 ff74 	bl	800354c <HAL_ADCEx_Calibration_Start>
  HAL_TIM_Base_Start(&htim2);
 8001664:	4bd0      	ldr	r3, [pc, #832]	; (80019a8 <main+0x384>)
 8001666:	0018      	movs	r0, r3
 8001668:	f004 fcbe 	bl	8005fe8 <HAL_TIM_Base_Start>
  RGBLED_Init();
 800166c:	f7ff fcda 	bl	8001024 <RGBLED_Init>
  ADC_Init();
 8001670:	f7ff f876 	bl	8000760 <ADC_Init>
  CAN_RegisterRxCallback(RGBLED_HandleCAN);
 8001674:	4bcd      	ldr	r3, [pc, #820]	; (80019ac <main+0x388>)
 8001676:	0018      	movs	r0, r3
 8001678:	f7ff f9b2 	bl	80009e0 <CAN_RegisterRxCallback>
  CAN_RegisterRxCallback(ADC_HandleCAN);
 800167c:	4bcc      	ldr	r3, [pc, #816]	; (80019b0 <main+0x38c>)
 800167e:	0018      	movs	r0, r3
 8001680:	f7ff f9ae 	bl	80009e0 <CAN_RegisterRxCallback>
  ssd1306_Init();
 8001684:	f001 f800 	bl	8002688 <ssd1306_Init>
  ssd1306_Fill(White);
 8001688:	2001      	movs	r0, #1
 800168a:	f001 f869 	bl	8002760 <ssd1306_Fill>
  ssd1306_DrawPixel(2, 2, Black);
 800168e:	2200      	movs	r2, #0
 8001690:	2102      	movs	r1, #2
 8001692:	2002      	movs	r0, #2
 8001694:	f001 f8ac 	bl	80027f0 <ssd1306_DrawPixel>
  ssd1306_DrawPixel(1, 1, Black);
 8001698:	2200      	movs	r2, #0
 800169a:	2101      	movs	r1, #1
 800169c:	2001      	movs	r0, #1
 800169e:	f001 f8a7 	bl	80027f0 <ssd1306_DrawPixel>
  ssd1306_DrawPixel(0, 0, Black);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2100      	movs	r1, #0
 80016a6:	2000      	movs	r0, #0
 80016a8:	f001 f8a2 	bl	80027f0 <ssd1306_DrawPixel>
  ssd1306_UpdateScreen();
 80016ac:	f001 f872 	bl	8002794 <ssd1306_UpdateScreen>
  ssd1306_Fill(Black);
 80016b0:	2000      	movs	r0, #0
 80016b2:	f001 f855 	bl	8002760 <ssd1306_Fill>
  ssd1306_SetCursor(0, 0);
 80016b6:	2100      	movs	r1, #0
 80016b8:	2000      	movs	r0, #0
 80016ba:	f001 f9d1 	bl	8002a60 <ssd1306_SetCursor>
  ssd1306_WriteString("Hello World", Font_6x8, White);
 80016be:	4bbd      	ldr	r3, [pc, #756]	; (80019b4 <main+0x390>)
 80016c0:	48bd      	ldr	r0, [pc, #756]	; (80019b8 <main+0x394>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	9200      	str	r2, [sp, #0]
 80016c6:	6819      	ldr	r1, [r3, #0]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f001 f99c 	bl	8002a08 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80016d0:	f001 f860 	bl	8002794 <ssd1306_UpdateScreen>
  HAL_GPIO_WritePin(GPIO1_12VOut_GPIO_Port,GPIO1_12VOut_Pin, GPIO_PIN_RESET);
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	00d9      	lsls	r1, r3, #3
 80016d8:	2390      	movs	r3, #144	; 0x90
 80016da:	05db      	lsls	r3, r3, #23
 80016dc:	2200      	movs	r2, #0
 80016de:	0018      	movs	r0, r3
 80016e0:	f003 fa90 	bl	8004c04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIO1_5VOut_GPIO_Port,GPIO1_5VOut_Pin, GPIO_PIN_RESET);
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	0099      	lsls	r1, r3, #2
 80016e8:	2390      	movs	r3, #144	; 0x90
 80016ea:	05db      	lsls	r3, r3, #23
 80016ec:	2200      	movs	r2, #0
 80016ee:	0018      	movs	r0, r3
 80016f0:	f003 fa88 	bl	8004c04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADC1_CTRL_GPIO_Port,ADC1_CTRL_Pin, GPIO_PIN_SET);
 80016f4:	2380      	movs	r3, #128	; 0x80
 80016f6:	011b      	lsls	r3, r3, #4
 80016f8:	48b0      	ldr	r0, [pc, #704]	; (80019bc <main+0x398>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	0019      	movs	r1, r3
 80016fe:	f003 fa81 	bl	8004c04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADC1_NTC_CTRL_GPIO_Port,ADC1_NTC_CTRL_Pin, GPIO_PIN_RESET);
 8001702:	4bae      	ldr	r3, [pc, #696]	; (80019bc <main+0x398>)
 8001704:	2200      	movs	r2, #0
 8001706:	2102      	movs	r1, #2
 8001708:	0018      	movs	r0, r3
 800170a:	f003 fa7b 	bl	8004c04 <HAL_GPIO_WritePin>
  loop_timer_t loop_1ms   = {0};
 800170e:	193b      	adds	r3, r7, r4
 8001710:	3354      	adds	r3, #84	; 0x54
 8001712:	221c      	movs	r2, #28
 8001714:	2100      	movs	r1, #0
 8001716:	0018      	movs	r0, r3
 8001718:	f004 ff30 	bl	800657c <memset>
  loop_timer_t loop_10ms  = {0};
 800171c:	193b      	adds	r3, r7, r4
 800171e:	3338      	adds	r3, #56	; 0x38
 8001720:	221c      	movs	r2, #28
 8001722:	2100      	movs	r1, #0
 8001724:	0018      	movs	r0, r3
 8001726:	f004 ff29 	bl	800657c <memset>
  loop_timer_t loop_100ms = {0};
 800172a:	193b      	adds	r3, r7, r4
 800172c:	331c      	adds	r3, #28
 800172e:	221c      	movs	r2, #28
 8001730:	2100      	movs	r1, #0
 8001732:	0018      	movs	r0, r3
 8001734:	f004 ff22 	bl	800657c <memset>
  loop_timer_t loop_200ms = {0};
 8001738:	193b      	adds	r3, r7, r4
 800173a:	0018      	movs	r0, r3
 800173c:	231c      	movs	r3, #28
 800173e:	001a      	movs	r2, r3
 8001740:	2100      	movs	r1, #0
 8001742:	f004 ff1b 	bl	800657c <memset>

  init_loops();
 8001746:	193b      	adds	r3, r7, r4
 8001748:	469c      	mov	ip, r3
 800174a:	f7ff ff43 	bl	80015d4 <init_loops.0>

  while (1)
  {

	    uint32_t systime = HAL_GetTick();
 800174e:	f001 fa39 	bl	8002bc4 <HAL_GetTick>
 8001752:	0003      	movs	r3, r0
 8001754:	2490      	movs	r4, #144	; 0x90
 8001756:	193a      	adds	r2, r7, r4
 8001758:	6013      	str	r3, [r2, #0]

	  	  // --- 1 ms Loop ---
	  	  if (loop_due(&loop_1ms, systime)) {
 800175a:	193b      	adds	r3, r7, r4
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	2510      	movs	r5, #16
 8001760:	197b      	adds	r3, r7, r5
 8001762:	3354      	adds	r3, #84	; 0x54
 8001764:	0011      	movs	r1, r2
 8001766:	0018      	movs	r0, r3
 8001768:	f7ff feb2 	bl	80014d0 <loop_due>
 800176c:	1e03      	subs	r3, r0, #0
 800176e:	d00d      	beq.n	800178c <main+0x168>
	  		  loop_start(&loop_1ms, systime);
 8001770:	193b      	adds	r3, r7, r4
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	197b      	adds	r3, r7, r5
 8001776:	3354      	adds	r3, #84	; 0x54
 8001778:	0011      	movs	r1, r2
 800177a:	0018      	movs	r0, r3
 800177c:	f7ff fece 	bl	800151c <loop_start>
	  		  // 1ms-Tasks hier
	  		  loop_end(&loop_1ms, ERROR_LOOP_OVERRUN_1MS);
 8001780:	197b      	adds	r3, r7, r5
 8001782:	3354      	adds	r3, #84	; 0x54
 8001784:	210b      	movs	r1, #11
 8001786:	0018      	movs	r0, r3
 8001788:	f7ff fee2 	bl	8001550 <loop_end>
	  	  }

	  	// --- 10 ms Loop ---
	  	    if (loop_due(&loop_10ms, systime)) {
 800178c:	2590      	movs	r5, #144	; 0x90
 800178e:	197b      	adds	r3, r7, r5
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	2410      	movs	r4, #16
 8001794:	193b      	adds	r3, r7, r4
 8001796:	3338      	adds	r3, #56	; 0x38
 8001798:	0011      	movs	r1, r2
 800179a:	0018      	movs	r0, r3
 800179c:	f7ff fe98 	bl	80014d0 <loop_due>
 80017a0:	1e03      	subs	r3, r0, #0
 80017a2:	d100      	bne.n	80017a6 <main+0x182>
 80017a4:	e0b9      	b.n	800191a <main+0x2f6>
	  	        loop_start(&loop_10ms, systime);
 80017a6:	197b      	adds	r3, r7, r5
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	193b      	adds	r3, r7, r4
 80017ac:	3338      	adds	r3, #56	; 0x38
 80017ae:	0011      	movs	r1, r2
 80017b0:	0018      	movs	r0, r3
 80017b2:	f7ff feb3 	bl	800151c <loop_start>


				// Senden der Loop usages
				// Nachricht vorbereiten
				CANmsg.id = 0x100;
 80017b6:	4b82      	ldr	r3, [pc, #520]	; (80019c0 <main+0x39c>)
 80017b8:	2280      	movs	r2, #128	; 0x80
 80017ba:	0052      	lsls	r2, r2, #1
 80017bc:	801a      	strh	r2, [r3, #0]
				CANmsg.dlc = 8;
 80017be:	4b80      	ldr	r3, [pc, #512]	; (80019c0 <main+0x39c>)
 80017c0:	2208      	movs	r2, #8
 80017c2:	709a      	strb	r2, [r3, #2]
				CANmsg.data[0] = loop_1ms.max_prev_x10  & 0xFF; CANmsg.data[1] = loop_1ms.max_prev_x10  >> 8;
 80017c4:	193b      	adds	r3, r7, r4
 80017c6:	2268      	movs	r2, #104	; 0x68
 80017c8:	5a9b      	ldrh	r3, [r3, r2]
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	4b7c      	ldr	r3, [pc, #496]	; (80019c0 <main+0x39c>)
 80017ce:	70da      	strb	r2, [r3, #3]
 80017d0:	193b      	adds	r3, r7, r4
 80017d2:	2268      	movs	r2, #104	; 0x68
 80017d4:	5a9b      	ldrh	r3, [r3, r2]
 80017d6:	0a1b      	lsrs	r3, r3, #8
 80017d8:	b29b      	uxth	r3, r3
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	4b78      	ldr	r3, [pc, #480]	; (80019c0 <main+0x39c>)
 80017de:	711a      	strb	r2, [r3, #4]
				CANmsg.data[2] = loop_10ms.max_prev_x10 & 0xFF; CANmsg.data[3] = loop_10ms.max_prev_x10 >> 8;
 80017e0:	0021      	movs	r1, r4
 80017e2:	187b      	adds	r3, r7, r1
 80017e4:	224c      	movs	r2, #76	; 0x4c
 80017e6:	5a9b      	ldrh	r3, [r3, r2]
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4b75      	ldr	r3, [pc, #468]	; (80019c0 <main+0x39c>)
 80017ec:	715a      	strb	r2, [r3, #5]
 80017ee:	187b      	adds	r3, r7, r1
 80017f0:	224c      	movs	r2, #76	; 0x4c
 80017f2:	5a9b      	ldrh	r3, [r3, r2]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	4b71      	ldr	r3, [pc, #452]	; (80019c0 <main+0x39c>)
 80017fc:	719a      	strb	r2, [r3, #6]
				CANmsg.data[4] = loop_100ms.max_prev_x10& 0xFF; CANmsg.data[5] = loop_100ms.max_prev_x10>> 8;
 80017fe:	187b      	adds	r3, r7, r1
 8001800:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001802:	b2da      	uxtb	r2, r3
 8001804:	4b6e      	ldr	r3, [pc, #440]	; (80019c0 <main+0x39c>)
 8001806:	71da      	strb	r2, [r3, #7]
 8001808:	187b      	adds	r3, r7, r1
 800180a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800180c:	0a1b      	lsrs	r3, r3, #8
 800180e:	b29b      	uxth	r3, r3
 8001810:	b2da      	uxtb	r2, r3
 8001812:	4b6b      	ldr	r3, [pc, #428]	; (80019c0 <main+0x39c>)
 8001814:	721a      	strb	r2, [r3, #8]
				CANmsg.data[6] = loop_200ms.max_prev_x10& 0xFF; CANmsg.data[7] = loop_200ms.max_prev_x10>> 8;
 8001816:	187b      	adds	r3, r7, r1
 8001818:	8a9b      	ldrh	r3, [r3, #20]
 800181a:	b2da      	uxtb	r2, r3
 800181c:	4b68      	ldr	r3, [pc, #416]	; (80019c0 <main+0x39c>)
 800181e:	725a      	strb	r2, [r3, #9]
 8001820:	187b      	adds	r3, r7, r1
 8001822:	8a9b      	ldrh	r3, [r3, #20]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	b29b      	uxth	r3, r3
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4b65      	ldr	r3, [pc, #404]	; (80019c0 <main+0x39c>)
 800182c:	729a      	strb	r2, [r3, #10]

				if (CAN_QueueMessage(&CANmsg) != HAL_OK)
 800182e:	4b64      	ldr	r3, [pc, #400]	; (80019c0 <main+0x39c>)
 8001830:	0018      	movs	r0, r3
 8001832:	f7ff fb0d 	bl	8000e50 <CAN_QueueMessage>
 8001836:	1e03      	subs	r3, r0, #0
 8001838:	d002      	beq.n	8001840 <main+0x21c>
				{
				   Error_Register(ERROR_CAN_QUEUE_FULL);
 800183a:	2001      	movs	r0, #1
 800183c:	f7ff fb52 	bl	8000ee4 <Error_Register>
				}

	  	        // ADC-Werte holen (gemittelt)
				uint16_t ch0 = ADC_GetAverage(0);
 8001840:	258e      	movs	r5, #142	; 0x8e
 8001842:	197c      	adds	r4, r7, r5
 8001844:	2000      	movs	r0, #0
 8001846:	f7ff f877 	bl	8000938 <ADC_GetAverage>
 800184a:	0003      	movs	r3, r0
 800184c:	8023      	strh	r3, [r4, #0]
				uint16_t ch1 = ADC_GetAverage(1);
 800184e:	268c      	movs	r6, #140	; 0x8c
 8001850:	19bc      	adds	r4, r7, r6
 8001852:	2001      	movs	r0, #1
 8001854:	f7ff f870 	bl	8000938 <ADC_GetAverage>
 8001858:	0003      	movs	r3, r0
 800185a:	8023      	strh	r3, [r4, #0]
				uint16_t ch2 = ADC_GetAverage(2);
 800185c:	218a      	movs	r1, #138	; 0x8a
 800185e:	187c      	adds	r4, r7, r1
 8001860:	2002      	movs	r0, #2
 8001862:	f7ff f869 	bl	8000938 <ADC_GetAverage>
 8001866:	0003      	movs	r3, r0
 8001868:	8023      	strh	r3, [r4, #0]
				uint16_t ch3 = ADC_GetAverage(3);
 800186a:	2388      	movs	r3, #136	; 0x88
 800186c:	18fc      	adds	r4, r7, r3
 800186e:	2003      	movs	r0, #3
 8001870:	f7ff f862 	bl	8000938 <ADC_GetAverage>
 8001874:	0003      	movs	r3, r0
 8001876:	8023      	strh	r3, [r4, #0]

				// CAN-Nachricht vorbereiten
				CANmsg.id  = 0x101;   // frei wählen
 8001878:	4b51      	ldr	r3, [pc, #324]	; (80019c0 <main+0x39c>)
 800187a:	2202      	movs	r2, #2
 800187c:	32ff      	adds	r2, #255	; 0xff
 800187e:	801a      	strh	r2, [r3, #0]
				CANmsg.dlc = 8;
 8001880:	4b4f      	ldr	r3, [pc, #316]	; (80019c0 <main+0x39c>)
 8001882:	2208      	movs	r2, #8
 8001884:	709a      	strb	r2, [r3, #2]
				CANmsg.data[0] = ch0 & 0xFF;
 8001886:	197b      	adds	r3, r7, r5
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	4b4c      	ldr	r3, [pc, #304]	; (80019c0 <main+0x39c>)
 800188e:	70da      	strb	r2, [r3, #3]
				CANmsg.data[1] = ch0 >> 8;
 8001890:	197b      	adds	r3, r7, r5
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	0a1b      	lsrs	r3, r3, #8
 8001896:	b29b      	uxth	r3, r3
 8001898:	b2da      	uxtb	r2, r3
 800189a:	4b49      	ldr	r3, [pc, #292]	; (80019c0 <main+0x39c>)
 800189c:	711a      	strb	r2, [r3, #4]
				CANmsg.data[2] = ch1 & 0xFF;
 800189e:	19bb      	adds	r3, r7, r6
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	4b46      	ldr	r3, [pc, #280]	; (80019c0 <main+0x39c>)
 80018a6:	715a      	strb	r2, [r3, #5]
				CANmsg.data[3] = ch1 >> 8;
 80018a8:	19bb      	adds	r3, r7, r6
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4b43      	ldr	r3, [pc, #268]	; (80019c0 <main+0x39c>)
 80018b4:	719a      	strb	r2, [r3, #6]
				CANmsg.data[4] = ch2 & 0xFF;
 80018b6:	218a      	movs	r1, #138	; 0x8a
 80018b8:	187b      	adds	r3, r7, r1
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4b40      	ldr	r3, [pc, #256]	; (80019c0 <main+0x39c>)
 80018c0:	71da      	strb	r2, [r3, #7]
				CANmsg.data[5] = ch2 >> 8;
 80018c2:	187b      	adds	r3, r7, r1
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	0a1b      	lsrs	r3, r3, #8
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	4b3c      	ldr	r3, [pc, #240]	; (80019c0 <main+0x39c>)
 80018ce:	721a      	strb	r2, [r3, #8]
				CANmsg.data[6] = ch3 & 0xFF;
 80018d0:	2188      	movs	r1, #136	; 0x88
 80018d2:	187b      	adds	r3, r7, r1
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	4b39      	ldr	r3, [pc, #228]	; (80019c0 <main+0x39c>)
 80018da:	725a      	strb	r2, [r3, #9]
				CANmsg.data[7] = ch3 >> 8;
 80018dc:	187b      	adds	r3, r7, r1
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	0a1b      	lsrs	r3, r3, #8
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4b36      	ldr	r3, [pc, #216]	; (80019c0 <main+0x39c>)
 80018e8:	729a      	strb	r2, [r3, #10]

				if (CAN_QueueMessage(&CANmsg) != HAL_OK)
 80018ea:	4b35      	ldr	r3, [pc, #212]	; (80019c0 <main+0x39c>)
 80018ec:	0018      	movs	r0, r3
 80018ee:	f7ff faaf 	bl	8000e50 <CAN_QueueMessage>
 80018f2:	1e03      	subs	r3, r0, #0
 80018f4:	d002      	beq.n	80018fc <main+0x2d8>
				{
				   Error_Register(ERROR_CAN_QUEUE_FULL);
 80018f6:	2001      	movs	r0, #1
 80018f8:	f7ff faf4 	bl	8000ee4 <Error_Register>
				}

				RGBLED_TimeoutCheck(systime, &hspi2);
 80018fc:	4a31      	ldr	r2, [pc, #196]	; (80019c4 <main+0x3a0>)
 80018fe:	2390      	movs	r3, #144	; 0x90
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	0011      	movs	r1, r2
 8001906:	0018      	movs	r0, r3
 8001908:	f7ff fd54 	bl	80013b4 <RGBLED_TimeoutCheck>

	  	      loop_end(&loop_10ms, ERROR_LOOP_OVERRUN_10MS);
 800190c:	2310      	movs	r3, #16
 800190e:	18fb      	adds	r3, r7, r3
 8001910:	3338      	adds	r3, #56	; 0x38
 8001912:	210c      	movs	r1, #12
 8001914:	0018      	movs	r0, r3
 8001916:	f7ff fe1b 	bl	8001550 <loop_end>
	  	    }

	  	    // --- 100 ms Loop ---
	  	    if (loop_due(&loop_100ms, systime)) {
 800191a:	2490      	movs	r4, #144	; 0x90
 800191c:	193b      	adds	r3, r7, r4
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	2510      	movs	r5, #16
 8001922:	197b      	adds	r3, r7, r5
 8001924:	331c      	adds	r3, #28
 8001926:	0011      	movs	r1, r2
 8001928:	0018      	movs	r0, r3
 800192a:	f7ff fdd1 	bl	80014d0 <loop_due>
 800192e:	1e03      	subs	r3, r0, #0
 8001930:	d071      	beq.n	8001a16 <main+0x3f2>
	  	        loop_start(&loop_100ms, systime);
 8001932:	193b      	adds	r3, r7, r4
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	197b      	adds	r3, r7, r5
 8001938:	331c      	adds	r3, #28
 800193a:	0011      	movs	r1, r2
 800193c:	0018      	movs	r0, r3
 800193e:	f7ff fded 	bl	800151c <loop_start>

			  ssd1306_SetCursor(0, 0);
 8001942:	2100      	movs	r1, #0
 8001944:	2000      	movs	r0, #0
 8001946:	f001 f88b 	bl	8002a60 <ssd1306_SetCursor>
			  ssd1306_WriteString("Hello World", Font_6x8, White);
 800194a:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <main+0x390>)
 800194c:	481a      	ldr	r0, [pc, #104]	; (80019b8 <main+0x394>)
 800194e:	2201      	movs	r2, #1
 8001950:	9200      	str	r2, [sp, #0]
 8001952:	6819      	ldr	r1, [r3, #0]
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f001 f856 	bl	8002a08 <ssd1306_WriteString>

			  //RGBLED_TestPattern();
			  //RGBLED_Update(&hspi2);

			  CAN_Message_t* received = CAN_GetMessage(0x321);
 800195c:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <main+0x3a4>)
 800195e:	0018      	movs	r0, r3
 8001960:	f7ff fa8c 	bl	8000e7c <CAN_GetMessage>
 8001964:	0003      	movs	r3, r0
 8001966:	2184      	movs	r1, #132	; 0x84
 8001968:	187a      	adds	r2, r7, r1
 800196a:	6013      	str	r3, [r2, #0]
			  uint16_t value = 0;
 800196c:	2096      	movs	r0, #150	; 0x96
 800196e:	183b      	adds	r3, r7, r0
 8001970:	2200      	movs	r2, #0
 8001972:	801a      	strh	r2, [r3, #0]

			  if (received && received->dlc >= 2) {
 8001974:	187b      	adds	r3, r7, r1
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d027      	beq.n	80019cc <main+0x3a8>
 800197c:	187b      	adds	r3, r7, r1
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	789b      	ldrb	r3, [r3, #2]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d922      	bls.n	80019cc <main+0x3a8>
			      value = (uint16_t)received->data[0] | ((uint16_t)received->data[1] << 8);
 8001986:	187b      	adds	r3, r7, r1
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	78db      	ldrb	r3, [r3, #3]
 800198c:	b21a      	sxth	r2, r3
 800198e:	187b      	adds	r3, r7, r1
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	791b      	ldrb	r3, [r3, #4]
 8001994:	021b      	lsls	r3, r3, #8
 8001996:	b21b      	sxth	r3, r3
 8001998:	4313      	orrs	r3, r2
 800199a:	b21a      	sxth	r2, r3
 800199c:	183b      	adds	r3, r7, r0
 800199e:	801a      	strh	r2, [r3, #0]
 80019a0:	e017      	b.n	80019d2 <main+0x3ae>
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	20000a50 	.word	0x20000a50
 80019a8:	20000bc4 	.word	0x20000bc4
 80019ac:	080012e9 	.word	0x080012e9
 80019b0:	08000625 	.word	0x08000625
 80019b4:	08007538 	.word	0x08007538
 80019b8:	08006ed8 	.word	0x08006ed8
 80019bc:	48000400 	.word	0x48000400
 80019c0:	20000c0c 	.word	0x20000c0c
 80019c4:	20000b60 	.word	0x20000b60
 80019c8:	00000321 	.word	0x00000321
			  } else {
			      Error_Register(ERROR_CAN_RX_EMPTY);
 80019cc:	200f      	movs	r0, #15
 80019ce:	f7ff fa89 	bl	8000ee4 <Error_Register>
			  }

			  char buffer[16];
			  snprintf(buffer, sizeof(buffer), "Wert: %u", value);
 80019d2:	2396      	movs	r3, #150	; 0x96
 80019d4:	18fb      	adds	r3, r7, r3
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	4a1f      	ldr	r2, [pc, #124]	; (8001a58 <main+0x434>)
 80019da:	0038      	movs	r0, r7
 80019dc:	2110      	movs	r1, #16
 80019de:	f004 fd99 	bl	8006514 <sniprintf>

			  ssd1306_SetCursor(0, 10);
 80019e2:	210a      	movs	r1, #10
 80019e4:	2000      	movs	r0, #0
 80019e6:	f001 f83b 	bl	8002a60 <ssd1306_SetCursor>
			  ssd1306_WriteString(buffer, Font_6x8, White);
 80019ea:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <main+0x438>)
 80019ec:	0038      	movs	r0, r7
 80019ee:	2201      	movs	r2, #1
 80019f0:	9200      	str	r2, [sp, #0]
 80019f2:	6819      	ldr	r1, [r3, #0]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f001 f806 	bl	8002a08 <ssd1306_WriteString>

			  Display_ErrorStatus();
 80019fc:	f7ff faba 	bl	8000f74 <Display_ErrorStatus>

			  ssd1306_UpdateScreen();
 8001a00:	f000 fec8 	bl	8002794 <ssd1306_UpdateScreen>

			  ADC_SendCurrentConfig();
 8001a04:	f7fe fe5e 	bl	80006c4 <ADC_SendCurrentConfig>

			  loop_end(&loop_100ms, ERROR_LOOP_OVERRUN_100MS);
 8001a08:	2310      	movs	r3, #16
 8001a0a:	18fb      	adds	r3, r7, r3
 8001a0c:	331c      	adds	r3, #28
 8001a0e:	210d      	movs	r1, #13
 8001a10:	0018      	movs	r0, r3
 8001a12:	f7ff fd9d 	bl	8001550 <loop_end>
		}

			// --- 200 ms Loop ---
			if (loop_due(&loop_200ms, systime)) {
 8001a16:	2590      	movs	r5, #144	; 0x90
 8001a18:	197b      	adds	r3, r7, r5
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	2410      	movs	r4, #16
 8001a1e:	193b      	adds	r3, r7, r4
 8001a20:	0011      	movs	r1, r2
 8001a22:	0018      	movs	r0, r3
 8001a24:	f7ff fd54 	bl	80014d0 <loop_due>
 8001a28:	1e03      	subs	r3, r0, #0
 8001a2a:	d100      	bne.n	8001a2e <main+0x40a>
 8001a2c:	e68f      	b.n	800174e <main+0x12a>
				loop_start(&loop_200ms, systime);
 8001a2e:	197b      	adds	r3, r7, r5
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	193b      	adds	r3, r7, r4
 8001a34:	0011      	movs	r1, r2
 8001a36:	0018      	movs	r0, r3
 8001a38:	f7ff fd70 	bl	800151c <loop_start>

	  		  HAL_GPIO_TogglePin(Heart_GPIO_Port,Heart_Pin);
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <main+0x43c>)
 8001a3e:	2101      	movs	r1, #1
 8001a40:	0018      	movs	r0, r3
 8001a42:	f003 f8fc 	bl	8004c3e <HAL_GPIO_TogglePin>
	  		  Error_LED_Update();  // LED-Steuerung hier
 8001a46:	f7ff fac9 	bl	8000fdc <Error_LED_Update>

	  		loop_end(&loop_200ms, ERROR_LOOP_OVERRUN_200MS);
 8001a4a:	193b      	adds	r3, r7, r4
 8001a4c:	210e      	movs	r1, #14
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f7ff fd7e 	bl	8001550 <loop_end>
  {
 8001a54:	e67b      	b.n	800174e <main+0x12a>
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	08006ee4 	.word	0x08006ee4
 8001a5c:	08007538 	.word	0x08007538
 8001a60:	48000800 	.word	0x48000800

08001a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a64:	b590      	push	{r4, r7, lr}
 8001a66:	b093      	sub	sp, #76	; 0x4c
 8001a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a6a:	2414      	movs	r4, #20
 8001a6c:	193b      	adds	r3, r7, r4
 8001a6e:	0018      	movs	r0, r3
 8001a70:	2334      	movs	r3, #52	; 0x34
 8001a72:	001a      	movs	r2, r3
 8001a74:	2100      	movs	r1, #0
 8001a76:	f004 fd81 	bl	800657c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	2310      	movs	r3, #16
 8001a80:	001a      	movs	r2, r3
 8001a82:	2100      	movs	r1, #0
 8001a84:	f004 fd7a 	bl	800657c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a88:	0021      	movs	r1, r4
 8001a8a:	187b      	adds	r3, r7, r1
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a90:	187b      	adds	r3, r7, r1
 8001a92:	2201      	movs	r2, #1
 8001a94:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a96:	187b      	adds	r3, r7, r1
 8001a98:	2202      	movs	r2, #2
 8001a9a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a9c:	187b      	adds	r3, r7, r1
 8001a9e:	2280      	movs	r2, #128	; 0x80
 8001aa0:	0252      	lsls	r2, r2, #9
 8001aa2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8001aa4:	187b      	adds	r3, r7, r1
 8001aa6:	2280      	movs	r2, #128	; 0x80
 8001aa8:	02d2      	lsls	r2, r2, #11
 8001aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001aac:	187b      	adds	r3, r7, r1
 8001aae:	2200      	movs	r2, #0
 8001ab0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab2:	187b      	adds	r3, r7, r1
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f003 f8dd 	bl	8004c74 <HAL_RCC_OscConfig>
 8001aba:	1e03      	subs	r3, r0, #0
 8001abc:	d001      	beq.n	8001ac2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001abe:	f000 fadd 	bl	800207c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	2207      	movs	r2, #7
 8001ac6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	2202      	movs	r2, #2
 8001acc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	2101      	movs	r1, #1
 8001ade:	0018      	movs	r0, r3
 8001ae0:	f003 fc4e 	bl	8005380 <HAL_RCC_ClockConfig>
 8001ae4:	1e03      	subs	r3, r0, #0
 8001ae6:	d001      	beq.n	8001aec <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001ae8:	f000 fac8 	bl	800207c <Error_Handler>
  }
}
 8001aec:	46c0      	nop			; (mov r8, r8)
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b013      	add	sp, #76	; 0x4c
 8001af2:	bd90      	pop	{r4, r7, pc}

08001af4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	0018      	movs	r0, r3
 8001afe:	230c      	movs	r3, #12
 8001b00:	001a      	movs	r2, r3
 8001b02:	2100      	movs	r1, #0
 8001b04:	f004 fd3a 	bl	800657c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001b08:	4b39      	ldr	r3, [pc, #228]	; (8001bf0 <MX_ADC_Init+0xfc>)
 8001b0a:	4a3a      	ldr	r2, [pc, #232]	; (8001bf4 <MX_ADC_Init+0x100>)
 8001b0c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b0e:	4b38      	ldr	r3, [pc, #224]	; (8001bf0 <MX_ADC_Init+0xfc>)
 8001b10:	2280      	movs	r2, #128	; 0x80
 8001b12:	0612      	lsls	r2, r2, #24
 8001b14:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <MX_ADC_Init+0xfc>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b1c:	4b34      	ldr	r3, [pc, #208]	; (8001bf0 <MX_ADC_Init+0xfc>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <MX_ADC_Init+0xfc>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b28:	4b31      	ldr	r3, [pc, #196]	; (8001bf0 <MX_ADC_Init+0xfc>)
 8001b2a:	2204      	movs	r2, #4
 8001b2c:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001b2e:	4b30      	ldr	r3, [pc, #192]	; (8001bf0 <MX_ADC_Init+0xfc>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001b34:	4b2e      	ldr	r3, [pc, #184]	; (8001bf0 <MX_ADC_Init+0xfc>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001b3a:	4b2d      	ldr	r3, [pc, #180]	; (8001bf0 <MX_ADC_Init+0xfc>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001b40:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <MX_ADC_Init+0xfc>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b46:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <MX_ADC_Init+0xfc>)
 8001b48:	22c2      	movs	r2, #194	; 0xc2
 8001b4a:	32ff      	adds	r2, #255	; 0xff
 8001b4c:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b4e:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <MX_ADC_Init+0xfc>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8001b54:	4b26      	ldr	r3, [pc, #152]	; (8001bf0 <MX_ADC_Init+0xfc>)
 8001b56:	2224      	movs	r2, #36	; 0x24
 8001b58:	2101      	movs	r1, #1
 8001b5a:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001b5c:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <MX_ADC_Init+0xfc>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001b62:	4b23      	ldr	r3, [pc, #140]	; (8001bf0 <MX_ADC_Init+0xfc>)
 8001b64:	0018      	movs	r0, r3
 8001b66:	f001 f85b 	bl	8002c20 <HAL_ADC_Init>
 8001b6a:	1e03      	subs	r3, r0, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 8001b6e:	f000 fa85 	bl	800207c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b72:	1d3b      	adds	r3, r7, #4
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	2280      	movs	r2, #128	; 0x80
 8001b7c:	0152      	lsls	r2, r2, #5
 8001b7e:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	2207      	movs	r2, #7
 8001b84:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001b86:	1d3a      	adds	r2, r7, #4
 8001b88:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <MX_ADC_Init+0xfc>)
 8001b8a:	0011      	movs	r1, r2
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f001 fabd 	bl	800310c <HAL_ADC_ConfigChannel>
 8001b92:	1e03      	subs	r3, r0, #0
 8001b94:	d001      	beq.n	8001b9a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8001b96:	f000 fa71 	bl	800207c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001ba0:	1d3a      	adds	r2, r7, #4
 8001ba2:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <MX_ADC_Init+0xfc>)
 8001ba4:	0011      	movs	r1, r2
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	f001 fab0 	bl	800310c <HAL_ADC_ConfigChannel>
 8001bac:	1e03      	subs	r3, r0, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8001bb0:	f000 fa64 	bl	800207c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001bba:	1d3a      	adds	r2, r7, #4
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <MX_ADC_Init+0xfc>)
 8001bbe:	0011      	movs	r1, r2
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f001 faa3 	bl	800310c <HAL_ADC_ConfigChannel>
 8001bc6:	1e03      	subs	r3, r0, #0
 8001bc8:	d001      	beq.n	8001bce <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8001bca:	f000 fa57 	bl	800207c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001bd4:	1d3a      	adds	r2, r7, #4
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <MX_ADC_Init+0xfc>)
 8001bd8:	0011      	movs	r1, r2
 8001bda:	0018      	movs	r0, r3
 8001bdc:	f001 fa96 	bl	800310c <HAL_ADC_ConfigChannel>
 8001be0:	1e03      	subs	r3, r0, #0
 8001be2:	d001      	beq.n	8001be8 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8001be4:	f000 fa4a 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001be8:	46c0      	nop			; (mov r8, r8)
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b004      	add	sp, #16
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000a50 	.word	0x20000a50
 8001bf4:	40012400 	.word	0x40012400

08001bf8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001bfc:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <MX_CAN_Init+0x6c>)
 8001bfe:	4a1a      	ldr	r2, [pc, #104]	; (8001c68 <MX_CAN_Init+0x70>)
 8001c00:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8001c02:	4b18      	ldr	r3, [pc, #96]	; (8001c64 <MX_CAN_Init+0x6c>)
 8001c04:	2204      	movs	r2, #4
 8001c06:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001c08:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <MX_CAN_Init+0x6c>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <MX_CAN_Init+0x6c>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001c14:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <MX_CAN_Init+0x6c>)
 8001c16:	22a0      	movs	r2, #160	; 0xa0
 8001c18:	02d2      	lsls	r2, r2, #11
 8001c1a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8001c1c:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <MX_CAN_Init+0x6c>)
 8001c1e:	2280      	movs	r2, #128	; 0x80
 8001c20:	03d2      	lsls	r2, r2, #15
 8001c22:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001c24:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <MX_CAN_Init+0x6c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <MX_CAN_Init+0x6c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001c30:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <MX_CAN_Init+0x6c>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001c36:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <MX_CAN_Init+0x6c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001c3c:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <MX_CAN_Init+0x6c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001c42:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <MX_CAN_Init+0x6c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <MX_CAN_Init+0x6c>)
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	f001 fd26 	bl	800369c <HAL_CAN_Init>
 8001c50:	1e03      	subs	r3, r0, #0
 8001c52:	d001      	beq.n	8001c58 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001c54:	f000 fa12 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_Init();
 8001c58:	f7fe ff98 	bl	8000b8c <CAN_Init>
  /* USER CODE END CAN_Init 2 */

}
 8001c5c:	46c0      	nop			; (mov r8, r8)
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	20000ad4 	.word	0x20000ad4
 8001c68:	40006400 	.word	0x40006400

08001c6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c70:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <MX_SPI1_Init+0x74>)
 8001c72:	4a1c      	ldr	r2, [pc, #112]	; (8001ce4 <MX_SPI1_Init+0x78>)
 8001c74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c76:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <MX_SPI1_Init+0x74>)
 8001c78:	2282      	movs	r2, #130	; 0x82
 8001c7a:	0052      	lsls	r2, r2, #1
 8001c7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c7e:	4b18      	ldr	r3, [pc, #96]	; (8001ce0 <MX_SPI1_Init+0x74>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c84:	4b16      	ldr	r3, [pc, #88]	; (8001ce0 <MX_SPI1_Init+0x74>)
 8001c86:	22e0      	movs	r2, #224	; 0xe0
 8001c88:	00d2      	lsls	r2, r2, #3
 8001c8a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001c8c:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <MX_SPI1_Init+0x74>)
 8001c8e:	2202      	movs	r2, #2
 8001c90:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001c92:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <MX_SPI1_Init+0x74>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c98:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <MX_SPI1_Init+0x74>)
 8001c9a:	2280      	movs	r2, #128	; 0x80
 8001c9c:	0092      	lsls	r2, r2, #2
 8001c9e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <MX_SPI1_Init+0x74>)
 8001ca2:	2218      	movs	r2, #24
 8001ca4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <MX_SPI1_Init+0x74>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <MX_SPI1_Init+0x74>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <MX_SPI1_Init+0x74>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001cb8:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <MX_SPI1_Init+0x74>)
 8001cba:	2207      	movs	r2, #7
 8001cbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cbe:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <MX_SPI1_Init+0x74>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <MX_SPI1_Init+0x74>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cca:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <MX_SPI1_Init+0x74>)
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f003 fca5 	bl	800561c <HAL_SPI_Init>
 8001cd2:	1e03      	subs	r3, r0, #0
 8001cd4:	d001      	beq.n	8001cda <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001cd6:	f000 f9d1 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20000afc 	.word	0x20000afc
 8001ce4:	40013000 	.word	0x40013000

08001ce8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001cec:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <MX_SPI2_Init+0x74>)
 8001cee:	4a1c      	ldr	r2, [pc, #112]	; (8001d60 <MX_SPI2_Init+0x78>)
 8001cf0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001cf2:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <MX_SPI2_Init+0x74>)
 8001cf4:	2282      	movs	r2, #130	; 0x82
 8001cf6:	0052      	lsls	r2, r2, #1
 8001cf8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001cfa:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <MX_SPI2_Init+0x74>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d00:	4b16      	ldr	r3, [pc, #88]	; (8001d5c <MX_SPI2_Init+0x74>)
 8001d02:	22e0      	movs	r2, #224	; 0xe0
 8001d04:	00d2      	lsls	r2, r2, #3
 8001d06:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d08:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <MX_SPI2_Init+0x74>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d0e:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <MX_SPI2_Init+0x74>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <MX_SPI2_Init+0x74>)
 8001d16:	2280      	movs	r2, #128	; 0x80
 8001d18:	0092      	lsls	r2, r2, #2
 8001d1a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <MX_SPI2_Init+0x74>)
 8001d1e:	2210      	movs	r2, #16
 8001d20:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <MX_SPI2_Init+0x74>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <MX_SPI2_Init+0x74>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <MX_SPI2_Init+0x74>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001d34:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <MX_SPI2_Init+0x74>)
 8001d36:	2207      	movs	r2, #7
 8001d38:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d3a:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <MX_SPI2_Init+0x74>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <MX_SPI2_Init+0x74>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d46:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <MX_SPI2_Init+0x74>)
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f003 fc67 	bl	800561c <HAL_SPI_Init>
 8001d4e:	1e03      	subs	r3, r0, #0
 8001d50:	d001      	beq.n	8001d56 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001d52:	f000 f993 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000b60 	.word	0x20000b60
 8001d60:	40003800 	.word	0x40003800

08001d64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d6a:	2308      	movs	r3, #8
 8001d6c:	18fb      	adds	r3, r7, r3
 8001d6e:	0018      	movs	r0, r3
 8001d70:	2310      	movs	r3, #16
 8001d72:	001a      	movs	r2, r3
 8001d74:	2100      	movs	r1, #0
 8001d76:	f004 fc01 	bl	800657c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d7a:	003b      	movs	r3, r7
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	2308      	movs	r3, #8
 8001d80:	001a      	movs	r2, r3
 8001d82:	2100      	movs	r1, #0
 8001d84:	f004 fbfa 	bl	800657c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d88:	4b1f      	ldr	r3, [pc, #124]	; (8001e08 <MX_TIM2_Init+0xa4>)
 8001d8a:	2280      	movs	r2, #128	; 0x80
 8001d8c:	05d2      	lsls	r2, r2, #23
 8001d8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8001d90:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <MX_TIM2_Init+0xa4>)
 8001d92:	222f      	movs	r2, #47	; 0x2f
 8001d94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d96:	4b1c      	ldr	r3, [pc, #112]	; (8001e08 <MX_TIM2_Init+0xa4>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d9c:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <MX_TIM2_Init+0xa4>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	4252      	negs	r2, r2
 8001da2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da4:	4b18      	ldr	r3, [pc, #96]	; (8001e08 <MX_TIM2_Init+0xa4>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001daa:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <MX_TIM2_Init+0xa4>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001db0:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <MX_TIM2_Init+0xa4>)
 8001db2:	0018      	movs	r0, r3
 8001db4:	f004 f8c8 	bl	8005f48 <HAL_TIM_Base_Init>
 8001db8:	1e03      	subs	r3, r0, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001dbc:	f000 f95e 	bl	800207c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dc0:	2108      	movs	r1, #8
 8001dc2:	187b      	adds	r3, r7, r1
 8001dc4:	2280      	movs	r2, #128	; 0x80
 8001dc6:	0152      	lsls	r2, r2, #5
 8001dc8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dca:	187a      	adds	r2, r7, r1
 8001dcc:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <MX_TIM2_Init+0xa4>)
 8001dce:	0011      	movs	r1, r2
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f004 f953 	bl	800607c <HAL_TIM_ConfigClockSource>
 8001dd6:	1e03      	subs	r3, r0, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001dda:	f000 f94f 	bl	800207c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dde:	003b      	movs	r3, r7
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de4:	003b      	movs	r3, r7
 8001de6:	2200      	movs	r2, #0
 8001de8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dea:	003a      	movs	r2, r7
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <MX_TIM2_Init+0xa4>)
 8001dee:	0011      	movs	r1, r2
 8001df0:	0018      	movs	r0, r3
 8001df2:	f004 fb31 	bl	8006458 <HAL_TIMEx_MasterConfigSynchronization>
 8001df6:	1e03      	subs	r3, r0, #0
 8001df8:	d001      	beq.n	8001dfe <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001dfa:	f000 f93f 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	46bd      	mov	sp, r7
 8001e02:	b006      	add	sp, #24
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	20000bc4 	.word	0x20000bc4

08001e0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e12:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <MX_DMA_Init+0x38>)
 8001e14:	695a      	ldr	r2, [r3, #20]
 8001e16:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <MX_DMA_Init+0x38>)
 8001e18:	2101      	movs	r1, #1
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	615a      	str	r2, [r3, #20]
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <MX_DMA_Init+0x38>)
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	2201      	movs	r2, #1
 8001e24:	4013      	ands	r3, r2
 8001e26:	607b      	str	r3, [r7, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	2009      	movs	r0, #9
 8001e30:	f002 fb60 	bl	80044f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e34:	2009      	movs	r0, #9
 8001e36:	f002 fb72 	bl	800451e <HAL_NVIC_EnableIRQ>

}
 8001e3a:	46c0      	nop			; (mov r8, r8)
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	b002      	add	sp, #8
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	40021000 	.word	0x40021000

08001e48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e48:	b590      	push	{r4, r7, lr}
 8001e4a:	b08b      	sub	sp, #44	; 0x2c
 8001e4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4e:	2414      	movs	r4, #20
 8001e50:	193b      	adds	r3, r7, r4
 8001e52:	0018      	movs	r0, r3
 8001e54:	2314      	movs	r3, #20
 8001e56:	001a      	movs	r2, r3
 8001e58:	2100      	movs	r1, #0
 8001e5a:	f004 fb8f 	bl	800657c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e5e:	4b7f      	ldr	r3, [pc, #508]	; (800205c <MX_GPIO_Init+0x214>)
 8001e60:	695a      	ldr	r2, [r3, #20]
 8001e62:	4b7e      	ldr	r3, [pc, #504]	; (800205c <MX_GPIO_Init+0x214>)
 8001e64:	2180      	movs	r1, #128	; 0x80
 8001e66:	03c9      	lsls	r1, r1, #15
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	615a      	str	r2, [r3, #20]
 8001e6c:	4b7b      	ldr	r3, [pc, #492]	; (800205c <MX_GPIO_Init+0x214>)
 8001e6e:	695a      	ldr	r2, [r3, #20]
 8001e70:	2380      	movs	r3, #128	; 0x80
 8001e72:	03db      	lsls	r3, r3, #15
 8001e74:	4013      	ands	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e7a:	4b78      	ldr	r3, [pc, #480]	; (800205c <MX_GPIO_Init+0x214>)
 8001e7c:	695a      	ldr	r2, [r3, #20]
 8001e7e:	4b77      	ldr	r3, [pc, #476]	; (800205c <MX_GPIO_Init+0x214>)
 8001e80:	2180      	movs	r1, #128	; 0x80
 8001e82:	0309      	lsls	r1, r1, #12
 8001e84:	430a      	orrs	r2, r1
 8001e86:	615a      	str	r2, [r3, #20]
 8001e88:	4b74      	ldr	r3, [pc, #464]	; (800205c <MX_GPIO_Init+0x214>)
 8001e8a:	695a      	ldr	r2, [r3, #20]
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	031b      	lsls	r3, r3, #12
 8001e90:	4013      	ands	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e96:	4b71      	ldr	r3, [pc, #452]	; (800205c <MX_GPIO_Init+0x214>)
 8001e98:	695a      	ldr	r2, [r3, #20]
 8001e9a:	4b70      	ldr	r3, [pc, #448]	; (800205c <MX_GPIO_Init+0x214>)
 8001e9c:	2180      	movs	r1, #128	; 0x80
 8001e9e:	0289      	lsls	r1, r1, #10
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	615a      	str	r2, [r3, #20]
 8001ea4:	4b6d      	ldr	r3, [pc, #436]	; (800205c <MX_GPIO_Init+0x214>)
 8001ea6:	695a      	ldr	r2, [r3, #20]
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	029b      	lsls	r3, r3, #10
 8001eac:	4013      	ands	r3, r2
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb2:	4b6a      	ldr	r3, [pc, #424]	; (800205c <MX_GPIO_Init+0x214>)
 8001eb4:	695a      	ldr	r2, [r3, #20]
 8001eb6:	4b69      	ldr	r3, [pc, #420]	; (800205c <MX_GPIO_Init+0x214>)
 8001eb8:	2180      	movs	r1, #128	; 0x80
 8001eba:	02c9      	lsls	r1, r1, #11
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	615a      	str	r2, [r3, #20]
 8001ec0:	4b66      	ldr	r3, [pc, #408]	; (800205c <MX_GPIO_Init+0x214>)
 8001ec2:	695a      	ldr	r2, [r3, #20]
 8001ec4:	2380      	movs	r3, #128	; 0x80
 8001ec6:	02db      	lsls	r3, r3, #11
 8001ec8:	4013      	ands	r3, r2
 8001eca:	607b      	str	r3, [r7, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ece:	4b63      	ldr	r3, [pc, #396]	; (800205c <MX_GPIO_Init+0x214>)
 8001ed0:	695a      	ldr	r2, [r3, #20]
 8001ed2:	4b62      	ldr	r3, [pc, #392]	; (800205c <MX_GPIO_Init+0x214>)
 8001ed4:	2180      	movs	r1, #128	; 0x80
 8001ed6:	0349      	lsls	r1, r1, #13
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	615a      	str	r2, [r3, #20]
 8001edc:	4b5f      	ldr	r3, [pc, #380]	; (800205c <MX_GPIO_Init+0x214>)
 8001ede:	695a      	ldr	r2, [r3, #20]
 8001ee0:	2380      	movs	r3, #128	; 0x80
 8001ee2:	035b      	lsls	r3, r3, #13
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Heart_Pin|Error_Pin|nRES_Display_Pin|GPIO3_12VOut_Pin
 8001eea:	495d      	ldr	r1, [pc, #372]	; (8002060 <MX_GPIO_Init+0x218>)
 8001eec:	4b5d      	ldr	r3, [pc, #372]	; (8002064 <MX_GPIO_Init+0x21c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	f002 fe87 	bl	8004c04 <HAL_GPIO_WritePin>
                          |GPIO2_5VOut_Pin|GPIO2_12VOut_Pin|GPIO6_5VOut_Pin|GPIO6_12VOut_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nCS_Display_Pin|D_nC_Display_Pin|GPIO1_5VOut_Pin|GPIO1_12VOut_Pin, GPIO_PIN_RESET);
 8001ef6:	23ca      	movs	r3, #202	; 0xca
 8001ef8:	00d9      	lsls	r1, r3, #3
 8001efa:	2390      	movs	r3, #144	; 0x90
 8001efc:	05db      	lsls	r3, r3, #23
 8001efe:	2200      	movs	r2, #0
 8001f00:	0018      	movs	r0, r3
 8001f02:	f002 fe7f 	bl	8004c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ADC2_NTC_CTRL_Pin|ADC1_NTC_CTRL_Pin|ADC0_NTC_CTRL_Pin|ADC1_CTRL_Pin
 8001f06:	4958      	ldr	r1, [pc, #352]	; (8002068 <MX_GPIO_Init+0x220>)
 8001f08:	4b58      	ldr	r3, [pc, #352]	; (800206c <MX_GPIO_Init+0x224>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f002 fe79 	bl	8004c04 <HAL_GPIO_WritePin>
                          |GPIO5_12VOut_Pin|GPIO4_5VOut_Pin|GPIO4_12VOut_Pin|ADC3_NTC_CTRL_Pin
                          |ADC0_CTRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Heart_Pin Error_Pin GPIO3_12VOut_Pin GPIO2_5VOut_Pin
                           GPIO2_12VOut_Pin GPIO6_5VOut_Pin GPIO6_12VOut_Pin */
  GPIO_InitStruct.Pin = Heart_Pin|Error_Pin|GPIO3_12VOut_Pin|GPIO2_5VOut_Pin
 8001f12:	193b      	adds	r3, r7, r4
 8001f14:	4a56      	ldr	r2, [pc, #344]	; (8002070 <MX_GPIO_Init+0x228>)
 8001f16:	601a      	str	r2, [r3, #0]
                          |GPIO2_12VOut_Pin|GPIO6_5VOut_Pin|GPIO6_12VOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f18:	193b      	adds	r3, r7, r4
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	193b      	adds	r3, r7, r4
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f24:	193b      	adds	r3, r7, r4
 8001f26:	2200      	movs	r2, #0
 8001f28:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f2a:	193b      	adds	r3, r7, r4
 8001f2c:	4a4d      	ldr	r2, [pc, #308]	; (8002064 <MX_GPIO_Init+0x21c>)
 8001f2e:	0019      	movs	r1, r3
 8001f30:	0010      	movs	r0, r2
 8001f32:	f002 fcef 	bl	8004914 <HAL_GPIO_Init>

  /*Configure GPIO pins : nCS_Display_Pin D_nC_Display_Pin */
  GPIO_InitStruct.Pin = nCS_Display_Pin|D_nC_Display_Pin;
 8001f36:	193b      	adds	r3, r7, r4
 8001f38:	2250      	movs	r2, #80	; 0x50
 8001f3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f3c:	193b      	adds	r3, r7, r4
 8001f3e:	2201      	movs	r2, #1
 8001f40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	193b      	adds	r3, r7, r4
 8001f44:	2200      	movs	r2, #0
 8001f46:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f48:	193b      	adds	r3, r7, r4
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4e:	193a      	adds	r2, r7, r4
 8001f50:	2390      	movs	r3, #144	; 0x90
 8001f52:	05db      	lsls	r3, r3, #23
 8001f54:	0011      	movs	r1, r2
 8001f56:	0018      	movs	r0, r3
 8001f58:	f002 fcdc 	bl	8004914 <HAL_GPIO_Init>

  /*Configure GPIO pin : nRES_Display_Pin */
  GPIO_InitStruct.Pin = nRES_Display_Pin;
 8001f5c:	193b      	adds	r3, r7, r4
 8001f5e:	2210      	movs	r2, #16
 8001f60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f62:	193b      	adds	r3, r7, r4
 8001f64:	2201      	movs	r2, #1
 8001f66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	193b      	adds	r3, r7, r4
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f6e:	193b      	adds	r3, r7, r4
 8001f70:	2203      	movs	r2, #3
 8001f72:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(nRES_Display_GPIO_Port, &GPIO_InitStruct);
 8001f74:	193b      	adds	r3, r7, r4
 8001f76:	4a3b      	ldr	r2, [pc, #236]	; (8002064 <MX_GPIO_Init+0x21c>)
 8001f78:	0019      	movs	r1, r3
 8001f7a:	0010      	movs	r0, r2
 8001f7c:	f002 fcca 	bl	8004914 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC2_NTC_CTRL_Pin ADC1_NTC_CTRL_Pin ADC0_NTC_CTRL_Pin ADC1_CTRL_Pin
                           ADC2_CTRL_Pin ADC3_CTRL_Pin GPIO3_5VOut_Pin GPIO5_5VOut_Pin
                           GPIO5_12VOut_Pin GPIO4_5VOut_Pin GPIO4_12VOut_Pin ADC3_NTC_CTRL_Pin
                           ADC0_CTRL_Pin */
  GPIO_InitStruct.Pin = ADC2_NTC_CTRL_Pin|ADC1_NTC_CTRL_Pin|ADC0_NTC_CTRL_Pin|ADC1_CTRL_Pin
 8001f80:	193b      	adds	r3, r7, r4
 8001f82:	4a39      	ldr	r2, [pc, #228]	; (8002068 <MX_GPIO_Init+0x220>)
 8001f84:	601a      	str	r2, [r3, #0]
                          |ADC2_CTRL_Pin|ADC3_CTRL_Pin|GPIO3_5VOut_Pin|GPIO5_5VOut_Pin
                          |GPIO5_12VOut_Pin|GPIO4_5VOut_Pin|GPIO4_12VOut_Pin|ADC3_NTC_CTRL_Pin
                          |ADC0_CTRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f86:	193b      	adds	r3, r7, r4
 8001f88:	2201      	movs	r2, #1
 8001f8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	193b      	adds	r3, r7, r4
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	193b      	adds	r3, r7, r4
 8001f94:	2200      	movs	r2, #0
 8001f96:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f98:	193b      	adds	r3, r7, r4
 8001f9a:	4a34      	ldr	r2, [pc, #208]	; (800206c <MX_GPIO_Init+0x224>)
 8001f9c:	0019      	movs	r1, r3
 8001f9e:	0010      	movs	r0, r2
 8001fa0:	f002 fcb8 	bl	8004914 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO3_In_Pin GPIO4_In_Pin */
  GPIO_InitStruct.Pin = GPIO3_In_Pin|GPIO4_In_Pin;
 8001fa4:	193b      	adds	r3, r7, r4
 8001fa6:	4a33      	ldr	r2, [pc, #204]	; (8002074 <MX_GPIO_Init+0x22c>)
 8001fa8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001faa:	193b      	adds	r3, r7, r4
 8001fac:	2200      	movs	r2, #0
 8001fae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	193b      	adds	r3, r7, r4
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb6:	193b      	adds	r3, r7, r4
 8001fb8:	4a2c      	ldr	r2, [pc, #176]	; (800206c <MX_GPIO_Init+0x224>)
 8001fba:	0019      	movs	r1, r3
 8001fbc:	0010      	movs	r0, r2
 8001fbe:	f002 fca9 	bl	8004914 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO2_In_Pin GPIO6_In_Pin */
  GPIO_InitStruct.Pin = GPIO2_In_Pin|GPIO6_In_Pin;
 8001fc2:	0021      	movs	r1, r4
 8001fc4:	187b      	adds	r3, r7, r1
 8001fc6:	2290      	movs	r2, #144	; 0x90
 8001fc8:	00d2      	lsls	r2, r2, #3
 8001fca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fcc:	000c      	movs	r4, r1
 8001fce:	193b      	adds	r3, r7, r4
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	193b      	adds	r3, r7, r4
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fda:	193b      	adds	r3, r7, r4
 8001fdc:	4a21      	ldr	r2, [pc, #132]	; (8002064 <MX_GPIO_Init+0x21c>)
 8001fde:	0019      	movs	r1, r3
 8001fe0:	0010      	movs	r0, r2
 8001fe2:	f002 fc97 	bl	8004914 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO1_In_Pin */
  GPIO_InitStruct.Pin = GPIO1_In_Pin;
 8001fe6:	193b      	adds	r3, r7, r4
 8001fe8:	2280      	movs	r2, #128	; 0x80
 8001fea:	0052      	lsls	r2, r2, #1
 8001fec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fee:	193b      	adds	r3, r7, r4
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	193b      	adds	r3, r7, r4
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO1_In_GPIO_Port, &GPIO_InitStruct);
 8001ffa:	193a      	adds	r2, r7, r4
 8001ffc:	2390      	movs	r3, #144	; 0x90
 8001ffe:	05db      	lsls	r3, r3, #23
 8002000:	0011      	movs	r1, r2
 8002002:	0018      	movs	r0, r3
 8002004:	f002 fc86 	bl	8004914 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO1_5VOut_Pin GPIO1_12VOut_Pin */
  GPIO_InitStruct.Pin = GPIO1_5VOut_Pin|GPIO1_12VOut_Pin;
 8002008:	0021      	movs	r1, r4
 800200a:	187b      	adds	r3, r7, r1
 800200c:	22c0      	movs	r2, #192	; 0xc0
 800200e:	00d2      	lsls	r2, r2, #3
 8002010:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002012:	000c      	movs	r4, r1
 8002014:	193b      	adds	r3, r7, r4
 8002016:	2201      	movs	r2, #1
 8002018:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	193b      	adds	r3, r7, r4
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002020:	193b      	adds	r3, r7, r4
 8002022:	2200      	movs	r2, #0
 8002024:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002026:	193a      	adds	r2, r7, r4
 8002028:	2390      	movs	r3, #144	; 0x90
 800202a:	05db      	lsls	r3, r3, #23
 800202c:	0011      	movs	r1, r2
 800202e:	0018      	movs	r0, r3
 8002030:	f002 fc70 	bl	8004914 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO5_In_Pin */
  GPIO_InitStruct.Pin = GPIO5_In_Pin;
 8002034:	193b      	adds	r3, r7, r4
 8002036:	2204      	movs	r2, #4
 8002038:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800203a:	193b      	adds	r3, r7, r4
 800203c:	2200      	movs	r2, #0
 800203e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	193b      	adds	r3, r7, r4
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO5_In_GPIO_Port, &GPIO_InitStruct);
 8002046:	193b      	adds	r3, r7, r4
 8002048:	4a0b      	ldr	r2, [pc, #44]	; (8002078 <MX_GPIO_Init+0x230>)
 800204a:	0019      	movs	r1, r3
 800204c:	0010      	movs	r0, r2
 800204e:	f002 fc61 	bl	8004914 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002052:	46c0      	nop			; (mov r8, r8)
 8002054:	46bd      	mov	sp, r7
 8002056:	b00b      	add	sp, #44	; 0x2c
 8002058:	bd90      	pop	{r4, r7, pc}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	40021000 	.word	0x40021000
 8002060:	00001b53 	.word	0x00001b53
 8002064:	48000800 	.word	0x48000800
 8002068:	0000bbdf 	.word	0x0000bbdf
 800206c:	48000400 	.word	0x48000400
 8002070:	00001b43 	.word	0x00001b43
 8002074:	00004020 	.word	0x00004020
 8002078:	48000c00 	.word	0x48000c00

0800207c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002080:	b672      	cpsid	i
}
 8002082:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002084:	e7fe      	b.n	8002084 <Error_Handler+0x8>
	...

08002088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800208e:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <HAL_MspInit+0x44>)
 8002090:	699a      	ldr	r2, [r3, #24]
 8002092:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <HAL_MspInit+0x44>)
 8002094:	2101      	movs	r1, #1
 8002096:	430a      	orrs	r2, r1
 8002098:	619a      	str	r2, [r3, #24]
 800209a:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <HAL_MspInit+0x44>)
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	2201      	movs	r2, #1
 80020a0:	4013      	ands	r3, r2
 80020a2:	607b      	str	r3, [r7, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <HAL_MspInit+0x44>)
 80020a8:	69da      	ldr	r2, [r3, #28]
 80020aa:	4b08      	ldr	r3, [pc, #32]	; (80020cc <HAL_MspInit+0x44>)
 80020ac:	2180      	movs	r1, #128	; 0x80
 80020ae:	0549      	lsls	r1, r1, #21
 80020b0:	430a      	orrs	r2, r1
 80020b2:	61da      	str	r2, [r3, #28]
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <HAL_MspInit+0x44>)
 80020b6:	69da      	ldr	r2, [r3, #28]
 80020b8:	2380      	movs	r3, #128	; 0x80
 80020ba:	055b      	lsls	r3, r3, #21
 80020bc:	4013      	ands	r3, r2
 80020be:	603b      	str	r3, [r7, #0]
 80020c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	46bd      	mov	sp, r7
 80020c6:	b002      	add	sp, #8
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	40021000 	.word	0x40021000

080020d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020d0:	b590      	push	{r4, r7, lr}
 80020d2:	b08b      	sub	sp, #44	; 0x2c
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d8:	2414      	movs	r4, #20
 80020da:	193b      	adds	r3, r7, r4
 80020dc:	0018      	movs	r0, r3
 80020de:	2314      	movs	r3, #20
 80020e0:	001a      	movs	r2, r3
 80020e2:	2100      	movs	r1, #0
 80020e4:	f004 fa4a 	bl	800657c <memset>
  if(hadc->Instance==ADC1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a31      	ldr	r2, [pc, #196]	; (80021b4 <HAL_ADC_MspInit+0xe4>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d15b      	bne.n	80021aa <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020f2:	4b31      	ldr	r3, [pc, #196]	; (80021b8 <HAL_ADC_MspInit+0xe8>)
 80020f4:	699a      	ldr	r2, [r3, #24]
 80020f6:	4b30      	ldr	r3, [pc, #192]	; (80021b8 <HAL_ADC_MspInit+0xe8>)
 80020f8:	2180      	movs	r1, #128	; 0x80
 80020fa:	0089      	lsls	r1, r1, #2
 80020fc:	430a      	orrs	r2, r1
 80020fe:	619a      	str	r2, [r3, #24]
 8002100:	4b2d      	ldr	r3, [pc, #180]	; (80021b8 <HAL_ADC_MspInit+0xe8>)
 8002102:	699a      	ldr	r2, [r3, #24]
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4013      	ands	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210e:	4b2a      	ldr	r3, [pc, #168]	; (80021b8 <HAL_ADC_MspInit+0xe8>)
 8002110:	695a      	ldr	r2, [r3, #20]
 8002112:	4b29      	ldr	r3, [pc, #164]	; (80021b8 <HAL_ADC_MspInit+0xe8>)
 8002114:	2180      	movs	r1, #128	; 0x80
 8002116:	0289      	lsls	r1, r1, #10
 8002118:	430a      	orrs	r2, r1
 800211a:	615a      	str	r2, [r3, #20]
 800211c:	4b26      	ldr	r3, [pc, #152]	; (80021b8 <HAL_ADC_MspInit+0xe8>)
 800211e:	695a      	ldr	r2, [r3, #20]
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	029b      	lsls	r3, r3, #10
 8002124:	4013      	ands	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800212a:	193b      	adds	r3, r7, r4
 800212c:	220f      	movs	r2, #15
 800212e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002130:	193b      	adds	r3, r7, r4
 8002132:	2203      	movs	r2, #3
 8002134:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	193b      	adds	r3, r7, r4
 8002138:	2200      	movs	r2, #0
 800213a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213c:	193a      	adds	r2, r7, r4
 800213e:	2390      	movs	r3, #144	; 0x90
 8002140:	05db      	lsls	r3, r3, #23
 8002142:	0011      	movs	r1, r2
 8002144:	0018      	movs	r0, r3
 8002146:	f002 fbe5 	bl	8004914 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800214a:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <HAL_ADC_MspInit+0xec>)
 800214c:	4a1c      	ldr	r2, [pc, #112]	; (80021c0 <HAL_ADC_MspInit+0xf0>)
 800214e:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002150:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <HAL_ADC_MspInit+0xec>)
 8002152:	2200      	movs	r2, #0
 8002154:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002156:	4b19      	ldr	r3, [pc, #100]	; (80021bc <HAL_ADC_MspInit+0xec>)
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800215c:	4b17      	ldr	r3, [pc, #92]	; (80021bc <HAL_ADC_MspInit+0xec>)
 800215e:	2280      	movs	r2, #128	; 0x80
 8002160:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002162:	4b16      	ldr	r3, [pc, #88]	; (80021bc <HAL_ADC_MspInit+0xec>)
 8002164:	2280      	movs	r2, #128	; 0x80
 8002166:	0052      	lsls	r2, r2, #1
 8002168:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800216a:	4b14      	ldr	r3, [pc, #80]	; (80021bc <HAL_ADC_MspInit+0xec>)
 800216c:	2280      	movs	r2, #128	; 0x80
 800216e:	00d2      	lsls	r2, r2, #3
 8002170:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002172:	4b12      	ldr	r3, [pc, #72]	; (80021bc <HAL_ADC_MspInit+0xec>)
 8002174:	2220      	movs	r2, #32
 8002176:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002178:	4b10      	ldr	r3, [pc, #64]	; (80021bc <HAL_ADC_MspInit+0xec>)
 800217a:	2200      	movs	r2, #0
 800217c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800217e:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <HAL_ADC_MspInit+0xec>)
 8002180:	0018      	movs	r0, r3
 8002182:	f002 f9e9 	bl	8004558 <HAL_DMA_Init>
 8002186:	1e03      	subs	r3, r0, #0
 8002188:	d001      	beq.n	800218e <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800218a:	f7ff ff77 	bl	800207c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <HAL_ADC_MspInit+0xec>)
 8002192:	631a      	str	r2, [r3, #48]	; 0x30
 8002194:	4b09      	ldr	r3, [pc, #36]	; (80021bc <HAL_ADC_MspInit+0xec>)
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	625a      	str	r2, [r3, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 800219a:	2200      	movs	r2, #0
 800219c:	2100      	movs	r1, #0
 800219e:	200c      	movs	r0, #12
 80021a0:	f002 f9a8 	bl	80044f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80021a4:	200c      	movs	r0, #12
 80021a6:	f002 f9ba 	bl	800451e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	46bd      	mov	sp, r7
 80021ae:	b00b      	add	sp, #44	; 0x2c
 80021b0:	bd90      	pop	{r4, r7, pc}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	40012400 	.word	0x40012400
 80021b8:	40021000 	.word	0x40021000
 80021bc:	20000a90 	.word	0x20000a90
 80021c0:	40020008 	.word	0x40020008

080021c4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80021c4:	b590      	push	{r4, r7, lr}
 80021c6:	b08b      	sub	sp, #44	; 0x2c
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	2414      	movs	r4, #20
 80021ce:	193b      	adds	r3, r7, r4
 80021d0:	0018      	movs	r0, r3
 80021d2:	2314      	movs	r3, #20
 80021d4:	001a      	movs	r2, r3
 80021d6:	2100      	movs	r1, #0
 80021d8:	f004 f9d0 	bl	800657c <memset>
  if(hcan->Instance==CAN)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a21      	ldr	r2, [pc, #132]	; (8002268 <HAL_CAN_MspInit+0xa4>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d13b      	bne.n	800225e <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80021e6:	4b21      	ldr	r3, [pc, #132]	; (800226c <HAL_CAN_MspInit+0xa8>)
 80021e8:	69da      	ldr	r2, [r3, #28]
 80021ea:	4b20      	ldr	r3, [pc, #128]	; (800226c <HAL_CAN_MspInit+0xa8>)
 80021ec:	2180      	movs	r1, #128	; 0x80
 80021ee:	0489      	lsls	r1, r1, #18
 80021f0:	430a      	orrs	r2, r1
 80021f2:	61da      	str	r2, [r3, #28]
 80021f4:	4b1d      	ldr	r3, [pc, #116]	; (800226c <HAL_CAN_MspInit+0xa8>)
 80021f6:	69da      	ldr	r2, [r3, #28]
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	049b      	lsls	r3, r3, #18
 80021fc:	4013      	ands	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002202:	4b1a      	ldr	r3, [pc, #104]	; (800226c <HAL_CAN_MspInit+0xa8>)
 8002204:	695a      	ldr	r2, [r3, #20]
 8002206:	4b19      	ldr	r3, [pc, #100]	; (800226c <HAL_CAN_MspInit+0xa8>)
 8002208:	2180      	movs	r1, #128	; 0x80
 800220a:	0289      	lsls	r1, r1, #10
 800220c:	430a      	orrs	r2, r1
 800220e:	615a      	str	r2, [r3, #20]
 8002210:	4b16      	ldr	r3, [pc, #88]	; (800226c <HAL_CAN_MspInit+0xa8>)
 8002212:	695a      	ldr	r2, [r3, #20]
 8002214:	2380      	movs	r3, #128	; 0x80
 8002216:	029b      	lsls	r3, r3, #10
 8002218:	4013      	ands	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800221e:	193b      	adds	r3, r7, r4
 8002220:	22c0      	movs	r2, #192	; 0xc0
 8002222:	0152      	lsls	r2, r2, #5
 8002224:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002226:	0021      	movs	r1, r4
 8002228:	187b      	adds	r3, r7, r1
 800222a:	2202      	movs	r2, #2
 800222c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	187b      	adds	r3, r7, r1
 8002230:	2200      	movs	r2, #0
 8002232:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002234:	187b      	adds	r3, r7, r1
 8002236:	2203      	movs	r2, #3
 8002238:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800223a:	187b      	adds	r3, r7, r1
 800223c:	2204      	movs	r2, #4
 800223e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002240:	187a      	adds	r2, r7, r1
 8002242:	2390      	movs	r3, #144	; 0x90
 8002244:	05db      	lsls	r3, r3, #23
 8002246:	0011      	movs	r1, r2
 8002248:	0018      	movs	r0, r3
 800224a:	f002 fb63 	bl	8004914 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 800224e:	2200      	movs	r2, #0
 8002250:	2100      	movs	r1, #0
 8002252:	201e      	movs	r0, #30
 8002254:	f002 f94e 	bl	80044f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8002258:	201e      	movs	r0, #30
 800225a:	f002 f960 	bl	800451e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	46bd      	mov	sp, r7
 8002262:	b00b      	add	sp, #44	; 0x2c
 8002264:	bd90      	pop	{r4, r7, pc}
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	40006400 	.word	0x40006400
 800226c:	40021000 	.word	0x40021000

08002270 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002270:	b590      	push	{r4, r7, lr}
 8002272:	b08d      	sub	sp, #52	; 0x34
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	241c      	movs	r4, #28
 800227a:	193b      	adds	r3, r7, r4
 800227c:	0018      	movs	r0, r3
 800227e:	2314      	movs	r3, #20
 8002280:	001a      	movs	r2, r3
 8002282:	2100      	movs	r1, #0
 8002284:	f004 f97a 	bl	800657c <memset>
  if(hspi->Instance==SPI1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a53      	ldr	r2, [pc, #332]	; (80023dc <HAL_SPI_MspInit+0x16c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d13b      	bne.n	800230a <HAL_SPI_MspInit+0x9a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002292:	4b53      	ldr	r3, [pc, #332]	; (80023e0 <HAL_SPI_MspInit+0x170>)
 8002294:	699a      	ldr	r2, [r3, #24]
 8002296:	4b52      	ldr	r3, [pc, #328]	; (80023e0 <HAL_SPI_MspInit+0x170>)
 8002298:	2180      	movs	r1, #128	; 0x80
 800229a:	0149      	lsls	r1, r1, #5
 800229c:	430a      	orrs	r2, r1
 800229e:	619a      	str	r2, [r3, #24]
 80022a0:	4b4f      	ldr	r3, [pc, #316]	; (80023e0 <HAL_SPI_MspInit+0x170>)
 80022a2:	699a      	ldr	r2, [r3, #24]
 80022a4:	2380      	movs	r3, #128	; 0x80
 80022a6:	015b      	lsls	r3, r3, #5
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
 80022ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ae:	4b4c      	ldr	r3, [pc, #304]	; (80023e0 <HAL_SPI_MspInit+0x170>)
 80022b0:	695a      	ldr	r2, [r3, #20]
 80022b2:	4b4b      	ldr	r3, [pc, #300]	; (80023e0 <HAL_SPI_MspInit+0x170>)
 80022b4:	2180      	movs	r1, #128	; 0x80
 80022b6:	0289      	lsls	r1, r1, #10
 80022b8:	430a      	orrs	r2, r1
 80022ba:	615a      	str	r2, [r3, #20]
 80022bc:	4b48      	ldr	r3, [pc, #288]	; (80023e0 <HAL_SPI_MspInit+0x170>)
 80022be:	695a      	ldr	r2, [r3, #20]
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	029b      	lsls	r3, r3, #10
 80022c4:	4013      	ands	r3, r2
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Display_Pin|SPI1_MOSI_Display_Pin;
 80022ca:	0021      	movs	r1, r4
 80022cc:	187b      	adds	r3, r7, r1
 80022ce:	22a0      	movs	r2, #160	; 0xa0
 80022d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d2:	187b      	adds	r3, r7, r1
 80022d4:	2202      	movs	r2, #2
 80022d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	187b      	adds	r3, r7, r1
 80022da:	2200      	movs	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022de:	187b      	adds	r3, r7, r1
 80022e0:	2203      	movs	r2, #3
 80022e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80022e4:	187b      	adds	r3, r7, r1
 80022e6:	2200      	movs	r2, #0
 80022e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ea:	187a      	adds	r2, r7, r1
 80022ec:	2390      	movs	r3, #144	; 0x90
 80022ee:	05db      	lsls	r3, r3, #23
 80022f0:	0011      	movs	r1, r2
 80022f2:	0018      	movs	r0, r3
 80022f4:	f002 fb0e 	bl	8004914 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80022f8:	2200      	movs	r2, #0
 80022fa:	2100      	movs	r1, #0
 80022fc:	2019      	movs	r0, #25
 80022fe:	f002 f8f9 	bl	80044f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002302:	2019      	movs	r0, #25
 8002304:	f002 f90b 	bl	800451e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002308:	e063      	b.n	80023d2 <HAL_SPI_MspInit+0x162>
  else if(hspi->Instance==SPI2)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a35      	ldr	r2, [pc, #212]	; (80023e4 <HAL_SPI_MspInit+0x174>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d15e      	bne.n	80023d2 <HAL_SPI_MspInit+0x162>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002314:	4b32      	ldr	r3, [pc, #200]	; (80023e0 <HAL_SPI_MspInit+0x170>)
 8002316:	69da      	ldr	r2, [r3, #28]
 8002318:	4b31      	ldr	r3, [pc, #196]	; (80023e0 <HAL_SPI_MspInit+0x170>)
 800231a:	2180      	movs	r1, #128	; 0x80
 800231c:	01c9      	lsls	r1, r1, #7
 800231e:	430a      	orrs	r2, r1
 8002320:	61da      	str	r2, [r3, #28]
 8002322:	4b2f      	ldr	r3, [pc, #188]	; (80023e0 <HAL_SPI_MspInit+0x170>)
 8002324:	69da      	ldr	r2, [r3, #28]
 8002326:	2380      	movs	r3, #128	; 0x80
 8002328:	01db      	lsls	r3, r3, #7
 800232a:	4013      	ands	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002330:	4b2b      	ldr	r3, [pc, #172]	; (80023e0 <HAL_SPI_MspInit+0x170>)
 8002332:	695a      	ldr	r2, [r3, #20]
 8002334:	4b2a      	ldr	r3, [pc, #168]	; (80023e0 <HAL_SPI_MspInit+0x170>)
 8002336:	2180      	movs	r1, #128	; 0x80
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	430a      	orrs	r2, r1
 800233c:	615a      	str	r2, [r3, #20]
 800233e:	4b28      	ldr	r3, [pc, #160]	; (80023e0 <HAL_SPI_MspInit+0x170>)
 8002340:	695a      	ldr	r2, [r3, #20]
 8002342:	2380      	movs	r3, #128	; 0x80
 8002344:	031b      	lsls	r3, r3, #12
 8002346:	4013      	ands	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800234c:	4b24      	ldr	r3, [pc, #144]	; (80023e0 <HAL_SPI_MspInit+0x170>)
 800234e:	695a      	ldr	r2, [r3, #20]
 8002350:	4b23      	ldr	r3, [pc, #140]	; (80023e0 <HAL_SPI_MspInit+0x170>)
 8002352:	2180      	movs	r1, #128	; 0x80
 8002354:	02c9      	lsls	r1, r1, #11
 8002356:	430a      	orrs	r2, r1
 8002358:	615a      	str	r2, [r3, #20]
 800235a:	4b21      	ldr	r3, [pc, #132]	; (80023e0 <HAL_SPI_MspInit+0x170>)
 800235c:	695a      	ldr	r2, [r3, #20]
 800235e:	2380      	movs	r3, #128	; 0x80
 8002360:	02db      	lsls	r3, r3, #11
 8002362:	4013      	ands	r3, r2
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI2_MOSI_RGBLED_Pin;
 8002368:	241c      	movs	r4, #28
 800236a:	193b      	adds	r3, r7, r4
 800236c:	2208      	movs	r2, #8
 800236e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002370:	193b      	adds	r3, r7, r4
 8002372:	2202      	movs	r2, #2
 8002374:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	193b      	adds	r3, r7, r4
 8002378:	2200      	movs	r2, #0
 800237a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237c:	193b      	adds	r3, r7, r4
 800237e:	2200      	movs	r2, #0
 8002380:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8002382:	193b      	adds	r3, r7, r4
 8002384:	2201      	movs	r2, #1
 8002386:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SPI2_MOSI_RGBLED_GPIO_Port, &GPIO_InitStruct);
 8002388:	193b      	adds	r3, r7, r4
 800238a:	4a17      	ldr	r2, [pc, #92]	; (80023e8 <HAL_SPI_MspInit+0x178>)
 800238c:	0019      	movs	r1, r3
 800238e:	0010      	movs	r0, r2
 8002390:	f002 fac0 	bl	8004914 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_SCK_RGBLED_Pin;
 8002394:	0021      	movs	r1, r4
 8002396:	187b      	adds	r3, r7, r1
 8002398:	2280      	movs	r2, #128	; 0x80
 800239a:	00d2      	lsls	r2, r2, #3
 800239c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239e:	187b      	adds	r3, r7, r1
 80023a0:	2202      	movs	r2, #2
 80023a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a4:	187b      	adds	r3, r7, r1
 80023a6:	2200      	movs	r2, #0
 80023a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023aa:	187b      	adds	r3, r7, r1
 80023ac:	2200      	movs	r2, #0
 80023ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023b0:	187b      	adds	r3, r7, r1
 80023b2:	2205      	movs	r2, #5
 80023b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SPI2_SCK_RGBLED_GPIO_Port, &GPIO_InitStruct);
 80023b6:	187b      	adds	r3, r7, r1
 80023b8:	4a0c      	ldr	r2, [pc, #48]	; (80023ec <HAL_SPI_MspInit+0x17c>)
 80023ba:	0019      	movs	r1, r3
 80023bc:	0010      	movs	r0, r2
 80023be:	f002 faa9 	bl	8004914 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80023c2:	2200      	movs	r2, #0
 80023c4:	2100      	movs	r1, #0
 80023c6:	201a      	movs	r0, #26
 80023c8:	f002 f894 	bl	80044f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80023cc:	201a      	movs	r0, #26
 80023ce:	f002 f8a6 	bl	800451e <HAL_NVIC_EnableIRQ>
}
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	46bd      	mov	sp, r7
 80023d6:	b00d      	add	sp, #52	; 0x34
 80023d8:	bd90      	pop	{r4, r7, pc}
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	40013000 	.word	0x40013000
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40003800 	.word	0x40003800
 80023e8:	48000800 	.word	0x48000800
 80023ec:	48000400 	.word	0x48000400

080023f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	05db      	lsls	r3, r3, #23
 8002400:	429a      	cmp	r2, r3
 8002402:	d10b      	bne.n	800241c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002404:	4b07      	ldr	r3, [pc, #28]	; (8002424 <HAL_TIM_Base_MspInit+0x34>)
 8002406:	69da      	ldr	r2, [r3, #28]
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <HAL_TIM_Base_MspInit+0x34>)
 800240a:	2101      	movs	r1, #1
 800240c:	430a      	orrs	r2, r1
 800240e:	61da      	str	r2, [r3, #28]
 8002410:	4b04      	ldr	r3, [pc, #16]	; (8002424 <HAL_TIM_Base_MspInit+0x34>)
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	2201      	movs	r2, #1
 8002416:	4013      	ands	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800241c:	46c0      	nop			; (mov r8, r8)
 800241e:	46bd      	mov	sp, r7
 8002420:	b004      	add	sp, #16
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40021000 	.word	0x40021000

08002428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800242c:	e7fe      	b.n	800242c <NMI_Handler+0x4>

0800242e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002432:	e7fe      	b.n	8002432 <HardFault_Handler+0x4>

08002434 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002438:	46c0      	nop			; (mov r8, r8)
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800244c:	f000 fba8 	bl	8002ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  systime = HAL_GetTick();
 8002450:	f000 fbb8 	bl	8002bc4 <HAL_GetTick>
 8002454:	0002      	movs	r2, r0
 8002456:	4b02      	ldr	r3, [pc, #8]	; (8002460 <SysTick_Handler+0x18>)
 8002458:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 800245a:	46c0      	nop			; (mov r8, r8)
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20000c20 	.word	0x20000c20

08002464 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002468:	4b03      	ldr	r3, [pc, #12]	; (8002478 <DMA1_Channel1_IRQHandler+0x14>)
 800246a:	0018      	movs	r0, r3
 800246c:	f002 f967 	bl	800473e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002470:	46c0      	nop			; (mov r8, r8)
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	20000a90 	.word	0x20000a90

0800247c <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002480:	4b03      	ldr	r3, [pc, #12]	; (8002490 <ADC1_COMP_IRQHandler+0x14>)
 8002482:	0018      	movs	r0, r3
 8002484:	f000 fd8e 	bl	8002fa4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8002488:	46c0      	nop			; (mov r8, r8)
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	20000a50 	.word	0x20000a50

08002494 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002498:	4b03      	ldr	r3, [pc, #12]	; (80024a8 <SPI1_IRQHandler+0x14>)
 800249a:	0018      	movs	r0, r3
 800249c:	f003 fad6 	bl	8005a4c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80024a0:	46c0      	nop			; (mov r8, r8)
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	20000afc 	.word	0x20000afc

080024ac <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80024b0:	4b03      	ldr	r3, [pc, #12]	; (80024c0 <SPI2_IRQHandler+0x14>)
 80024b2:	0018      	movs	r0, r3
 80024b4:	f003 faca 	bl	8005a4c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80024b8:	46c0      	nop			; (mov r8, r8)
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	20000b60 	.word	0x20000b60

080024c4 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80024c8:	4b03      	ldr	r3, [pc, #12]	; (80024d8 <CEC_CAN_IRQHandler+0x14>)
 80024ca:	0018      	movs	r0, r3
 80024cc:	f001 fd6a 	bl	8003fa4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 80024d0:	46c0      	nop			; (mov r8, r8)
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	46c0      	nop			; (mov r8, r8)
 80024d8:	20000ad4 	.word	0x20000ad4

080024dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024e4:	4a14      	ldr	r2, [pc, #80]	; (8002538 <_sbrk+0x5c>)
 80024e6:	4b15      	ldr	r3, [pc, #84]	; (800253c <_sbrk+0x60>)
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024f0:	4b13      	ldr	r3, [pc, #76]	; (8002540 <_sbrk+0x64>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d102      	bne.n	80024fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024f8:	4b11      	ldr	r3, [pc, #68]	; (8002540 <_sbrk+0x64>)
 80024fa:	4a12      	ldr	r2, [pc, #72]	; (8002544 <_sbrk+0x68>)
 80024fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024fe:	4b10      	ldr	r3, [pc, #64]	; (8002540 <_sbrk+0x64>)
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	18d3      	adds	r3, r2, r3
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	429a      	cmp	r2, r3
 800250a:	d207      	bcs.n	800251c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800250c:	f004 f83e 	bl	800658c <__errno>
 8002510:	0003      	movs	r3, r0
 8002512:	220c      	movs	r2, #12
 8002514:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002516:	2301      	movs	r3, #1
 8002518:	425b      	negs	r3, r3
 800251a:	e009      	b.n	8002530 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800251c:	4b08      	ldr	r3, [pc, #32]	; (8002540 <_sbrk+0x64>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002522:	4b07      	ldr	r3, [pc, #28]	; (8002540 <_sbrk+0x64>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	18d2      	adds	r2, r2, r3
 800252a:	4b05      	ldr	r3, [pc, #20]	; (8002540 <_sbrk+0x64>)
 800252c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800252e:	68fb      	ldr	r3, [r7, #12]
}
 8002530:	0018      	movs	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	b006      	add	sp, #24
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20004000 	.word	0x20004000
 800253c:	00000400 	.word	0x00000400
 8002540:	20000c24 	.word	0x20000c24
 8002544:	20001180 	.word	0x20001180

08002548 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800254c:	46c0      	nop			; (mov r8, r8)
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002554:	480d      	ldr	r0, [pc, #52]	; (800258c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002556:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002558:	f7ff fff6 	bl	8002548 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800255c:	480c      	ldr	r0, [pc, #48]	; (8002590 <LoopForever+0x6>)
  ldr r1, =_edata
 800255e:	490d      	ldr	r1, [pc, #52]	; (8002594 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002560:	4a0d      	ldr	r2, [pc, #52]	; (8002598 <LoopForever+0xe>)
  movs r3, #0
 8002562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002564:	e002      	b.n	800256c <LoopCopyDataInit>

08002566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800256a:	3304      	adds	r3, #4

0800256c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800256c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800256e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002570:	d3f9      	bcc.n	8002566 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002572:	4a0a      	ldr	r2, [pc, #40]	; (800259c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002574:	4c0a      	ldr	r4, [pc, #40]	; (80025a0 <LoopForever+0x16>)
  movs r3, #0
 8002576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002578:	e001      	b.n	800257e <LoopFillZerobss>

0800257a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800257a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800257c:	3204      	adds	r2, #4

0800257e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800257e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002580:	d3fb      	bcc.n	800257a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002582:	f004 f809 	bl	8006598 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002586:	f7ff f84d 	bl	8001624 <main>

0800258a <LoopForever>:

LoopForever:
    b LoopForever
 800258a:	e7fe      	b.n	800258a <LoopForever>
  ldr   r0, =_estack
 800258c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002594:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002598:	080075a0 	.word	0x080075a0
  ldr r2, =_sbss
 800259c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80025a0:	2000117c 	.word	0x2000117c

080025a4 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025a4:	e7fe      	b.n	80025a4 <DMA1_Channel2_3_IRQHandler>
	...

080025a8 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 80025ac:	2390      	movs	r3, #144	; 0x90
 80025ae:	05db      	lsls	r3, r3, #23
 80025b0:	2201      	movs	r2, #1
 80025b2:	2110      	movs	r1, #16
 80025b4:	0018      	movs	r0, r3
 80025b6:	f002 fb25 	bl	8004c04 <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 80025ba:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <ssd1306_Reset+0x3c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	2110      	movs	r1, #16
 80025c0:	0018      	movs	r0, r3
 80025c2:	f002 fb1f 	bl	8004c04 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80025c6:	200a      	movs	r0, #10
 80025c8:	f000 fb06 	bl	8002bd8 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 80025cc:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <ssd1306_Reset+0x3c>)
 80025ce:	2201      	movs	r2, #1
 80025d0:	2110      	movs	r1, #16
 80025d2:	0018      	movs	r0, r3
 80025d4:	f002 fb16 	bl	8004c04 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80025d8:	200a      	movs	r0, #10
 80025da:	f000 fafd 	bl	8002bd8 <HAL_Delay>
}
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	48000800 	.word	0x48000800

080025e8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	0002      	movs	r2, r0
 80025f0:	1dfb      	adds	r3, r7, #7
 80025f2:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 80025f4:	2390      	movs	r3, #144	; 0x90
 80025f6:	05db      	lsls	r3, r3, #23
 80025f8:	2200      	movs	r2, #0
 80025fa:	2110      	movs	r1, #16
 80025fc:	0018      	movs	r0, r3
 80025fe:	f002 fb01 	bl	8004c04 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8002602:	2390      	movs	r3, #144	; 0x90
 8002604:	05db      	lsls	r3, r3, #23
 8002606:	2200      	movs	r2, #0
 8002608:	2140      	movs	r1, #64	; 0x40
 800260a:	0018      	movs	r0, r3
 800260c:	f002 fafa 	bl	8004c04 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 8002610:	2301      	movs	r3, #1
 8002612:	425b      	negs	r3, r3
 8002614:	1df9      	adds	r1, r7, #7
 8002616:	4807      	ldr	r0, [pc, #28]	; (8002634 <ssd1306_WriteCommand+0x4c>)
 8002618:	2201      	movs	r2, #1
 800261a:	f003 f8b7 	bl	800578c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 800261e:	2390      	movs	r3, #144	; 0x90
 8002620:	05db      	lsls	r3, r3, #23
 8002622:	2201      	movs	r2, #1
 8002624:	2110      	movs	r1, #16
 8002626:	0018      	movs	r0, r3
 8002628:	f002 faec 	bl	8004c04 <HAL_GPIO_WritePin>
}
 800262c:	46c0      	nop			; (mov r8, r8)
 800262e:	46bd      	mov	sp, r7
 8002630:	b002      	add	sp, #8
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20000afc 	.word	0x20000afc

08002638 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8002642:	2390      	movs	r3, #144	; 0x90
 8002644:	05db      	lsls	r3, r3, #23
 8002646:	2200      	movs	r2, #0
 8002648:	2110      	movs	r1, #16
 800264a:	0018      	movs	r0, r3
 800264c:	f002 fada 	bl	8004c04 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8002650:	2390      	movs	r3, #144	; 0x90
 8002652:	05db      	lsls	r3, r3, #23
 8002654:	2201      	movs	r2, #1
 8002656:	2140      	movs	r1, #64	; 0x40
 8002658:	0018      	movs	r0, r3
 800265a:	f002 fad3 	bl	8004c04 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	b29a      	uxth	r2, r3
 8002662:	2301      	movs	r3, #1
 8002664:	425b      	negs	r3, r3
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4806      	ldr	r0, [pc, #24]	; (8002684 <ssd1306_WriteData+0x4c>)
 800266a:	f003 f88f 	bl	800578c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 800266e:	2390      	movs	r3, #144	; 0x90
 8002670:	05db      	lsls	r3, r3, #23
 8002672:	2201      	movs	r2, #1
 8002674:	2110      	movs	r1, #16
 8002676:	0018      	movs	r0, r3
 8002678:	f002 fac4 	bl	8004c04 <HAL_GPIO_WritePin>
}
 800267c:	46c0      	nop			; (mov r8, r8)
 800267e:	46bd      	mov	sp, r7
 8002680:	b002      	add	sp, #8
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20000afc 	.word	0x20000afc

08002688 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800268c:	f7ff ff8c 	bl	80025a8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002690:	2064      	movs	r0, #100	; 0x64
 8002692:	f000 faa1 	bl	8002bd8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002696:	2000      	movs	r0, #0
 8002698:	f000 fa14 	bl	8002ac4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800269c:	2020      	movs	r0, #32
 800269e:	f7ff ffa3 	bl	80025e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80026a2:	2000      	movs	r0, #0
 80026a4:	f7ff ffa0 	bl	80025e8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80026a8:	20b0      	movs	r0, #176	; 0xb0
 80026aa:	f7ff ff9d 	bl	80025e8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 80026ae:	20c0      	movs	r0, #192	; 0xc0
 80026b0:	f7ff ff9a 	bl	80025e8 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80026b4:	2000      	movs	r0, #0
 80026b6:	f7ff ff97 	bl	80025e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80026ba:	2010      	movs	r0, #16
 80026bc:	f7ff ff94 	bl	80025e8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80026c0:	2040      	movs	r0, #64	; 0x40
 80026c2:	f7ff ff91 	bl	80025e8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80026c6:	20ff      	movs	r0, #255	; 0xff
 80026c8:	f000 f9e4 	bl	8002a94 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 80026cc:	20a0      	movs	r0, #160	; 0xa0
 80026ce:	f7ff ff8b 	bl	80025e8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80026d2:	20a6      	movs	r0, #166	; 0xa6
 80026d4:	f7ff ff88 	bl	80025e8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80026d8:	20a8      	movs	r0, #168	; 0xa8
 80026da:	f7ff ff85 	bl	80025e8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80026de:	203f      	movs	r0, #63	; 0x3f
 80026e0:	f7ff ff82 	bl	80025e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80026e4:	20a4      	movs	r0, #164	; 0xa4
 80026e6:	f7ff ff7f 	bl	80025e8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80026ea:	20d3      	movs	r0, #211	; 0xd3
 80026ec:	f7ff ff7c 	bl	80025e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80026f0:	2000      	movs	r0, #0
 80026f2:	f7ff ff79 	bl	80025e8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80026f6:	20d5      	movs	r0, #213	; 0xd5
 80026f8:	f7ff ff76 	bl	80025e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set divide ratio ajusted for EA OLED 128-6
 80026fc:	2040      	movs	r0, #64	; 0x40
 80026fe:	f7ff ff73 	bl	80025e8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002702:	20d9      	movs	r0, #217	; 0xd9
 8002704:	f7ff ff70 	bl	80025e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x44); // ajusted for EA OLED 128-6
 8002708:	2044      	movs	r0, #68	; 0x44
 800270a:	f7ff ff6d 	bl	80025e8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800270e:	20da      	movs	r0, #218	; 0xda
 8002710:	f7ff ff6a 	bl	80025e8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002714:	2012      	movs	r0, #18
 8002716:	f7ff ff67 	bl	80025e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800271a:	20db      	movs	r0, #219	; 0xdb
 800271c:	f7ff ff64 	bl	80025e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002720:	2020      	movs	r0, #32
 8002722:	f7ff ff61 	bl	80025e8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002726:	208d      	movs	r0, #141	; 0x8d
 8002728:	f7ff ff5e 	bl	80025e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800272c:	2014      	movs	r0, #20
 800272e:	f7ff ff5b 	bl	80025e8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002732:	2001      	movs	r0, #1
 8002734:	f000 f9c6 	bl	8002ac4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002738:	2000      	movs	r0, #0
 800273a:	f000 f811 	bl	8002760 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800273e:	f000 f829 	bl	8002794 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002742:	4b06      	ldr	r3, [pc, #24]	; (800275c <ssd1306_Init+0xd4>)
 8002744:	2200      	movs	r2, #0
 8002746:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002748:	4b04      	ldr	r3, [pc, #16]	; (800275c <ssd1306_Init+0xd4>)
 800274a:	2200      	movs	r2, #0
 800274c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800274e:	4b03      	ldr	r3, [pc, #12]	; (800275c <ssd1306_Init+0xd4>)
 8002750:	2201      	movs	r2, #1
 8002752:	711a      	strb	r2, [r3, #4]
}
 8002754:	46c0      	nop			; (mov r8, r8)
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	20001028 	.word	0x20001028

08002760 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	0002      	movs	r2, r0
 8002768:	1dfb      	adds	r3, r7, #7
 800276a:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800276c:	1dfb      	adds	r3, r7, #7
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <ssd1306_Fill+0x18>
 8002774:	2300      	movs	r3, #0
 8002776:	e000      	b.n	800277a <ssd1306_Fill+0x1a>
 8002778:	23ff      	movs	r3, #255	; 0xff
 800277a:	2280      	movs	r2, #128	; 0x80
 800277c:	00d2      	lsls	r2, r2, #3
 800277e:	4804      	ldr	r0, [pc, #16]	; (8002790 <ssd1306_Fill+0x30>)
 8002780:	0019      	movs	r1, r3
 8002782:	f003 fefb 	bl	800657c <memset>
}
 8002786:	46c0      	nop			; (mov r8, r8)
 8002788:	46bd      	mov	sp, r7
 800278a:	b002      	add	sp, #8
 800278c:	bd80      	pop	{r7, pc}
 800278e:	46c0      	nop			; (mov r8, r8)
 8002790:	20000c28 	.word	0x20000c28

08002794 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800279a:	1dfb      	adds	r3, r7, #7
 800279c:	2200      	movs	r2, #0
 800279e:	701a      	strb	r2, [r3, #0]
 80027a0:	e01a      	b.n	80027d8 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80027a2:	1dfb      	adds	r3, r7, #7
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	3b50      	subs	r3, #80	; 0x50
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	0018      	movs	r0, r3
 80027ac:	f7ff ff1c 	bl	80025e8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80027b0:	2000      	movs	r0, #0
 80027b2:	f7ff ff19 	bl	80025e8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80027b6:	2010      	movs	r0, #16
 80027b8:	f7ff ff16 	bl	80025e8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80027bc:	1dfb      	adds	r3, r7, #7
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	01da      	lsls	r2, r3, #7
 80027c2:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <ssd1306_UpdateScreen+0x58>)
 80027c4:	18d3      	adds	r3, r2, r3
 80027c6:	2180      	movs	r1, #128	; 0x80
 80027c8:	0018      	movs	r0, r3
 80027ca:	f7ff ff35 	bl	8002638 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80027ce:	1dfb      	adds	r3, r7, #7
 80027d0:	781a      	ldrb	r2, [r3, #0]
 80027d2:	1dfb      	adds	r3, r7, #7
 80027d4:	3201      	adds	r2, #1
 80027d6:	701a      	strb	r2, [r3, #0]
 80027d8:	1dfb      	adds	r3, r7, #7
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b07      	cmp	r3, #7
 80027de:	d9e0      	bls.n	80027a2 <ssd1306_UpdateScreen+0xe>
    }
}
 80027e0:	46c0      	nop			; (mov r8, r8)
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	46bd      	mov	sp, r7
 80027e6:	b002      	add	sp, #8
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	20000c28 	.word	0x20000c28

080027f0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80027f0:	b590      	push	{r4, r7, lr}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	0004      	movs	r4, r0
 80027f8:	0008      	movs	r0, r1
 80027fa:	0011      	movs	r1, r2
 80027fc:	1dfb      	adds	r3, r7, #7
 80027fe:	1c22      	adds	r2, r4, #0
 8002800:	701a      	strb	r2, [r3, #0]
 8002802:	1dbb      	adds	r3, r7, #6
 8002804:	1c02      	adds	r2, r0, #0
 8002806:	701a      	strb	r2, [r3, #0]
 8002808:	1d7b      	adds	r3, r7, #5
 800280a:	1c0a      	adds	r2, r1, #0
 800280c:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800280e:	1dfb      	adds	r3, r7, #7
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	b25b      	sxtb	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	db47      	blt.n	80028a8 <ssd1306_DrawPixel+0xb8>
 8002818:	1dbb      	adds	r3, r7, #6
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b3f      	cmp	r3, #63	; 0x3f
 800281e:	d843      	bhi.n	80028a8 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002820:	1d7b      	adds	r3, r7, #5
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d11e      	bne.n	8002866 <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002828:	1dfb      	adds	r3, r7, #7
 800282a:	781a      	ldrb	r2, [r3, #0]
 800282c:	1dbb      	adds	r3, r7, #6
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	08db      	lsrs	r3, r3, #3
 8002832:	b2d8      	uxtb	r0, r3
 8002834:	0003      	movs	r3, r0
 8002836:	01db      	lsls	r3, r3, #7
 8002838:	18d3      	adds	r3, r2, r3
 800283a:	4a1d      	ldr	r2, [pc, #116]	; (80028b0 <ssd1306_DrawPixel+0xc0>)
 800283c:	5cd3      	ldrb	r3, [r2, r3]
 800283e:	b25a      	sxtb	r2, r3
 8002840:	1dbb      	adds	r3, r7, #6
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2107      	movs	r1, #7
 8002846:	400b      	ands	r3, r1
 8002848:	2101      	movs	r1, #1
 800284a:	4099      	lsls	r1, r3
 800284c:	000b      	movs	r3, r1
 800284e:	b25b      	sxtb	r3, r3
 8002850:	4313      	orrs	r3, r2
 8002852:	b259      	sxtb	r1, r3
 8002854:	1dfb      	adds	r3, r7, #7
 8002856:	781a      	ldrb	r2, [r3, #0]
 8002858:	0003      	movs	r3, r0
 800285a:	01db      	lsls	r3, r3, #7
 800285c:	18d3      	adds	r3, r2, r3
 800285e:	b2c9      	uxtb	r1, r1
 8002860:	4a13      	ldr	r2, [pc, #76]	; (80028b0 <ssd1306_DrawPixel+0xc0>)
 8002862:	54d1      	strb	r1, [r2, r3]
 8002864:	e021      	b.n	80028aa <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002866:	1dfb      	adds	r3, r7, #7
 8002868:	781a      	ldrb	r2, [r3, #0]
 800286a:	1dbb      	adds	r3, r7, #6
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	08db      	lsrs	r3, r3, #3
 8002870:	b2d8      	uxtb	r0, r3
 8002872:	0003      	movs	r3, r0
 8002874:	01db      	lsls	r3, r3, #7
 8002876:	18d3      	adds	r3, r2, r3
 8002878:	4a0d      	ldr	r2, [pc, #52]	; (80028b0 <ssd1306_DrawPixel+0xc0>)
 800287a:	5cd3      	ldrb	r3, [r2, r3]
 800287c:	b25b      	sxtb	r3, r3
 800287e:	1dba      	adds	r2, r7, #6
 8002880:	7812      	ldrb	r2, [r2, #0]
 8002882:	2107      	movs	r1, #7
 8002884:	400a      	ands	r2, r1
 8002886:	2101      	movs	r1, #1
 8002888:	4091      	lsls	r1, r2
 800288a:	000a      	movs	r2, r1
 800288c:	b252      	sxtb	r2, r2
 800288e:	43d2      	mvns	r2, r2
 8002890:	b252      	sxtb	r2, r2
 8002892:	4013      	ands	r3, r2
 8002894:	b259      	sxtb	r1, r3
 8002896:	1dfb      	adds	r3, r7, #7
 8002898:	781a      	ldrb	r2, [r3, #0]
 800289a:	0003      	movs	r3, r0
 800289c:	01db      	lsls	r3, r3, #7
 800289e:	18d3      	adds	r3, r2, r3
 80028a0:	b2c9      	uxtb	r1, r1
 80028a2:	4a03      	ldr	r2, [pc, #12]	; (80028b0 <ssd1306_DrawPixel+0xc0>)
 80028a4:	54d1      	strb	r1, [r2, r3]
 80028a6:	e000      	b.n	80028aa <ssd1306_DrawPixel+0xba>
        return;
 80028a8:	46c0      	nop			; (mov r8, r8)
    }
}
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b003      	add	sp, #12
 80028ae:	bd90      	pop	{r4, r7, pc}
 80028b0:	20000c28 	.word	0x20000c28

080028b4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80028b4:	b590      	push	{r4, r7, lr}
 80028b6:	b089      	sub	sp, #36	; 0x24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	0004      	movs	r4, r0
 80028bc:	0038      	movs	r0, r7
 80028be:	6001      	str	r1, [r0, #0]
 80028c0:	6042      	str	r2, [r0, #4]
 80028c2:	6083      	str	r3, [r0, #8]
 80028c4:	210f      	movs	r1, #15
 80028c6:	187b      	adds	r3, r7, r1
 80028c8:	1c22      	adds	r2, r4, #0
 80028ca:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80028cc:	000a      	movs	r2, r1
 80028ce:	18bb      	adds	r3, r7, r2
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b1f      	cmp	r3, #31
 80028d4:	d903      	bls.n	80028de <ssd1306_WriteChar+0x2a>
 80028d6:	18bb      	adds	r3, r7, r2
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b7e      	cmp	r3, #126	; 0x7e
 80028dc:	d901      	bls.n	80028e2 <ssd1306_WriteChar+0x2e>
        return 0;
 80028de:	2300      	movs	r3, #0
 80028e0:	e08b      	b.n	80029fa <ssd1306_WriteChar+0x146>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 80028e2:	003b      	movs	r3, r7
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d008      	beq.n	80028fc <ssd1306_WriteChar+0x48>
 80028ea:	003b      	movs	r3, r7
 80028ec:	689a      	ldr	r2, [r3, #8]
 80028ee:	230f      	movs	r3, #15
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	3b20      	subs	r3, #32
 80028f6:	18d3      	adds	r3, r2, r3
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	e001      	b.n	8002900 <ssd1306_WriteChar+0x4c>
 80028fc:	003b      	movs	r3, r7
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2117      	movs	r1, #23
 8002902:	187a      	adds	r2, r7, r1
 8002904:	7013      	strb	r3, [r2, #0]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8002906:	4b3f      	ldr	r3, [pc, #252]	; (8002a04 <ssd1306_WriteChar+0x150>)
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	001a      	movs	r2, r3
 800290c:	187b      	adds	r3, r7, r1
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	18d3      	adds	r3, r2, r3
 8002912:	2b80      	cmp	r3, #128	; 0x80
 8002914:	dc07      	bgt.n	8002926 <ssd1306_WriteChar+0x72>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8002916:	4b3b      	ldr	r3, [pc, #236]	; (8002a04 <ssd1306_WriteChar+0x150>)
 8002918:	885b      	ldrh	r3, [r3, #2]
 800291a:	001a      	movs	r2, r3
 800291c:	003b      	movs	r3, r7
 800291e:	785b      	ldrb	r3, [r3, #1]
 8002920:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8002922:	2b40      	cmp	r3, #64	; 0x40
 8002924:	dd01      	ble.n	800292a <ssd1306_WriteChar+0x76>
    {
        // Not enough space on current line
        return 0;
 8002926:	2300      	movs	r3, #0
 8002928:	e067      	b.n	80029fa <ssd1306_WriteChar+0x146>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800292a:	2300      	movs	r3, #0
 800292c:	61fb      	str	r3, [r7, #28]
 800292e:	e051      	b.n	80029d4 <ssd1306_WriteChar+0x120>
        b = Font.data[(ch - 32) * Font.height + i];
 8002930:	003b      	movs	r3, r7
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	230f      	movs	r3, #15
 8002936:	18fb      	adds	r3, r7, r3
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	3b20      	subs	r3, #32
 800293c:	0039      	movs	r1, r7
 800293e:	7849      	ldrb	r1, [r1, #1]
 8002940:	434b      	muls	r3, r1
 8002942:	0019      	movs	r1, r3
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	18cb      	adds	r3, r1, r3
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	18d3      	adds	r3, r2, r3
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8002950:	2300      	movs	r3, #0
 8002952:	61bb      	str	r3, [r7, #24]
 8002954:	e035      	b.n	80029c2 <ssd1306_WriteChar+0x10e>
            if((b << j) & 0x8000)  {
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	409a      	lsls	r2, r3
 800295c:	2380      	movs	r3, #128	; 0x80
 800295e:	021b      	lsls	r3, r3, #8
 8002960:	4013      	ands	r3, r2
 8002962:	d014      	beq.n	800298e <ssd1306_WriteChar+0xda>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002964:	4b27      	ldr	r3, [pc, #156]	; (8002a04 <ssd1306_WriteChar+0x150>)
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	b2da      	uxtb	r2, r3
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	18d3      	adds	r3, r2, r3
 8002970:	b2d8      	uxtb	r0, r3
 8002972:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <ssd1306_WriteChar+0x150>)
 8002974:	885b      	ldrh	r3, [r3, #2]
 8002976:	b2da      	uxtb	r2, r3
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	b2db      	uxtb	r3, r3
 800297c:	18d3      	adds	r3, r2, r3
 800297e:	b2d9      	uxtb	r1, r3
 8002980:	2330      	movs	r3, #48	; 0x30
 8002982:	18fb      	adds	r3, r7, r3
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	001a      	movs	r2, r3
 8002988:	f7ff ff32 	bl	80027f0 <ssd1306_DrawPixel>
 800298c:	e016      	b.n	80029bc <ssd1306_WriteChar+0x108>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800298e:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <ssd1306_WriteChar+0x150>)
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	b2da      	uxtb	r2, r3
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	b2db      	uxtb	r3, r3
 8002998:	18d3      	adds	r3, r2, r3
 800299a:	b2d8      	uxtb	r0, r3
 800299c:	4b19      	ldr	r3, [pc, #100]	; (8002a04 <ssd1306_WriteChar+0x150>)
 800299e:	885b      	ldrh	r3, [r3, #2]
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	18d3      	adds	r3, r2, r3
 80029a8:	b2d9      	uxtb	r1, r3
 80029aa:	2330      	movs	r3, #48	; 0x30
 80029ac:	18fb      	adds	r3, r7, r3
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	425a      	negs	r2, r3
 80029b2:	4153      	adcs	r3, r2
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	001a      	movs	r2, r3
 80029b8:	f7ff ff1a 	bl	80027f0 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	3301      	adds	r3, #1
 80029c0:	61bb      	str	r3, [r7, #24]
 80029c2:	2317      	movs	r3, #23
 80029c4:	18fb      	adds	r3, r7, r3
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d3c3      	bcc.n	8002956 <ssd1306_WriteChar+0xa2>
    for(i = 0; i < Font.height; i++) {
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3301      	adds	r3, #1
 80029d2:	61fb      	str	r3, [r7, #28]
 80029d4:	003b      	movs	r3, r7
 80029d6:	785b      	ldrb	r3, [r3, #1]
 80029d8:	001a      	movs	r2, r3
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	4293      	cmp	r3, r2
 80029de:	d3a7      	bcc.n	8002930 <ssd1306_WriteChar+0x7c>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 80029e0:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <ssd1306_WriteChar+0x150>)
 80029e2:	881a      	ldrh	r2, [r3, #0]
 80029e4:	2317      	movs	r3, #23
 80029e6:	18fb      	adds	r3, r7, r3
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	18d3      	adds	r3, r2, r3
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <ssd1306_WriteChar+0x150>)
 80029f2:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80029f4:	230f      	movs	r3, #15
 80029f6:	18fb      	adds	r3, r7, r3
 80029f8:	781b      	ldrb	r3, [r3, #0]
}
 80029fa:	0018      	movs	r0, r3
 80029fc:	46bd      	mov	sp, r7
 80029fe:	b009      	add	sp, #36	; 0x24
 8002a00:	bd90      	pop	{r4, r7, pc}
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	20001028 	.word	0x20001028

08002a08 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af02      	add	r7, sp, #8
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	0038      	movs	r0, r7
 8002a12:	6001      	str	r1, [r0, #0]
 8002a14:	6042      	str	r2, [r0, #4]
 8002a16:	6083      	str	r3, [r0, #8]
    while (*str) {
 8002a18:	e017      	b.n	8002a4a <ssd1306_WriteString+0x42>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	7818      	ldrb	r0, [r3, #0]
 8002a1e:	003b      	movs	r3, r7
 8002a20:	2218      	movs	r2, #24
 8002a22:	18ba      	adds	r2, r7, r2
 8002a24:	7812      	ldrb	r2, [r2, #0]
 8002a26:	9200      	str	r2, [sp, #0]
 8002a28:	6819      	ldr	r1, [r3, #0]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f7ff ff41 	bl	80028b4 <ssd1306_WriteChar>
 8002a32:	0003      	movs	r3, r0
 8002a34:	001a      	movs	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d002      	beq.n	8002a44 <ssd1306_WriteString+0x3c>
            // Char could not be written
            return *str;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	e008      	b.n	8002a56 <ssd1306_WriteString+0x4e>
        }
        str++;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	3301      	adds	r3, #1
 8002a48:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1e3      	bne.n	8002a1a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	781b      	ldrb	r3, [r3, #0]
}
 8002a56:	0018      	movs	r0, r3
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b004      	add	sp, #16
 8002a5c:	bd80      	pop	{r7, pc}
	...

08002a60 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	0002      	movs	r2, r0
 8002a68:	1dfb      	adds	r3, r7, #7
 8002a6a:	701a      	strb	r2, [r3, #0]
 8002a6c:	1dbb      	adds	r3, r7, #6
 8002a6e:	1c0a      	adds	r2, r1, #0
 8002a70:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8002a72:	1dfb      	adds	r3, r7, #7
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <ssd1306_SetCursor+0x30>)
 8002a7a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002a7c:	1dbb      	adds	r3, r7, #6
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	4b03      	ldr	r3, [pc, #12]	; (8002a90 <ssd1306_SetCursor+0x30>)
 8002a84:	805a      	strh	r2, [r3, #2]
}
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	b002      	add	sp, #8
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	20001028 	.word	0x20001028

08002a94 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	0002      	movs	r2, r0
 8002a9c:	1dfb      	adds	r3, r7, #7
 8002a9e:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002aa0:	210f      	movs	r1, #15
 8002aa2:	187b      	adds	r3, r7, r1
 8002aa4:	2281      	movs	r2, #129	; 0x81
 8002aa6:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002aa8:	187b      	adds	r3, r7, r1
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	0018      	movs	r0, r3
 8002aae:	f7ff fd9b 	bl	80025e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002ab2:	1dfb      	adds	r3, r7, #7
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f7ff fd96 	bl	80025e8 <ssd1306_WriteCommand>
}
 8002abc:	46c0      	nop			; (mov r8, r8)
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	b004      	add	sp, #16
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	0002      	movs	r2, r0
 8002acc:	1dfb      	adds	r3, r7, #7
 8002ace:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8002ad0:	1dfb      	adds	r3, r7, #7
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d007      	beq.n	8002ae8 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8002ad8:	230f      	movs	r3, #15
 8002ada:	18fb      	adds	r3, r7, r3
 8002adc:	22af      	movs	r2, #175	; 0xaf
 8002ade:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8002ae0:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <ssd1306_SetDisplayOn+0x48>)
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	715a      	strb	r2, [r3, #5]
 8002ae6:	e006      	b.n	8002af6 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8002ae8:	230f      	movs	r3, #15
 8002aea:	18fb      	adds	r3, r7, r3
 8002aec:	22ae      	movs	r2, #174	; 0xae
 8002aee:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <ssd1306_SetDisplayOn+0x48>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002af6:	230f      	movs	r3, #15
 8002af8:	18fb      	adds	r3, r7, r3
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	0018      	movs	r0, r3
 8002afe:	f7ff fd73 	bl	80025e8 <ssd1306_WriteCommand>
}
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b004      	add	sp, #16
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	20001028 	.word	0x20001028

08002b10 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b14:	4b07      	ldr	r3, [pc, #28]	; (8002b34 <HAL_Init+0x24>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <HAL_Init+0x24>)
 8002b1a:	2110      	movs	r1, #16
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002b20:	2003      	movs	r0, #3
 8002b22:	f000 f809 	bl	8002b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b26:	f7ff faaf 	bl	8002088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	40022000 	.word	0x40022000

08002b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b38:	b590      	push	{r4, r7, lr}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b40:	4b14      	ldr	r3, [pc, #80]	; (8002b94 <HAL_InitTick+0x5c>)
 8002b42:	681c      	ldr	r4, [r3, #0]
 8002b44:	4b14      	ldr	r3, [pc, #80]	; (8002b98 <HAL_InitTick+0x60>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	0019      	movs	r1, r3
 8002b4a:	23fa      	movs	r3, #250	; 0xfa
 8002b4c:	0098      	lsls	r0, r3, #2
 8002b4e:	f7fd fae5 	bl	800011c <__udivsi3>
 8002b52:	0003      	movs	r3, r0
 8002b54:	0019      	movs	r1, r3
 8002b56:	0020      	movs	r0, r4
 8002b58:	f7fd fae0 	bl	800011c <__udivsi3>
 8002b5c:	0003      	movs	r3, r0
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f001 fced 	bl	800453e <HAL_SYSTICK_Config>
 8002b64:	1e03      	subs	r3, r0, #0
 8002b66:	d001      	beq.n	8002b6c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e00f      	b.n	8002b8c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d80b      	bhi.n	8002b8a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	2301      	movs	r3, #1
 8002b76:	425b      	negs	r3, r3
 8002b78:	2200      	movs	r2, #0
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f001 fcba 	bl	80044f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b80:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <HAL_InitTick+0x64>)
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	e000      	b.n	8002b8c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
}
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	b003      	add	sp, #12
 8002b92:	bd90      	pop	{r4, r7, pc}
 8002b94:	20000004 	.word	0x20000004
 8002b98:	2000000c 	.word	0x2000000c
 8002b9c:	20000008 	.word	0x20000008

08002ba0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <HAL_IncTick+0x1c>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	001a      	movs	r2, r3
 8002baa:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_IncTick+0x20>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	18d2      	adds	r2, r2, r3
 8002bb0:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <HAL_IncTick+0x20>)
 8002bb2:	601a      	str	r2, [r3, #0]
}
 8002bb4:	46c0      	nop			; (mov r8, r8)
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	2000000c 	.word	0x2000000c
 8002bc0:	20001030 	.word	0x20001030

08002bc4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002bc8:	4b02      	ldr	r3, [pc, #8]	; (8002bd4 <HAL_GetTick+0x10>)
 8002bca:	681b      	ldr	r3, [r3, #0]
}
 8002bcc:	0018      	movs	r0, r3
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	20001030 	.word	0x20001030

08002bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002be0:	f7ff fff0 	bl	8002bc4 <HAL_GetTick>
 8002be4:	0003      	movs	r3, r0
 8002be6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	d005      	beq.n	8002bfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bf2:	4b0a      	ldr	r3, [pc, #40]	; (8002c1c <HAL_Delay+0x44>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	189b      	adds	r3, r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	f7ff ffe0 	bl	8002bc4 <HAL_GetTick>
 8002c04:	0002      	movs	r2, r0
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d8f7      	bhi.n	8002c00 <HAL_Delay+0x28>
  {
  }
}
 8002c10:	46c0      	nop			; (mov r8, r8)
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	46bd      	mov	sp, r7
 8002c16:	b004      	add	sp, #16
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	2000000c 	.word	0x2000000c

08002c20 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c28:	230f      	movs	r3, #15
 8002c2a:	18fb      	adds	r3, r7, r3
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e125      	b.n	8002e8a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10a      	bne.n	8002c5c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2234      	movs	r2, #52	; 0x34
 8002c50:	2100      	movs	r1, #0
 8002c52:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	0018      	movs	r0, r3
 8002c58:	f7ff fa3a 	bl	80020d0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c60:	2210      	movs	r2, #16
 8002c62:	4013      	ands	r3, r2
 8002c64:	d000      	beq.n	8002c68 <HAL_ADC_Init+0x48>
 8002c66:	e103      	b.n	8002e70 <HAL_ADC_Init+0x250>
 8002c68:	230f      	movs	r3, #15
 8002c6a:	18fb      	adds	r3, r7, r3
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d000      	beq.n	8002c74 <HAL_ADC_Init+0x54>
 8002c72:	e0fd      	b.n	8002e70 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	2204      	movs	r2, #4
 8002c7c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002c7e:	d000      	beq.n	8002c82 <HAL_ADC_Init+0x62>
 8002c80:	e0f6      	b.n	8002e70 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c86:	4a83      	ldr	r2, [pc, #524]	; (8002e94 <HAL_ADC_Init+0x274>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	2203      	movs	r2, #3
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d112      	bne.n	8002cc6 <HAL_ADC_Init+0xa6>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	4013      	ands	r3, r2
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d009      	beq.n	8002cc2 <HAL_ADC_Init+0xa2>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	2380      	movs	r3, #128	; 0x80
 8002cb6:	021b      	lsls	r3, r3, #8
 8002cb8:	401a      	ands	r2, r3
 8002cba:	2380      	movs	r3, #128	; 0x80
 8002cbc:	021b      	lsls	r3, r3, #8
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d101      	bne.n	8002cc6 <HAL_ADC_Init+0xa6>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <HAL_ADC_Init+0xa8>
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d116      	bne.n	8002cfa <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	2218      	movs	r2, #24
 8002cd4:	4393      	bics	r3, r2
 8002cd6:	0019      	movs	r1, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	0899      	lsrs	r1, r3, #2
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68da      	ldr	r2, [r3, #12]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4964      	ldr	r1, [pc, #400]	; (8002e98 <HAL_ADC_Init+0x278>)
 8002d06:	400a      	ands	r2, r1
 8002d08:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	7e1b      	ldrb	r3, [r3, #24]
 8002d0e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	7e5b      	ldrb	r3, [r3, #25]
 8002d14:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d16:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	7e9b      	ldrb	r3, [r3, #26]
 8002d1c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002d1e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d002      	beq.n	8002d2e <HAL_ADC_Init+0x10e>
 8002d28:	2380      	movs	r3, #128	; 0x80
 8002d2a:	015b      	lsls	r3, r3, #5
 8002d2c:	e000      	b.n	8002d30 <HAL_ADC_Init+0x110>
 8002d2e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002d30:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002d36:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d101      	bne.n	8002d44 <HAL_ADC_Init+0x124>
 8002d40:	2304      	movs	r3, #4
 8002d42:	e000      	b.n	8002d46 <HAL_ADC_Init+0x126>
 8002d44:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002d46:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2124      	movs	r1, #36	; 0x24
 8002d4c:	5c5b      	ldrb	r3, [r3, r1]
 8002d4e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002d50:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	7edb      	ldrb	r3, [r3, #27]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d115      	bne.n	8002d8c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	7e9b      	ldrb	r3, [r3, #26]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d105      	bne.n	8002d74 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2280      	movs	r2, #128	; 0x80
 8002d6c:	0252      	lsls	r2, r2, #9
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	e00b      	b.n	8002d8c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d78:	2220      	movs	r2, #32
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d84:	2201      	movs	r2, #1
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69da      	ldr	r2, [r3, #28]
 8002d90:	23c2      	movs	r3, #194	; 0xc2
 8002d92:	33ff      	adds	r3, #255	; 0xff
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d007      	beq.n	8002da8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002da0:	4313      	orrs	r3, r2
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68d9      	ldr	r1, [r3, #12]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dbc:	2380      	movs	r3, #128	; 0x80
 8002dbe:	055b      	lsls	r3, r3, #21
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d01b      	beq.n	8002dfc <HAL_ADC_Init+0x1dc>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d017      	beq.n	8002dfc <HAL_ADC_Init+0x1dc>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d013      	beq.n	8002dfc <HAL_ADC_Init+0x1dc>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	2b03      	cmp	r3, #3
 8002dda:	d00f      	beq.n	8002dfc <HAL_ADC_Init+0x1dc>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de0:	2b04      	cmp	r3, #4
 8002de2:	d00b      	beq.n	8002dfc <HAL_ADC_Init+0x1dc>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de8:	2b05      	cmp	r3, #5
 8002dea:	d007      	beq.n	8002dfc <HAL_ADC_Init+0x1dc>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df0:	2b06      	cmp	r3, #6
 8002df2:	d003      	beq.n	8002dfc <HAL_ADC_Init+0x1dc>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	2b07      	cmp	r3, #7
 8002dfa:	d112      	bne.n	8002e22 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695a      	ldr	r2, [r3, #20]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2107      	movs	r1, #7
 8002e08:	438a      	bics	r2, r1
 8002e0a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6959      	ldr	r1, [r3, #20]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e16:	2207      	movs	r2, #7
 8002e18:	401a      	ands	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	4a1c      	ldr	r2, [pc, #112]	; (8002e9c <HAL_ADC_Init+0x27c>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d10b      	bne.n	8002e4a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3c:	2203      	movs	r2, #3
 8002e3e:	4393      	bics	r3, r2
 8002e40:	2201      	movs	r2, #1
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002e48:	e01c      	b.n	8002e84 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4e:	2212      	movs	r2, #18
 8002e50:	4393      	bics	r3, r2
 8002e52:	2210      	movs	r2, #16
 8002e54:	431a      	orrs	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5e:	2201      	movs	r2, #1
 8002e60:	431a      	orrs	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002e66:	230f      	movs	r3, #15
 8002e68:	18fb      	adds	r3, r7, r3
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002e6e:	e009      	b.n	8002e84 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e74:	2210      	movs	r2, #16
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002e7c:	230f      	movs	r3, #15
 8002e7e:	18fb      	adds	r3, r7, r3
 8002e80:	2201      	movs	r2, #1
 8002e82:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e84:	230f      	movs	r3, #15
 8002e86:	18fb      	adds	r3, r7, r3
 8002e88:	781b      	ldrb	r3, [r3, #0]
}
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	b004      	add	sp, #16
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	fffffefd 	.word	0xfffffefd
 8002e98:	fffe0219 	.word	0xfffe0219
 8002e9c:	833fffe7 	.word	0x833fffe7

08002ea0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002ea0:	b590      	push	{r4, r7, lr}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eac:	2317      	movs	r3, #23
 8002eae:	18fb      	adds	r3, r7, r3
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	2204      	movs	r2, #4
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d15e      	bne.n	8002f7e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2234      	movs	r2, #52	; 0x34
 8002ec4:	5c9b      	ldrb	r3, [r3, r2]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_ADC_Start_DMA+0x2e>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e05e      	b.n	8002f8c <HAL_ADC_Start_DMA+0xec>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2234      	movs	r2, #52	; 0x34
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	7e5b      	ldrb	r3, [r3, #25]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d007      	beq.n	8002eee <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002ede:	2317      	movs	r3, #23
 8002ee0:	18fc      	adds	r4, r7, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	f000 fa29 	bl	800333c <ADC_Enable>
 8002eea:	0003      	movs	r3, r0
 8002eec:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002eee:	2317      	movs	r3, #23
 8002ef0:	18fb      	adds	r3, r7, r3
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d146      	bne.n	8002f86 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efc:	4a25      	ldr	r2, [pc, #148]	; (8002f94 <HAL_ADC_Start_DMA+0xf4>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	2280      	movs	r2, #128	; 0x80
 8002f02:	0052      	lsls	r2, r2, #1
 8002f04:	431a      	orrs	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2234      	movs	r2, #52	; 0x34
 8002f14:	2100      	movs	r1, #0
 8002f16:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	4a1e      	ldr	r2, [pc, #120]	; (8002f98 <HAL_ADC_Start_DMA+0xf8>)
 8002f1e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f24:	4a1d      	ldr	r2, [pc, #116]	; (8002f9c <HAL_ADC_Start_DMA+0xfc>)
 8002f26:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2c:	4a1c      	ldr	r2, [pc, #112]	; (8002fa0 <HAL_ADC_Start_DMA+0x100>)
 8002f2e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	221c      	movs	r2, #28
 8002f36:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2110      	movs	r1, #16
 8002f44:	430a      	orrs	r2, r1
 8002f46:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2101      	movs	r1, #1
 8002f54:	430a      	orrs	r2, r1
 8002f56:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	3340      	adds	r3, #64	; 0x40
 8002f62:	0019      	movs	r1, r3
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f001 fb3e 	bl	80045e8 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2104      	movs	r1, #4
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	e003      	b.n	8002f86 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f7e:	2317      	movs	r3, #23
 8002f80:	18fb      	adds	r3, r7, r3
 8002f82:	2202      	movs	r2, #2
 8002f84:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002f86:	2317      	movs	r3, #23
 8002f88:	18fb      	adds	r3, r7, r3
 8002f8a:	781b      	ldrb	r3, [r3, #0]
}
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b007      	add	sp, #28
 8002f92:	bd90      	pop	{r4, r7, pc}
 8002f94:	fffff0fe 	.word	0xfffff0fe
 8002f98:	08003445 	.word	0x08003445
 8002f9c:	080034f9 	.word	0x080034f9
 8002fa0:	08003517 	.word	0x08003517

08002fa4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d003      	beq.n	8002fcc <HAL_ADC_IRQHandler+0x28>
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2204      	movs	r2, #4
 8002fc8:	4013      	ands	r3, r2
 8002fca:	d107      	bne.n	8002fdc <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2208      	movs	r2, #8
 8002fd0:	4013      	ands	r3, r2
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002fd2:	d049      	beq.n	8003068 <HAL_ADC_IRQHandler+0xc4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2208      	movs	r2, #8
 8002fd8:	4013      	ands	r3, r2
 8002fda:	d045      	beq.n	8003068 <HAL_ADC_IRQHandler+0xc4>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe0:	2210      	movs	r2, #16
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d106      	bne.n	8002ff4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fea:	2280      	movs	r2, #128	; 0x80
 8002fec:	0092      	lsls	r2, r2, #2
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68da      	ldr	r2, [r3, #12]
 8002ffa:	23c0      	movs	r3, #192	; 0xc0
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	4013      	ands	r3, r2
 8003000:	d12a      	bne.n	8003058 <HAL_ADC_IRQHandler+0xb4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003006:	2b00      	cmp	r3, #0
 8003008:	d126      	bne.n	8003058 <HAL_ADC_IRQHandler+0xb4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2208      	movs	r2, #8
 800300e:	4013      	ands	r3, r2
 8003010:	d022      	beq.n	8003058 <HAL_ADC_IRQHandler+0xb4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2204      	movs	r2, #4
 800301a:	4013      	ands	r3, r2
 800301c:	d110      	bne.n	8003040 <HAL_ADC_IRQHandler+0x9c>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	210c      	movs	r1, #12
 800302a:	438a      	bics	r2, r1
 800302c:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003032:	4a2d      	ldr	r2, [pc, #180]	; (80030e8 <HAL_ADC_IRQHandler+0x144>)
 8003034:	4013      	ands	r3, r2
 8003036:	2201      	movs	r2, #1
 8003038:	431a      	orrs	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	639a      	str	r2, [r3, #56]	; 0x38
 800303e:	e00b      	b.n	8003058 <HAL_ADC_IRQHandler+0xb4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003044:	2220      	movs	r2, #32
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003050:	2201      	movs	r2, #1
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	0018      	movs	r0, r3
 800305c:	f7fd fb9e 	bl	800079c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	220c      	movs	r2, #12
 8003066:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2280      	movs	r2, #128	; 0x80
 800306c:	4013      	ands	r3, r2
 800306e:	d012      	beq.n	8003096 <HAL_ADC_IRQHandler+0xf2>
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2280      	movs	r2, #128	; 0x80
 8003074:	4013      	ands	r3, r2
 8003076:	d00e      	beq.n	8003096 <HAL_ADC_IRQHandler+0xf2>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307c:	2280      	movs	r2, #128	; 0x80
 800307e:	0252      	lsls	r2, r2, #9
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	0018      	movs	r0, r3
 800308a:	f000 f837 	bl	80030fc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2280      	movs	r2, #128	; 0x80
 8003094:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2210      	movs	r2, #16
 800309a:	4013      	ands	r3, r2
 800309c:	d020      	beq.n	80030e0 <HAL_ADC_IRQHandler+0x13c>
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2210      	movs	r2, #16
 80030a2:	4013      	ands	r3, r2
 80030a4:	d01c      	beq.n	80030e0 <HAL_ADC_IRQHandler+0x13c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d006      	beq.n	80030bc <HAL_ADC_IRQHandler+0x118>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	2201      	movs	r2, #1
 80030b6:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d10d      	bne.n	80030d8 <HAL_ADC_IRQHandler+0x134>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c0:	2202      	movs	r2, #2
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2210      	movs	r2, #16
 80030ce:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	0018      	movs	r0, r3
 80030d4:	f7fd fb74 	bl	80007c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2210      	movs	r2, #16
 80030de:	601a      	str	r2, [r3, #0]
  }

}
 80030e0:	46c0      	nop			; (mov r8, r8)
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b004      	add	sp, #16
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	fffffefe 	.word	0xfffffefe

080030ec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80030f4:	46c0      	nop			; (mov r8, r8)
 80030f6:	46bd      	mov	sp, r7
 80030f8:	b002      	add	sp, #8
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8003104:	46c0      	nop			; (mov r8, r8)
 8003106:	46bd      	mov	sp, r7
 8003108:	b002      	add	sp, #8
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003116:	230f      	movs	r3, #15
 8003118:	18fb      	adds	r3, r7, r3
 800311a:	2200      	movs	r2, #0
 800311c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003126:	2380      	movs	r3, #128	; 0x80
 8003128:	055b      	lsls	r3, r3, #21
 800312a:	429a      	cmp	r2, r3
 800312c:	d011      	beq.n	8003152 <HAL_ADC_ConfigChannel+0x46>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003132:	2b01      	cmp	r3, #1
 8003134:	d00d      	beq.n	8003152 <HAL_ADC_ConfigChannel+0x46>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313a:	2b02      	cmp	r3, #2
 800313c:	d009      	beq.n	8003152 <HAL_ADC_ConfigChannel+0x46>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003142:	2b03      	cmp	r3, #3
 8003144:	d005      	beq.n	8003152 <HAL_ADC_ConfigChannel+0x46>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314a:	2b04      	cmp	r3, #4
 800314c:	d001      	beq.n	8003152 <HAL_ADC_ConfigChannel+0x46>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2234      	movs	r2, #52	; 0x34
 8003156:	5c9b      	ldrb	r3, [r3, r2]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x54>
 800315c:	2302      	movs	r3, #2
 800315e:	e0d0      	b.n	8003302 <HAL_ADC_ConfigChannel+0x1f6>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2234      	movs	r2, #52	; 0x34
 8003164:	2101      	movs	r1, #1
 8003166:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	2204      	movs	r2, #4
 8003170:	4013      	ands	r3, r2
 8003172:	d000      	beq.n	8003176 <HAL_ADC_ConfigChannel+0x6a>
 8003174:	e0b4      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	4a64      	ldr	r2, [pc, #400]	; (800330c <HAL_ADC_ConfigChannel+0x200>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d100      	bne.n	8003182 <HAL_ADC_ConfigChannel+0x76>
 8003180:	e082      	b.n	8003288 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2201      	movs	r2, #1
 800318e:	409a      	lsls	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800319c:	2380      	movs	r3, #128	; 0x80
 800319e:	055b      	lsls	r3, r3, #21
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d037      	beq.n	8003214 <HAL_ADC_ConfigChannel+0x108>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d033      	beq.n	8003214 <HAL_ADC_ConfigChannel+0x108>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d02f      	beq.n	8003214 <HAL_ADC_ConfigChannel+0x108>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	d02b      	beq.n	8003214 <HAL_ADC_ConfigChannel+0x108>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d027      	beq.n	8003214 <HAL_ADC_ConfigChannel+0x108>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c8:	2b05      	cmp	r3, #5
 80031ca:	d023      	beq.n	8003214 <HAL_ADC_ConfigChannel+0x108>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	2b06      	cmp	r3, #6
 80031d2:	d01f      	beq.n	8003214 <HAL_ADC_ConfigChannel+0x108>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	2b07      	cmp	r3, #7
 80031da:	d01b      	beq.n	8003214 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	2107      	movs	r1, #7
 80031e8:	400b      	ands	r3, r1
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d012      	beq.n	8003214 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695a      	ldr	r2, [r3, #20]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2107      	movs	r1, #7
 80031fa:	438a      	bics	r2, r1
 80031fc:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6959      	ldr	r1, [r3, #20]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	2207      	movs	r2, #7
 800320a:	401a      	ands	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2b10      	cmp	r3, #16
 800321a:	d007      	beq.n	800322c <HAL_ADC_ConfigChannel+0x120>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b11      	cmp	r3, #17
 8003222:	d003      	beq.n	800322c <HAL_ADC_ConfigChannel+0x120>
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b12      	cmp	r3, #18
 800322a:	d163      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800322c:	4b38      	ldr	r3, [pc, #224]	; (8003310 <HAL_ADC_ConfigChannel+0x204>)
 800322e:	6819      	ldr	r1, [r3, #0]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b10      	cmp	r3, #16
 8003236:	d009      	beq.n	800324c <HAL_ADC_ConfigChannel+0x140>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b11      	cmp	r3, #17
 800323e:	d102      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x13a>
 8003240:	2380      	movs	r3, #128	; 0x80
 8003242:	03db      	lsls	r3, r3, #15
 8003244:	e004      	b.n	8003250 <HAL_ADC_ConfigChannel+0x144>
 8003246:	2380      	movs	r3, #128	; 0x80
 8003248:	045b      	lsls	r3, r3, #17
 800324a:	e001      	b.n	8003250 <HAL_ADC_ConfigChannel+0x144>
 800324c:	2380      	movs	r3, #128	; 0x80
 800324e:	041b      	lsls	r3, r3, #16
 8003250:	4a2f      	ldr	r2, [pc, #188]	; (8003310 <HAL_ADC_ConfigChannel+0x204>)
 8003252:	430b      	orrs	r3, r1
 8003254:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b10      	cmp	r3, #16
 800325c:	d14a      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800325e:	4b2d      	ldr	r3, [pc, #180]	; (8003314 <HAL_ADC_ConfigChannel+0x208>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	492d      	ldr	r1, [pc, #180]	; (8003318 <HAL_ADC_ConfigChannel+0x20c>)
 8003264:	0018      	movs	r0, r3
 8003266:	f7fc ff59 	bl	800011c <__udivsi3>
 800326a:	0003      	movs	r3, r0
 800326c:	001a      	movs	r2, r3
 800326e:	0013      	movs	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	189b      	adds	r3, r3, r2
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003278:	e002      	b.n	8003280 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	3b01      	subs	r3, #1
 800327e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f9      	bne.n	800327a <HAL_ADC_ConfigChannel+0x16e>
 8003286:	e035      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2101      	movs	r1, #1
 8003294:	4099      	lsls	r1, r3
 8003296:	000b      	movs	r3, r1
 8003298:	43d9      	mvns	r1, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	400a      	ands	r2, r1
 80032a0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2b10      	cmp	r3, #16
 80032a8:	d007      	beq.n	80032ba <HAL_ADC_ConfigChannel+0x1ae>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b11      	cmp	r3, #17
 80032b0:	d003      	beq.n	80032ba <HAL_ADC_ConfigChannel+0x1ae>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b12      	cmp	r3, #18
 80032b8:	d11c      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80032ba:	4b15      	ldr	r3, [pc, #84]	; (8003310 <HAL_ADC_ConfigChannel+0x204>)
 80032bc:	6819      	ldr	r1, [r3, #0]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b10      	cmp	r3, #16
 80032c4:	d007      	beq.n	80032d6 <HAL_ADC_ConfigChannel+0x1ca>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b11      	cmp	r3, #17
 80032cc:	d101      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x1c6>
 80032ce:	4b13      	ldr	r3, [pc, #76]	; (800331c <HAL_ADC_ConfigChannel+0x210>)
 80032d0:	e002      	b.n	80032d8 <HAL_ADC_ConfigChannel+0x1cc>
 80032d2:	4b13      	ldr	r3, [pc, #76]	; (8003320 <HAL_ADC_ConfigChannel+0x214>)
 80032d4:	e000      	b.n	80032d8 <HAL_ADC_ConfigChannel+0x1cc>
 80032d6:	4b13      	ldr	r3, [pc, #76]	; (8003324 <HAL_ADC_ConfigChannel+0x218>)
 80032d8:	4a0d      	ldr	r2, [pc, #52]	; (8003310 <HAL_ADC_ConfigChannel+0x204>)
 80032da:	400b      	ands	r3, r1
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	e009      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e4:	2220      	movs	r2, #32
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80032ec:	230f      	movs	r3, #15
 80032ee:	18fb      	adds	r3, r7, r3
 80032f0:	2201      	movs	r2, #1
 80032f2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2234      	movs	r2, #52	; 0x34
 80032f8:	2100      	movs	r1, #0
 80032fa:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80032fc:	230f      	movs	r3, #15
 80032fe:	18fb      	adds	r3, r7, r3
 8003300:	781b      	ldrb	r3, [r3, #0]
}
 8003302:	0018      	movs	r0, r3
 8003304:	46bd      	mov	sp, r7
 8003306:	b004      	add	sp, #16
 8003308:	bd80      	pop	{r7, pc}
 800330a:	46c0      	nop			; (mov r8, r8)
 800330c:	00001001 	.word	0x00001001
 8003310:	40012708 	.word	0x40012708
 8003314:	20000004 	.word	0x20000004
 8003318:	000f4240 	.word	0x000f4240
 800331c:	ffbfffff 	.word	0xffbfffff
 8003320:	feffffff 	.word	0xfeffffff
 8003324:	ff7fffff 	.word	0xff7fffff

08003328 <HAL_ADC_GetError>:
  * @brief  Return the ADC error code
  * @param  hadc ADC handle
  * @retval ADC Error Code
  */
uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  return hadc->ErrorCode;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8003334:	0018      	movs	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	b002      	add	sp, #8
 800333a:	bd80      	pop	{r7, pc}

0800333c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	2203      	movs	r2, #3
 8003354:	4013      	ands	r3, r2
 8003356:	2b01      	cmp	r3, #1
 8003358:	d112      	bne.n	8003380 <ADC_Enable+0x44>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2201      	movs	r2, #1
 8003362:	4013      	ands	r3, r2
 8003364:	2b01      	cmp	r3, #1
 8003366:	d009      	beq.n	800337c <ADC_Enable+0x40>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	2380      	movs	r3, #128	; 0x80
 8003370:	021b      	lsls	r3, r3, #8
 8003372:	401a      	ands	r2, r3
 8003374:	2380      	movs	r3, #128	; 0x80
 8003376:	021b      	lsls	r3, r3, #8
 8003378:	429a      	cmp	r2, r3
 800337a:	d101      	bne.n	8003380 <ADC_Enable+0x44>
 800337c:	2301      	movs	r3, #1
 800337e:	e000      	b.n	8003382 <ADC_Enable+0x46>
 8003380:	2300      	movs	r3, #0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d152      	bne.n	800342c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	4a2a      	ldr	r2, [pc, #168]	; (8003438 <ADC_Enable+0xfc>)
 800338e:	4013      	ands	r3, r2
 8003390:	d00d      	beq.n	80033ae <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003396:	2210      	movs	r2, #16
 8003398:	431a      	orrs	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a2:	2201      	movs	r2, #1
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e03f      	b.n	800342e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2101      	movs	r1, #1
 80033ba:	430a      	orrs	r2, r1
 80033bc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80033be:	4b1f      	ldr	r3, [pc, #124]	; (800343c <ADC_Enable+0x100>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	491f      	ldr	r1, [pc, #124]	; (8003440 <ADC_Enable+0x104>)
 80033c4:	0018      	movs	r0, r3
 80033c6:	f7fc fea9 	bl	800011c <__udivsi3>
 80033ca:	0003      	movs	r3, r0
 80033cc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80033ce:	e002      	b.n	80033d6 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	3b01      	subs	r3, #1
 80033d4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1f9      	bne.n	80033d0 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80033dc:	f7ff fbf2 	bl	8002bc4 <HAL_GetTick>
 80033e0:	0003      	movs	r3, r0
 80033e2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80033e4:	e01b      	b.n	800341e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033e6:	f7ff fbed 	bl	8002bc4 <HAL_GetTick>
 80033ea:	0002      	movs	r2, r0
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d914      	bls.n	800341e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2201      	movs	r2, #1
 80033fc:	4013      	ands	r3, r2
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d00d      	beq.n	800341e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003406:	2210      	movs	r2, #16
 8003408:	431a      	orrs	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003412:	2201      	movs	r2, #1
 8003414:	431a      	orrs	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e007      	b.n	800342e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2201      	movs	r2, #1
 8003426:	4013      	ands	r3, r2
 8003428:	2b01      	cmp	r3, #1
 800342a:	d1dc      	bne.n	80033e6 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	0018      	movs	r0, r3
 8003430:	46bd      	mov	sp, r7
 8003432:	b004      	add	sp, #16
 8003434:	bd80      	pop	{r7, pc}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	80000017 	.word	0x80000017
 800343c:	20000004 	.word	0x20000004
 8003440:	000f4240 	.word	0x000f4240

08003444 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003456:	2250      	movs	r2, #80	; 0x50
 8003458:	4013      	ands	r3, r2
 800345a:	d140      	bne.n	80034de <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003460:	2280      	movs	r2, #128	; 0x80
 8003462:	0092      	lsls	r2, r2, #2
 8003464:	431a      	orrs	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	23c0      	movs	r3, #192	; 0xc0
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	4013      	ands	r3, r2
 8003476:	d12d      	bne.n	80034d4 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800347c:	2b00      	cmp	r3, #0
 800347e:	d129      	bne.n	80034d4 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2208      	movs	r2, #8
 8003488:	4013      	ands	r3, r2
 800348a:	2b08      	cmp	r3, #8
 800348c:	d122      	bne.n	80034d4 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	2204      	movs	r2, #4
 8003496:	4013      	ands	r3, r2
 8003498:	d110      	bne.n	80034bc <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	210c      	movs	r1, #12
 80034a6:	438a      	bics	r2, r1
 80034a8:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ae:	4a11      	ldr	r2, [pc, #68]	; (80034f4 <ADC_DMAConvCplt+0xb0>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	2201      	movs	r2, #1
 80034b4:	431a      	orrs	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	639a      	str	r2, [r3, #56]	; 0x38
 80034ba:	e00b      	b.n	80034d4 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c0:	2220      	movs	r2, #32
 80034c2:	431a      	orrs	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034cc:	2201      	movs	r2, #1
 80034ce:	431a      	orrs	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	0018      	movs	r0, r3
 80034d8:	f7fd f960 	bl	800079c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80034dc:	e005      	b.n	80034ea <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	0010      	movs	r0, r2
 80034e8:	4798      	blx	r3
}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	46bd      	mov	sp, r7
 80034ee:	b004      	add	sp, #16
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	fffffefe 	.word	0xfffffefe

080034f8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	0018      	movs	r0, r3
 800350a:	f7ff fdef 	bl	80030ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	46bd      	mov	sp, r7
 8003512:	b004      	add	sp, #16
 8003514:	bd80      	pop	{r7, pc}

08003516 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003528:	2240      	movs	r2, #64	; 0x40
 800352a:	431a      	orrs	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003534:	2204      	movs	r2, #4
 8003536:	431a      	orrs	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	0018      	movs	r0, r3
 8003540:	f7fd f93e 	bl	80007c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003544:	46c0      	nop			; (mov r8, r8)
 8003546:	46bd      	mov	sp, r7
 8003548:	b004      	add	sp, #16
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003554:	2317      	movs	r3, #23
 8003556:	18fb      	adds	r3, r7, r3
 8003558:	2200      	movs	r2, #0
 800355a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8003560:	2300      	movs	r3, #0
 8003562:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2234      	movs	r2, #52	; 0x34
 8003568:	5c9b      	ldrb	r3, [r3, r2]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_ADCEx_Calibration_Start+0x26>
 800356e:	2302      	movs	r3, #2
 8003570:	e08d      	b.n	800368e <HAL_ADCEx_Calibration_Start+0x142>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2234      	movs	r2, #52	; 0x34
 8003576:	2101      	movs	r1, #1
 8003578:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2203      	movs	r2, #3
 8003582:	4013      	ands	r3, r2
 8003584:	2b01      	cmp	r3, #1
 8003586:	d112      	bne.n	80035ae <HAL_ADCEx_Calibration_Start+0x62>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2201      	movs	r2, #1
 8003590:	4013      	ands	r3, r2
 8003592:	2b01      	cmp	r3, #1
 8003594:	d009      	beq.n	80035aa <HAL_ADCEx_Calibration_Start+0x5e>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68da      	ldr	r2, [r3, #12]
 800359c:	2380      	movs	r3, #128	; 0x80
 800359e:	021b      	lsls	r3, r3, #8
 80035a0:	401a      	ands	r2, r3
 80035a2:	2380      	movs	r3, #128	; 0x80
 80035a4:	021b      	lsls	r3, r3, #8
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d101      	bne.n	80035ae <HAL_ADCEx_Calibration_Start+0x62>
 80035aa:	2301      	movs	r3, #1
 80035ac:	e000      	b.n	80035b0 <HAL_ADCEx_Calibration_Start+0x64>
 80035ae:	2300      	movs	r3, #0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d15b      	bne.n	800366c <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b8:	4a37      	ldr	r2, [pc, #220]	; (8003698 <HAL_ADCEx_Calibration_Start+0x14c>)
 80035ba:	4013      	ands	r3, r2
 80035bc:	2202      	movs	r2, #2
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	2203      	movs	r2, #3
 80035cc:	4013      	ands	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2103      	movs	r1, #3
 80035dc:	438a      	bics	r2, r1
 80035de:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2180      	movs	r1, #128	; 0x80
 80035ec:	0609      	lsls	r1, r1, #24
 80035ee:	430a      	orrs	r2, r1
 80035f0:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80035f2:	f7ff fae7 	bl	8002bc4 <HAL_GetTick>
 80035f6:	0003      	movs	r3, r0
 80035f8:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80035fa:	e01d      	b.n	8003638 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80035fc:	f7ff fae2 	bl	8002bc4 <HAL_GetTick>
 8003600:	0002      	movs	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d916      	bls.n	8003638 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	0fdb      	lsrs	r3, r3, #31
 8003612:	07da      	lsls	r2, r3, #31
 8003614:	2380      	movs	r3, #128	; 0x80
 8003616:	061b      	lsls	r3, r3, #24
 8003618:	429a      	cmp	r2, r3
 800361a:	d10d      	bne.n	8003638 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003620:	2212      	movs	r2, #18
 8003622:	4393      	bics	r3, r2
 8003624:	2210      	movs	r2, #16
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2234      	movs	r2, #52	; 0x34
 8003630:	2100      	movs	r1, #0
 8003632:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e02a      	b.n	800368e <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	0fdb      	lsrs	r3, r3, #31
 8003640:	07da      	lsls	r2, r3, #31
 8003642:	2380      	movs	r3, #128	; 0x80
 8003644:	061b      	lsls	r3, r3, #24
 8003646:	429a      	cmp	r2, r3
 8003648:	d0d8      	beq.n	80035fc <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68d9      	ldr	r1, [r3, #12]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	430a      	orrs	r2, r1
 8003658:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	2203      	movs	r2, #3
 8003660:	4393      	bics	r3, r2
 8003662:	2201      	movs	r2, #1
 8003664:	431a      	orrs	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	639a      	str	r2, [r3, #56]	; 0x38
 800366a:	e009      	b.n	8003680 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003670:	2220      	movs	r2, #32
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003678:	2317      	movs	r3, #23
 800367a:	18fb      	adds	r3, r7, r3
 800367c:	2201      	movs	r2, #1
 800367e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2234      	movs	r2, #52	; 0x34
 8003684:	2100      	movs	r1, #0
 8003686:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003688:	2317      	movs	r3, #23
 800368a:	18fb      	adds	r3, r7, r3
 800368c:	781b      	ldrb	r3, [r3, #0]
}
 800368e:	0018      	movs	r0, r3
 8003690:	46bd      	mov	sp, r7
 8003692:	b006      	add	sp, #24
 8003694:	bd80      	pop	{r7, pc}
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	fffffefd 	.word	0xfffffefd

0800369c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e0f0      	b.n	8003890 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2220      	movs	r2, #32
 80036b2:	5c9b      	ldrb	r3, [r3, r2]
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d103      	bne.n	80036c2 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	0018      	movs	r0, r3
 80036be:	f7fe fd81 	bl	80021c4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2101      	movs	r1, #1
 80036ce:	430a      	orrs	r2, r1
 80036d0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036d2:	f7ff fa77 	bl	8002bc4 <HAL_GetTick>
 80036d6:	0003      	movs	r3, r0
 80036d8:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80036da:	e013      	b.n	8003704 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80036dc:	f7ff fa72 	bl	8002bc4 <HAL_GetTick>
 80036e0:	0002      	movs	r2, r0
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b0a      	cmp	r3, #10
 80036e8:	d90c      	bls.n	8003704 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	2280      	movs	r2, #128	; 0x80
 80036f0:	0292      	lsls	r2, r2, #10
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2220      	movs	r2, #32
 80036fc:	2105      	movs	r1, #5
 80036fe:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e0c5      	b.n	8003890 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	4013      	ands	r3, r2
 800370e:	d0e5      	beq.n	80036dc <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2102      	movs	r1, #2
 800371c:	438a      	bics	r2, r1
 800371e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003720:	f7ff fa50 	bl	8002bc4 <HAL_GetTick>
 8003724:	0003      	movs	r3, r0
 8003726:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003728:	e013      	b.n	8003752 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800372a:	f7ff fa4b 	bl	8002bc4 <HAL_GetTick>
 800372e:	0002      	movs	r2, r0
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b0a      	cmp	r3, #10
 8003736:	d90c      	bls.n	8003752 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	2280      	movs	r2, #128	; 0x80
 800373e:	0292      	lsls	r2, r2, #10
 8003740:	431a      	orrs	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2220      	movs	r2, #32
 800374a:	2105      	movs	r1, #5
 800374c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e09e      	b.n	8003890 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2202      	movs	r2, #2
 800375a:	4013      	ands	r3, r2
 800375c:	d1e5      	bne.n	800372a <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	7e1b      	ldrb	r3, [r3, #24]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d108      	bne.n	8003778 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2180      	movs	r1, #128	; 0x80
 8003772:	430a      	orrs	r2, r1
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	e007      	b.n	8003788 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2180      	movs	r1, #128	; 0x80
 8003784:	438a      	bics	r2, r1
 8003786:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	7e5b      	ldrb	r3, [r3, #25]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d108      	bne.n	80037a2 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2140      	movs	r1, #64	; 0x40
 800379c:	430a      	orrs	r2, r1
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	e007      	b.n	80037b2 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2140      	movs	r1, #64	; 0x40
 80037ae:	438a      	bics	r2, r1
 80037b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	7e9b      	ldrb	r3, [r3, #26]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d108      	bne.n	80037cc <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2120      	movs	r1, #32
 80037c6:	430a      	orrs	r2, r1
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	e007      	b.n	80037dc <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2120      	movs	r1, #32
 80037d8:	438a      	bics	r2, r1
 80037da:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	7edb      	ldrb	r3, [r3, #27]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d108      	bne.n	80037f6 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2110      	movs	r1, #16
 80037f0:	438a      	bics	r2, r1
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	e007      	b.n	8003806 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2110      	movs	r1, #16
 8003802:	430a      	orrs	r2, r1
 8003804:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	7f1b      	ldrb	r3, [r3, #28]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d108      	bne.n	8003820 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2108      	movs	r1, #8
 800381a:	430a      	orrs	r2, r1
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	e007      	b.n	8003830 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2108      	movs	r1, #8
 800382c:	438a      	bics	r2, r1
 800382e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	7f5b      	ldrb	r3, [r3, #29]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d108      	bne.n	800384a <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2104      	movs	r1, #4
 8003844:	430a      	orrs	r2, r1
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	e007      	b.n	800385a <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2104      	movs	r1, #4
 8003856:	438a      	bics	r2, r1
 8003858:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	431a      	orrs	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	431a      	orrs	r2, r3
 8003870:	0011      	movs	r1, r2
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	1e5a      	subs	r2, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2220      	movs	r2, #32
 800388a:	2101      	movs	r1, #1
 800388c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	0018      	movs	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	b004      	add	sp, #16
 8003896:	bd80      	pop	{r7, pc}

08003898 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80038a8:	2013      	movs	r0, #19
 80038aa:	183b      	adds	r3, r7, r0
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	2120      	movs	r1, #32
 80038b0:	5c52      	ldrb	r2, [r2, r1]
 80038b2:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 80038b4:	0002      	movs	r2, r0
 80038b6:	18bb      	adds	r3, r7, r2
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d004      	beq.n	80038c8 <HAL_CAN_ConfigFilter+0x30>
 80038be:	18bb      	adds	r3, r7, r2
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d000      	beq.n	80038c8 <HAL_CAN_ConfigFilter+0x30>
 80038c6:	e0cd      	b.n	8003a64 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	2380      	movs	r3, #128	; 0x80
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	58d3      	ldr	r3, [r2, r3]
 80038d0:	2201      	movs	r2, #1
 80038d2:	431a      	orrs	r2, r3
 80038d4:	0011      	movs	r1, r2
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	2380      	movs	r3, #128	; 0x80
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	221f      	movs	r2, #31
 80038e4:	4013      	ands	r3, r2
 80038e6:	2201      	movs	r2, #1
 80038e8:	409a      	lsls	r2, r3
 80038ea:	0013      	movs	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	2387      	movs	r3, #135	; 0x87
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	58d3      	ldr	r3, [r2, r3]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	43d2      	mvns	r2, r2
 80038fa:	401a      	ands	r2, r3
 80038fc:	0011      	movs	r1, r2
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	2387      	movs	r3, #135	; 0x87
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d129      	bne.n	8003962 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	2383      	movs	r3, #131	; 0x83
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	58d3      	ldr	r3, [r2, r3]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	43d2      	mvns	r2, r2
 800391a:	401a      	ands	r2, r3
 800391c:	0011      	movs	r1, r2
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	2383      	movs	r3, #131	; 0x83
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	041b      	lsls	r3, r3, #16
 8003932:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003938:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	3248      	adds	r2, #72	; 0x48
 800393e:	00d2      	lsls	r2, r2, #3
 8003940:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	041b      	lsls	r3, r3, #16
 800394e:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003954:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003956:	6979      	ldr	r1, [r7, #20]
 8003958:	3348      	adds	r3, #72	; 0x48
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	18cb      	adds	r3, r1, r3
 800395e:	3304      	adds	r3, #4
 8003960:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d128      	bne.n	80039bc <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	2383      	movs	r3, #131	; 0x83
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	58d2      	ldr	r2, [r2, r3]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	431a      	orrs	r2, r3
 8003976:	0011      	movs	r1, r2
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	2383      	movs	r3, #131	; 0x83
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	041b      	lsls	r3, r3, #16
 800398c:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003992:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	3248      	adds	r2, #72	; 0x48
 8003998:	00d2      	lsls	r2, r2, #3
 800399a:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	041b      	lsls	r3, r3, #16
 80039a8:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039ae:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039b0:	6979      	ldr	r1, [r7, #20]
 80039b2:	3348      	adds	r3, #72	; 0x48
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	18cb      	adds	r3, r1, r3
 80039b8:	3304      	adds	r3, #4
 80039ba:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10c      	bne.n	80039de <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	2381      	movs	r3, #129	; 0x81
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	58d3      	ldr	r3, [r2, r3]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	43d2      	mvns	r2, r2
 80039d0:	401a      	ands	r2, r3
 80039d2:	0011      	movs	r1, r2
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	2381      	movs	r3, #129	; 0x81
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	50d1      	str	r1, [r2, r3]
 80039dc:	e00a      	b.n	80039f4 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	2381      	movs	r3, #129	; 0x81
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	58d2      	ldr	r2, [r2, r3]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	431a      	orrs	r2, r3
 80039ea:	0011      	movs	r1, r2
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	2381      	movs	r3, #129	; 0x81
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10c      	bne.n	8003a16 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	2385      	movs	r3, #133	; 0x85
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	58d3      	ldr	r3, [r2, r3]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	43d2      	mvns	r2, r2
 8003a08:	401a      	ands	r2, r3
 8003a0a:	0011      	movs	r1, r2
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	2385      	movs	r3, #133	; 0x85
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	50d1      	str	r1, [r2, r3]
 8003a14:	e00a      	b.n	8003a2c <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	2385      	movs	r3, #133	; 0x85
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	58d2      	ldr	r2, [r2, r3]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	431a      	orrs	r2, r3
 8003a22:	0011      	movs	r1, r2
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	2385      	movs	r3, #133	; 0x85
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d10a      	bne.n	8003a4a <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	2387      	movs	r3, #135	; 0x87
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	58d2      	ldr	r2, [r2, r3]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	0011      	movs	r1, r2
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	2387      	movs	r3, #135	; 0x87
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	2380      	movs	r3, #128	; 0x80
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	58d3      	ldr	r3, [r2, r3]
 8003a52:	2201      	movs	r2, #1
 8003a54:	4393      	bics	r3, r2
 8003a56:	0019      	movs	r1, r3
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	2380      	movs	r3, #128	; 0x80
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8003a60:	2300      	movs	r3, #0
 8003a62:	e007      	b.n	8003a74 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	2280      	movs	r2, #128	; 0x80
 8003a6a:	02d2      	lsls	r2, r2, #11
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
  }
}
 8003a74:	0018      	movs	r0, r3
 8003a76:	46bd      	mov	sp, r7
 8003a78:	b006      	add	sp, #24
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2220      	movs	r2, #32
 8003a88:	5c9b      	ldrb	r3, [r3, r2]
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d12f      	bne.n	8003af0 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2220      	movs	r2, #32
 8003a94:	2102      	movs	r1, #2
 8003a96:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	438a      	bics	r2, r1
 8003aa6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003aa8:	f7ff f88c 	bl	8002bc4 <HAL_GetTick>
 8003aac:	0003      	movs	r3, r0
 8003aae:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003ab0:	e013      	b.n	8003ada <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ab2:	f7ff f887 	bl	8002bc4 <HAL_GetTick>
 8003ab6:	0002      	movs	r2, r0
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b0a      	cmp	r3, #10
 8003abe:	d90c      	bls.n	8003ada <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	2280      	movs	r2, #128	; 0x80
 8003ac6:	0292      	lsls	r2, r2, #10
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	2105      	movs	r1, #5
 8003ad4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e012      	b.n	8003b00 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d1e5      	bne.n	8003ab2 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	e007      	b.n	8003b00 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	2280      	movs	r2, #128	; 0x80
 8003af6:	0312      	lsls	r2, r2, #12
 8003af8:	431a      	orrs	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
  }
}
 8003b00:	0018      	movs	r0, r3
 8003b02:	46bd      	mov	sp, r7
 8003b04:	b004      	add	sp, #16
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
 8003b14:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b16:	201f      	movs	r0, #31
 8003b18:	183b      	adds	r3, r7, r0
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	2120      	movs	r1, #32
 8003b1e:	5c52      	ldrb	r2, [r2, r1]
 8003b20:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b2a:	183b      	adds	r3, r7, r0
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d004      	beq.n	8003b3c <HAL_CAN_AddTxMessage+0x34>
 8003b32:	183b      	adds	r3, r7, r0
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d000      	beq.n	8003b3c <HAL_CAN_AddTxMessage+0x34>
 8003b3a:	e0ab      	b.n	8003c94 <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	2380      	movs	r3, #128	; 0x80
 8003b40:	04db      	lsls	r3, r3, #19
 8003b42:	4013      	ands	r3, r2
 8003b44:	d10a      	bne.n	8003b5c <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	2380      	movs	r3, #128	; 0x80
 8003b4a:	051b      	lsls	r3, r3, #20
 8003b4c:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003b4e:	d105      	bne.n	8003b5c <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	2380      	movs	r3, #128	; 0x80
 8003b54:	055b      	lsls	r3, r3, #21
 8003b56:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003b58:	d100      	bne.n	8003b5c <HAL_CAN_AddTxMessage+0x54>
 8003b5a:	e092      	b.n	8003c82 <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	0e1b      	lsrs	r3, r3, #24
 8003b60:	2203      	movs	r2, #3
 8003b62:	4013      	ands	r3, r2
 8003b64:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003b66:	2201      	movs	r2, #1
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	409a      	lsls	r2, r3
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10c      	bne.n	8003b92 <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4311      	orrs	r1, r2
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	3218      	adds	r2, #24
 8003b8c:	0112      	lsls	r2, r2, #4
 8003b8e:	50d1      	str	r1, [r2, r3]
 8003b90:	e00f      	b.n	8003bb2 <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8003ba8:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	3218      	adds	r2, #24
 8003bae:	0112      	lsls	r2, r2, #4
 8003bb0:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6819      	ldr	r1, [r3, #0]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	691a      	ldr	r2, [r3, #16]
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	3318      	adds	r3, #24
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	18cb      	adds	r3, r1, r3
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	7d1b      	ldrb	r3, [r3, #20]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d112      	bne.n	8003bf4 <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	3318      	adds	r3, #24
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	18d3      	adds	r3, r2, r3
 8003bda:	3304      	adds	r3, #4
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6819      	ldr	r1, [r3, #0]
 8003be2:	2380      	movs	r3, #128	; 0x80
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	431a      	orrs	r2, r3
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	3318      	adds	r3, #24
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	18cb      	adds	r3, r1, r3
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3307      	adds	r3, #7
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	061a      	lsls	r2, r3, #24
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3306      	adds	r3, #6
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	041b      	lsls	r3, r3, #16
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3305      	adds	r3, #5
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	021b      	lsls	r3, r3, #8
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3304      	adds	r3, #4
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	0019      	movs	r1, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6818      	ldr	r0, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	6979      	ldr	r1, [r7, #20]
 8003c20:	23c6      	movs	r3, #198	; 0xc6
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	0109      	lsls	r1, r1, #4
 8003c26:	1841      	adds	r1, r0, r1
 8003c28:	18cb      	adds	r3, r1, r3
 8003c2a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3303      	adds	r3, #3
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	061a      	lsls	r2, r3, #24
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3302      	adds	r3, #2
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	041b      	lsls	r3, r3, #16
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	3301      	adds	r3, #1
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	021b      	lsls	r3, r3, #8
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	0019      	movs	r1, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6818      	ldr	r0, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	6979      	ldr	r1, [r7, #20]
 8003c56:	23c4      	movs	r3, #196	; 0xc4
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	0109      	lsls	r1, r1, #4
 8003c5c:	1841      	adds	r1, r0, r1
 8003c5e:	18cb      	adds	r3, r1, r3
 8003c60:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	3218      	adds	r2, #24
 8003c6a:	0112      	lsls	r2, r2, #4
 8003c6c:	58d2      	ldr	r2, [r2, r3]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2101      	movs	r1, #1
 8003c74:	4311      	orrs	r1, r2
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	3218      	adds	r2, #24
 8003c7a:	0112      	lsls	r2, r2, #4
 8003c7c:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	e010      	b.n	8003ca4 <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c86:	2280      	movs	r2, #128	; 0x80
 8003c88:	0392      	lsls	r2, r2, #14
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e007      	b.n	8003ca4 <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	2280      	movs	r2, #128	; 0x80
 8003c9a:	02d2      	lsls	r2, r2, #11
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
  }
}
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	b008      	add	sp, #32
 8003caa:	bd80      	pop	{r7, pc}

08003cac <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003cba:	200b      	movs	r0, #11
 8003cbc:	183b      	adds	r3, r7, r0
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	2120      	movs	r1, #32
 8003cc2:	5c52      	ldrb	r2, [r2, r1]
 8003cc4:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8003cc6:	0002      	movs	r2, r0
 8003cc8:	18bb      	adds	r3, r7, r2
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d003      	beq.n	8003cd8 <HAL_CAN_IsTxMessagePending+0x2c>
 8003cd0:	18bb      	adds	r3, r7, r2
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d10b      	bne.n	8003cf0 <HAL_CAN_IsTxMessagePending+0x44>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	0692      	lsls	r2, r2, #26
 8003ce2:	401a      	ands	r2, r3
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	069b      	lsls	r3, r3, #26
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d001      	beq.n	8003cf0 <HAL_CAN_IsTxMessagePending+0x44>
    {
      status = 1U;
 8003cec:	2301      	movs	r3, #1
 8003cee:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
}
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	b004      	add	sp, #16
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b086      	sub	sp, #24
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	60f8      	str	r0, [r7, #12]
 8003d02:	60b9      	str	r1, [r7, #8]
 8003d04:	607a      	str	r2, [r7, #4]
 8003d06:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d08:	2017      	movs	r0, #23
 8003d0a:	183b      	adds	r3, r7, r0
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	2120      	movs	r1, #32
 8003d10:	5c52      	ldrb	r2, [r2, r1]
 8003d12:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d14:	0002      	movs	r2, r0
 8003d16:	18bb      	adds	r3, r7, r2
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d004      	beq.n	8003d28 <HAL_CAN_GetRxMessage+0x2e>
 8003d1e:	18bb      	adds	r3, r7, r2
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d000      	beq.n	8003d28 <HAL_CAN_GetRxMessage+0x2e>
 8003d26:	e107      	b.n	8003f38 <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10e      	bne.n	8003d4c <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	2203      	movs	r2, #3
 8003d36:	4013      	ands	r3, r2
 8003d38:	d117      	bne.n	8003d6a <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	2280      	movs	r2, #128	; 0x80
 8003d40:	0392      	lsls	r2, r2, #14
 8003d42:	431a      	orrs	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e0fd      	b.n	8003f48 <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	2203      	movs	r2, #3
 8003d54:	4013      	ands	r3, r2
 8003d56:	d108      	bne.n	8003d6a <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	2280      	movs	r2, #128	; 0x80
 8003d5e:	0392      	lsls	r2, r2, #14
 8003d60:	431a      	orrs	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e0ee      	b.n	8003f48 <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	321b      	adds	r2, #27
 8003d72:	0112      	lsls	r2, r2, #4
 8003d74:	58d3      	ldr	r3, [r2, r3]
 8003d76:	2204      	movs	r2, #4
 8003d78:	401a      	ands	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10b      	bne.n	8003d9e <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	321b      	adds	r2, #27
 8003d8e:	0112      	lsls	r2, r2, #4
 8003d90:	58d3      	ldr	r3, [r2, r3]
 8003d92:	0d5b      	lsrs	r3, r3, #21
 8003d94:	055b      	lsls	r3, r3, #21
 8003d96:	0d5a      	lsrs	r2, r3, #21
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	e00a      	b.n	8003db4 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	321b      	adds	r2, #27
 8003da6:	0112      	lsls	r2, r2, #4
 8003da8:	58d3      	ldr	r3, [r2, r3]
 8003daa:	08db      	lsrs	r3, r3, #3
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	321b      	adds	r2, #27
 8003dbc:	0112      	lsls	r2, r2, #4
 8003dbe:	58d3      	ldr	r3, [r2, r3]
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	401a      	ands	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	331b      	adds	r3, #27
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	18d3      	adds	r3, r2, r3
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2208      	movs	r2, #8
 8003dda:	4013      	ands	r3, r2
 8003ddc:	d003      	beq.n	8003de6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2208      	movs	r2, #8
 8003de2:	611a      	str	r2, [r3, #16]
 8003de4:	e00b      	b.n	8003dfe <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	331b      	adds	r3, #27
 8003dee:	011b      	lsls	r3, r3, #4
 8003df0:	18d3      	adds	r3, r2, r3
 8003df2:	3304      	adds	r3, #4
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	220f      	movs	r2, #15
 8003df8:	401a      	ands	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	331b      	adds	r3, #27
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	18d3      	adds	r3, r2, r3
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	0a1b      	lsrs	r3, r3, #8
 8003e10:	22ff      	movs	r2, #255	; 0xff
 8003e12:	401a      	ands	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	331b      	adds	r3, #27
 8003e20:	011b      	lsls	r3, r3, #4
 8003e22:	18d3      	adds	r3, r2, r3
 8003e24:	3304      	adds	r3, #4
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	0c1b      	lsrs	r3, r3, #16
 8003e2a:	041b      	lsls	r3, r3, #16
 8003e2c:	0c1a      	lsrs	r2, r3, #16
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6819      	ldr	r1, [r3, #0]
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	23dc      	movs	r3, #220	; 0xdc
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	0112      	lsls	r2, r2, #4
 8003e3e:	188a      	adds	r2, r1, r2
 8003e40:	18d3      	adds	r3, r2, r3
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6819      	ldr	r1, [r3, #0]
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	23dc      	movs	r3, #220	; 0xdc
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	0112      	lsls	r2, r2, #4
 8003e56:	188a      	adds	r2, r1, r2
 8003e58:	18d3      	adds	r3, r2, r3
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	0a1a      	lsrs	r2, r3, #8
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	3301      	adds	r3, #1
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6819      	ldr	r1, [r3, #0]
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	23dc      	movs	r3, #220	; 0xdc
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	0112      	lsls	r2, r2, #4
 8003e72:	188a      	adds	r2, r1, r2
 8003e74:	18d3      	adds	r3, r2, r3
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	0c1a      	lsrs	r2, r3, #16
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	3302      	adds	r3, #2
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6819      	ldr	r1, [r3, #0]
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	23dc      	movs	r3, #220	; 0xdc
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	0112      	lsls	r2, r2, #4
 8003e8e:	188a      	adds	r2, r1, r2
 8003e90:	18d3      	adds	r3, r2, r3
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	0e1a      	lsrs	r2, r3, #24
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	3303      	adds	r3, #3
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6819      	ldr	r1, [r3, #0]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	23de      	movs	r3, #222	; 0xde
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	0112      	lsls	r2, r2, #4
 8003eaa:	188a      	adds	r2, r1, r2
 8003eac:	18d3      	adds	r3, r2, r3
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6819      	ldr	r1, [r3, #0]
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	23de      	movs	r3, #222	; 0xde
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	0112      	lsls	r2, r2, #4
 8003ec4:	188a      	adds	r2, r1, r2
 8003ec6:	18d3      	adds	r3, r2, r3
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	0a1a      	lsrs	r2, r3, #8
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	3305      	adds	r3, #5
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6819      	ldr	r1, [r3, #0]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	23de      	movs	r3, #222	; 0xde
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	0112      	lsls	r2, r2, #4
 8003ee0:	188a      	adds	r2, r1, r2
 8003ee2:	18d3      	adds	r3, r2, r3
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	0c1a      	lsrs	r2, r3, #16
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	3306      	adds	r3, #6
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6819      	ldr	r1, [r3, #0]
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	23de      	movs	r3, #222	; 0xde
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	0112      	lsls	r2, r2, #4
 8003efc:	188a      	adds	r2, r1, r2
 8003efe:	18d3      	adds	r3, r2, r3
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	0e1a      	lsrs	r2, r3, #24
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	3307      	adds	r3, #7
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d108      	bne.n	8003f24 <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68da      	ldr	r2, [r3, #12]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2120      	movs	r1, #32
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	60da      	str	r2, [r3, #12]
 8003f22:	e007      	b.n	8003f34 <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691a      	ldr	r2, [r3, #16]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2120      	movs	r1, #32
 8003f30:	430a      	orrs	r2, r1
 8003f32:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003f34:	2300      	movs	r3, #0
 8003f36:	e007      	b.n	8003f48 <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	2280      	movs	r2, #128	; 0x80
 8003f3e:	02d2      	lsls	r2, r2, #11
 8003f40:	431a      	orrs	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
  }
}
 8003f48:	0018      	movs	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	b006      	add	sp, #24
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f5a:	200f      	movs	r0, #15
 8003f5c:	183b      	adds	r3, r7, r0
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	2120      	movs	r1, #32
 8003f62:	5c52      	ldrb	r2, [r2, r1]
 8003f64:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003f66:	0002      	movs	r2, r0
 8003f68:	18bb      	adds	r3, r7, r2
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d003      	beq.n	8003f78 <HAL_CAN_ActivateNotification+0x28>
 8003f70:	18bb      	adds	r3, r7, r2
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d109      	bne.n	8003f8c <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6959      	ldr	r1, [r3, #20]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	e007      	b.n	8003f9c <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	2280      	movs	r2, #128	; 0x80
 8003f92:	02d2      	lsls	r2, r2, #11
 8003f94:	431a      	orrs	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
  }
}
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	b004      	add	sp, #16
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08a      	sub	sp, #40	; 0x28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003fac:	2300      	movs	r3, #0
 8003fae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	d100      	bne.n	8003fea <HAL_CAN_IRQHandler+0x46>
 8003fe8:	e084      	b.n	80040f4 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	2201      	movs	r2, #1
 8003fee:	4013      	ands	r3, r2
 8003ff0:	d024      	beq.n	800403c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	4013      	ands	r3, r2
 8004000:	d004      	beq.n	800400c <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	0018      	movs	r0, r3
 8004006:	f7fc ff05 	bl	8000e14 <HAL_CAN_TxMailbox0CompleteCallback>
 800400a:	e017      	b.n	800403c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	2204      	movs	r2, #4
 8004010:	4013      	ands	r3, r2
 8004012:	d005      	beq.n	8004020 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	2280      	movs	r2, #128	; 0x80
 8004018:	0112      	lsls	r2, r2, #4
 800401a:	4313      	orrs	r3, r2
 800401c:	627b      	str	r3, [r7, #36]	; 0x24
 800401e:	e00d      	b.n	800403c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	2208      	movs	r2, #8
 8004024:	4013      	ands	r3, r2
 8004026:	d005      	beq.n	8004034 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	2280      	movs	r2, #128	; 0x80
 800402c:	0152      	lsls	r2, r2, #5
 800402e:	4313      	orrs	r3, r2
 8004030:	627b      	str	r3, [r7, #36]	; 0x24
 8004032:	e003      	b.n	800403c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	0018      	movs	r0, r3
 8004038:	f000 f968 	bl	800430c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	2380      	movs	r3, #128	; 0x80
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	4013      	ands	r3, r2
 8004044:	d028      	beq.n	8004098 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2280      	movs	r2, #128	; 0x80
 800404c:	0052      	lsls	r2, r2, #1
 800404e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	2380      	movs	r3, #128	; 0x80
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4013      	ands	r3, r2
 8004058:	d004      	beq.n	8004064 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	0018      	movs	r0, r3
 800405e:	f7fc fee3 	bl	8000e28 <HAL_CAN_TxMailbox1CompleteCallback>
 8004062:	e019      	b.n	8004098 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	2380      	movs	r3, #128	; 0x80
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	4013      	ands	r3, r2
 800406c:	d005      	beq.n	800407a <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004070:	2280      	movs	r2, #128	; 0x80
 8004072:	0192      	lsls	r2, r2, #6
 8004074:	4313      	orrs	r3, r2
 8004076:	627b      	str	r3, [r7, #36]	; 0x24
 8004078:	e00e      	b.n	8004098 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	2380      	movs	r3, #128	; 0x80
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	4013      	ands	r3, r2
 8004082:	d005      	beq.n	8004090 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	2280      	movs	r2, #128	; 0x80
 8004088:	01d2      	lsls	r2, r2, #7
 800408a:	4313      	orrs	r3, r2
 800408c:	627b      	str	r3, [r7, #36]	; 0x24
 800408e:	e003      	b.n	8004098 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	0018      	movs	r0, r3
 8004094:	f000 f942 	bl	800431c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	2380      	movs	r3, #128	; 0x80
 800409c:	025b      	lsls	r3, r3, #9
 800409e:	4013      	ands	r3, r2
 80040a0:	d028      	beq.n	80040f4 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2280      	movs	r2, #128	; 0x80
 80040a8:	0252      	lsls	r2, r2, #9
 80040aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	2380      	movs	r3, #128	; 0x80
 80040b0:	029b      	lsls	r3, r3, #10
 80040b2:	4013      	ands	r3, r2
 80040b4:	d004      	beq.n	80040c0 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	0018      	movs	r0, r3
 80040ba:	f7fc febf 	bl	8000e3c <HAL_CAN_TxMailbox2CompleteCallback>
 80040be:	e019      	b.n	80040f4 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	2380      	movs	r3, #128	; 0x80
 80040c4:	02db      	lsls	r3, r3, #11
 80040c6:	4013      	ands	r3, r2
 80040c8:	d005      	beq.n	80040d6 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	2280      	movs	r2, #128	; 0x80
 80040ce:	0212      	lsls	r2, r2, #8
 80040d0:	4313      	orrs	r3, r2
 80040d2:	627b      	str	r3, [r7, #36]	; 0x24
 80040d4:	e00e      	b.n	80040f4 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	2380      	movs	r3, #128	; 0x80
 80040da:	031b      	lsls	r3, r3, #12
 80040dc:	4013      	ands	r3, r2
 80040de:	d005      	beq.n	80040ec <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	2280      	movs	r2, #128	; 0x80
 80040e4:	0252      	lsls	r2, r2, #9
 80040e6:	4313      	orrs	r3, r2
 80040e8:	627b      	str	r3, [r7, #36]	; 0x24
 80040ea:	e003      	b.n	80040f4 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	0018      	movs	r0, r3
 80040f0:	f000 f91c 	bl	800432c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	2208      	movs	r2, #8
 80040f8:	4013      	ands	r3, r2
 80040fa:	d00c      	beq.n	8004116 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	2210      	movs	r2, #16
 8004100:	4013      	ands	r3, r2
 8004102:	d008      	beq.n	8004116 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	2280      	movs	r2, #128	; 0x80
 8004108:	0092      	lsls	r2, r2, #2
 800410a:	4313      	orrs	r3, r2
 800410c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2210      	movs	r2, #16
 8004114:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	2204      	movs	r2, #4
 800411a:	4013      	ands	r3, r2
 800411c:	d00b      	beq.n	8004136 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2208      	movs	r2, #8
 8004122:	4013      	ands	r3, r2
 8004124:	d007      	beq.n	8004136 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2208      	movs	r2, #8
 800412c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	0018      	movs	r0, r3
 8004132:	f000 f903 	bl	800433c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	2202      	movs	r2, #2
 800413a:	4013      	ands	r3, r2
 800413c:	d009      	beq.n	8004152 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	2203      	movs	r2, #3
 8004146:	4013      	ands	r3, r2
 8004148:	d003      	beq.n	8004152 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	0018      	movs	r0, r3
 800414e:	f7fc fc55 	bl	80009fc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	2240      	movs	r2, #64	; 0x40
 8004156:	4013      	ands	r3, r2
 8004158:	d00c      	beq.n	8004174 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	2210      	movs	r2, #16
 800415e:	4013      	ands	r3, r2
 8004160:	d008      	beq.n	8004174 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	2280      	movs	r2, #128	; 0x80
 8004166:	00d2      	lsls	r2, r2, #3
 8004168:	4313      	orrs	r3, r2
 800416a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2210      	movs	r2, #16
 8004172:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	2220      	movs	r2, #32
 8004178:	4013      	ands	r3, r2
 800417a:	d00b      	beq.n	8004194 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	2208      	movs	r2, #8
 8004180:	4013      	ands	r3, r2
 8004182:	d007      	beq.n	8004194 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2208      	movs	r2, #8
 800418a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	0018      	movs	r0, r3
 8004190:	f000 f8e4 	bl	800435c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	2210      	movs	r2, #16
 8004198:	4013      	ands	r3, r2
 800419a:	d009      	beq.n	80041b0 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	2203      	movs	r2, #3
 80041a4:	4013      	ands	r3, r2
 80041a6:	d003      	beq.n	80041b0 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	0018      	movs	r0, r3
 80041ac:	f000 f8ce 	bl	800434c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80041b0:	6a3a      	ldr	r2, [r7, #32]
 80041b2:	2380      	movs	r3, #128	; 0x80
 80041b4:	029b      	lsls	r3, r3, #10
 80041b6:	4013      	ands	r3, r2
 80041b8:	d00b      	beq.n	80041d2 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	2210      	movs	r2, #16
 80041be:	4013      	ands	r3, r2
 80041c0:	d007      	beq.n	80041d2 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2210      	movs	r2, #16
 80041c8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	0018      	movs	r0, r3
 80041ce:	f000 f8cd 	bl	800436c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80041d2:	6a3a      	ldr	r2, [r7, #32]
 80041d4:	2380      	movs	r3, #128	; 0x80
 80041d6:	025b      	lsls	r3, r3, #9
 80041d8:	4013      	ands	r3, r2
 80041da:	d00b      	beq.n	80041f4 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	2208      	movs	r2, #8
 80041e0:	4013      	ands	r3, r2
 80041e2:	d007      	beq.n	80041f4 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2208      	movs	r2, #8
 80041ea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	0018      	movs	r0, r3
 80041f0:	f000 f8c4 	bl	800437c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80041f4:	6a3a      	ldr	r2, [r7, #32]
 80041f6:	2380      	movs	r3, #128	; 0x80
 80041f8:	021b      	lsls	r3, r3, #8
 80041fa:	4013      	ands	r3, r2
 80041fc:	d100      	bne.n	8004200 <HAL_CAN_IRQHandler+0x25c>
 80041fe:	e074      	b.n	80042ea <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	2204      	movs	r2, #4
 8004204:	4013      	ands	r3, r2
 8004206:	d100      	bne.n	800420a <HAL_CAN_IRQHandler+0x266>
 8004208:	e06b      	b.n	80042e2 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800420a:	6a3a      	ldr	r2, [r7, #32]
 800420c:	2380      	movs	r3, #128	; 0x80
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	4013      	ands	r3, r2
 8004212:	d007      	beq.n	8004224 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2201      	movs	r2, #1
 8004218:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800421a:	d003      	beq.n	8004224 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	2201      	movs	r2, #1
 8004220:	4313      	orrs	r3, r2
 8004222:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004224:	6a3a      	ldr	r2, [r7, #32]
 8004226:	2380      	movs	r3, #128	; 0x80
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4013      	ands	r3, r2
 800422c:	d007      	beq.n	800423e <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2202      	movs	r2, #2
 8004232:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004234:	d003      	beq.n	800423e <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	2202      	movs	r2, #2
 800423a:	4313      	orrs	r3, r2
 800423c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800423e:	6a3a      	ldr	r2, [r7, #32]
 8004240:	2380      	movs	r3, #128	; 0x80
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	4013      	ands	r3, r2
 8004246:	d007      	beq.n	8004258 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2204      	movs	r2, #4
 800424c:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800424e:	d003      	beq.n	8004258 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	2204      	movs	r2, #4
 8004254:	4313      	orrs	r3, r2
 8004256:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004258:	6a3a      	ldr	r2, [r7, #32]
 800425a:	2380      	movs	r3, #128	; 0x80
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	4013      	ands	r3, r2
 8004260:	d03f      	beq.n	80042e2 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2270      	movs	r2, #112	; 0x70
 8004266:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004268:	d03b      	beq.n	80042e2 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2270      	movs	r2, #112	; 0x70
 800426e:	4013      	ands	r3, r2
 8004270:	2b60      	cmp	r3, #96	; 0x60
 8004272:	d027      	beq.n	80042c4 <HAL_CAN_IRQHandler+0x320>
 8004274:	d82c      	bhi.n	80042d0 <HAL_CAN_IRQHandler+0x32c>
 8004276:	2b50      	cmp	r3, #80	; 0x50
 8004278:	d01f      	beq.n	80042ba <HAL_CAN_IRQHandler+0x316>
 800427a:	d829      	bhi.n	80042d0 <HAL_CAN_IRQHandler+0x32c>
 800427c:	2b40      	cmp	r3, #64	; 0x40
 800427e:	d017      	beq.n	80042b0 <HAL_CAN_IRQHandler+0x30c>
 8004280:	d826      	bhi.n	80042d0 <HAL_CAN_IRQHandler+0x32c>
 8004282:	2b30      	cmp	r3, #48	; 0x30
 8004284:	d00f      	beq.n	80042a6 <HAL_CAN_IRQHandler+0x302>
 8004286:	d823      	bhi.n	80042d0 <HAL_CAN_IRQHandler+0x32c>
 8004288:	2b10      	cmp	r3, #16
 800428a:	d002      	beq.n	8004292 <HAL_CAN_IRQHandler+0x2ee>
 800428c:	2b20      	cmp	r3, #32
 800428e:	d005      	beq.n	800429c <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004290:	e01e      	b.n	80042d0 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	2208      	movs	r2, #8
 8004296:	4313      	orrs	r3, r2
 8004298:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800429a:	e01a      	b.n	80042d2 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	2210      	movs	r2, #16
 80042a0:	4313      	orrs	r3, r2
 80042a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80042a4:	e015      	b.n	80042d2 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	2220      	movs	r2, #32
 80042aa:	4313      	orrs	r3, r2
 80042ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80042ae:	e010      	b.n	80042d2 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	2240      	movs	r2, #64	; 0x40
 80042b4:	4313      	orrs	r3, r2
 80042b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80042b8:	e00b      	b.n	80042d2 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	2280      	movs	r2, #128	; 0x80
 80042be:	4313      	orrs	r3, r2
 80042c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80042c2:	e006      	b.n	80042d2 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	2280      	movs	r2, #128	; 0x80
 80042c8:	0052      	lsls	r2, r2, #1
 80042ca:	4313      	orrs	r3, r2
 80042cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80042ce:	e000      	b.n	80042d2 <HAL_CAN_IRQHandler+0x32e>
            break;
 80042d0:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	699a      	ldr	r2, [r3, #24]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2170      	movs	r1, #112	; 0x70
 80042de:	438a      	bics	r2, r1
 80042e0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2204      	movs	r2, #4
 80042e8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80042ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d009      	beq.n	8004304 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	0018      	movs	r0, r3
 8004300:	f000 f844 	bl	800438c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004304:	46c0      	nop			; (mov r8, r8)
 8004306:	46bd      	mov	sp, r7
 8004308:	b00a      	add	sp, #40	; 0x28
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004314:	46c0      	nop			; (mov r8, r8)
 8004316:	46bd      	mov	sp, r7
 8004318:	b002      	add	sp, #8
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004324:	46c0      	nop			; (mov r8, r8)
 8004326:	46bd      	mov	sp, r7
 8004328:	b002      	add	sp, #8
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004334:	46c0      	nop			; (mov r8, r8)
 8004336:	46bd      	mov	sp, r7
 8004338:	b002      	add	sp, #8
 800433a:	bd80      	pop	{r7, pc}

0800433c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004344:	46c0      	nop			; (mov r8, r8)
 8004346:	46bd      	mov	sp, r7
 8004348:	b002      	add	sp, #8
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004354:	46c0      	nop			; (mov r8, r8)
 8004356:	46bd      	mov	sp, r7
 8004358:	b002      	add	sp, #8
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004364:	46c0      	nop			; (mov r8, r8)
 8004366:	46bd      	mov	sp, r7
 8004368:	b002      	add	sp, #8
 800436a:	bd80      	pop	{r7, pc}

0800436c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004374:	46c0      	nop			; (mov r8, r8)
 8004376:	46bd      	mov	sp, r7
 8004378:	b002      	add	sp, #8
 800437a:	bd80      	pop	{r7, pc}

0800437c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004384:	46c0      	nop			; (mov r8, r8)
 8004386:	46bd      	mov	sp, r7
 8004388:	b002      	add	sp, #8
 800438a:	bd80      	pop	{r7, pc}

0800438c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004394:	46c0      	nop			; (mov r8, r8)
 8004396:	46bd      	mov	sp, r7
 8004398:	b002      	add	sp, #8
 800439a:	bd80      	pop	{r7, pc}

0800439c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	0002      	movs	r2, r0
 80043a4:	1dfb      	adds	r3, r7, #7
 80043a6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80043a8:	1dfb      	adds	r3, r7, #7
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b7f      	cmp	r3, #127	; 0x7f
 80043ae:	d809      	bhi.n	80043c4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043b0:	1dfb      	adds	r3, r7, #7
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	001a      	movs	r2, r3
 80043b6:	231f      	movs	r3, #31
 80043b8:	401a      	ands	r2, r3
 80043ba:	4b04      	ldr	r3, [pc, #16]	; (80043cc <__NVIC_EnableIRQ+0x30>)
 80043bc:	2101      	movs	r1, #1
 80043be:	4091      	lsls	r1, r2
 80043c0:	000a      	movs	r2, r1
 80043c2:	601a      	str	r2, [r3, #0]
  }
}
 80043c4:	46c0      	nop			; (mov r8, r8)
 80043c6:	46bd      	mov	sp, r7
 80043c8:	b002      	add	sp, #8
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	e000e100 	.word	0xe000e100

080043d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043d0:	b590      	push	{r4, r7, lr}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	0002      	movs	r2, r0
 80043d8:	6039      	str	r1, [r7, #0]
 80043da:	1dfb      	adds	r3, r7, #7
 80043dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80043de:	1dfb      	adds	r3, r7, #7
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	2b7f      	cmp	r3, #127	; 0x7f
 80043e4:	d828      	bhi.n	8004438 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043e6:	4a2f      	ldr	r2, [pc, #188]	; (80044a4 <__NVIC_SetPriority+0xd4>)
 80043e8:	1dfb      	adds	r3, r7, #7
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	b25b      	sxtb	r3, r3
 80043ee:	089b      	lsrs	r3, r3, #2
 80043f0:	33c0      	adds	r3, #192	; 0xc0
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	589b      	ldr	r3, [r3, r2]
 80043f6:	1dfa      	adds	r2, r7, #7
 80043f8:	7812      	ldrb	r2, [r2, #0]
 80043fa:	0011      	movs	r1, r2
 80043fc:	2203      	movs	r2, #3
 80043fe:	400a      	ands	r2, r1
 8004400:	00d2      	lsls	r2, r2, #3
 8004402:	21ff      	movs	r1, #255	; 0xff
 8004404:	4091      	lsls	r1, r2
 8004406:	000a      	movs	r2, r1
 8004408:	43d2      	mvns	r2, r2
 800440a:	401a      	ands	r2, r3
 800440c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	019b      	lsls	r3, r3, #6
 8004412:	22ff      	movs	r2, #255	; 0xff
 8004414:	401a      	ands	r2, r3
 8004416:	1dfb      	adds	r3, r7, #7
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	0018      	movs	r0, r3
 800441c:	2303      	movs	r3, #3
 800441e:	4003      	ands	r3, r0
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004424:	481f      	ldr	r0, [pc, #124]	; (80044a4 <__NVIC_SetPriority+0xd4>)
 8004426:	1dfb      	adds	r3, r7, #7
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	b25b      	sxtb	r3, r3
 800442c:	089b      	lsrs	r3, r3, #2
 800442e:	430a      	orrs	r2, r1
 8004430:	33c0      	adds	r3, #192	; 0xc0
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004436:	e031      	b.n	800449c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004438:	4a1b      	ldr	r2, [pc, #108]	; (80044a8 <__NVIC_SetPriority+0xd8>)
 800443a:	1dfb      	adds	r3, r7, #7
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	0019      	movs	r1, r3
 8004440:	230f      	movs	r3, #15
 8004442:	400b      	ands	r3, r1
 8004444:	3b08      	subs	r3, #8
 8004446:	089b      	lsrs	r3, r3, #2
 8004448:	3306      	adds	r3, #6
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	18d3      	adds	r3, r2, r3
 800444e:	3304      	adds	r3, #4
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	1dfa      	adds	r2, r7, #7
 8004454:	7812      	ldrb	r2, [r2, #0]
 8004456:	0011      	movs	r1, r2
 8004458:	2203      	movs	r2, #3
 800445a:	400a      	ands	r2, r1
 800445c:	00d2      	lsls	r2, r2, #3
 800445e:	21ff      	movs	r1, #255	; 0xff
 8004460:	4091      	lsls	r1, r2
 8004462:	000a      	movs	r2, r1
 8004464:	43d2      	mvns	r2, r2
 8004466:	401a      	ands	r2, r3
 8004468:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	019b      	lsls	r3, r3, #6
 800446e:	22ff      	movs	r2, #255	; 0xff
 8004470:	401a      	ands	r2, r3
 8004472:	1dfb      	adds	r3, r7, #7
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	0018      	movs	r0, r3
 8004478:	2303      	movs	r3, #3
 800447a:	4003      	ands	r3, r0
 800447c:	00db      	lsls	r3, r3, #3
 800447e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004480:	4809      	ldr	r0, [pc, #36]	; (80044a8 <__NVIC_SetPriority+0xd8>)
 8004482:	1dfb      	adds	r3, r7, #7
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	001c      	movs	r4, r3
 8004488:	230f      	movs	r3, #15
 800448a:	4023      	ands	r3, r4
 800448c:	3b08      	subs	r3, #8
 800448e:	089b      	lsrs	r3, r3, #2
 8004490:	430a      	orrs	r2, r1
 8004492:	3306      	adds	r3, #6
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	18c3      	adds	r3, r0, r3
 8004498:	3304      	adds	r3, #4
 800449a:	601a      	str	r2, [r3, #0]
}
 800449c:	46c0      	nop			; (mov r8, r8)
 800449e:	46bd      	mov	sp, r7
 80044a0:	b003      	add	sp, #12
 80044a2:	bd90      	pop	{r4, r7, pc}
 80044a4:	e000e100 	.word	0xe000e100
 80044a8:	e000ed00 	.word	0xe000ed00

080044ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	1e5a      	subs	r2, r3, #1
 80044b8:	2380      	movs	r3, #128	; 0x80
 80044ba:	045b      	lsls	r3, r3, #17
 80044bc:	429a      	cmp	r2, r3
 80044be:	d301      	bcc.n	80044c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044c0:	2301      	movs	r3, #1
 80044c2:	e010      	b.n	80044e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044c4:	4b0a      	ldr	r3, [pc, #40]	; (80044f0 <SysTick_Config+0x44>)
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	3a01      	subs	r2, #1
 80044ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044cc:	2301      	movs	r3, #1
 80044ce:	425b      	negs	r3, r3
 80044d0:	2103      	movs	r1, #3
 80044d2:	0018      	movs	r0, r3
 80044d4:	f7ff ff7c 	bl	80043d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044d8:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <SysTick_Config+0x44>)
 80044da:	2200      	movs	r2, #0
 80044dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044de:	4b04      	ldr	r3, [pc, #16]	; (80044f0 <SysTick_Config+0x44>)
 80044e0:	2207      	movs	r2, #7
 80044e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	0018      	movs	r0, r3
 80044e8:	46bd      	mov	sp, r7
 80044ea:	b002      	add	sp, #8
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	46c0      	nop			; (mov r8, r8)
 80044f0:	e000e010 	.word	0xe000e010

080044f4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60b9      	str	r1, [r7, #8]
 80044fc:	607a      	str	r2, [r7, #4]
 80044fe:	210f      	movs	r1, #15
 8004500:	187b      	adds	r3, r7, r1
 8004502:	1c02      	adds	r2, r0, #0
 8004504:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	187b      	adds	r3, r7, r1
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	b25b      	sxtb	r3, r3
 800450e:	0011      	movs	r1, r2
 8004510:	0018      	movs	r0, r3
 8004512:	f7ff ff5d 	bl	80043d0 <__NVIC_SetPriority>
}
 8004516:	46c0      	nop			; (mov r8, r8)
 8004518:	46bd      	mov	sp, r7
 800451a:	b004      	add	sp, #16
 800451c:	bd80      	pop	{r7, pc}

0800451e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b082      	sub	sp, #8
 8004522:	af00      	add	r7, sp, #0
 8004524:	0002      	movs	r2, r0
 8004526:	1dfb      	adds	r3, r7, #7
 8004528:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800452a:	1dfb      	adds	r3, r7, #7
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	b25b      	sxtb	r3, r3
 8004530:	0018      	movs	r0, r3
 8004532:	f7ff ff33 	bl	800439c <__NVIC_EnableIRQ>
}
 8004536:	46c0      	nop			; (mov r8, r8)
 8004538:	46bd      	mov	sp, r7
 800453a:	b002      	add	sp, #8
 800453c:	bd80      	pop	{r7, pc}

0800453e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b082      	sub	sp, #8
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	0018      	movs	r0, r3
 800454a:	f7ff ffaf 	bl	80044ac <SysTick_Config>
 800454e:	0003      	movs	r3, r0
}
 8004550:	0018      	movs	r0, r3
 8004552:	46bd      	mov	sp, r7
 8004554:	b002      	add	sp, #8
 8004556:	bd80      	pop	{r7, pc}

08004558 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e036      	b.n	80045dc <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2221      	movs	r2, #33	; 0x21
 8004572:	2102      	movs	r1, #2
 8004574:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	4a18      	ldr	r2, [pc, #96]	; (80045e4 <HAL_DMA_Init+0x8c>)
 8004582:	4013      	ands	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800458e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800459a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	0018      	movs	r0, r3
 80045c0:	f000 f98c 	bl	80048dc <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2221      	movs	r2, #33	; 0x21
 80045ce:	2101      	movs	r1, #1
 80045d0:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2220      	movs	r2, #32
 80045d6:	2100      	movs	r1, #0
 80045d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	0018      	movs	r0, r3
 80045de:	46bd      	mov	sp, r7
 80045e0:	b004      	add	sp, #16
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	ffffc00f 	.word	0xffffc00f

080045e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
 80045f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045f6:	2317      	movs	r3, #23
 80045f8:	18fb      	adds	r3, r7, r3
 80045fa:	2200      	movs	r2, #0
 80045fc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2220      	movs	r2, #32
 8004602:	5c9b      	ldrb	r3, [r3, r2]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d101      	bne.n	800460c <HAL_DMA_Start_IT+0x24>
 8004608:	2302      	movs	r3, #2
 800460a:	e04f      	b.n	80046ac <HAL_DMA_Start_IT+0xc4>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2220      	movs	r2, #32
 8004610:	2101      	movs	r1, #1
 8004612:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2221      	movs	r2, #33	; 0x21
 8004618:	5c9b      	ldrb	r3, [r3, r2]
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b01      	cmp	r3, #1
 800461e:	d13a      	bne.n	8004696 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2221      	movs	r2, #33	; 0x21
 8004624:	2102      	movs	r1, #2
 8004626:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2101      	movs	r1, #1
 800463a:	438a      	bics	r2, r1
 800463c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	68b9      	ldr	r1, [r7, #8]
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 f91c 	bl	8004882 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464e:	2b00      	cmp	r3, #0
 8004650:	d008      	beq.n	8004664 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	210e      	movs	r1, #14
 800465e:	430a      	orrs	r2, r1
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	e00f      	b.n	8004684 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	210a      	movs	r1, #10
 8004670:	430a      	orrs	r2, r1
 8004672:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2104      	movs	r1, #4
 8004680:	438a      	bics	r2, r1
 8004682:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2101      	movs	r1, #1
 8004690:	430a      	orrs	r2, r1
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	e007      	b.n	80046a6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2220      	movs	r2, #32
 800469a:	2100      	movs	r1, #0
 800469c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800469e:	2317      	movs	r3, #23
 80046a0:	18fb      	adds	r3, r7, r3
 80046a2:	2202      	movs	r2, #2
 80046a4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80046a6:	2317      	movs	r3, #23
 80046a8:	18fb      	adds	r3, r7, r3
 80046aa:	781b      	ldrb	r3, [r3, #0]
}
 80046ac:	0018      	movs	r0, r3
 80046ae:	46bd      	mov	sp, r7
 80046b0:	b006      	add	sp, #24
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046bc:	210f      	movs	r1, #15
 80046be:	187b      	adds	r3, r7, r1
 80046c0:	2200      	movs	r2, #0
 80046c2:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2221      	movs	r2, #33	; 0x21
 80046c8:	5c9b      	ldrb	r3, [r3, r2]
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d006      	beq.n	80046de <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2204      	movs	r2, #4
 80046d4:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80046d6:	187b      	adds	r3, r7, r1
 80046d8:	2201      	movs	r2, #1
 80046da:	701a      	strb	r2, [r3, #0]
 80046dc:	e028      	b.n	8004730 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	210e      	movs	r1, #14
 80046ea:	438a      	bics	r2, r1
 80046ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2101      	movs	r1, #1
 80046fa:	438a      	bics	r2, r1
 80046fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004706:	2101      	movs	r1, #1
 8004708:	4091      	lsls	r1, r2
 800470a:	000a      	movs	r2, r1
 800470c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2221      	movs	r2, #33	; 0x21
 8004712:	2101      	movs	r1, #1
 8004714:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2220      	movs	r2, #32
 800471a:	2100      	movs	r1, #0
 800471c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004722:	2b00      	cmp	r3, #0
 8004724:	d004      	beq.n	8004730 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	0010      	movs	r0, r2
 800472e:	4798      	blx	r3
    }
  }
  return status;
 8004730:	230f      	movs	r3, #15
 8004732:	18fb      	adds	r3, r7, r3
 8004734:	781b      	ldrb	r3, [r3, #0]
}
 8004736:	0018      	movs	r0, r3
 8004738:	46bd      	mov	sp, r7
 800473a:	b004      	add	sp, #16
 800473c:	bd80      	pop	{r7, pc}

0800473e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b084      	sub	sp, #16
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	2204      	movs	r2, #4
 800475c:	409a      	lsls	r2, r3
 800475e:	0013      	movs	r3, r2
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	4013      	ands	r3, r2
 8004764:	d024      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x72>
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2204      	movs	r2, #4
 800476a:	4013      	ands	r3, r2
 800476c:	d020      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2220      	movs	r2, #32
 8004776:	4013      	ands	r3, r2
 8004778:	d107      	bne.n	800478a <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2104      	movs	r1, #4
 8004786:	438a      	bics	r2, r1
 8004788:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004792:	2104      	movs	r1, #4
 8004794:	4091      	lsls	r1, r2
 8004796:	000a      	movs	r2, r1
 8004798:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d100      	bne.n	80047a4 <HAL_DMA_IRQHandler+0x66>
 80047a2:	e06a      	b.n	800487a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	0010      	movs	r0, r2
 80047ac:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80047ae:	e064      	b.n	800487a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	2202      	movs	r2, #2
 80047b6:	409a      	lsls	r2, r3
 80047b8:	0013      	movs	r3, r2
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	4013      	ands	r3, r2
 80047be:	d02b      	beq.n	8004818 <HAL_DMA_IRQHandler+0xda>
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2202      	movs	r2, #2
 80047c4:	4013      	ands	r3, r2
 80047c6:	d027      	beq.n	8004818 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2220      	movs	r2, #32
 80047d0:	4013      	ands	r3, r2
 80047d2:	d10b      	bne.n	80047ec <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	210a      	movs	r1, #10
 80047e0:	438a      	bics	r2, r1
 80047e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2221      	movs	r2, #33	; 0x21
 80047e8:	2101      	movs	r1, #1
 80047ea:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f4:	2102      	movs	r1, #2
 80047f6:	4091      	lsls	r1, r2
 80047f8:	000a      	movs	r2, r1
 80047fa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2220      	movs	r2, #32
 8004800:	2100      	movs	r1, #0
 8004802:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004808:	2b00      	cmp	r3, #0
 800480a:	d036      	beq.n	800487a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	0010      	movs	r0, r2
 8004814:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004816:	e030      	b.n	800487a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481c:	2208      	movs	r2, #8
 800481e:	409a      	lsls	r2, r3
 8004820:	0013      	movs	r3, r2
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	4013      	ands	r3, r2
 8004826:	d028      	beq.n	800487a <HAL_DMA_IRQHandler+0x13c>
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2208      	movs	r2, #8
 800482c:	4013      	ands	r3, r2
 800482e:	d024      	beq.n	800487a <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	210e      	movs	r1, #14
 800483c:	438a      	bics	r2, r1
 800483e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004848:	2101      	movs	r1, #1
 800484a:	4091      	lsls	r1, r2
 800484c:	000a      	movs	r2, r1
 800484e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2221      	movs	r2, #33	; 0x21
 800485a:	2101      	movs	r1, #1
 800485c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2220      	movs	r2, #32
 8004862:	2100      	movs	r1, #0
 8004864:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	2b00      	cmp	r3, #0
 800486c:	d005      	beq.n	800487a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	0010      	movs	r0, r2
 8004876:	4798      	blx	r3
    }
  }
}
 8004878:	e7ff      	b.n	800487a <HAL_DMA_IRQHandler+0x13c>
 800487a:	46c0      	nop			; (mov r8, r8)
 800487c:	46bd      	mov	sp, r7
 800487e:	b004      	add	sp, #16
 8004880:	bd80      	pop	{r7, pc}

08004882 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b084      	sub	sp, #16
 8004886:	af00      	add	r7, sp, #0
 8004888:	60f8      	str	r0, [r7, #12]
 800488a:	60b9      	str	r1, [r7, #8]
 800488c:	607a      	str	r2, [r7, #4]
 800488e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004898:	2101      	movs	r1, #1
 800489a:	4091      	lsls	r1, r2
 800489c:	000a      	movs	r2, r1
 800489e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	2b10      	cmp	r3, #16
 80048ae:	d108      	bne.n	80048c2 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80048c0:	e007      	b.n	80048d2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	60da      	str	r2, [r3, #12]
}
 80048d2:	46c0      	nop			; (mov r8, r8)
 80048d4:	46bd      	mov	sp, r7
 80048d6:	b004      	add	sp, #16
 80048d8:	bd80      	pop	{r7, pc}
	...

080048dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a08      	ldr	r2, [pc, #32]	; (800490c <DMA_CalcBaseAndBitshift+0x30>)
 80048ea:	4694      	mov	ip, r2
 80048ec:	4463      	add	r3, ip
 80048ee:	2114      	movs	r1, #20
 80048f0:	0018      	movs	r0, r3
 80048f2:	f7fb fc13 	bl	800011c <__udivsi3>
 80048f6:	0003      	movs	r3, r0
 80048f8:	009a      	lsls	r2, r3, #2
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a03      	ldr	r2, [pc, #12]	; (8004910 <DMA_CalcBaseAndBitshift+0x34>)
 8004902:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8004904:	46c0      	nop			; (mov r8, r8)
 8004906:	46bd      	mov	sp, r7
 8004908:	b002      	add	sp, #8
 800490a:	bd80      	pop	{r7, pc}
 800490c:	bffdfff8 	.word	0xbffdfff8
 8004910:	40020000 	.word	0x40020000

08004914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800491e:	2300      	movs	r3, #0
 8004920:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004922:	e155      	b.n	8004bd0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2101      	movs	r1, #1
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	4091      	lsls	r1, r2
 800492e:	000a      	movs	r2, r1
 8004930:	4013      	ands	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d100      	bne.n	800493c <HAL_GPIO_Init+0x28>
 800493a:	e146      	b.n	8004bca <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	2203      	movs	r2, #3
 8004942:	4013      	ands	r3, r2
 8004944:	2b01      	cmp	r3, #1
 8004946:	d005      	beq.n	8004954 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	2203      	movs	r2, #3
 800494e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004950:	2b02      	cmp	r3, #2
 8004952:	d130      	bne.n	80049b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	2203      	movs	r2, #3
 8004960:	409a      	lsls	r2, r3
 8004962:	0013      	movs	r3, r2
 8004964:	43da      	mvns	r2, r3
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	4013      	ands	r3, r2
 800496a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	68da      	ldr	r2, [r3, #12]
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	409a      	lsls	r2, r3
 8004976:	0013      	movs	r3, r2
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	4313      	orrs	r3, r2
 800497c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800498a:	2201      	movs	r2, #1
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	409a      	lsls	r2, r3
 8004990:	0013      	movs	r3, r2
 8004992:	43da      	mvns	r2, r3
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	4013      	ands	r3, r2
 8004998:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	091b      	lsrs	r3, r3, #4
 80049a0:	2201      	movs	r2, #1
 80049a2:	401a      	ands	r2, r3
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	409a      	lsls	r2, r3
 80049a8:	0013      	movs	r3, r2
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2203      	movs	r2, #3
 80049bc:	4013      	ands	r3, r2
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d017      	beq.n	80049f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	2203      	movs	r2, #3
 80049ce:	409a      	lsls	r2, r3
 80049d0:	0013      	movs	r3, r2
 80049d2:	43da      	mvns	r2, r3
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	4013      	ands	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	689a      	ldr	r2, [r3, #8]
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	409a      	lsls	r2, r3
 80049e4:	0013      	movs	r3, r2
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2203      	movs	r2, #3
 80049f8:	4013      	ands	r3, r2
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d123      	bne.n	8004a46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	08da      	lsrs	r2, r3, #3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	3208      	adds	r2, #8
 8004a06:	0092      	lsls	r2, r2, #2
 8004a08:	58d3      	ldr	r3, [r2, r3]
 8004a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	2207      	movs	r2, #7
 8004a10:	4013      	ands	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	220f      	movs	r2, #15
 8004a16:	409a      	lsls	r2, r3
 8004a18:	0013      	movs	r3, r2
 8004a1a:	43da      	mvns	r2, r3
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	691a      	ldr	r2, [r3, #16]
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2107      	movs	r1, #7
 8004a2a:	400b      	ands	r3, r1
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	409a      	lsls	r2, r3
 8004a30:	0013      	movs	r3, r2
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	08da      	lsrs	r2, r3, #3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3208      	adds	r2, #8
 8004a40:	0092      	lsls	r2, r2, #2
 8004a42:	6939      	ldr	r1, [r7, #16]
 8004a44:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	2203      	movs	r2, #3
 8004a52:	409a      	lsls	r2, r3
 8004a54:	0013      	movs	r3, r2
 8004a56:	43da      	mvns	r2, r3
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2203      	movs	r2, #3
 8004a64:	401a      	ands	r2, r3
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	409a      	lsls	r2, r3
 8004a6c:	0013      	movs	r3, r2
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	23c0      	movs	r3, #192	; 0xc0
 8004a80:	029b      	lsls	r3, r3, #10
 8004a82:	4013      	ands	r3, r2
 8004a84:	d100      	bne.n	8004a88 <HAL_GPIO_Init+0x174>
 8004a86:	e0a0      	b.n	8004bca <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a88:	4b57      	ldr	r3, [pc, #348]	; (8004be8 <HAL_GPIO_Init+0x2d4>)
 8004a8a:	699a      	ldr	r2, [r3, #24]
 8004a8c:	4b56      	ldr	r3, [pc, #344]	; (8004be8 <HAL_GPIO_Init+0x2d4>)
 8004a8e:	2101      	movs	r1, #1
 8004a90:	430a      	orrs	r2, r1
 8004a92:	619a      	str	r2, [r3, #24]
 8004a94:	4b54      	ldr	r3, [pc, #336]	; (8004be8 <HAL_GPIO_Init+0x2d4>)
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	60bb      	str	r3, [r7, #8]
 8004a9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004aa0:	4a52      	ldr	r2, [pc, #328]	; (8004bec <HAL_GPIO_Init+0x2d8>)
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	089b      	lsrs	r3, r3, #2
 8004aa6:	3302      	adds	r3, #2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	589b      	ldr	r3, [r3, r2]
 8004aac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2203      	movs	r2, #3
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	220f      	movs	r2, #15
 8004ab8:	409a      	lsls	r2, r3
 8004aba:	0013      	movs	r3, r2
 8004abc:	43da      	mvns	r2, r3
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	2390      	movs	r3, #144	; 0x90
 8004ac8:	05db      	lsls	r3, r3, #23
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d019      	beq.n	8004b02 <HAL_GPIO_Init+0x1ee>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a47      	ldr	r2, [pc, #284]	; (8004bf0 <HAL_GPIO_Init+0x2dc>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d013      	beq.n	8004afe <HAL_GPIO_Init+0x1ea>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a46      	ldr	r2, [pc, #280]	; (8004bf4 <HAL_GPIO_Init+0x2e0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d00d      	beq.n	8004afa <HAL_GPIO_Init+0x1e6>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a45      	ldr	r2, [pc, #276]	; (8004bf8 <HAL_GPIO_Init+0x2e4>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d007      	beq.n	8004af6 <HAL_GPIO_Init+0x1e2>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a44      	ldr	r2, [pc, #272]	; (8004bfc <HAL_GPIO_Init+0x2e8>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d101      	bne.n	8004af2 <HAL_GPIO_Init+0x1de>
 8004aee:	2304      	movs	r3, #4
 8004af0:	e008      	b.n	8004b04 <HAL_GPIO_Init+0x1f0>
 8004af2:	2305      	movs	r3, #5
 8004af4:	e006      	b.n	8004b04 <HAL_GPIO_Init+0x1f0>
 8004af6:	2303      	movs	r3, #3
 8004af8:	e004      	b.n	8004b04 <HAL_GPIO_Init+0x1f0>
 8004afa:	2302      	movs	r3, #2
 8004afc:	e002      	b.n	8004b04 <HAL_GPIO_Init+0x1f0>
 8004afe:	2301      	movs	r3, #1
 8004b00:	e000      	b.n	8004b04 <HAL_GPIO_Init+0x1f0>
 8004b02:	2300      	movs	r3, #0
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	2103      	movs	r1, #3
 8004b08:	400a      	ands	r2, r1
 8004b0a:	0092      	lsls	r2, r2, #2
 8004b0c:	4093      	lsls	r3, r2
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004b14:	4935      	ldr	r1, [pc, #212]	; (8004bec <HAL_GPIO_Init+0x2d8>)
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	089b      	lsrs	r3, r3, #2
 8004b1a:	3302      	adds	r3, #2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b22:	4b37      	ldr	r3, [pc, #220]	; (8004c00 <HAL_GPIO_Init+0x2ec>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	43da      	mvns	r2, r3
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	2380      	movs	r3, #128	; 0x80
 8004b38:	035b      	lsls	r3, r3, #13
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	d003      	beq.n	8004b46 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004b46:	4b2e      	ldr	r3, [pc, #184]	; (8004c00 <HAL_GPIO_Init+0x2ec>)
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004b4c:	4b2c      	ldr	r3, [pc, #176]	; (8004c00 <HAL_GPIO_Init+0x2ec>)
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	43da      	mvns	r2, r3
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	2380      	movs	r3, #128	; 0x80
 8004b62:	039b      	lsls	r3, r3, #14
 8004b64:	4013      	ands	r3, r2
 8004b66:	d003      	beq.n	8004b70 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004b70:	4b23      	ldr	r3, [pc, #140]	; (8004c00 <HAL_GPIO_Init+0x2ec>)
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8004b76:	4b22      	ldr	r3, [pc, #136]	; (8004c00 <HAL_GPIO_Init+0x2ec>)
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	43da      	mvns	r2, r3
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	4013      	ands	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	2380      	movs	r3, #128	; 0x80
 8004b8c:	029b      	lsls	r3, r3, #10
 8004b8e:	4013      	ands	r3, r2
 8004b90:	d003      	beq.n	8004b9a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004b9a:	4b19      	ldr	r3, [pc, #100]	; (8004c00 <HAL_GPIO_Init+0x2ec>)
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8004ba0:	4b17      	ldr	r3, [pc, #92]	; (8004c00 <HAL_GPIO_Init+0x2ec>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	43da      	mvns	r2, r3
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	4013      	ands	r3, r2
 8004bae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	2380      	movs	r3, #128	; 0x80
 8004bb6:	025b      	lsls	r3, r3, #9
 8004bb8:	4013      	ands	r3, r2
 8004bba:	d003      	beq.n	8004bc4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004bc4:	4b0e      	ldr	r3, [pc, #56]	; (8004c00 <HAL_GPIO_Init+0x2ec>)
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	40da      	lsrs	r2, r3
 8004bd8:	1e13      	subs	r3, r2, #0
 8004bda:	d000      	beq.n	8004bde <HAL_GPIO_Init+0x2ca>
 8004bdc:	e6a2      	b.n	8004924 <HAL_GPIO_Init+0x10>
  } 
}
 8004bde:	46c0      	nop			; (mov r8, r8)
 8004be0:	46c0      	nop			; (mov r8, r8)
 8004be2:	46bd      	mov	sp, r7
 8004be4:	b006      	add	sp, #24
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40021000 	.word	0x40021000
 8004bec:	40010000 	.word	0x40010000
 8004bf0:	48000400 	.word	0x48000400
 8004bf4:	48000800 	.word	0x48000800
 8004bf8:	48000c00 	.word	0x48000c00
 8004bfc:	48001000 	.word	0x48001000
 8004c00:	40010400 	.word	0x40010400

08004c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	0008      	movs	r0, r1
 8004c0e:	0011      	movs	r1, r2
 8004c10:	1cbb      	adds	r3, r7, #2
 8004c12:	1c02      	adds	r2, r0, #0
 8004c14:	801a      	strh	r2, [r3, #0]
 8004c16:	1c7b      	adds	r3, r7, #1
 8004c18:	1c0a      	adds	r2, r1, #0
 8004c1a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c1c:	1c7b      	adds	r3, r7, #1
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d004      	beq.n	8004c2e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c24:	1cbb      	adds	r3, r7, #2
 8004c26:	881a      	ldrh	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c2c:	e003      	b.n	8004c36 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c2e:	1cbb      	adds	r3, r7, #2
 8004c30:	881a      	ldrh	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c36:	46c0      	nop			; (mov r8, r8)
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	b002      	add	sp, #8
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b084      	sub	sp, #16
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
 8004c46:	000a      	movs	r2, r1
 8004c48:	1cbb      	adds	r3, r7, #2
 8004c4a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c52:	1cbb      	adds	r3, r7, #2
 8004c54:	881b      	ldrh	r3, [r3, #0]
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	041a      	lsls	r2, r3, #16
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	43db      	mvns	r3, r3
 8004c60:	1cb9      	adds	r1, r7, #2
 8004c62:	8809      	ldrh	r1, [r1, #0]
 8004c64:	400b      	ands	r3, r1
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	619a      	str	r2, [r3, #24]
}
 8004c6c:	46c0      	nop			; (mov r8, r8)
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	b004      	add	sp, #16
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b088      	sub	sp, #32
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d102      	bne.n	8004c88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	f000 fb76 	bl	8005374 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	4013      	ands	r3, r2
 8004c90:	d100      	bne.n	8004c94 <HAL_RCC_OscConfig+0x20>
 8004c92:	e08e      	b.n	8004db2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004c94:	4bc5      	ldr	r3, [pc, #788]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	220c      	movs	r2, #12
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	2b04      	cmp	r3, #4
 8004c9e:	d00e      	beq.n	8004cbe <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ca0:	4bc2      	ldr	r3, [pc, #776]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	220c      	movs	r2, #12
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d117      	bne.n	8004cdc <HAL_RCC_OscConfig+0x68>
 8004cac:	4bbf      	ldr	r3, [pc, #764]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	23c0      	movs	r3, #192	; 0xc0
 8004cb2:	025b      	lsls	r3, r3, #9
 8004cb4:	401a      	ands	r2, r3
 8004cb6:	2380      	movs	r3, #128	; 0x80
 8004cb8:	025b      	lsls	r3, r3, #9
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d10e      	bne.n	8004cdc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cbe:	4bbb      	ldr	r3, [pc, #748]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	2380      	movs	r3, #128	; 0x80
 8004cc4:	029b      	lsls	r3, r3, #10
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	d100      	bne.n	8004ccc <HAL_RCC_OscConfig+0x58>
 8004cca:	e071      	b.n	8004db0 <HAL_RCC_OscConfig+0x13c>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d000      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x62>
 8004cd4:	e06c      	b.n	8004db0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	f000 fb4c 	bl	8005374 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d107      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x80>
 8004ce4:	4bb1      	ldr	r3, [pc, #708]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	4bb0      	ldr	r3, [pc, #704]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004cea:	2180      	movs	r1, #128	; 0x80
 8004cec:	0249      	lsls	r1, r1, #9
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	e02f      	b.n	8004d54 <HAL_RCC_OscConfig+0xe0>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10c      	bne.n	8004d16 <HAL_RCC_OscConfig+0xa2>
 8004cfc:	4bab      	ldr	r3, [pc, #684]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	4baa      	ldr	r3, [pc, #680]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004d02:	49ab      	ldr	r1, [pc, #684]	; (8004fb0 <HAL_RCC_OscConfig+0x33c>)
 8004d04:	400a      	ands	r2, r1
 8004d06:	601a      	str	r2, [r3, #0]
 8004d08:	4ba8      	ldr	r3, [pc, #672]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	4ba7      	ldr	r3, [pc, #668]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004d0e:	49a9      	ldr	r1, [pc, #676]	; (8004fb4 <HAL_RCC_OscConfig+0x340>)
 8004d10:	400a      	ands	r2, r1
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	e01e      	b.n	8004d54 <HAL_RCC_OscConfig+0xe0>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2b05      	cmp	r3, #5
 8004d1c:	d10e      	bne.n	8004d3c <HAL_RCC_OscConfig+0xc8>
 8004d1e:	4ba3      	ldr	r3, [pc, #652]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	4ba2      	ldr	r3, [pc, #648]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004d24:	2180      	movs	r1, #128	; 0x80
 8004d26:	02c9      	lsls	r1, r1, #11
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	601a      	str	r2, [r3, #0]
 8004d2c:	4b9f      	ldr	r3, [pc, #636]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	4b9e      	ldr	r3, [pc, #632]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004d32:	2180      	movs	r1, #128	; 0x80
 8004d34:	0249      	lsls	r1, r1, #9
 8004d36:	430a      	orrs	r2, r1
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	e00b      	b.n	8004d54 <HAL_RCC_OscConfig+0xe0>
 8004d3c:	4b9b      	ldr	r3, [pc, #620]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	4b9a      	ldr	r3, [pc, #616]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004d42:	499b      	ldr	r1, [pc, #620]	; (8004fb0 <HAL_RCC_OscConfig+0x33c>)
 8004d44:	400a      	ands	r2, r1
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	4b98      	ldr	r3, [pc, #608]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	4b97      	ldr	r3, [pc, #604]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004d4e:	4999      	ldr	r1, [pc, #612]	; (8004fb4 <HAL_RCC_OscConfig+0x340>)
 8004d50:	400a      	ands	r2, r1
 8004d52:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d014      	beq.n	8004d86 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5c:	f7fd ff32 	bl	8002bc4 <HAL_GetTick>
 8004d60:	0003      	movs	r3, r0
 8004d62:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d64:	e008      	b.n	8004d78 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d66:	f7fd ff2d 	bl	8002bc4 <HAL_GetTick>
 8004d6a:	0002      	movs	r2, r0
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b64      	cmp	r3, #100	; 0x64
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e2fd      	b.n	8005374 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d78:	4b8c      	ldr	r3, [pc, #560]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	2380      	movs	r3, #128	; 0x80
 8004d7e:	029b      	lsls	r3, r3, #10
 8004d80:	4013      	ands	r3, r2
 8004d82:	d0f0      	beq.n	8004d66 <HAL_RCC_OscConfig+0xf2>
 8004d84:	e015      	b.n	8004db2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d86:	f7fd ff1d 	bl	8002bc4 <HAL_GetTick>
 8004d8a:	0003      	movs	r3, r0
 8004d8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d90:	f7fd ff18 	bl	8002bc4 <HAL_GetTick>
 8004d94:	0002      	movs	r2, r0
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b64      	cmp	r3, #100	; 0x64
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e2e8      	b.n	8005374 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004da2:	4b82      	ldr	r3, [pc, #520]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	2380      	movs	r3, #128	; 0x80
 8004da8:	029b      	lsls	r3, r3, #10
 8004daa:	4013      	ands	r3, r2
 8004dac:	d1f0      	bne.n	8004d90 <HAL_RCC_OscConfig+0x11c>
 8004dae:	e000      	b.n	8004db2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004db0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2202      	movs	r2, #2
 8004db8:	4013      	ands	r3, r2
 8004dba:	d100      	bne.n	8004dbe <HAL_RCC_OscConfig+0x14a>
 8004dbc:	e06c      	b.n	8004e98 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004dbe:	4b7b      	ldr	r3, [pc, #492]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	220c      	movs	r2, #12
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	d00e      	beq.n	8004de6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004dc8:	4b78      	ldr	r3, [pc, #480]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	220c      	movs	r2, #12
 8004dce:	4013      	ands	r3, r2
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d11f      	bne.n	8004e14 <HAL_RCC_OscConfig+0x1a0>
 8004dd4:	4b75      	ldr	r3, [pc, #468]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	23c0      	movs	r3, #192	; 0xc0
 8004dda:	025b      	lsls	r3, r3, #9
 8004ddc:	401a      	ands	r2, r3
 8004dde:	2380      	movs	r3, #128	; 0x80
 8004de0:	021b      	lsls	r3, r3, #8
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d116      	bne.n	8004e14 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004de6:	4b71      	ldr	r3, [pc, #452]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2202      	movs	r2, #2
 8004dec:	4013      	ands	r3, r2
 8004dee:	d005      	beq.n	8004dfc <HAL_RCC_OscConfig+0x188>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d001      	beq.n	8004dfc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e2bb      	b.n	8005374 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dfc:	4b6b      	ldr	r3, [pc, #428]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	22f8      	movs	r2, #248	; 0xf8
 8004e02:	4393      	bics	r3, r2
 8004e04:	0019      	movs	r1, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	00da      	lsls	r2, r3, #3
 8004e0c:	4b67      	ldr	r3, [pc, #412]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e12:	e041      	b.n	8004e98 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d024      	beq.n	8004e66 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e1c:	4b63      	ldr	r3, [pc, #396]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	4b62      	ldr	r3, [pc, #392]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004e22:	2101      	movs	r1, #1
 8004e24:	430a      	orrs	r2, r1
 8004e26:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e28:	f7fd fecc 	bl	8002bc4 <HAL_GetTick>
 8004e2c:	0003      	movs	r3, r0
 8004e2e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e30:	e008      	b.n	8004e44 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e32:	f7fd fec7 	bl	8002bc4 <HAL_GetTick>
 8004e36:	0002      	movs	r2, r0
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e297      	b.n	8005374 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e44:	4b59      	ldr	r3, [pc, #356]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2202      	movs	r2, #2
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	d0f1      	beq.n	8004e32 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e4e:	4b57      	ldr	r3, [pc, #348]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	22f8      	movs	r2, #248	; 0xf8
 8004e54:	4393      	bics	r3, r2
 8004e56:	0019      	movs	r1, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	00da      	lsls	r2, r3, #3
 8004e5e:	4b53      	ldr	r3, [pc, #332]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004e60:	430a      	orrs	r2, r1
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	e018      	b.n	8004e98 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e66:	4b51      	ldr	r3, [pc, #324]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	4b50      	ldr	r3, [pc, #320]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	438a      	bics	r2, r1
 8004e70:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e72:	f7fd fea7 	bl	8002bc4 <HAL_GetTick>
 8004e76:	0003      	movs	r3, r0
 8004e78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e7c:	f7fd fea2 	bl	8002bc4 <HAL_GetTick>
 8004e80:	0002      	movs	r2, r0
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e272      	b.n	8005374 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e8e:	4b47      	ldr	r3, [pc, #284]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2202      	movs	r2, #2
 8004e94:	4013      	ands	r3, r2
 8004e96:	d1f1      	bne.n	8004e7c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2208      	movs	r2, #8
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	d036      	beq.n	8004f10 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d019      	beq.n	8004ede <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eaa:	4b40      	ldr	r3, [pc, #256]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004eac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004eae:	4b3f      	ldr	r3, [pc, #252]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eb6:	f7fd fe85 	bl	8002bc4 <HAL_GetTick>
 8004eba:	0003      	movs	r3, r0
 8004ebc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ec0:	f7fd fe80 	bl	8002bc4 <HAL_GetTick>
 8004ec4:	0002      	movs	r2, r0
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e250      	b.n	8005374 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ed2:	4b36      	ldr	r3, [pc, #216]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	4013      	ands	r3, r2
 8004eda:	d0f1      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x24c>
 8004edc:	e018      	b.n	8004f10 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ede:	4b33      	ldr	r3, [pc, #204]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004ee0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ee2:	4b32      	ldr	r3, [pc, #200]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004ee4:	2101      	movs	r1, #1
 8004ee6:	438a      	bics	r2, r1
 8004ee8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eea:	f7fd fe6b 	bl	8002bc4 <HAL_GetTick>
 8004eee:	0003      	movs	r3, r0
 8004ef0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ef4:	f7fd fe66 	bl	8002bc4 <HAL_GetTick>
 8004ef8:	0002      	movs	r2, r0
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e236      	b.n	8005374 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f06:	4b29      	ldr	r3, [pc, #164]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	d1f1      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2204      	movs	r2, #4
 8004f16:	4013      	ands	r3, r2
 8004f18:	d100      	bne.n	8004f1c <HAL_RCC_OscConfig+0x2a8>
 8004f1a:	e0b5      	b.n	8005088 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f1c:	201f      	movs	r0, #31
 8004f1e:	183b      	adds	r3, r7, r0
 8004f20:	2200      	movs	r2, #0
 8004f22:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f24:	4b21      	ldr	r3, [pc, #132]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004f26:	69da      	ldr	r2, [r3, #28]
 8004f28:	2380      	movs	r3, #128	; 0x80
 8004f2a:	055b      	lsls	r3, r3, #21
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	d110      	bne.n	8004f52 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f30:	4b1e      	ldr	r3, [pc, #120]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004f32:	69da      	ldr	r2, [r3, #28]
 8004f34:	4b1d      	ldr	r3, [pc, #116]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004f36:	2180      	movs	r1, #128	; 0x80
 8004f38:	0549      	lsls	r1, r1, #21
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	61da      	str	r2, [r3, #28]
 8004f3e:	4b1b      	ldr	r3, [pc, #108]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004f40:	69da      	ldr	r2, [r3, #28]
 8004f42:	2380      	movs	r3, #128	; 0x80
 8004f44:	055b      	lsls	r3, r3, #21
 8004f46:	4013      	ands	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f4c:	183b      	adds	r3, r7, r0
 8004f4e:	2201      	movs	r2, #1
 8004f50:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f52:	4b19      	ldr	r3, [pc, #100]	; (8004fb8 <HAL_RCC_OscConfig+0x344>)
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	2380      	movs	r3, #128	; 0x80
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	d11a      	bne.n	8004f94 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f5e:	4b16      	ldr	r3, [pc, #88]	; (8004fb8 <HAL_RCC_OscConfig+0x344>)
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	4b15      	ldr	r3, [pc, #84]	; (8004fb8 <HAL_RCC_OscConfig+0x344>)
 8004f64:	2180      	movs	r1, #128	; 0x80
 8004f66:	0049      	lsls	r1, r1, #1
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f6c:	f7fd fe2a 	bl	8002bc4 <HAL_GetTick>
 8004f70:	0003      	movs	r3, r0
 8004f72:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f74:	e008      	b.n	8004f88 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f76:	f7fd fe25 	bl	8002bc4 <HAL_GetTick>
 8004f7a:	0002      	movs	r2, r0
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b64      	cmp	r3, #100	; 0x64
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e1f5      	b.n	8005374 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f88:	4b0b      	ldr	r3, [pc, #44]	; (8004fb8 <HAL_RCC_OscConfig+0x344>)
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	2380      	movs	r3, #128	; 0x80
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	4013      	ands	r3, r2
 8004f92:	d0f0      	beq.n	8004f76 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d10f      	bne.n	8004fbc <HAL_RCC_OscConfig+0x348>
 8004f9c:	4b03      	ldr	r3, [pc, #12]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004f9e:	6a1a      	ldr	r2, [r3, #32]
 8004fa0:	4b02      	ldr	r3, [pc, #8]	; (8004fac <HAL_RCC_OscConfig+0x338>)
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	621a      	str	r2, [r3, #32]
 8004fa8:	e036      	b.n	8005018 <HAL_RCC_OscConfig+0x3a4>
 8004faa:	46c0      	nop			; (mov r8, r8)
 8004fac:	40021000 	.word	0x40021000
 8004fb0:	fffeffff 	.word	0xfffeffff
 8004fb4:	fffbffff 	.word	0xfffbffff
 8004fb8:	40007000 	.word	0x40007000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10c      	bne.n	8004fde <HAL_RCC_OscConfig+0x36a>
 8004fc4:	4bca      	ldr	r3, [pc, #808]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 8004fc6:	6a1a      	ldr	r2, [r3, #32]
 8004fc8:	4bc9      	ldr	r3, [pc, #804]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 8004fca:	2101      	movs	r1, #1
 8004fcc:	438a      	bics	r2, r1
 8004fce:	621a      	str	r2, [r3, #32]
 8004fd0:	4bc7      	ldr	r3, [pc, #796]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 8004fd2:	6a1a      	ldr	r2, [r3, #32]
 8004fd4:	4bc6      	ldr	r3, [pc, #792]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 8004fd6:	2104      	movs	r1, #4
 8004fd8:	438a      	bics	r2, r1
 8004fda:	621a      	str	r2, [r3, #32]
 8004fdc:	e01c      	b.n	8005018 <HAL_RCC_OscConfig+0x3a4>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	2b05      	cmp	r3, #5
 8004fe4:	d10c      	bne.n	8005000 <HAL_RCC_OscConfig+0x38c>
 8004fe6:	4bc2      	ldr	r3, [pc, #776]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 8004fe8:	6a1a      	ldr	r2, [r3, #32]
 8004fea:	4bc1      	ldr	r3, [pc, #772]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 8004fec:	2104      	movs	r1, #4
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	621a      	str	r2, [r3, #32]
 8004ff2:	4bbf      	ldr	r3, [pc, #764]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 8004ff4:	6a1a      	ldr	r2, [r3, #32]
 8004ff6:	4bbe      	ldr	r3, [pc, #760]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	621a      	str	r2, [r3, #32]
 8004ffe:	e00b      	b.n	8005018 <HAL_RCC_OscConfig+0x3a4>
 8005000:	4bbb      	ldr	r3, [pc, #748]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 8005002:	6a1a      	ldr	r2, [r3, #32]
 8005004:	4bba      	ldr	r3, [pc, #744]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 8005006:	2101      	movs	r1, #1
 8005008:	438a      	bics	r2, r1
 800500a:	621a      	str	r2, [r3, #32]
 800500c:	4bb8      	ldr	r3, [pc, #736]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 800500e:	6a1a      	ldr	r2, [r3, #32]
 8005010:	4bb7      	ldr	r3, [pc, #732]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 8005012:	2104      	movs	r1, #4
 8005014:	438a      	bics	r2, r1
 8005016:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d014      	beq.n	800504a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005020:	f7fd fdd0 	bl	8002bc4 <HAL_GetTick>
 8005024:	0003      	movs	r3, r0
 8005026:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005028:	e009      	b.n	800503e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800502a:	f7fd fdcb 	bl	8002bc4 <HAL_GetTick>
 800502e:	0002      	movs	r2, r0
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	4aaf      	ldr	r2, [pc, #700]	; (80052f4 <HAL_RCC_OscConfig+0x680>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e19a      	b.n	8005374 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800503e:	4bac      	ldr	r3, [pc, #688]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	2202      	movs	r2, #2
 8005044:	4013      	ands	r3, r2
 8005046:	d0f0      	beq.n	800502a <HAL_RCC_OscConfig+0x3b6>
 8005048:	e013      	b.n	8005072 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800504a:	f7fd fdbb 	bl	8002bc4 <HAL_GetTick>
 800504e:	0003      	movs	r3, r0
 8005050:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005052:	e009      	b.n	8005068 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005054:	f7fd fdb6 	bl	8002bc4 <HAL_GetTick>
 8005058:	0002      	movs	r2, r0
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	4aa5      	ldr	r2, [pc, #660]	; (80052f4 <HAL_RCC_OscConfig+0x680>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d901      	bls.n	8005068 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e185      	b.n	8005374 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005068:	4ba1      	ldr	r3, [pc, #644]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	2202      	movs	r2, #2
 800506e:	4013      	ands	r3, r2
 8005070:	d1f0      	bne.n	8005054 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005072:	231f      	movs	r3, #31
 8005074:	18fb      	adds	r3, r7, r3
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d105      	bne.n	8005088 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800507c:	4b9c      	ldr	r3, [pc, #624]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 800507e:	69da      	ldr	r2, [r3, #28]
 8005080:	4b9b      	ldr	r3, [pc, #620]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 8005082:	499d      	ldr	r1, [pc, #628]	; (80052f8 <HAL_RCC_OscConfig+0x684>)
 8005084:	400a      	ands	r2, r1
 8005086:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2210      	movs	r2, #16
 800508e:	4013      	ands	r3, r2
 8005090:	d063      	beq.n	800515a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d12a      	bne.n	80050f0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800509a:	4b95      	ldr	r3, [pc, #596]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 800509c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800509e:	4b94      	ldr	r3, [pc, #592]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 80050a0:	2104      	movs	r1, #4
 80050a2:	430a      	orrs	r2, r1
 80050a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80050a6:	4b92      	ldr	r3, [pc, #584]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 80050a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050aa:	4b91      	ldr	r3, [pc, #580]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 80050ac:	2101      	movs	r1, #1
 80050ae:	430a      	orrs	r2, r1
 80050b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050b2:	f7fd fd87 	bl	8002bc4 <HAL_GetTick>
 80050b6:	0003      	movs	r3, r0
 80050b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80050ba:	e008      	b.n	80050ce <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80050bc:	f7fd fd82 	bl	8002bc4 <HAL_GetTick>
 80050c0:	0002      	movs	r2, r0
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e152      	b.n	8005374 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80050ce:	4b88      	ldr	r3, [pc, #544]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 80050d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d2:	2202      	movs	r2, #2
 80050d4:	4013      	ands	r3, r2
 80050d6:	d0f1      	beq.n	80050bc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80050d8:	4b85      	ldr	r3, [pc, #532]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 80050da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050dc:	22f8      	movs	r2, #248	; 0xf8
 80050de:	4393      	bics	r3, r2
 80050e0:	0019      	movs	r1, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	00da      	lsls	r2, r3, #3
 80050e8:	4b81      	ldr	r3, [pc, #516]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 80050ea:	430a      	orrs	r2, r1
 80050ec:	635a      	str	r2, [r3, #52]	; 0x34
 80050ee:	e034      	b.n	800515a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	3305      	adds	r3, #5
 80050f6:	d111      	bne.n	800511c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80050f8:	4b7d      	ldr	r3, [pc, #500]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 80050fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050fc:	4b7c      	ldr	r3, [pc, #496]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 80050fe:	2104      	movs	r1, #4
 8005100:	438a      	bics	r2, r1
 8005102:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005104:	4b7a      	ldr	r3, [pc, #488]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 8005106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005108:	22f8      	movs	r2, #248	; 0xf8
 800510a:	4393      	bics	r3, r2
 800510c:	0019      	movs	r1, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	00da      	lsls	r2, r3, #3
 8005114:	4b76      	ldr	r3, [pc, #472]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 8005116:	430a      	orrs	r2, r1
 8005118:	635a      	str	r2, [r3, #52]	; 0x34
 800511a:	e01e      	b.n	800515a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800511c:	4b74      	ldr	r3, [pc, #464]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 800511e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005120:	4b73      	ldr	r3, [pc, #460]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 8005122:	2104      	movs	r1, #4
 8005124:	430a      	orrs	r2, r1
 8005126:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005128:	4b71      	ldr	r3, [pc, #452]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 800512a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800512c:	4b70      	ldr	r3, [pc, #448]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 800512e:	2101      	movs	r1, #1
 8005130:	438a      	bics	r2, r1
 8005132:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005134:	f7fd fd46 	bl	8002bc4 <HAL_GetTick>
 8005138:	0003      	movs	r3, r0
 800513a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800513c:	e008      	b.n	8005150 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800513e:	f7fd fd41 	bl	8002bc4 <HAL_GetTick>
 8005142:	0002      	movs	r2, r0
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	2b02      	cmp	r3, #2
 800514a:	d901      	bls.n	8005150 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e111      	b.n	8005374 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005150:	4b67      	ldr	r3, [pc, #412]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 8005152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005154:	2202      	movs	r2, #2
 8005156:	4013      	ands	r3, r2
 8005158:	d1f1      	bne.n	800513e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2220      	movs	r2, #32
 8005160:	4013      	ands	r3, r2
 8005162:	d05c      	beq.n	800521e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005164:	4b62      	ldr	r3, [pc, #392]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	220c      	movs	r2, #12
 800516a:	4013      	ands	r3, r2
 800516c:	2b0c      	cmp	r3, #12
 800516e:	d00e      	beq.n	800518e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005170:	4b5f      	ldr	r3, [pc, #380]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	220c      	movs	r2, #12
 8005176:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005178:	2b08      	cmp	r3, #8
 800517a:	d114      	bne.n	80051a6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800517c:	4b5c      	ldr	r3, [pc, #368]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	23c0      	movs	r3, #192	; 0xc0
 8005182:	025b      	lsls	r3, r3, #9
 8005184:	401a      	ands	r2, r3
 8005186:	23c0      	movs	r3, #192	; 0xc0
 8005188:	025b      	lsls	r3, r3, #9
 800518a:	429a      	cmp	r2, r3
 800518c:	d10b      	bne.n	80051a6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800518e:	4b58      	ldr	r3, [pc, #352]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 8005190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005192:	2380      	movs	r3, #128	; 0x80
 8005194:	029b      	lsls	r3, r3, #10
 8005196:	4013      	ands	r3, r2
 8005198:	d040      	beq.n	800521c <HAL_RCC_OscConfig+0x5a8>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d03c      	beq.n	800521c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e0e6      	b.n	8005374 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d01b      	beq.n	80051e6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80051ae:	4b50      	ldr	r3, [pc, #320]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 80051b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051b2:	4b4f      	ldr	r3, [pc, #316]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 80051b4:	2180      	movs	r1, #128	; 0x80
 80051b6:	0249      	lsls	r1, r1, #9
 80051b8:	430a      	orrs	r2, r1
 80051ba:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051bc:	f7fd fd02 	bl	8002bc4 <HAL_GetTick>
 80051c0:	0003      	movs	r3, r0
 80051c2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80051c4:	e008      	b.n	80051d8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051c6:	f7fd fcfd 	bl	8002bc4 <HAL_GetTick>
 80051ca:	0002      	movs	r2, r0
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d901      	bls.n	80051d8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e0cd      	b.n	8005374 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80051d8:	4b45      	ldr	r3, [pc, #276]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 80051da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051dc:	2380      	movs	r3, #128	; 0x80
 80051de:	029b      	lsls	r3, r3, #10
 80051e0:	4013      	ands	r3, r2
 80051e2:	d0f0      	beq.n	80051c6 <HAL_RCC_OscConfig+0x552>
 80051e4:	e01b      	b.n	800521e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80051e6:	4b42      	ldr	r3, [pc, #264]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 80051e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051ea:	4b41      	ldr	r3, [pc, #260]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 80051ec:	4943      	ldr	r1, [pc, #268]	; (80052fc <HAL_RCC_OscConfig+0x688>)
 80051ee:	400a      	ands	r2, r1
 80051f0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f2:	f7fd fce7 	bl	8002bc4 <HAL_GetTick>
 80051f6:	0003      	movs	r3, r0
 80051f8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051fc:	f7fd fce2 	bl	8002bc4 <HAL_GetTick>
 8005200:	0002      	movs	r2, r0
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e0b2      	b.n	8005374 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800520e:	4b38      	ldr	r3, [pc, #224]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 8005210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005212:	2380      	movs	r3, #128	; 0x80
 8005214:	029b      	lsls	r3, r3, #10
 8005216:	4013      	ands	r3, r2
 8005218:	d1f0      	bne.n	80051fc <HAL_RCC_OscConfig+0x588>
 800521a:	e000      	b.n	800521e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800521c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	2b00      	cmp	r3, #0
 8005224:	d100      	bne.n	8005228 <HAL_RCC_OscConfig+0x5b4>
 8005226:	e0a4      	b.n	8005372 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005228:	4b31      	ldr	r3, [pc, #196]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	220c      	movs	r2, #12
 800522e:	4013      	ands	r3, r2
 8005230:	2b08      	cmp	r3, #8
 8005232:	d100      	bne.n	8005236 <HAL_RCC_OscConfig+0x5c2>
 8005234:	e078      	b.n	8005328 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	2b02      	cmp	r3, #2
 800523c:	d14c      	bne.n	80052d8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800523e:	4b2c      	ldr	r3, [pc, #176]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	4b2b      	ldr	r3, [pc, #172]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 8005244:	492e      	ldr	r1, [pc, #184]	; (8005300 <HAL_RCC_OscConfig+0x68c>)
 8005246:	400a      	ands	r2, r1
 8005248:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800524a:	f7fd fcbb 	bl	8002bc4 <HAL_GetTick>
 800524e:	0003      	movs	r3, r0
 8005250:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005254:	f7fd fcb6 	bl	8002bc4 <HAL_GetTick>
 8005258:	0002      	movs	r2, r0
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e086      	b.n	8005374 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005266:	4b22      	ldr	r3, [pc, #136]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	2380      	movs	r3, #128	; 0x80
 800526c:	049b      	lsls	r3, r3, #18
 800526e:	4013      	ands	r3, r2
 8005270:	d1f0      	bne.n	8005254 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005272:	4b1f      	ldr	r3, [pc, #124]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 8005274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005276:	220f      	movs	r2, #15
 8005278:	4393      	bics	r3, r2
 800527a:	0019      	movs	r1, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005280:	4b1b      	ldr	r3, [pc, #108]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 8005282:	430a      	orrs	r2, r1
 8005284:	62da      	str	r2, [r3, #44]	; 0x2c
 8005286:	4b1a      	ldr	r3, [pc, #104]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	4a1e      	ldr	r2, [pc, #120]	; (8005304 <HAL_RCC_OscConfig+0x690>)
 800528c:	4013      	ands	r3, r2
 800528e:	0019      	movs	r1, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005298:	431a      	orrs	r2, r3
 800529a:	4b15      	ldr	r3, [pc, #84]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 800529c:	430a      	orrs	r2, r1
 800529e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052a0:	4b13      	ldr	r3, [pc, #76]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	4b12      	ldr	r3, [pc, #72]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 80052a6:	2180      	movs	r1, #128	; 0x80
 80052a8:	0449      	lsls	r1, r1, #17
 80052aa:	430a      	orrs	r2, r1
 80052ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ae:	f7fd fc89 	bl	8002bc4 <HAL_GetTick>
 80052b2:	0003      	movs	r3, r0
 80052b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052b6:	e008      	b.n	80052ca <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052b8:	f7fd fc84 	bl	8002bc4 <HAL_GetTick>
 80052bc:	0002      	movs	r2, r0
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e054      	b.n	8005374 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052ca:	4b09      	ldr	r3, [pc, #36]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	2380      	movs	r3, #128	; 0x80
 80052d0:	049b      	lsls	r3, r3, #18
 80052d2:	4013      	ands	r3, r2
 80052d4:	d0f0      	beq.n	80052b8 <HAL_RCC_OscConfig+0x644>
 80052d6:	e04c      	b.n	8005372 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052d8:	4b05      	ldr	r3, [pc, #20]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	4b04      	ldr	r3, [pc, #16]	; (80052f0 <HAL_RCC_OscConfig+0x67c>)
 80052de:	4908      	ldr	r1, [pc, #32]	; (8005300 <HAL_RCC_OscConfig+0x68c>)
 80052e0:	400a      	ands	r2, r1
 80052e2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e4:	f7fd fc6e 	bl	8002bc4 <HAL_GetTick>
 80052e8:	0003      	movs	r3, r0
 80052ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052ec:	e015      	b.n	800531a <HAL_RCC_OscConfig+0x6a6>
 80052ee:	46c0      	nop			; (mov r8, r8)
 80052f0:	40021000 	.word	0x40021000
 80052f4:	00001388 	.word	0x00001388
 80052f8:	efffffff 	.word	0xefffffff
 80052fc:	fffeffff 	.word	0xfffeffff
 8005300:	feffffff 	.word	0xfeffffff
 8005304:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005308:	f7fd fc5c 	bl	8002bc4 <HAL_GetTick>
 800530c:	0002      	movs	r2, r0
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e02c      	b.n	8005374 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800531a:	4b18      	ldr	r3, [pc, #96]	; (800537c <HAL_RCC_OscConfig+0x708>)
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	2380      	movs	r3, #128	; 0x80
 8005320:	049b      	lsls	r3, r3, #18
 8005322:	4013      	ands	r3, r2
 8005324:	d1f0      	bne.n	8005308 <HAL_RCC_OscConfig+0x694>
 8005326:	e024      	b.n	8005372 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	2b01      	cmp	r3, #1
 800532e:	d101      	bne.n	8005334 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e01f      	b.n	8005374 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005334:	4b11      	ldr	r3, [pc, #68]	; (800537c <HAL_RCC_OscConfig+0x708>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800533a:	4b10      	ldr	r3, [pc, #64]	; (800537c <HAL_RCC_OscConfig+0x708>)
 800533c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	23c0      	movs	r3, #192	; 0xc0
 8005344:	025b      	lsls	r3, r3, #9
 8005346:	401a      	ands	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534c:	429a      	cmp	r2, r3
 800534e:	d10e      	bne.n	800536e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	220f      	movs	r2, #15
 8005354:	401a      	ands	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800535a:	429a      	cmp	r2, r3
 800535c:	d107      	bne.n	800536e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	23f0      	movs	r3, #240	; 0xf0
 8005362:	039b      	lsls	r3, r3, #14
 8005364:	401a      	ands	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800536a:	429a      	cmp	r2, r3
 800536c:	d001      	beq.n	8005372 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e000      	b.n	8005374 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	0018      	movs	r0, r3
 8005376:	46bd      	mov	sp, r7
 8005378:	b008      	add	sp, #32
 800537a:	bd80      	pop	{r7, pc}
 800537c:	40021000 	.word	0x40021000

08005380 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e0bf      	b.n	8005514 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005394:	4b61      	ldr	r3, [pc, #388]	; (800551c <HAL_RCC_ClockConfig+0x19c>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2201      	movs	r2, #1
 800539a:	4013      	ands	r3, r2
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d911      	bls.n	80053c6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053a2:	4b5e      	ldr	r3, [pc, #376]	; (800551c <HAL_RCC_ClockConfig+0x19c>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2201      	movs	r2, #1
 80053a8:	4393      	bics	r3, r2
 80053aa:	0019      	movs	r1, r3
 80053ac:	4b5b      	ldr	r3, [pc, #364]	; (800551c <HAL_RCC_ClockConfig+0x19c>)
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	430a      	orrs	r2, r1
 80053b2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053b4:	4b59      	ldr	r3, [pc, #356]	; (800551c <HAL_RCC_ClockConfig+0x19c>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2201      	movs	r2, #1
 80053ba:	4013      	ands	r3, r2
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d001      	beq.n	80053c6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e0a6      	b.n	8005514 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2202      	movs	r2, #2
 80053cc:	4013      	ands	r3, r2
 80053ce:	d015      	beq.n	80053fc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2204      	movs	r2, #4
 80053d6:	4013      	ands	r3, r2
 80053d8:	d006      	beq.n	80053e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80053da:	4b51      	ldr	r3, [pc, #324]	; (8005520 <HAL_RCC_ClockConfig+0x1a0>)
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	4b50      	ldr	r3, [pc, #320]	; (8005520 <HAL_RCC_ClockConfig+0x1a0>)
 80053e0:	21e0      	movs	r1, #224	; 0xe0
 80053e2:	00c9      	lsls	r1, r1, #3
 80053e4:	430a      	orrs	r2, r1
 80053e6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053e8:	4b4d      	ldr	r3, [pc, #308]	; (8005520 <HAL_RCC_ClockConfig+0x1a0>)
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	22f0      	movs	r2, #240	; 0xf0
 80053ee:	4393      	bics	r3, r2
 80053f0:	0019      	movs	r1, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	689a      	ldr	r2, [r3, #8]
 80053f6:	4b4a      	ldr	r3, [pc, #296]	; (8005520 <HAL_RCC_ClockConfig+0x1a0>)
 80053f8:	430a      	orrs	r2, r1
 80053fa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2201      	movs	r2, #1
 8005402:	4013      	ands	r3, r2
 8005404:	d04c      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d107      	bne.n	800541e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800540e:	4b44      	ldr	r3, [pc, #272]	; (8005520 <HAL_RCC_ClockConfig+0x1a0>)
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	2380      	movs	r3, #128	; 0x80
 8005414:	029b      	lsls	r3, r3, #10
 8005416:	4013      	ands	r3, r2
 8005418:	d120      	bne.n	800545c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e07a      	b.n	8005514 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b02      	cmp	r3, #2
 8005424:	d107      	bne.n	8005436 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005426:	4b3e      	ldr	r3, [pc, #248]	; (8005520 <HAL_RCC_ClockConfig+0x1a0>)
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	2380      	movs	r3, #128	; 0x80
 800542c:	049b      	lsls	r3, r3, #18
 800542e:	4013      	ands	r3, r2
 8005430:	d114      	bne.n	800545c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e06e      	b.n	8005514 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2b03      	cmp	r3, #3
 800543c:	d107      	bne.n	800544e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800543e:	4b38      	ldr	r3, [pc, #224]	; (8005520 <HAL_RCC_ClockConfig+0x1a0>)
 8005440:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005442:	2380      	movs	r3, #128	; 0x80
 8005444:	029b      	lsls	r3, r3, #10
 8005446:	4013      	ands	r3, r2
 8005448:	d108      	bne.n	800545c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e062      	b.n	8005514 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800544e:	4b34      	ldr	r3, [pc, #208]	; (8005520 <HAL_RCC_ClockConfig+0x1a0>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2202      	movs	r2, #2
 8005454:	4013      	ands	r3, r2
 8005456:	d101      	bne.n	800545c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e05b      	b.n	8005514 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800545c:	4b30      	ldr	r3, [pc, #192]	; (8005520 <HAL_RCC_ClockConfig+0x1a0>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	2203      	movs	r2, #3
 8005462:	4393      	bics	r3, r2
 8005464:	0019      	movs	r1, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685a      	ldr	r2, [r3, #4]
 800546a:	4b2d      	ldr	r3, [pc, #180]	; (8005520 <HAL_RCC_ClockConfig+0x1a0>)
 800546c:	430a      	orrs	r2, r1
 800546e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005470:	f7fd fba8 	bl	8002bc4 <HAL_GetTick>
 8005474:	0003      	movs	r3, r0
 8005476:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005478:	e009      	b.n	800548e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800547a:	f7fd fba3 	bl	8002bc4 <HAL_GetTick>
 800547e:	0002      	movs	r2, r0
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	4a27      	ldr	r2, [pc, #156]	; (8005524 <HAL_RCC_ClockConfig+0x1a4>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d901      	bls.n	800548e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e042      	b.n	8005514 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800548e:	4b24      	ldr	r3, [pc, #144]	; (8005520 <HAL_RCC_ClockConfig+0x1a0>)
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	220c      	movs	r2, #12
 8005494:	401a      	ands	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	429a      	cmp	r2, r3
 800549e:	d1ec      	bne.n	800547a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054a0:	4b1e      	ldr	r3, [pc, #120]	; (800551c <HAL_RCC_ClockConfig+0x19c>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2201      	movs	r2, #1
 80054a6:	4013      	ands	r3, r2
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d211      	bcs.n	80054d2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ae:	4b1b      	ldr	r3, [pc, #108]	; (800551c <HAL_RCC_ClockConfig+0x19c>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2201      	movs	r2, #1
 80054b4:	4393      	bics	r3, r2
 80054b6:	0019      	movs	r1, r3
 80054b8:	4b18      	ldr	r3, [pc, #96]	; (800551c <HAL_RCC_ClockConfig+0x19c>)
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054c0:	4b16      	ldr	r3, [pc, #88]	; (800551c <HAL_RCC_ClockConfig+0x19c>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2201      	movs	r2, #1
 80054c6:	4013      	ands	r3, r2
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d001      	beq.n	80054d2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e020      	b.n	8005514 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2204      	movs	r2, #4
 80054d8:	4013      	ands	r3, r2
 80054da:	d009      	beq.n	80054f0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80054dc:	4b10      	ldr	r3, [pc, #64]	; (8005520 <HAL_RCC_ClockConfig+0x1a0>)
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	4a11      	ldr	r2, [pc, #68]	; (8005528 <HAL_RCC_ClockConfig+0x1a8>)
 80054e2:	4013      	ands	r3, r2
 80054e4:	0019      	movs	r1, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68da      	ldr	r2, [r3, #12]
 80054ea:	4b0d      	ldr	r3, [pc, #52]	; (8005520 <HAL_RCC_ClockConfig+0x1a0>)
 80054ec:	430a      	orrs	r2, r1
 80054ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80054f0:	f000 f820 	bl	8005534 <HAL_RCC_GetSysClockFreq>
 80054f4:	0001      	movs	r1, r0
 80054f6:	4b0a      	ldr	r3, [pc, #40]	; (8005520 <HAL_RCC_ClockConfig+0x1a0>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	091b      	lsrs	r3, r3, #4
 80054fc:	220f      	movs	r2, #15
 80054fe:	4013      	ands	r3, r2
 8005500:	4a0a      	ldr	r2, [pc, #40]	; (800552c <HAL_RCC_ClockConfig+0x1ac>)
 8005502:	5cd3      	ldrb	r3, [r2, r3]
 8005504:	000a      	movs	r2, r1
 8005506:	40da      	lsrs	r2, r3
 8005508:	4b09      	ldr	r3, [pc, #36]	; (8005530 <HAL_RCC_ClockConfig+0x1b0>)
 800550a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800550c:	2003      	movs	r0, #3
 800550e:	f7fd fb13 	bl	8002b38 <HAL_InitTick>
  
  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	0018      	movs	r0, r3
 8005516:	46bd      	mov	sp, r7
 8005518:	b004      	add	sp, #16
 800551a:	bd80      	pop	{r7, pc}
 800551c:	40022000 	.word	0x40022000
 8005520:	40021000 	.word	0x40021000
 8005524:	00001388 	.word	0x00001388
 8005528:	fffff8ff 	.word	0xfffff8ff
 800552c:	08006f38 	.word	0x08006f38
 8005530:	20000004 	.word	0x20000004

08005534 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800553a:	2300      	movs	r3, #0
 800553c:	60fb      	str	r3, [r7, #12]
 800553e:	2300      	movs	r3, #0
 8005540:	60bb      	str	r3, [r7, #8]
 8005542:	2300      	movs	r3, #0
 8005544:	617b      	str	r3, [r7, #20]
 8005546:	2300      	movs	r3, #0
 8005548:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800554a:	2300      	movs	r3, #0
 800554c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800554e:	4b2d      	ldr	r3, [pc, #180]	; (8005604 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	220c      	movs	r2, #12
 8005558:	4013      	ands	r3, r2
 800555a:	2b0c      	cmp	r3, #12
 800555c:	d046      	beq.n	80055ec <HAL_RCC_GetSysClockFreq+0xb8>
 800555e:	d848      	bhi.n	80055f2 <HAL_RCC_GetSysClockFreq+0xbe>
 8005560:	2b04      	cmp	r3, #4
 8005562:	d002      	beq.n	800556a <HAL_RCC_GetSysClockFreq+0x36>
 8005564:	2b08      	cmp	r3, #8
 8005566:	d003      	beq.n	8005570 <HAL_RCC_GetSysClockFreq+0x3c>
 8005568:	e043      	b.n	80055f2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800556a:	4b27      	ldr	r3, [pc, #156]	; (8005608 <HAL_RCC_GetSysClockFreq+0xd4>)
 800556c:	613b      	str	r3, [r7, #16]
      break;
 800556e:	e043      	b.n	80055f8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	0c9b      	lsrs	r3, r3, #18
 8005574:	220f      	movs	r2, #15
 8005576:	4013      	ands	r3, r2
 8005578:	4a24      	ldr	r2, [pc, #144]	; (800560c <HAL_RCC_GetSysClockFreq+0xd8>)
 800557a:	5cd3      	ldrb	r3, [r2, r3]
 800557c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800557e:	4b21      	ldr	r3, [pc, #132]	; (8005604 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005582:	220f      	movs	r2, #15
 8005584:	4013      	ands	r3, r2
 8005586:	4a22      	ldr	r2, [pc, #136]	; (8005610 <HAL_RCC_GetSysClockFreq+0xdc>)
 8005588:	5cd3      	ldrb	r3, [r2, r3]
 800558a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	23c0      	movs	r3, #192	; 0xc0
 8005590:	025b      	lsls	r3, r3, #9
 8005592:	401a      	ands	r2, r3
 8005594:	2380      	movs	r3, #128	; 0x80
 8005596:	025b      	lsls	r3, r3, #9
 8005598:	429a      	cmp	r2, r3
 800559a:	d109      	bne.n	80055b0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800559c:	68b9      	ldr	r1, [r7, #8]
 800559e:	481a      	ldr	r0, [pc, #104]	; (8005608 <HAL_RCC_GetSysClockFreq+0xd4>)
 80055a0:	f7fa fdbc 	bl	800011c <__udivsi3>
 80055a4:	0003      	movs	r3, r0
 80055a6:	001a      	movs	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4353      	muls	r3, r2
 80055ac:	617b      	str	r3, [r7, #20]
 80055ae:	e01a      	b.n	80055e6 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	23c0      	movs	r3, #192	; 0xc0
 80055b4:	025b      	lsls	r3, r3, #9
 80055b6:	401a      	ands	r2, r3
 80055b8:	23c0      	movs	r3, #192	; 0xc0
 80055ba:	025b      	lsls	r3, r3, #9
 80055bc:	429a      	cmp	r2, r3
 80055be:	d109      	bne.n	80055d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80055c0:	68b9      	ldr	r1, [r7, #8]
 80055c2:	4814      	ldr	r0, [pc, #80]	; (8005614 <HAL_RCC_GetSysClockFreq+0xe0>)
 80055c4:	f7fa fdaa 	bl	800011c <__udivsi3>
 80055c8:	0003      	movs	r3, r0
 80055ca:	001a      	movs	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4353      	muls	r3, r2
 80055d0:	617b      	str	r3, [r7, #20]
 80055d2:	e008      	b.n	80055e6 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80055d4:	68b9      	ldr	r1, [r7, #8]
 80055d6:	4810      	ldr	r0, [pc, #64]	; (8005618 <HAL_RCC_GetSysClockFreq+0xe4>)
 80055d8:	f7fa fda0 	bl	800011c <__udivsi3>
 80055dc:	0003      	movs	r3, r0
 80055de:	001a      	movs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4353      	muls	r3, r2
 80055e4:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	613b      	str	r3, [r7, #16]
      break;
 80055ea:	e005      	b.n	80055f8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80055ec:	4b09      	ldr	r3, [pc, #36]	; (8005614 <HAL_RCC_GetSysClockFreq+0xe0>)
 80055ee:	613b      	str	r3, [r7, #16]
      break;
 80055f0:	e002      	b.n	80055f8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80055f2:	4b09      	ldr	r3, [pc, #36]	; (8005618 <HAL_RCC_GetSysClockFreq+0xe4>)
 80055f4:	613b      	str	r3, [r7, #16]
      break;
 80055f6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80055f8:	693b      	ldr	r3, [r7, #16]
}
 80055fa:	0018      	movs	r0, r3
 80055fc:	46bd      	mov	sp, r7
 80055fe:	b006      	add	sp, #24
 8005600:	bd80      	pop	{r7, pc}
 8005602:	46c0      	nop			; (mov r8, r8)
 8005604:	40021000 	.word	0x40021000
 8005608:	00f42400 	.word	0x00f42400
 800560c:	08007544 	.word	0x08007544
 8005610:	08007554 	.word	0x08007554
 8005614:	02dc6c00 	.word	0x02dc6c00
 8005618:	007a1200 	.word	0x007a1200

0800561c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e0a8      	b.n	8005780 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005632:	2b00      	cmp	r3, #0
 8005634:	d109      	bne.n	800564a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	2382      	movs	r3, #130	; 0x82
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	429a      	cmp	r2, r3
 8005640:	d009      	beq.n	8005656 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	61da      	str	r2, [r3, #28]
 8005648:	e005      	b.n	8005656 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	225d      	movs	r2, #93	; 0x5d
 8005660:	5c9b      	ldrb	r3, [r3, r2]
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	d107      	bne.n	8005678 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	225c      	movs	r2, #92	; 0x5c
 800566c:	2100      	movs	r1, #0
 800566e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	0018      	movs	r0, r3
 8005674:	f7fc fdfc 	bl	8002270 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	225d      	movs	r2, #93	; 0x5d
 800567c:	2102      	movs	r1, #2
 800567e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2140      	movs	r1, #64	; 0x40
 800568c:	438a      	bics	r2, r1
 800568e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68da      	ldr	r2, [r3, #12]
 8005694:	23e0      	movs	r3, #224	; 0xe0
 8005696:	00db      	lsls	r3, r3, #3
 8005698:	429a      	cmp	r2, r3
 800569a:	d902      	bls.n	80056a2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800569c:	2300      	movs	r3, #0
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	e002      	b.n	80056a8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80056a2:	2380      	movs	r3, #128	; 0x80
 80056a4:	015b      	lsls	r3, r3, #5
 80056a6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68da      	ldr	r2, [r3, #12]
 80056ac:	23f0      	movs	r3, #240	; 0xf0
 80056ae:	011b      	lsls	r3, r3, #4
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d008      	beq.n	80056c6 <HAL_SPI_Init+0xaa>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68da      	ldr	r2, [r3, #12]
 80056b8:	23e0      	movs	r3, #224	; 0xe0
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	429a      	cmp	r2, r3
 80056be:	d002      	beq.n	80056c6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	2382      	movs	r3, #130	; 0x82
 80056cc:	005b      	lsls	r3, r3, #1
 80056ce:	401a      	ands	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6899      	ldr	r1, [r3, #8]
 80056d4:	2384      	movs	r3, #132	; 0x84
 80056d6:	021b      	lsls	r3, r3, #8
 80056d8:	400b      	ands	r3, r1
 80056da:	431a      	orrs	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	2102      	movs	r1, #2
 80056e2:	400b      	ands	r3, r1
 80056e4:	431a      	orrs	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	2101      	movs	r1, #1
 80056ec:	400b      	ands	r3, r1
 80056ee:	431a      	orrs	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6999      	ldr	r1, [r3, #24]
 80056f4:	2380      	movs	r3, #128	; 0x80
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	400b      	ands	r3, r1
 80056fa:	431a      	orrs	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	2138      	movs	r1, #56	; 0x38
 8005702:	400b      	ands	r3, r1
 8005704:	431a      	orrs	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	2180      	movs	r1, #128	; 0x80
 800570c:	400b      	ands	r3, r1
 800570e:	431a      	orrs	r2, r3
 8005710:	0011      	movs	r1, r2
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005716:	2380      	movs	r3, #128	; 0x80
 8005718:	019b      	lsls	r3, r3, #6
 800571a:	401a      	ands	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	0c1b      	lsrs	r3, r3, #16
 800572a:	2204      	movs	r2, #4
 800572c:	401a      	ands	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	2110      	movs	r1, #16
 8005734:	400b      	ands	r3, r1
 8005736:	431a      	orrs	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800573c:	2108      	movs	r1, #8
 800573e:	400b      	ands	r3, r1
 8005740:	431a      	orrs	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68d9      	ldr	r1, [r3, #12]
 8005746:	23f0      	movs	r3, #240	; 0xf0
 8005748:	011b      	lsls	r3, r3, #4
 800574a:	400b      	ands	r3, r1
 800574c:	431a      	orrs	r2, r3
 800574e:	0011      	movs	r1, r2
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	2380      	movs	r3, #128	; 0x80
 8005754:	015b      	lsls	r3, r3, #5
 8005756:	401a      	ands	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	430a      	orrs	r2, r1
 800575e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	69da      	ldr	r2, [r3, #28]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4907      	ldr	r1, [pc, #28]	; (8005788 <HAL_SPI_Init+0x16c>)
 800576c:	400a      	ands	r2, r1
 800576e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	225d      	movs	r2, #93	; 0x5d
 800577a:	2101      	movs	r1, #1
 800577c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	0018      	movs	r0, r3
 8005782:	46bd      	mov	sp, r7
 8005784:	b004      	add	sp, #16
 8005786:	bd80      	pop	{r7, pc}
 8005788:	fffff7ff 	.word	0xfffff7ff

0800578c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b088      	sub	sp, #32
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	603b      	str	r3, [r7, #0]
 8005798:	1dbb      	adds	r3, r7, #6
 800579a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800579c:	231f      	movs	r3, #31
 800579e:	18fb      	adds	r3, r7, r3
 80057a0:	2200      	movs	r2, #0
 80057a2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	225c      	movs	r2, #92	; 0x5c
 80057a8:	5c9b      	ldrb	r3, [r3, r2]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d101      	bne.n	80057b2 <HAL_SPI_Transmit+0x26>
 80057ae:	2302      	movs	r3, #2
 80057b0:	e147      	b.n	8005a42 <HAL_SPI_Transmit+0x2b6>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	225c      	movs	r2, #92	; 0x5c
 80057b6:	2101      	movs	r1, #1
 80057b8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057ba:	f7fd fa03 	bl	8002bc4 <HAL_GetTick>
 80057be:	0003      	movs	r3, r0
 80057c0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80057c2:	2316      	movs	r3, #22
 80057c4:	18fb      	adds	r3, r7, r3
 80057c6:	1dba      	adds	r2, r7, #6
 80057c8:	8812      	ldrh	r2, [r2, #0]
 80057ca:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	225d      	movs	r2, #93	; 0x5d
 80057d0:	5c9b      	ldrb	r3, [r3, r2]
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d004      	beq.n	80057e2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80057d8:	231f      	movs	r3, #31
 80057da:	18fb      	adds	r3, r7, r3
 80057dc:	2202      	movs	r2, #2
 80057de:	701a      	strb	r2, [r3, #0]
    goto error;
 80057e0:	e128      	b.n	8005a34 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d003      	beq.n	80057f0 <HAL_SPI_Transmit+0x64>
 80057e8:	1dbb      	adds	r3, r7, #6
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d104      	bne.n	80057fa <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80057f0:	231f      	movs	r3, #31
 80057f2:	18fb      	adds	r3, r7, r3
 80057f4:	2201      	movs	r2, #1
 80057f6:	701a      	strb	r2, [r3, #0]
    goto error;
 80057f8:	e11c      	b.n	8005a34 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	225d      	movs	r2, #93	; 0x5d
 80057fe:	2103      	movs	r1, #3
 8005800:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	1dba      	adds	r2, r7, #6
 8005812:	8812      	ldrh	r2, [r2, #0]
 8005814:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	1dba      	adds	r2, r7, #6
 800581a:	8812      	ldrh	r2, [r2, #0]
 800581c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2244      	movs	r2, #68	; 0x44
 8005828:	2100      	movs	r1, #0
 800582a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2246      	movs	r2, #70	; 0x46
 8005830:	2100      	movs	r1, #0
 8005832:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	2380      	movs	r3, #128	; 0x80
 8005846:	021b      	lsls	r3, r3, #8
 8005848:	429a      	cmp	r2, r3
 800584a:	d110      	bne.n	800586e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2140      	movs	r1, #64	; 0x40
 8005858:	438a      	bics	r2, r1
 800585a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2180      	movs	r1, #128	; 0x80
 8005868:	01c9      	lsls	r1, r1, #7
 800586a:	430a      	orrs	r2, r1
 800586c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2240      	movs	r2, #64	; 0x40
 8005876:	4013      	ands	r3, r2
 8005878:	2b40      	cmp	r3, #64	; 0x40
 800587a:	d007      	beq.n	800588c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2140      	movs	r1, #64	; 0x40
 8005888:	430a      	orrs	r2, r1
 800588a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	68da      	ldr	r2, [r3, #12]
 8005890:	23e0      	movs	r3, #224	; 0xe0
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	429a      	cmp	r2, r3
 8005896:	d952      	bls.n	800593e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d004      	beq.n	80058aa <HAL_SPI_Transmit+0x11e>
 80058a0:	2316      	movs	r3, #22
 80058a2:	18fb      	adds	r3, r7, r3
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d143      	bne.n	8005932 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ae:	881a      	ldrh	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ba:	1c9a      	adds	r2, r3, #2
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	3b01      	subs	r3, #1
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80058ce:	e030      	b.n	8005932 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	2202      	movs	r2, #2
 80058d8:	4013      	ands	r3, r2
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d112      	bne.n	8005904 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e2:	881a      	ldrh	r2, [r3, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ee:	1c9a      	adds	r2, r3, #2
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	3b01      	subs	r3, #1
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005902:	e016      	b.n	8005932 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005904:	f7fd f95e 	bl	8002bc4 <HAL_GetTick>
 8005908:	0002      	movs	r2, r0
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	429a      	cmp	r2, r3
 8005912:	d802      	bhi.n	800591a <HAL_SPI_Transmit+0x18e>
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	3301      	adds	r3, #1
 8005918:	d102      	bne.n	8005920 <HAL_SPI_Transmit+0x194>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d108      	bne.n	8005932 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8005920:	231f      	movs	r3, #31
 8005922:	18fb      	adds	r3, r7, r3
 8005924:	2203      	movs	r2, #3
 8005926:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	225d      	movs	r2, #93	; 0x5d
 800592c:	2101      	movs	r1, #1
 800592e:	5499      	strb	r1, [r3, r2]
          goto error;
 8005930:	e080      	b.n	8005a34 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005936:	b29b      	uxth	r3, r3
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1c9      	bne.n	80058d0 <HAL_SPI_Transmit+0x144>
 800593c:	e053      	b.n	80059e6 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d004      	beq.n	8005950 <HAL_SPI_Transmit+0x1c4>
 8005946:	2316      	movs	r3, #22
 8005948:	18fb      	adds	r3, r7, r3
 800594a:	881b      	ldrh	r3, [r3, #0]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d145      	bne.n	80059dc <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	330c      	adds	r3, #12
 800595a:	7812      	ldrb	r2, [r2, #0]
 800595c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800596c:	b29b      	uxth	r3, r3
 800596e:	3b01      	subs	r3, #1
 8005970:	b29a      	uxth	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005976:	e031      	b.n	80059dc <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	2202      	movs	r2, #2
 8005980:	4013      	ands	r3, r2
 8005982:	2b02      	cmp	r3, #2
 8005984:	d113      	bne.n	80059ae <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	330c      	adds	r3, #12
 8005990:	7812      	ldrb	r2, [r2, #0]
 8005992:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005998:	1c5a      	adds	r2, r3, #1
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	3b01      	subs	r3, #1
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059ac:	e016      	b.n	80059dc <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059ae:	f7fd f909 	bl	8002bc4 <HAL_GetTick>
 80059b2:	0002      	movs	r2, r0
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d802      	bhi.n	80059c4 <HAL_SPI_Transmit+0x238>
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	3301      	adds	r3, #1
 80059c2:	d102      	bne.n	80059ca <HAL_SPI_Transmit+0x23e>
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d108      	bne.n	80059dc <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80059ca:	231f      	movs	r3, #31
 80059cc:	18fb      	adds	r3, r7, r3
 80059ce:	2203      	movs	r2, #3
 80059d0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	225d      	movs	r2, #93	; 0x5d
 80059d6:	2101      	movs	r1, #1
 80059d8:	5499      	strb	r1, [r3, r2]
          goto error;
 80059da:	e02b      	b.n	8005a34 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1c8      	bne.n	8005978 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	6839      	ldr	r1, [r7, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	0018      	movs	r0, r3
 80059ee:	f000 fa65 	bl	8005ebc <SPI_EndRxTxTransaction>
 80059f2:	1e03      	subs	r3, r0, #0
 80059f4:	d002      	beq.n	80059fc <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2220      	movs	r2, #32
 80059fa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10a      	bne.n	8005a1a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a04:	2300      	movs	r3, #0
 8005a06:	613b      	str	r3, [r7, #16]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	613b      	str	r3, [r7, #16]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	613b      	str	r3, [r7, #16]
 8005a18:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d004      	beq.n	8005a2c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8005a22:	231f      	movs	r3, #31
 8005a24:	18fb      	adds	r3, r7, r3
 8005a26:	2201      	movs	r2, #1
 8005a28:	701a      	strb	r2, [r3, #0]
 8005a2a:	e003      	b.n	8005a34 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	225d      	movs	r2, #93	; 0x5d
 8005a30:	2101      	movs	r1, #1
 8005a32:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	225c      	movs	r2, #92	; 0x5c
 8005a38:	2100      	movs	r1, #0
 8005a3a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005a3c:	231f      	movs	r3, #31
 8005a3e:	18fb      	adds	r3, r7, r3
 8005a40:	781b      	ldrb	r3, [r3, #0]
}
 8005a42:	0018      	movs	r0, r3
 8005a44:	46bd      	mov	sp, r7
 8005a46:	b008      	add	sp, #32
 8005a48:	bd80      	pop	{r7, pc}
	...

08005a4c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b088      	sub	sp, #32
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	2240      	movs	r2, #64	; 0x40
 8005a68:	4013      	ands	r3, r2
 8005a6a:	d10d      	bne.n	8005a88 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005a72:	d009      	beq.n	8005a88 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	2240      	movs	r2, #64	; 0x40
 8005a78:	4013      	ands	r3, r2
 8005a7a:	d005      	beq.n	8005a88 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	0010      	movs	r0, r2
 8005a84:	4798      	blx	r3
    return;
 8005a86:	e0c5      	b.n	8005c14 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	d009      	beq.n	8005aa4 <HAL_SPI_IRQHandler+0x58>
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	2280      	movs	r2, #128	; 0x80
 8005a94:	4013      	ands	r3, r2
 8005a96:	d005      	beq.n	8005aa4 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	0010      	movs	r0, r2
 8005aa0:	4798      	blx	r3
    return;
 8005aa2:	e0b7      	b.n	8005c14 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	d109      	bne.n	8005ac0 <HAL_SPI_IRQHandler+0x74>
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	2240      	movs	r2, #64	; 0x40
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	d105      	bne.n	8005ac0 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	2380      	movs	r3, #128	; 0x80
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	4013      	ands	r3, r2
 8005abc:	d100      	bne.n	8005ac0 <HAL_SPI_IRQHandler+0x74>
 8005abe:	e0a9      	b.n	8005c14 <HAL_SPI_IRQHandler+0x1c8>
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	d100      	bne.n	8005aca <HAL_SPI_IRQHandler+0x7e>
 8005ac8:	e0a4      	b.n	8005c14 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	2240      	movs	r2, #64	; 0x40
 8005ace:	4013      	ands	r3, r2
 8005ad0:	d023      	beq.n	8005b1a <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	225d      	movs	r2, #93	; 0x5d
 8005ad6:	5c9b      	ldrb	r3, [r3, r2]
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	d011      	beq.n	8005b02 <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ae2:	2204      	movs	r2, #4
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005aea:	2300      	movs	r3, #0
 8005aec:	617b      	str	r3, [r7, #20]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	617b      	str	r3, [r7, #20]
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	e00b      	b.n	8005b1a <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b02:	2300      	movs	r3, #0
 8005b04:	613b      	str	r3, [r7, #16]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	613b      	str	r3, [r7, #16]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	613b      	str	r3, [r7, #16]
 8005b16:	693b      	ldr	r3, [r7, #16]
        return;
 8005b18:	e07c      	b.n	8005c14 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	4013      	ands	r3, r2
 8005b20:	d014      	beq.n	8005b4c <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b26:	2201      	movs	r2, #1
 8005b28:	431a      	orrs	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60fb      	str	r3, [r7, #12]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	60fb      	str	r3, [r7, #12]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2140      	movs	r1, #64	; 0x40
 8005b46:	438a      	bics	r2, r1
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	2380      	movs	r3, #128	; 0x80
 8005b50:	005b      	lsls	r3, r3, #1
 8005b52:	4013      	ands	r3, r2
 8005b54:	d00c      	beq.n	8005b70 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b5a:	2208      	movs	r2, #8
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005b62:	2300      	movs	r3, #0
 8005b64:	60bb      	str	r3, [r7, #8]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	60bb      	str	r3, [r7, #8]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d04c      	beq.n	8005c12 <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	21e0      	movs	r1, #224	; 0xe0
 8005b84:	438a      	bics	r2, r1
 8005b86:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	225d      	movs	r2, #93	; 0x5d
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	2202      	movs	r2, #2
 8005b94:	4013      	ands	r3, r2
 8005b96:	d103      	bne.n	8005ba0 <HAL_SPI_IRQHandler+0x154>
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	d032      	beq.n	8005c06 <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2103      	movs	r1, #3
 8005bac:	438a      	bics	r2, r1
 8005bae:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d010      	beq.n	8005bda <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bbc:	4a17      	ldr	r2, [pc, #92]	; (8005c1c <HAL_SPI_IRQHandler+0x1d0>)
 8005bbe:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc4:	0018      	movs	r0, r3
 8005bc6:	f7fe fd75 	bl	80046b4 <HAL_DMA_Abort_IT>
 8005bca:	1e03      	subs	r3, r0, #0
 8005bcc:	d005      	beq.n	8005bda <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bd2:	2240      	movs	r2, #64	; 0x40
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d016      	beq.n	8005c10 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be6:	4a0d      	ldr	r2, [pc, #52]	; (8005c1c <HAL_SPI_IRQHandler+0x1d0>)
 8005be8:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bee:	0018      	movs	r0, r3
 8005bf0:	f7fe fd60 	bl	80046b4 <HAL_DMA_Abort_IT>
 8005bf4:	1e03      	subs	r3, r0, #0
 8005bf6:	d00b      	beq.n	8005c10 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bfc:	2240      	movs	r2, #64	; 0x40
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005c04:	e004      	b.n	8005c10 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	0018      	movs	r0, r3
 8005c0a:	f000 f809 	bl	8005c20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005c0e:	e000      	b.n	8005c12 <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8005c10:	46c0      	nop			; (mov r8, r8)
    return;
 8005c12:	46c0      	nop			; (mov r8, r8)
  }
}
 8005c14:	46bd      	mov	sp, r7
 8005c16:	b008      	add	sp, #32
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	46c0      	nop			; (mov r8, r8)
 8005c1c:	08005c31 	.word	0x08005c31

08005c20 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005c28:	46c0      	nop			; (mov r8, r8)
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	b002      	add	sp, #8
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2246      	movs	r2, #70	; 0x46
 8005c42:	2100      	movs	r1, #0
 8005c44:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	0018      	movs	r0, r3
 8005c50:	f7ff ffe6 	bl	8005c20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c54:	46c0      	nop			; (mov r8, r8)
 8005c56:	46bd      	mov	sp, r7
 8005c58:	b004      	add	sp, #16
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	603b      	str	r3, [r7, #0]
 8005c68:	1dfb      	adds	r3, r7, #7
 8005c6a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c6c:	f7fc ffaa 	bl	8002bc4 <HAL_GetTick>
 8005c70:	0002      	movs	r2, r0
 8005c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c74:	1a9b      	subs	r3, r3, r2
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	18d3      	adds	r3, r2, r3
 8005c7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c7c:	f7fc ffa2 	bl	8002bc4 <HAL_GetTick>
 8005c80:	0003      	movs	r3, r0
 8005c82:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c84:	4b3a      	ldr	r3, [pc, #232]	; (8005d70 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	015b      	lsls	r3, r3, #5
 8005c8a:	0d1b      	lsrs	r3, r3, #20
 8005c8c:	69fa      	ldr	r2, [r7, #28]
 8005c8e:	4353      	muls	r3, r2
 8005c90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c92:	e058      	b.n	8005d46 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	3301      	adds	r3, #1
 8005c98:	d055      	beq.n	8005d46 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c9a:	f7fc ff93 	bl	8002bc4 <HAL_GetTick>
 8005c9e:	0002      	movs	r2, r0
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	69fa      	ldr	r2, [r7, #28]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d902      	bls.n	8005cb0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d142      	bne.n	8005d36 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	21e0      	movs	r1, #224	; 0xe0
 8005cbc:	438a      	bics	r2, r1
 8005cbe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	2382      	movs	r3, #130	; 0x82
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d113      	bne.n	8005cf4 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	2380      	movs	r3, #128	; 0x80
 8005cd2:	021b      	lsls	r3, r3, #8
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d005      	beq.n	8005ce4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	689a      	ldr	r2, [r3, #8]
 8005cdc:	2380      	movs	r3, #128	; 0x80
 8005cde:	00db      	lsls	r3, r3, #3
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d107      	bne.n	8005cf4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2140      	movs	r1, #64	; 0x40
 8005cf0:	438a      	bics	r2, r1
 8005cf2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cf8:	2380      	movs	r3, #128	; 0x80
 8005cfa:	019b      	lsls	r3, r3, #6
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d110      	bne.n	8005d22 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	491a      	ldr	r1, [pc, #104]	; (8005d74 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005d0c:	400a      	ands	r2, r1
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2180      	movs	r1, #128	; 0x80
 8005d1c:	0189      	lsls	r1, r1, #6
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	225d      	movs	r2, #93	; 0x5d
 8005d26:	2101      	movs	r1, #1
 8005d28:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	225c      	movs	r2, #92	; 0x5c
 8005d2e:	2100      	movs	r1, #0
 8005d30:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e017      	b.n	8005d66 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d101      	bne.n	8005d40 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	3b01      	subs	r3, #1
 8005d44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	4013      	ands	r3, r2
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	425a      	negs	r2, r3
 8005d56:	4153      	adcs	r3, r2
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	001a      	movs	r2, r3
 8005d5c:	1dfb      	adds	r3, r7, #7
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d197      	bne.n	8005c94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	0018      	movs	r0, r3
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	b008      	add	sp, #32
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	46c0      	nop			; (mov r8, r8)
 8005d70:	20000004 	.word	0x20000004
 8005d74:	ffffdfff 	.word	0xffffdfff

08005d78 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08a      	sub	sp, #40	; 0x28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
 8005d84:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005d86:	2317      	movs	r3, #23
 8005d88:	18fb      	adds	r3, r7, r3
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005d8e:	f7fc ff19 	bl	8002bc4 <HAL_GetTick>
 8005d92:	0002      	movs	r2, r0
 8005d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d96:	1a9b      	subs	r3, r3, r2
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	18d3      	adds	r3, r2, r3
 8005d9c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005d9e:	f7fc ff11 	bl	8002bc4 <HAL_GetTick>
 8005da2:	0003      	movs	r3, r0
 8005da4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	330c      	adds	r3, #12
 8005dac:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005dae:	4b41      	ldr	r3, [pc, #260]	; (8005eb4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	0013      	movs	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	189b      	adds	r3, r3, r2
 8005db8:	00da      	lsls	r2, r3, #3
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	0d1b      	lsrs	r3, r3, #20
 8005dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dc0:	4353      	muls	r3, r2
 8005dc2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005dc4:	e068      	b.n	8005e98 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	23c0      	movs	r3, #192	; 0xc0
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d10a      	bne.n	8005de6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d107      	bne.n	8005de6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	2117      	movs	r1, #23
 8005dde:	187b      	adds	r3, r7, r1
 8005de0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005de2:	187b      	adds	r3, r7, r1
 8005de4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	3301      	adds	r3, #1
 8005dea:	d055      	beq.n	8005e98 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005dec:	f7fc feea 	bl	8002bc4 <HAL_GetTick>
 8005df0:	0002      	movs	r2, r0
 8005df2:	6a3b      	ldr	r3, [r7, #32]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d902      	bls.n	8005e02 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d142      	bne.n	8005e88 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	21e0      	movs	r1, #224	; 0xe0
 8005e0e:	438a      	bics	r2, r1
 8005e10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	2382      	movs	r3, #130	; 0x82
 8005e18:	005b      	lsls	r3, r3, #1
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d113      	bne.n	8005e46 <SPI_WaitFifoStateUntilTimeout+0xce>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	689a      	ldr	r2, [r3, #8]
 8005e22:	2380      	movs	r3, #128	; 0x80
 8005e24:	021b      	lsls	r3, r3, #8
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d005      	beq.n	8005e36 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	689a      	ldr	r2, [r3, #8]
 8005e2e:	2380      	movs	r3, #128	; 0x80
 8005e30:	00db      	lsls	r3, r3, #3
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d107      	bne.n	8005e46 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2140      	movs	r1, #64	; 0x40
 8005e42:	438a      	bics	r2, r1
 8005e44:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e4a:	2380      	movs	r3, #128	; 0x80
 8005e4c:	019b      	lsls	r3, r3, #6
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d110      	bne.n	8005e74 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4916      	ldr	r1, [pc, #88]	; (8005eb8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005e5e:	400a      	ands	r2, r1
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2180      	movs	r1, #128	; 0x80
 8005e6e:	0189      	lsls	r1, r1, #6
 8005e70:	430a      	orrs	r2, r1
 8005e72:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	225d      	movs	r2, #93	; 0x5d
 8005e78:	2101      	movs	r1, #1
 8005e7a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	225c      	movs	r2, #92	; 0x5c
 8005e80:	2100      	movs	r1, #0
 8005e82:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e010      	b.n	8005eaa <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	3b01      	subs	r3, #1
 8005e96:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d18e      	bne.n	8005dc6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	0018      	movs	r0, r3
 8005eac:	46bd      	mov	sp, r7
 8005eae:	b00a      	add	sp, #40	; 0x28
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	46c0      	nop			; (mov r8, r8)
 8005eb4:	20000004 	.word	0x20000004
 8005eb8:	ffffdfff 	.word	0xffffdfff

08005ebc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af02      	add	r7, sp, #8
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	23c0      	movs	r3, #192	; 0xc0
 8005ecc:	0159      	lsls	r1, r3, #5
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	0013      	movs	r3, r2
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f7ff ff4e 	bl	8005d78 <SPI_WaitFifoStateUntilTimeout>
 8005edc:	1e03      	subs	r3, r0, #0
 8005ede:	d007      	beq.n	8005ef0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e027      	b.n	8005f40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	0013      	movs	r3, r2
 8005efa:	2200      	movs	r2, #0
 8005efc:	2180      	movs	r1, #128	; 0x80
 8005efe:	f7ff fead 	bl	8005c5c <SPI_WaitFlagStateUntilTimeout>
 8005f02:	1e03      	subs	r3, r0, #0
 8005f04:	d007      	beq.n	8005f16 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	431a      	orrs	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e014      	b.n	8005f40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	23c0      	movs	r3, #192	; 0xc0
 8005f1a:	00d9      	lsls	r1, r3, #3
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	0013      	movs	r3, r2
 8005f24:	2200      	movs	r2, #0
 8005f26:	f7ff ff27 	bl	8005d78 <SPI_WaitFifoStateUntilTimeout>
 8005f2a:	1e03      	subs	r3, r0, #0
 8005f2c:	d007      	beq.n	8005f3e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f32:	2220      	movs	r2, #32
 8005f34:	431a      	orrs	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e000      	b.n	8005f40 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	0018      	movs	r0, r3
 8005f42:	46bd      	mov	sp, r7
 8005f44:	b004      	add	sp, #16
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e042      	b.n	8005fe0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	223d      	movs	r2, #61	; 0x3d
 8005f5e:	5c9b      	ldrb	r3, [r3, r2]
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d107      	bne.n	8005f76 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	223c      	movs	r2, #60	; 0x3c
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	0018      	movs	r0, r3
 8005f72:	f7fc fa3d 	bl	80023f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	223d      	movs	r2, #61	; 0x3d
 8005f7a:	2102      	movs	r1, #2
 8005f7c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	3304      	adds	r3, #4
 8005f86:	0019      	movs	r1, r3
 8005f88:	0010      	movs	r0, r2
 8005f8a:	f000 f94b 	bl	8006224 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2246      	movs	r2, #70	; 0x46
 8005f92:	2101      	movs	r1, #1
 8005f94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	223e      	movs	r2, #62	; 0x3e
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	5499      	strb	r1, [r3, r2]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	223f      	movs	r2, #63	; 0x3f
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	5499      	strb	r1, [r3, r2]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2240      	movs	r2, #64	; 0x40
 8005faa:	2101      	movs	r1, #1
 8005fac:	5499      	strb	r1, [r3, r2]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2241      	movs	r2, #65	; 0x41
 8005fb2:	2101      	movs	r1, #1
 8005fb4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2242      	movs	r2, #66	; 0x42
 8005fba:	2101      	movs	r1, #1
 8005fbc:	5499      	strb	r1, [r3, r2]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2243      	movs	r2, #67	; 0x43
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	5499      	strb	r1, [r3, r2]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2244      	movs	r2, #68	; 0x44
 8005fca:	2101      	movs	r1, #1
 8005fcc:	5499      	strb	r1, [r3, r2]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2245      	movs	r2, #69	; 0x45
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	223d      	movs	r2, #61	; 0x3d
 8005fda:	2101      	movs	r1, #1
 8005fdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	0018      	movs	r0, r3
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	b002      	add	sp, #8
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	223d      	movs	r2, #61	; 0x3d
 8005ff4:	5c9b      	ldrb	r3, [r3, r2]
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d001      	beq.n	8006000 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e033      	b.n	8006068 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	223d      	movs	r2, #61	; 0x3d
 8006004:	2102      	movs	r1, #2
 8006006:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a18      	ldr	r2, [pc, #96]	; (8006070 <HAL_TIM_Base_Start+0x88>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d00f      	beq.n	8006032 <HAL_TIM_Base_Start+0x4a>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	2380      	movs	r3, #128	; 0x80
 8006018:	05db      	lsls	r3, r3, #23
 800601a:	429a      	cmp	r2, r3
 800601c:	d009      	beq.n	8006032 <HAL_TIM_Base_Start+0x4a>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a14      	ldr	r2, [pc, #80]	; (8006074 <HAL_TIM_Base_Start+0x8c>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d004      	beq.n	8006032 <HAL_TIM_Base_Start+0x4a>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a12      	ldr	r2, [pc, #72]	; (8006078 <HAL_TIM_Base_Start+0x90>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d111      	bne.n	8006056 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	2207      	movs	r2, #7
 800603a:	4013      	ands	r3, r2
 800603c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2b06      	cmp	r3, #6
 8006042:	d010      	beq.n	8006066 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2101      	movs	r1, #1
 8006050:	430a      	orrs	r2, r1
 8006052:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006054:	e007      	b.n	8006066 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2101      	movs	r1, #1
 8006062:	430a      	orrs	r2, r1
 8006064:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	0018      	movs	r0, r3
 800606a:	46bd      	mov	sp, r7
 800606c:	b004      	add	sp, #16
 800606e:	bd80      	pop	{r7, pc}
 8006070:	40012c00 	.word	0x40012c00
 8006074:	40000400 	.word	0x40000400
 8006078:	40014000 	.word	0x40014000

0800607c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006086:	230f      	movs	r3, #15
 8006088:	18fb      	adds	r3, r7, r3
 800608a:	2200      	movs	r2, #0
 800608c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	223c      	movs	r2, #60	; 0x3c
 8006092:	5c9b      	ldrb	r3, [r3, r2]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d101      	bne.n	800609c <HAL_TIM_ConfigClockSource+0x20>
 8006098:	2302      	movs	r3, #2
 800609a:	e0bc      	b.n	8006216 <HAL_TIM_ConfigClockSource+0x19a>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	223c      	movs	r2, #60	; 0x3c
 80060a0:	2101      	movs	r1, #1
 80060a2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	223d      	movs	r2, #61	; 0x3d
 80060a8:	2102      	movs	r1, #2
 80060aa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	2277      	movs	r2, #119	; 0x77
 80060b8:	4393      	bics	r3, r2
 80060ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	4a58      	ldr	r2, [pc, #352]	; (8006220 <HAL_TIM_ConfigClockSource+0x1a4>)
 80060c0:	4013      	ands	r3, r2
 80060c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2280      	movs	r2, #128	; 0x80
 80060d2:	0192      	lsls	r2, r2, #6
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d040      	beq.n	800615a <HAL_TIM_ConfigClockSource+0xde>
 80060d8:	2280      	movs	r2, #128	; 0x80
 80060da:	0192      	lsls	r2, r2, #6
 80060dc:	4293      	cmp	r3, r2
 80060de:	d900      	bls.n	80060e2 <HAL_TIM_ConfigClockSource+0x66>
 80060e0:	e088      	b.n	80061f4 <HAL_TIM_ConfigClockSource+0x178>
 80060e2:	2280      	movs	r2, #128	; 0x80
 80060e4:	0152      	lsls	r2, r2, #5
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d100      	bne.n	80060ec <HAL_TIM_ConfigClockSource+0x70>
 80060ea:	e088      	b.n	80061fe <HAL_TIM_ConfigClockSource+0x182>
 80060ec:	2280      	movs	r2, #128	; 0x80
 80060ee:	0152      	lsls	r2, r2, #5
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d900      	bls.n	80060f6 <HAL_TIM_ConfigClockSource+0x7a>
 80060f4:	e07e      	b.n	80061f4 <HAL_TIM_ConfigClockSource+0x178>
 80060f6:	2b70      	cmp	r3, #112	; 0x70
 80060f8:	d018      	beq.n	800612c <HAL_TIM_ConfigClockSource+0xb0>
 80060fa:	d900      	bls.n	80060fe <HAL_TIM_ConfigClockSource+0x82>
 80060fc:	e07a      	b.n	80061f4 <HAL_TIM_ConfigClockSource+0x178>
 80060fe:	2b60      	cmp	r3, #96	; 0x60
 8006100:	d04f      	beq.n	80061a2 <HAL_TIM_ConfigClockSource+0x126>
 8006102:	d900      	bls.n	8006106 <HAL_TIM_ConfigClockSource+0x8a>
 8006104:	e076      	b.n	80061f4 <HAL_TIM_ConfigClockSource+0x178>
 8006106:	2b50      	cmp	r3, #80	; 0x50
 8006108:	d03b      	beq.n	8006182 <HAL_TIM_ConfigClockSource+0x106>
 800610a:	d900      	bls.n	800610e <HAL_TIM_ConfigClockSource+0x92>
 800610c:	e072      	b.n	80061f4 <HAL_TIM_ConfigClockSource+0x178>
 800610e:	2b40      	cmp	r3, #64	; 0x40
 8006110:	d057      	beq.n	80061c2 <HAL_TIM_ConfigClockSource+0x146>
 8006112:	d900      	bls.n	8006116 <HAL_TIM_ConfigClockSource+0x9a>
 8006114:	e06e      	b.n	80061f4 <HAL_TIM_ConfigClockSource+0x178>
 8006116:	2b30      	cmp	r3, #48	; 0x30
 8006118:	d063      	beq.n	80061e2 <HAL_TIM_ConfigClockSource+0x166>
 800611a:	d86b      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x178>
 800611c:	2b20      	cmp	r3, #32
 800611e:	d060      	beq.n	80061e2 <HAL_TIM_ConfigClockSource+0x166>
 8006120:	d868      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x178>
 8006122:	2b00      	cmp	r3, #0
 8006124:	d05d      	beq.n	80061e2 <HAL_TIM_ConfigClockSource+0x166>
 8006126:	2b10      	cmp	r3, #16
 8006128:	d05b      	beq.n	80061e2 <HAL_TIM_ConfigClockSource+0x166>
 800612a:	e063      	b.n	80061f4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800613c:	f000 f96c 	bl	8006418 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	2277      	movs	r2, #119	; 0x77
 800614c:	4313      	orrs	r3, r2
 800614e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	609a      	str	r2, [r3, #8]
      break;
 8006158:	e052      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800616a:	f000 f955 	bl	8006418 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689a      	ldr	r2, [r3, #8]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2180      	movs	r1, #128	; 0x80
 800617a:	01c9      	lsls	r1, r1, #7
 800617c:	430a      	orrs	r2, r1
 800617e:	609a      	str	r2, [r3, #8]
      break;
 8006180:	e03e      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800618e:	001a      	movs	r2, r3
 8006190:	f000 f8c8 	bl	8006324 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2150      	movs	r1, #80	; 0x50
 800619a:	0018      	movs	r0, r3
 800619c:	f000 f922 	bl	80063e4 <TIM_ITRx_SetConfig>
      break;
 80061a0:	e02e      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061ae:	001a      	movs	r2, r3
 80061b0:	f000 f8e6 	bl	8006380 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2160      	movs	r1, #96	; 0x60
 80061ba:	0018      	movs	r0, r3
 80061bc:	f000 f912 	bl	80063e4 <TIM_ITRx_SetConfig>
      break;
 80061c0:	e01e      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ce:	001a      	movs	r2, r3
 80061d0:	f000 f8a8 	bl	8006324 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2140      	movs	r1, #64	; 0x40
 80061da:	0018      	movs	r0, r3
 80061dc:	f000 f902 	bl	80063e4 <TIM_ITRx_SetConfig>
      break;
 80061e0:	e00e      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	0019      	movs	r1, r3
 80061ec:	0010      	movs	r0, r2
 80061ee:	f000 f8f9 	bl	80063e4 <TIM_ITRx_SetConfig>
      break;
 80061f2:	e005      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80061f4:	230f      	movs	r3, #15
 80061f6:	18fb      	adds	r3, r7, r3
 80061f8:	2201      	movs	r2, #1
 80061fa:	701a      	strb	r2, [r3, #0]
      break;
 80061fc:	e000      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80061fe:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	223d      	movs	r2, #61	; 0x3d
 8006204:	2101      	movs	r1, #1
 8006206:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	223c      	movs	r2, #60	; 0x3c
 800620c:	2100      	movs	r1, #0
 800620e:	5499      	strb	r1, [r3, r2]

  return status;
 8006210:	230f      	movs	r3, #15
 8006212:	18fb      	adds	r3, r7, r3
 8006214:	781b      	ldrb	r3, [r3, #0]
}
 8006216:	0018      	movs	r0, r3
 8006218:	46bd      	mov	sp, r7
 800621a:	b004      	add	sp, #16
 800621c:	bd80      	pop	{r7, pc}
 800621e:	46c0      	nop			; (mov r8, r8)
 8006220:	ffff00ff 	.word	0xffff00ff

08006224 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a34      	ldr	r2, [pc, #208]	; (8006308 <TIM_Base_SetConfig+0xe4>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d008      	beq.n	800624e <TIM_Base_SetConfig+0x2a>
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	2380      	movs	r3, #128	; 0x80
 8006240:	05db      	lsls	r3, r3, #23
 8006242:	429a      	cmp	r2, r3
 8006244:	d003      	beq.n	800624e <TIM_Base_SetConfig+0x2a>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a30      	ldr	r2, [pc, #192]	; (800630c <TIM_Base_SetConfig+0xe8>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d108      	bne.n	8006260 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2270      	movs	r2, #112	; 0x70
 8006252:	4393      	bics	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	4313      	orrs	r3, r2
 800625e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a29      	ldr	r2, [pc, #164]	; (8006308 <TIM_Base_SetConfig+0xe4>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d018      	beq.n	800629a <TIM_Base_SetConfig+0x76>
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	2380      	movs	r3, #128	; 0x80
 800626c:	05db      	lsls	r3, r3, #23
 800626e:	429a      	cmp	r2, r3
 8006270:	d013      	beq.n	800629a <TIM_Base_SetConfig+0x76>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a25      	ldr	r2, [pc, #148]	; (800630c <TIM_Base_SetConfig+0xe8>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d00f      	beq.n	800629a <TIM_Base_SetConfig+0x76>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a24      	ldr	r2, [pc, #144]	; (8006310 <TIM_Base_SetConfig+0xec>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d00b      	beq.n	800629a <TIM_Base_SetConfig+0x76>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a23      	ldr	r2, [pc, #140]	; (8006314 <TIM_Base_SetConfig+0xf0>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d007      	beq.n	800629a <TIM_Base_SetConfig+0x76>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a22      	ldr	r2, [pc, #136]	; (8006318 <TIM_Base_SetConfig+0xf4>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d003      	beq.n	800629a <TIM_Base_SetConfig+0x76>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a21      	ldr	r2, [pc, #132]	; (800631c <TIM_Base_SetConfig+0xf8>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d108      	bne.n	80062ac <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	4a20      	ldr	r2, [pc, #128]	; (8006320 <TIM_Base_SetConfig+0xfc>)
 800629e:	4013      	ands	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2280      	movs	r2, #128	; 0x80
 80062b0:	4393      	bics	r3, r2
 80062b2:	001a      	movs	r2, r3
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	689a      	ldr	r2, [r3, #8]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a0c      	ldr	r2, [pc, #48]	; (8006308 <TIM_Base_SetConfig+0xe4>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d00b      	beq.n	80062f2 <TIM_Base_SetConfig+0xce>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a0d      	ldr	r2, [pc, #52]	; (8006314 <TIM_Base_SetConfig+0xf0>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d007      	beq.n	80062f2 <TIM_Base_SetConfig+0xce>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a0c      	ldr	r2, [pc, #48]	; (8006318 <TIM_Base_SetConfig+0xf4>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d003      	beq.n	80062f2 <TIM_Base_SetConfig+0xce>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a0b      	ldr	r2, [pc, #44]	; (800631c <TIM_Base_SetConfig+0xf8>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d103      	bne.n	80062fa <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	691a      	ldr	r2, [r3, #16]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	615a      	str	r2, [r3, #20]
}
 8006300:	46c0      	nop			; (mov r8, r8)
 8006302:	46bd      	mov	sp, r7
 8006304:	b004      	add	sp, #16
 8006306:	bd80      	pop	{r7, pc}
 8006308:	40012c00 	.word	0x40012c00
 800630c:	40000400 	.word	0x40000400
 8006310:	40002000 	.word	0x40002000
 8006314:	40014000 	.word	0x40014000
 8006318:	40014400 	.word	0x40014400
 800631c:	40014800 	.word	0x40014800
 8006320:	fffffcff 	.word	0xfffffcff

08006324 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b086      	sub	sp, #24
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	2201      	movs	r2, #1
 800633c:	4393      	bics	r3, r2
 800633e:	001a      	movs	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	22f0      	movs	r2, #240	; 0xf0
 800634e:	4393      	bics	r3, r2
 8006350:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	011b      	lsls	r3, r3, #4
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	4313      	orrs	r3, r2
 800635a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	220a      	movs	r2, #10
 8006360:	4393      	bics	r3, r2
 8006362:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	4313      	orrs	r3, r2
 800636a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	621a      	str	r2, [r3, #32]
}
 8006378:	46c0      	nop			; (mov r8, r8)
 800637a:	46bd      	mov	sp, r7
 800637c:	b006      	add	sp, #24
 800637e:	bd80      	pop	{r7, pc}

08006380 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6a1b      	ldr	r3, [r3, #32]
 8006390:	2210      	movs	r2, #16
 8006392:	4393      	bics	r3, r2
 8006394:	001a      	movs	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6a1b      	ldr	r3, [r3, #32]
 80063a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	4a0d      	ldr	r2, [pc, #52]	; (80063e0 <TIM_TI2_ConfigInputStage+0x60>)
 80063aa:	4013      	ands	r3, r2
 80063ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	031b      	lsls	r3, r3, #12
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	22a0      	movs	r2, #160	; 0xa0
 80063bc:	4393      	bics	r3, r2
 80063be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	011b      	lsls	r3, r3, #4
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	621a      	str	r2, [r3, #32]
}
 80063d6:	46c0      	nop			; (mov r8, r8)
 80063d8:	46bd      	mov	sp, r7
 80063da:	b006      	add	sp, #24
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	46c0      	nop			; (mov r8, r8)
 80063e0:	ffff0fff 	.word	0xffff0fff

080063e4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2270      	movs	r2, #112	; 0x70
 80063f8:	4393      	bics	r3, r2
 80063fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	4313      	orrs	r3, r2
 8006402:	2207      	movs	r2, #7
 8006404:	4313      	orrs	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	609a      	str	r2, [r3, #8]
}
 800640e:	46c0      	nop			; (mov r8, r8)
 8006410:	46bd      	mov	sp, r7
 8006412:	b004      	add	sp, #16
 8006414:	bd80      	pop	{r7, pc}
	...

08006418 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b086      	sub	sp, #24
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	607a      	str	r2, [r7, #4]
 8006424:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	4a09      	ldr	r2, [pc, #36]	; (8006454 <TIM_ETR_SetConfig+0x3c>)
 8006430:	4013      	ands	r3, r2
 8006432:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	021a      	lsls	r2, r3, #8
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	431a      	orrs	r2, r3
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	4313      	orrs	r3, r2
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	4313      	orrs	r3, r2
 8006444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	609a      	str	r2, [r3, #8]
}
 800644c:	46c0      	nop			; (mov r8, r8)
 800644e:	46bd      	mov	sp, r7
 8006450:	b006      	add	sp, #24
 8006452:	bd80      	pop	{r7, pc}
 8006454:	ffff00ff 	.word	0xffff00ff

08006458 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	223c      	movs	r2, #60	; 0x3c
 8006466:	5c9b      	ldrb	r3, [r3, r2]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d101      	bne.n	8006470 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800646c:	2302      	movs	r3, #2
 800646e:	e047      	b.n	8006500 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	223c      	movs	r2, #60	; 0x3c
 8006474:	2101      	movs	r1, #1
 8006476:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	223d      	movs	r2, #61	; 0x3d
 800647c:	2102      	movs	r1, #2
 800647e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2270      	movs	r2, #112	; 0x70
 8006494:	4393      	bics	r3, r2
 8006496:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	4313      	orrs	r3, r2
 80064a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a16      	ldr	r2, [pc, #88]	; (8006508 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d00f      	beq.n	80064d4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	2380      	movs	r3, #128	; 0x80
 80064ba:	05db      	lsls	r3, r3, #23
 80064bc:	429a      	cmp	r2, r3
 80064be:	d009      	beq.n	80064d4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a11      	ldr	r2, [pc, #68]	; (800650c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d004      	beq.n	80064d4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a10      	ldr	r2, [pc, #64]	; (8006510 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d10c      	bne.n	80064ee <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	2280      	movs	r2, #128	; 0x80
 80064d8:	4393      	bics	r3, r2
 80064da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	223d      	movs	r2, #61	; 0x3d
 80064f2:	2101      	movs	r1, #1
 80064f4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	223c      	movs	r2, #60	; 0x3c
 80064fa:	2100      	movs	r1, #0
 80064fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	0018      	movs	r0, r3
 8006502:	46bd      	mov	sp, r7
 8006504:	b004      	add	sp, #16
 8006506:	bd80      	pop	{r7, pc}
 8006508:	40012c00 	.word	0x40012c00
 800650c:	40000400 	.word	0x40000400
 8006510:	40014000 	.word	0x40014000

08006514 <sniprintf>:
 8006514:	b40c      	push	{r2, r3}
 8006516:	b530      	push	{r4, r5, lr}
 8006518:	4b17      	ldr	r3, [pc, #92]	; (8006578 <sniprintf+0x64>)
 800651a:	000c      	movs	r4, r1
 800651c:	681d      	ldr	r5, [r3, #0]
 800651e:	b09d      	sub	sp, #116	; 0x74
 8006520:	2900      	cmp	r1, #0
 8006522:	da08      	bge.n	8006536 <sniprintf+0x22>
 8006524:	238b      	movs	r3, #139	; 0x8b
 8006526:	2001      	movs	r0, #1
 8006528:	602b      	str	r3, [r5, #0]
 800652a:	4240      	negs	r0, r0
 800652c:	b01d      	add	sp, #116	; 0x74
 800652e:	bc30      	pop	{r4, r5}
 8006530:	bc08      	pop	{r3}
 8006532:	b002      	add	sp, #8
 8006534:	4718      	bx	r3
 8006536:	2382      	movs	r3, #130	; 0x82
 8006538:	466a      	mov	r2, sp
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	8293      	strh	r3, [r2, #20]
 800653e:	2300      	movs	r3, #0
 8006540:	9002      	str	r0, [sp, #8]
 8006542:	9006      	str	r0, [sp, #24]
 8006544:	4299      	cmp	r1, r3
 8006546:	d000      	beq.n	800654a <sniprintf+0x36>
 8006548:	1e4b      	subs	r3, r1, #1
 800654a:	9304      	str	r3, [sp, #16]
 800654c:	9307      	str	r3, [sp, #28]
 800654e:	2301      	movs	r3, #1
 8006550:	466a      	mov	r2, sp
 8006552:	425b      	negs	r3, r3
 8006554:	82d3      	strh	r3, [r2, #22]
 8006556:	0028      	movs	r0, r5
 8006558:	ab21      	add	r3, sp, #132	; 0x84
 800655a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800655c:	a902      	add	r1, sp, #8
 800655e:	9301      	str	r3, [sp, #4]
 8006560:	f000 f9aa 	bl	80068b8 <_svfiprintf_r>
 8006564:	1c43      	adds	r3, r0, #1
 8006566:	da01      	bge.n	800656c <sniprintf+0x58>
 8006568:	238b      	movs	r3, #139	; 0x8b
 800656a:	602b      	str	r3, [r5, #0]
 800656c:	2c00      	cmp	r4, #0
 800656e:	d0dd      	beq.n	800652c <sniprintf+0x18>
 8006570:	2200      	movs	r2, #0
 8006572:	9b02      	ldr	r3, [sp, #8]
 8006574:	701a      	strb	r2, [r3, #0]
 8006576:	e7d9      	b.n	800652c <sniprintf+0x18>
 8006578:	2000005c 	.word	0x2000005c

0800657c <memset>:
 800657c:	0003      	movs	r3, r0
 800657e:	1882      	adds	r2, r0, r2
 8006580:	4293      	cmp	r3, r2
 8006582:	d100      	bne.n	8006586 <memset+0xa>
 8006584:	4770      	bx	lr
 8006586:	7019      	strb	r1, [r3, #0]
 8006588:	3301      	adds	r3, #1
 800658a:	e7f9      	b.n	8006580 <memset+0x4>

0800658c <__errno>:
 800658c:	4b01      	ldr	r3, [pc, #4]	; (8006594 <__errno+0x8>)
 800658e:	6818      	ldr	r0, [r3, #0]
 8006590:	4770      	bx	lr
 8006592:	46c0      	nop			; (mov r8, r8)
 8006594:	2000005c 	.word	0x2000005c

08006598 <__libc_init_array>:
 8006598:	b570      	push	{r4, r5, r6, lr}
 800659a:	2600      	movs	r6, #0
 800659c:	4c0c      	ldr	r4, [pc, #48]	; (80065d0 <__libc_init_array+0x38>)
 800659e:	4d0d      	ldr	r5, [pc, #52]	; (80065d4 <__libc_init_array+0x3c>)
 80065a0:	1b64      	subs	r4, r4, r5
 80065a2:	10a4      	asrs	r4, r4, #2
 80065a4:	42a6      	cmp	r6, r4
 80065a6:	d109      	bne.n	80065bc <__libc_init_array+0x24>
 80065a8:	2600      	movs	r6, #0
 80065aa:	f000 fc6d 	bl	8006e88 <_init>
 80065ae:	4c0a      	ldr	r4, [pc, #40]	; (80065d8 <__libc_init_array+0x40>)
 80065b0:	4d0a      	ldr	r5, [pc, #40]	; (80065dc <__libc_init_array+0x44>)
 80065b2:	1b64      	subs	r4, r4, r5
 80065b4:	10a4      	asrs	r4, r4, #2
 80065b6:	42a6      	cmp	r6, r4
 80065b8:	d105      	bne.n	80065c6 <__libc_init_array+0x2e>
 80065ba:	bd70      	pop	{r4, r5, r6, pc}
 80065bc:	00b3      	lsls	r3, r6, #2
 80065be:	58eb      	ldr	r3, [r5, r3]
 80065c0:	4798      	blx	r3
 80065c2:	3601      	adds	r6, #1
 80065c4:	e7ee      	b.n	80065a4 <__libc_init_array+0xc>
 80065c6:	00b3      	lsls	r3, r6, #2
 80065c8:	58eb      	ldr	r3, [r5, r3]
 80065ca:	4798      	blx	r3
 80065cc:	3601      	adds	r6, #1
 80065ce:	e7f2      	b.n	80065b6 <__libc_init_array+0x1e>
 80065d0:	08007598 	.word	0x08007598
 80065d4:	08007598 	.word	0x08007598
 80065d8:	0800759c 	.word	0x0800759c
 80065dc:	08007598 	.word	0x08007598

080065e0 <__retarget_lock_acquire_recursive>:
 80065e0:	4770      	bx	lr

080065e2 <__retarget_lock_release_recursive>:
 80065e2:	4770      	bx	lr

080065e4 <memcpy>:
 80065e4:	2300      	movs	r3, #0
 80065e6:	b510      	push	{r4, lr}
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d100      	bne.n	80065ee <memcpy+0xa>
 80065ec:	bd10      	pop	{r4, pc}
 80065ee:	5ccc      	ldrb	r4, [r1, r3]
 80065f0:	54c4      	strb	r4, [r0, r3]
 80065f2:	3301      	adds	r3, #1
 80065f4:	e7f8      	b.n	80065e8 <memcpy+0x4>
	...

080065f8 <_free_r>:
 80065f8:	b570      	push	{r4, r5, r6, lr}
 80065fa:	0005      	movs	r5, r0
 80065fc:	2900      	cmp	r1, #0
 80065fe:	d010      	beq.n	8006622 <_free_r+0x2a>
 8006600:	1f0c      	subs	r4, r1, #4
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	da00      	bge.n	800660a <_free_r+0x12>
 8006608:	18e4      	adds	r4, r4, r3
 800660a:	0028      	movs	r0, r5
 800660c:	f000 f8e2 	bl	80067d4 <__malloc_lock>
 8006610:	4a1d      	ldr	r2, [pc, #116]	; (8006688 <_free_r+0x90>)
 8006612:	6813      	ldr	r3, [r2, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d105      	bne.n	8006624 <_free_r+0x2c>
 8006618:	6063      	str	r3, [r4, #4]
 800661a:	6014      	str	r4, [r2, #0]
 800661c:	0028      	movs	r0, r5
 800661e:	f000 f8e1 	bl	80067e4 <__malloc_unlock>
 8006622:	bd70      	pop	{r4, r5, r6, pc}
 8006624:	42a3      	cmp	r3, r4
 8006626:	d908      	bls.n	800663a <_free_r+0x42>
 8006628:	6820      	ldr	r0, [r4, #0]
 800662a:	1821      	adds	r1, r4, r0
 800662c:	428b      	cmp	r3, r1
 800662e:	d1f3      	bne.n	8006618 <_free_r+0x20>
 8006630:	6819      	ldr	r1, [r3, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	1809      	adds	r1, r1, r0
 8006636:	6021      	str	r1, [r4, #0]
 8006638:	e7ee      	b.n	8006618 <_free_r+0x20>
 800663a:	001a      	movs	r2, r3
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d001      	beq.n	8006646 <_free_r+0x4e>
 8006642:	42a3      	cmp	r3, r4
 8006644:	d9f9      	bls.n	800663a <_free_r+0x42>
 8006646:	6811      	ldr	r1, [r2, #0]
 8006648:	1850      	adds	r0, r2, r1
 800664a:	42a0      	cmp	r0, r4
 800664c:	d10b      	bne.n	8006666 <_free_r+0x6e>
 800664e:	6820      	ldr	r0, [r4, #0]
 8006650:	1809      	adds	r1, r1, r0
 8006652:	1850      	adds	r0, r2, r1
 8006654:	6011      	str	r1, [r2, #0]
 8006656:	4283      	cmp	r3, r0
 8006658:	d1e0      	bne.n	800661c <_free_r+0x24>
 800665a:	6818      	ldr	r0, [r3, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	1841      	adds	r1, r0, r1
 8006660:	6011      	str	r1, [r2, #0]
 8006662:	6053      	str	r3, [r2, #4]
 8006664:	e7da      	b.n	800661c <_free_r+0x24>
 8006666:	42a0      	cmp	r0, r4
 8006668:	d902      	bls.n	8006670 <_free_r+0x78>
 800666a:	230c      	movs	r3, #12
 800666c:	602b      	str	r3, [r5, #0]
 800666e:	e7d5      	b.n	800661c <_free_r+0x24>
 8006670:	6820      	ldr	r0, [r4, #0]
 8006672:	1821      	adds	r1, r4, r0
 8006674:	428b      	cmp	r3, r1
 8006676:	d103      	bne.n	8006680 <_free_r+0x88>
 8006678:	6819      	ldr	r1, [r3, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	1809      	adds	r1, r1, r0
 800667e:	6021      	str	r1, [r4, #0]
 8006680:	6063      	str	r3, [r4, #4]
 8006682:	6054      	str	r4, [r2, #4]
 8006684:	e7ca      	b.n	800661c <_free_r+0x24>
 8006686:	46c0      	nop			; (mov r8, r8)
 8006688:	20001174 	.word	0x20001174

0800668c <sbrk_aligned>:
 800668c:	b570      	push	{r4, r5, r6, lr}
 800668e:	4e0f      	ldr	r6, [pc, #60]	; (80066cc <sbrk_aligned+0x40>)
 8006690:	000d      	movs	r5, r1
 8006692:	6831      	ldr	r1, [r6, #0]
 8006694:	0004      	movs	r4, r0
 8006696:	2900      	cmp	r1, #0
 8006698:	d102      	bne.n	80066a0 <sbrk_aligned+0x14>
 800669a:	f000 fba1 	bl	8006de0 <_sbrk_r>
 800669e:	6030      	str	r0, [r6, #0]
 80066a0:	0029      	movs	r1, r5
 80066a2:	0020      	movs	r0, r4
 80066a4:	f000 fb9c 	bl	8006de0 <_sbrk_r>
 80066a8:	1c43      	adds	r3, r0, #1
 80066aa:	d00a      	beq.n	80066c2 <sbrk_aligned+0x36>
 80066ac:	2303      	movs	r3, #3
 80066ae:	1cc5      	adds	r5, r0, #3
 80066b0:	439d      	bics	r5, r3
 80066b2:	42a8      	cmp	r0, r5
 80066b4:	d007      	beq.n	80066c6 <sbrk_aligned+0x3a>
 80066b6:	1a29      	subs	r1, r5, r0
 80066b8:	0020      	movs	r0, r4
 80066ba:	f000 fb91 	bl	8006de0 <_sbrk_r>
 80066be:	3001      	adds	r0, #1
 80066c0:	d101      	bne.n	80066c6 <sbrk_aligned+0x3a>
 80066c2:	2501      	movs	r5, #1
 80066c4:	426d      	negs	r5, r5
 80066c6:	0028      	movs	r0, r5
 80066c8:	bd70      	pop	{r4, r5, r6, pc}
 80066ca:	46c0      	nop			; (mov r8, r8)
 80066cc:	20001178 	.word	0x20001178

080066d0 <_malloc_r>:
 80066d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066d2:	2203      	movs	r2, #3
 80066d4:	1ccb      	adds	r3, r1, #3
 80066d6:	4393      	bics	r3, r2
 80066d8:	3308      	adds	r3, #8
 80066da:	0006      	movs	r6, r0
 80066dc:	001f      	movs	r7, r3
 80066de:	2b0c      	cmp	r3, #12
 80066e0:	d238      	bcs.n	8006754 <_malloc_r+0x84>
 80066e2:	270c      	movs	r7, #12
 80066e4:	42b9      	cmp	r1, r7
 80066e6:	d837      	bhi.n	8006758 <_malloc_r+0x88>
 80066e8:	0030      	movs	r0, r6
 80066ea:	f000 f873 	bl	80067d4 <__malloc_lock>
 80066ee:	4b38      	ldr	r3, [pc, #224]	; (80067d0 <_malloc_r+0x100>)
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	001c      	movs	r4, r3
 80066f6:	2c00      	cmp	r4, #0
 80066f8:	d133      	bne.n	8006762 <_malloc_r+0x92>
 80066fa:	0039      	movs	r1, r7
 80066fc:	0030      	movs	r0, r6
 80066fe:	f7ff ffc5 	bl	800668c <sbrk_aligned>
 8006702:	0004      	movs	r4, r0
 8006704:	1c43      	adds	r3, r0, #1
 8006706:	d15e      	bne.n	80067c6 <_malloc_r+0xf6>
 8006708:	9b00      	ldr	r3, [sp, #0]
 800670a:	681c      	ldr	r4, [r3, #0]
 800670c:	0025      	movs	r5, r4
 800670e:	2d00      	cmp	r5, #0
 8006710:	d14e      	bne.n	80067b0 <_malloc_r+0xe0>
 8006712:	2c00      	cmp	r4, #0
 8006714:	d051      	beq.n	80067ba <_malloc_r+0xea>
 8006716:	6823      	ldr	r3, [r4, #0]
 8006718:	0029      	movs	r1, r5
 800671a:	18e3      	adds	r3, r4, r3
 800671c:	0030      	movs	r0, r6
 800671e:	9301      	str	r3, [sp, #4]
 8006720:	f000 fb5e 	bl	8006de0 <_sbrk_r>
 8006724:	9b01      	ldr	r3, [sp, #4]
 8006726:	4283      	cmp	r3, r0
 8006728:	d147      	bne.n	80067ba <_malloc_r+0xea>
 800672a:	6823      	ldr	r3, [r4, #0]
 800672c:	0030      	movs	r0, r6
 800672e:	1aff      	subs	r7, r7, r3
 8006730:	0039      	movs	r1, r7
 8006732:	f7ff ffab 	bl	800668c <sbrk_aligned>
 8006736:	3001      	adds	r0, #1
 8006738:	d03f      	beq.n	80067ba <_malloc_r+0xea>
 800673a:	6823      	ldr	r3, [r4, #0]
 800673c:	19db      	adds	r3, r3, r7
 800673e:	6023      	str	r3, [r4, #0]
 8006740:	9b00      	ldr	r3, [sp, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d040      	beq.n	80067ca <_malloc_r+0xfa>
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	42a2      	cmp	r2, r4
 800674c:	d133      	bne.n	80067b6 <_malloc_r+0xe6>
 800674e:	2200      	movs	r2, #0
 8006750:	605a      	str	r2, [r3, #4]
 8006752:	e014      	b.n	800677e <_malloc_r+0xae>
 8006754:	2b00      	cmp	r3, #0
 8006756:	dac5      	bge.n	80066e4 <_malloc_r+0x14>
 8006758:	230c      	movs	r3, #12
 800675a:	2500      	movs	r5, #0
 800675c:	6033      	str	r3, [r6, #0]
 800675e:	0028      	movs	r0, r5
 8006760:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006762:	6821      	ldr	r1, [r4, #0]
 8006764:	1bc9      	subs	r1, r1, r7
 8006766:	d420      	bmi.n	80067aa <_malloc_r+0xda>
 8006768:	290b      	cmp	r1, #11
 800676a:	d918      	bls.n	800679e <_malloc_r+0xce>
 800676c:	19e2      	adds	r2, r4, r7
 800676e:	6027      	str	r7, [r4, #0]
 8006770:	42a3      	cmp	r3, r4
 8006772:	d112      	bne.n	800679a <_malloc_r+0xca>
 8006774:	9b00      	ldr	r3, [sp, #0]
 8006776:	601a      	str	r2, [r3, #0]
 8006778:	6863      	ldr	r3, [r4, #4]
 800677a:	6011      	str	r1, [r2, #0]
 800677c:	6053      	str	r3, [r2, #4]
 800677e:	0030      	movs	r0, r6
 8006780:	0025      	movs	r5, r4
 8006782:	f000 f82f 	bl	80067e4 <__malloc_unlock>
 8006786:	2207      	movs	r2, #7
 8006788:	350b      	adds	r5, #11
 800678a:	1d23      	adds	r3, r4, #4
 800678c:	4395      	bics	r5, r2
 800678e:	1aea      	subs	r2, r5, r3
 8006790:	429d      	cmp	r5, r3
 8006792:	d0e4      	beq.n	800675e <_malloc_r+0x8e>
 8006794:	1b5b      	subs	r3, r3, r5
 8006796:	50a3      	str	r3, [r4, r2]
 8006798:	e7e1      	b.n	800675e <_malloc_r+0x8e>
 800679a:	605a      	str	r2, [r3, #4]
 800679c:	e7ec      	b.n	8006778 <_malloc_r+0xa8>
 800679e:	6862      	ldr	r2, [r4, #4]
 80067a0:	42a3      	cmp	r3, r4
 80067a2:	d1d5      	bne.n	8006750 <_malloc_r+0x80>
 80067a4:	9b00      	ldr	r3, [sp, #0]
 80067a6:	601a      	str	r2, [r3, #0]
 80067a8:	e7e9      	b.n	800677e <_malloc_r+0xae>
 80067aa:	0023      	movs	r3, r4
 80067ac:	6864      	ldr	r4, [r4, #4]
 80067ae:	e7a2      	b.n	80066f6 <_malloc_r+0x26>
 80067b0:	002c      	movs	r4, r5
 80067b2:	686d      	ldr	r5, [r5, #4]
 80067b4:	e7ab      	b.n	800670e <_malloc_r+0x3e>
 80067b6:	0013      	movs	r3, r2
 80067b8:	e7c4      	b.n	8006744 <_malloc_r+0x74>
 80067ba:	230c      	movs	r3, #12
 80067bc:	0030      	movs	r0, r6
 80067be:	6033      	str	r3, [r6, #0]
 80067c0:	f000 f810 	bl	80067e4 <__malloc_unlock>
 80067c4:	e7cb      	b.n	800675e <_malloc_r+0x8e>
 80067c6:	6027      	str	r7, [r4, #0]
 80067c8:	e7d9      	b.n	800677e <_malloc_r+0xae>
 80067ca:	605b      	str	r3, [r3, #4]
 80067cc:	deff      	udf	#255	; 0xff
 80067ce:	46c0      	nop			; (mov r8, r8)
 80067d0:	20001174 	.word	0x20001174

080067d4 <__malloc_lock>:
 80067d4:	b510      	push	{r4, lr}
 80067d6:	4802      	ldr	r0, [pc, #8]	; (80067e0 <__malloc_lock+0xc>)
 80067d8:	f7ff ff02 	bl	80065e0 <__retarget_lock_acquire_recursive>
 80067dc:	bd10      	pop	{r4, pc}
 80067de:	46c0      	nop			; (mov r8, r8)
 80067e0:	20001170 	.word	0x20001170

080067e4 <__malloc_unlock>:
 80067e4:	b510      	push	{r4, lr}
 80067e6:	4802      	ldr	r0, [pc, #8]	; (80067f0 <__malloc_unlock+0xc>)
 80067e8:	f7ff fefb 	bl	80065e2 <__retarget_lock_release_recursive>
 80067ec:	bd10      	pop	{r4, pc}
 80067ee:	46c0      	nop			; (mov r8, r8)
 80067f0:	20001170 	.word	0x20001170

080067f4 <__ssputs_r>:
 80067f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067f6:	b085      	sub	sp, #20
 80067f8:	9301      	str	r3, [sp, #4]
 80067fa:	9203      	str	r2, [sp, #12]
 80067fc:	688e      	ldr	r6, [r1, #8]
 80067fe:	9a01      	ldr	r2, [sp, #4]
 8006800:	0007      	movs	r7, r0
 8006802:	000c      	movs	r4, r1
 8006804:	680b      	ldr	r3, [r1, #0]
 8006806:	4296      	cmp	r6, r2
 8006808:	d831      	bhi.n	800686e <__ssputs_r+0x7a>
 800680a:	898a      	ldrh	r2, [r1, #12]
 800680c:	2190      	movs	r1, #144	; 0x90
 800680e:	00c9      	lsls	r1, r1, #3
 8006810:	420a      	tst	r2, r1
 8006812:	d029      	beq.n	8006868 <__ssputs_r+0x74>
 8006814:	2003      	movs	r0, #3
 8006816:	6921      	ldr	r1, [r4, #16]
 8006818:	1a5b      	subs	r3, r3, r1
 800681a:	9302      	str	r3, [sp, #8]
 800681c:	6963      	ldr	r3, [r4, #20]
 800681e:	4343      	muls	r3, r0
 8006820:	0fdd      	lsrs	r5, r3, #31
 8006822:	18ed      	adds	r5, r5, r3
 8006824:	9b01      	ldr	r3, [sp, #4]
 8006826:	9802      	ldr	r0, [sp, #8]
 8006828:	3301      	adds	r3, #1
 800682a:	181b      	adds	r3, r3, r0
 800682c:	106d      	asrs	r5, r5, #1
 800682e:	42ab      	cmp	r3, r5
 8006830:	d900      	bls.n	8006834 <__ssputs_r+0x40>
 8006832:	001d      	movs	r5, r3
 8006834:	0552      	lsls	r2, r2, #21
 8006836:	d529      	bpl.n	800688c <__ssputs_r+0x98>
 8006838:	0029      	movs	r1, r5
 800683a:	0038      	movs	r0, r7
 800683c:	f7ff ff48 	bl	80066d0 <_malloc_r>
 8006840:	1e06      	subs	r6, r0, #0
 8006842:	d02d      	beq.n	80068a0 <__ssputs_r+0xac>
 8006844:	9a02      	ldr	r2, [sp, #8]
 8006846:	6921      	ldr	r1, [r4, #16]
 8006848:	f7ff fecc 	bl	80065e4 <memcpy>
 800684c:	89a2      	ldrh	r2, [r4, #12]
 800684e:	4b19      	ldr	r3, [pc, #100]	; (80068b4 <__ssputs_r+0xc0>)
 8006850:	401a      	ands	r2, r3
 8006852:	2380      	movs	r3, #128	; 0x80
 8006854:	4313      	orrs	r3, r2
 8006856:	81a3      	strh	r3, [r4, #12]
 8006858:	9b02      	ldr	r3, [sp, #8]
 800685a:	6126      	str	r6, [r4, #16]
 800685c:	18f6      	adds	r6, r6, r3
 800685e:	6026      	str	r6, [r4, #0]
 8006860:	6165      	str	r5, [r4, #20]
 8006862:	9e01      	ldr	r6, [sp, #4]
 8006864:	1aed      	subs	r5, r5, r3
 8006866:	60a5      	str	r5, [r4, #8]
 8006868:	9b01      	ldr	r3, [sp, #4]
 800686a:	429e      	cmp	r6, r3
 800686c:	d900      	bls.n	8006870 <__ssputs_r+0x7c>
 800686e:	9e01      	ldr	r6, [sp, #4]
 8006870:	0032      	movs	r2, r6
 8006872:	9903      	ldr	r1, [sp, #12]
 8006874:	6820      	ldr	r0, [r4, #0]
 8006876:	f000 fa9f 	bl	8006db8 <memmove>
 800687a:	2000      	movs	r0, #0
 800687c:	68a3      	ldr	r3, [r4, #8]
 800687e:	1b9b      	subs	r3, r3, r6
 8006880:	60a3      	str	r3, [r4, #8]
 8006882:	6823      	ldr	r3, [r4, #0]
 8006884:	199b      	adds	r3, r3, r6
 8006886:	6023      	str	r3, [r4, #0]
 8006888:	b005      	add	sp, #20
 800688a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800688c:	002a      	movs	r2, r5
 800688e:	0038      	movs	r0, r7
 8006890:	f000 fac3 	bl	8006e1a <_realloc_r>
 8006894:	1e06      	subs	r6, r0, #0
 8006896:	d1df      	bne.n	8006858 <__ssputs_r+0x64>
 8006898:	0038      	movs	r0, r7
 800689a:	6921      	ldr	r1, [r4, #16]
 800689c:	f7ff feac 	bl	80065f8 <_free_r>
 80068a0:	230c      	movs	r3, #12
 80068a2:	2001      	movs	r0, #1
 80068a4:	603b      	str	r3, [r7, #0]
 80068a6:	89a2      	ldrh	r2, [r4, #12]
 80068a8:	3334      	adds	r3, #52	; 0x34
 80068aa:	4313      	orrs	r3, r2
 80068ac:	81a3      	strh	r3, [r4, #12]
 80068ae:	4240      	negs	r0, r0
 80068b0:	e7ea      	b.n	8006888 <__ssputs_r+0x94>
 80068b2:	46c0      	nop			; (mov r8, r8)
 80068b4:	fffffb7f 	.word	0xfffffb7f

080068b8 <_svfiprintf_r>:
 80068b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ba:	b0a1      	sub	sp, #132	; 0x84
 80068bc:	9003      	str	r0, [sp, #12]
 80068be:	001d      	movs	r5, r3
 80068c0:	898b      	ldrh	r3, [r1, #12]
 80068c2:	000f      	movs	r7, r1
 80068c4:	0016      	movs	r6, r2
 80068c6:	061b      	lsls	r3, r3, #24
 80068c8:	d511      	bpl.n	80068ee <_svfiprintf_r+0x36>
 80068ca:	690b      	ldr	r3, [r1, #16]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10e      	bne.n	80068ee <_svfiprintf_r+0x36>
 80068d0:	2140      	movs	r1, #64	; 0x40
 80068d2:	f7ff fefd 	bl	80066d0 <_malloc_r>
 80068d6:	6038      	str	r0, [r7, #0]
 80068d8:	6138      	str	r0, [r7, #16]
 80068da:	2800      	cmp	r0, #0
 80068dc:	d105      	bne.n	80068ea <_svfiprintf_r+0x32>
 80068de:	230c      	movs	r3, #12
 80068e0:	9a03      	ldr	r2, [sp, #12]
 80068e2:	3801      	subs	r0, #1
 80068e4:	6013      	str	r3, [r2, #0]
 80068e6:	b021      	add	sp, #132	; 0x84
 80068e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068ea:	2340      	movs	r3, #64	; 0x40
 80068ec:	617b      	str	r3, [r7, #20]
 80068ee:	2300      	movs	r3, #0
 80068f0:	ac08      	add	r4, sp, #32
 80068f2:	6163      	str	r3, [r4, #20]
 80068f4:	3320      	adds	r3, #32
 80068f6:	7663      	strb	r3, [r4, #25]
 80068f8:	3310      	adds	r3, #16
 80068fa:	76a3      	strb	r3, [r4, #26]
 80068fc:	9507      	str	r5, [sp, #28]
 80068fe:	0035      	movs	r5, r6
 8006900:	782b      	ldrb	r3, [r5, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <_svfiprintf_r+0x52>
 8006906:	2b25      	cmp	r3, #37	; 0x25
 8006908:	d148      	bne.n	800699c <_svfiprintf_r+0xe4>
 800690a:	1bab      	subs	r3, r5, r6
 800690c:	9305      	str	r3, [sp, #20]
 800690e:	42b5      	cmp	r5, r6
 8006910:	d00b      	beq.n	800692a <_svfiprintf_r+0x72>
 8006912:	0032      	movs	r2, r6
 8006914:	0039      	movs	r1, r7
 8006916:	9803      	ldr	r0, [sp, #12]
 8006918:	f7ff ff6c 	bl	80067f4 <__ssputs_r>
 800691c:	3001      	adds	r0, #1
 800691e:	d100      	bne.n	8006922 <_svfiprintf_r+0x6a>
 8006920:	e0af      	b.n	8006a82 <_svfiprintf_r+0x1ca>
 8006922:	6963      	ldr	r3, [r4, #20]
 8006924:	9a05      	ldr	r2, [sp, #20]
 8006926:	189b      	adds	r3, r3, r2
 8006928:	6163      	str	r3, [r4, #20]
 800692a:	782b      	ldrb	r3, [r5, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d100      	bne.n	8006932 <_svfiprintf_r+0x7a>
 8006930:	e0a7      	b.n	8006a82 <_svfiprintf_r+0x1ca>
 8006932:	2201      	movs	r2, #1
 8006934:	2300      	movs	r3, #0
 8006936:	4252      	negs	r2, r2
 8006938:	6062      	str	r2, [r4, #4]
 800693a:	a904      	add	r1, sp, #16
 800693c:	3254      	adds	r2, #84	; 0x54
 800693e:	1852      	adds	r2, r2, r1
 8006940:	1c6e      	adds	r6, r5, #1
 8006942:	6023      	str	r3, [r4, #0]
 8006944:	60e3      	str	r3, [r4, #12]
 8006946:	60a3      	str	r3, [r4, #8]
 8006948:	7013      	strb	r3, [r2, #0]
 800694a:	65a3      	str	r3, [r4, #88]	; 0x58
 800694c:	4b55      	ldr	r3, [pc, #340]	; (8006aa4 <_svfiprintf_r+0x1ec>)
 800694e:	2205      	movs	r2, #5
 8006950:	0018      	movs	r0, r3
 8006952:	7831      	ldrb	r1, [r6, #0]
 8006954:	9305      	str	r3, [sp, #20]
 8006956:	f000 fa55 	bl	8006e04 <memchr>
 800695a:	1c75      	adds	r5, r6, #1
 800695c:	2800      	cmp	r0, #0
 800695e:	d11f      	bne.n	80069a0 <_svfiprintf_r+0xe8>
 8006960:	6822      	ldr	r2, [r4, #0]
 8006962:	06d3      	lsls	r3, r2, #27
 8006964:	d504      	bpl.n	8006970 <_svfiprintf_r+0xb8>
 8006966:	2353      	movs	r3, #83	; 0x53
 8006968:	a904      	add	r1, sp, #16
 800696a:	185b      	adds	r3, r3, r1
 800696c:	2120      	movs	r1, #32
 800696e:	7019      	strb	r1, [r3, #0]
 8006970:	0713      	lsls	r3, r2, #28
 8006972:	d504      	bpl.n	800697e <_svfiprintf_r+0xc6>
 8006974:	2353      	movs	r3, #83	; 0x53
 8006976:	a904      	add	r1, sp, #16
 8006978:	185b      	adds	r3, r3, r1
 800697a:	212b      	movs	r1, #43	; 0x2b
 800697c:	7019      	strb	r1, [r3, #0]
 800697e:	7833      	ldrb	r3, [r6, #0]
 8006980:	2b2a      	cmp	r3, #42	; 0x2a
 8006982:	d016      	beq.n	80069b2 <_svfiprintf_r+0xfa>
 8006984:	0035      	movs	r5, r6
 8006986:	2100      	movs	r1, #0
 8006988:	200a      	movs	r0, #10
 800698a:	68e3      	ldr	r3, [r4, #12]
 800698c:	782a      	ldrb	r2, [r5, #0]
 800698e:	1c6e      	adds	r6, r5, #1
 8006990:	3a30      	subs	r2, #48	; 0x30
 8006992:	2a09      	cmp	r2, #9
 8006994:	d94e      	bls.n	8006a34 <_svfiprintf_r+0x17c>
 8006996:	2900      	cmp	r1, #0
 8006998:	d111      	bne.n	80069be <_svfiprintf_r+0x106>
 800699a:	e017      	b.n	80069cc <_svfiprintf_r+0x114>
 800699c:	3501      	adds	r5, #1
 800699e:	e7af      	b.n	8006900 <_svfiprintf_r+0x48>
 80069a0:	9b05      	ldr	r3, [sp, #20]
 80069a2:	6822      	ldr	r2, [r4, #0]
 80069a4:	1ac0      	subs	r0, r0, r3
 80069a6:	2301      	movs	r3, #1
 80069a8:	4083      	lsls	r3, r0
 80069aa:	4313      	orrs	r3, r2
 80069ac:	002e      	movs	r6, r5
 80069ae:	6023      	str	r3, [r4, #0]
 80069b0:	e7cc      	b.n	800694c <_svfiprintf_r+0x94>
 80069b2:	9b07      	ldr	r3, [sp, #28]
 80069b4:	1d19      	adds	r1, r3, #4
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	9107      	str	r1, [sp, #28]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	db01      	blt.n	80069c2 <_svfiprintf_r+0x10a>
 80069be:	930b      	str	r3, [sp, #44]	; 0x2c
 80069c0:	e004      	b.n	80069cc <_svfiprintf_r+0x114>
 80069c2:	425b      	negs	r3, r3
 80069c4:	60e3      	str	r3, [r4, #12]
 80069c6:	2302      	movs	r3, #2
 80069c8:	4313      	orrs	r3, r2
 80069ca:	6023      	str	r3, [r4, #0]
 80069cc:	782b      	ldrb	r3, [r5, #0]
 80069ce:	2b2e      	cmp	r3, #46	; 0x2e
 80069d0:	d10a      	bne.n	80069e8 <_svfiprintf_r+0x130>
 80069d2:	786b      	ldrb	r3, [r5, #1]
 80069d4:	2b2a      	cmp	r3, #42	; 0x2a
 80069d6:	d135      	bne.n	8006a44 <_svfiprintf_r+0x18c>
 80069d8:	9b07      	ldr	r3, [sp, #28]
 80069da:	3502      	adds	r5, #2
 80069dc:	1d1a      	adds	r2, r3, #4
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	9207      	str	r2, [sp, #28]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	db2b      	blt.n	8006a3e <_svfiprintf_r+0x186>
 80069e6:	9309      	str	r3, [sp, #36]	; 0x24
 80069e8:	4e2f      	ldr	r6, [pc, #188]	; (8006aa8 <_svfiprintf_r+0x1f0>)
 80069ea:	2203      	movs	r2, #3
 80069ec:	0030      	movs	r0, r6
 80069ee:	7829      	ldrb	r1, [r5, #0]
 80069f0:	f000 fa08 	bl	8006e04 <memchr>
 80069f4:	2800      	cmp	r0, #0
 80069f6:	d006      	beq.n	8006a06 <_svfiprintf_r+0x14e>
 80069f8:	2340      	movs	r3, #64	; 0x40
 80069fa:	1b80      	subs	r0, r0, r6
 80069fc:	4083      	lsls	r3, r0
 80069fe:	6822      	ldr	r2, [r4, #0]
 8006a00:	3501      	adds	r5, #1
 8006a02:	4313      	orrs	r3, r2
 8006a04:	6023      	str	r3, [r4, #0]
 8006a06:	7829      	ldrb	r1, [r5, #0]
 8006a08:	2206      	movs	r2, #6
 8006a0a:	4828      	ldr	r0, [pc, #160]	; (8006aac <_svfiprintf_r+0x1f4>)
 8006a0c:	1c6e      	adds	r6, r5, #1
 8006a0e:	7621      	strb	r1, [r4, #24]
 8006a10:	f000 f9f8 	bl	8006e04 <memchr>
 8006a14:	2800      	cmp	r0, #0
 8006a16:	d03c      	beq.n	8006a92 <_svfiprintf_r+0x1da>
 8006a18:	4b25      	ldr	r3, [pc, #148]	; (8006ab0 <_svfiprintf_r+0x1f8>)
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d125      	bne.n	8006a6a <_svfiprintf_r+0x1b2>
 8006a1e:	2207      	movs	r2, #7
 8006a20:	9b07      	ldr	r3, [sp, #28]
 8006a22:	3307      	adds	r3, #7
 8006a24:	4393      	bics	r3, r2
 8006a26:	3308      	adds	r3, #8
 8006a28:	9307      	str	r3, [sp, #28]
 8006a2a:	6963      	ldr	r3, [r4, #20]
 8006a2c:	9a04      	ldr	r2, [sp, #16]
 8006a2e:	189b      	adds	r3, r3, r2
 8006a30:	6163      	str	r3, [r4, #20]
 8006a32:	e764      	b.n	80068fe <_svfiprintf_r+0x46>
 8006a34:	4343      	muls	r3, r0
 8006a36:	0035      	movs	r5, r6
 8006a38:	2101      	movs	r1, #1
 8006a3a:	189b      	adds	r3, r3, r2
 8006a3c:	e7a6      	b.n	800698c <_svfiprintf_r+0xd4>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	425b      	negs	r3, r3
 8006a42:	e7d0      	b.n	80069e6 <_svfiprintf_r+0x12e>
 8006a44:	2300      	movs	r3, #0
 8006a46:	200a      	movs	r0, #10
 8006a48:	001a      	movs	r2, r3
 8006a4a:	3501      	adds	r5, #1
 8006a4c:	6063      	str	r3, [r4, #4]
 8006a4e:	7829      	ldrb	r1, [r5, #0]
 8006a50:	1c6e      	adds	r6, r5, #1
 8006a52:	3930      	subs	r1, #48	; 0x30
 8006a54:	2909      	cmp	r1, #9
 8006a56:	d903      	bls.n	8006a60 <_svfiprintf_r+0x1a8>
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d0c5      	beq.n	80069e8 <_svfiprintf_r+0x130>
 8006a5c:	9209      	str	r2, [sp, #36]	; 0x24
 8006a5e:	e7c3      	b.n	80069e8 <_svfiprintf_r+0x130>
 8006a60:	4342      	muls	r2, r0
 8006a62:	0035      	movs	r5, r6
 8006a64:	2301      	movs	r3, #1
 8006a66:	1852      	adds	r2, r2, r1
 8006a68:	e7f1      	b.n	8006a4e <_svfiprintf_r+0x196>
 8006a6a:	aa07      	add	r2, sp, #28
 8006a6c:	9200      	str	r2, [sp, #0]
 8006a6e:	0021      	movs	r1, r4
 8006a70:	003a      	movs	r2, r7
 8006a72:	4b10      	ldr	r3, [pc, #64]	; (8006ab4 <_svfiprintf_r+0x1fc>)
 8006a74:	9803      	ldr	r0, [sp, #12]
 8006a76:	e000      	b.n	8006a7a <_svfiprintf_r+0x1c2>
 8006a78:	bf00      	nop
 8006a7a:	9004      	str	r0, [sp, #16]
 8006a7c:	9b04      	ldr	r3, [sp, #16]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	d1d3      	bne.n	8006a2a <_svfiprintf_r+0x172>
 8006a82:	89bb      	ldrh	r3, [r7, #12]
 8006a84:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006a86:	065b      	lsls	r3, r3, #25
 8006a88:	d400      	bmi.n	8006a8c <_svfiprintf_r+0x1d4>
 8006a8a:	e72c      	b.n	80068e6 <_svfiprintf_r+0x2e>
 8006a8c:	2001      	movs	r0, #1
 8006a8e:	4240      	negs	r0, r0
 8006a90:	e729      	b.n	80068e6 <_svfiprintf_r+0x2e>
 8006a92:	aa07      	add	r2, sp, #28
 8006a94:	9200      	str	r2, [sp, #0]
 8006a96:	0021      	movs	r1, r4
 8006a98:	003a      	movs	r2, r7
 8006a9a:	4b06      	ldr	r3, [pc, #24]	; (8006ab4 <_svfiprintf_r+0x1fc>)
 8006a9c:	9803      	ldr	r0, [sp, #12]
 8006a9e:	f000 f87b 	bl	8006b98 <_printf_i>
 8006aa2:	e7ea      	b.n	8006a7a <_svfiprintf_r+0x1c2>
 8006aa4:	08007564 	.word	0x08007564
 8006aa8:	0800756a 	.word	0x0800756a
 8006aac:	0800756e 	.word	0x0800756e
 8006ab0:	00000000 	.word	0x00000000
 8006ab4:	080067f5 	.word	0x080067f5

08006ab8 <_printf_common>:
 8006ab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006aba:	0016      	movs	r6, r2
 8006abc:	9301      	str	r3, [sp, #4]
 8006abe:	688a      	ldr	r2, [r1, #8]
 8006ac0:	690b      	ldr	r3, [r1, #16]
 8006ac2:	000c      	movs	r4, r1
 8006ac4:	9000      	str	r0, [sp, #0]
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	da00      	bge.n	8006acc <_printf_common+0x14>
 8006aca:	0013      	movs	r3, r2
 8006acc:	0022      	movs	r2, r4
 8006ace:	6033      	str	r3, [r6, #0]
 8006ad0:	3243      	adds	r2, #67	; 0x43
 8006ad2:	7812      	ldrb	r2, [r2, #0]
 8006ad4:	2a00      	cmp	r2, #0
 8006ad6:	d001      	beq.n	8006adc <_printf_common+0x24>
 8006ad8:	3301      	adds	r3, #1
 8006ada:	6033      	str	r3, [r6, #0]
 8006adc:	6823      	ldr	r3, [r4, #0]
 8006ade:	069b      	lsls	r3, r3, #26
 8006ae0:	d502      	bpl.n	8006ae8 <_printf_common+0x30>
 8006ae2:	6833      	ldr	r3, [r6, #0]
 8006ae4:	3302      	adds	r3, #2
 8006ae6:	6033      	str	r3, [r6, #0]
 8006ae8:	6822      	ldr	r2, [r4, #0]
 8006aea:	2306      	movs	r3, #6
 8006aec:	0015      	movs	r5, r2
 8006aee:	401d      	ands	r5, r3
 8006af0:	421a      	tst	r2, r3
 8006af2:	d027      	beq.n	8006b44 <_printf_common+0x8c>
 8006af4:	0023      	movs	r3, r4
 8006af6:	3343      	adds	r3, #67	; 0x43
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	1e5a      	subs	r2, r3, #1
 8006afc:	4193      	sbcs	r3, r2
 8006afe:	6822      	ldr	r2, [r4, #0]
 8006b00:	0692      	lsls	r2, r2, #26
 8006b02:	d430      	bmi.n	8006b66 <_printf_common+0xae>
 8006b04:	0022      	movs	r2, r4
 8006b06:	9901      	ldr	r1, [sp, #4]
 8006b08:	9800      	ldr	r0, [sp, #0]
 8006b0a:	9d08      	ldr	r5, [sp, #32]
 8006b0c:	3243      	adds	r2, #67	; 0x43
 8006b0e:	47a8      	blx	r5
 8006b10:	3001      	adds	r0, #1
 8006b12:	d025      	beq.n	8006b60 <_printf_common+0xa8>
 8006b14:	2206      	movs	r2, #6
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	2500      	movs	r5, #0
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	2b04      	cmp	r3, #4
 8006b1e:	d105      	bne.n	8006b2c <_printf_common+0x74>
 8006b20:	6833      	ldr	r3, [r6, #0]
 8006b22:	68e5      	ldr	r5, [r4, #12]
 8006b24:	1aed      	subs	r5, r5, r3
 8006b26:	43eb      	mvns	r3, r5
 8006b28:	17db      	asrs	r3, r3, #31
 8006b2a:	401d      	ands	r5, r3
 8006b2c:	68a3      	ldr	r3, [r4, #8]
 8006b2e:	6922      	ldr	r2, [r4, #16]
 8006b30:	4293      	cmp	r3, r2
 8006b32:	dd01      	ble.n	8006b38 <_printf_common+0x80>
 8006b34:	1a9b      	subs	r3, r3, r2
 8006b36:	18ed      	adds	r5, r5, r3
 8006b38:	2600      	movs	r6, #0
 8006b3a:	42b5      	cmp	r5, r6
 8006b3c:	d120      	bne.n	8006b80 <_printf_common+0xc8>
 8006b3e:	2000      	movs	r0, #0
 8006b40:	e010      	b.n	8006b64 <_printf_common+0xac>
 8006b42:	3501      	adds	r5, #1
 8006b44:	68e3      	ldr	r3, [r4, #12]
 8006b46:	6832      	ldr	r2, [r6, #0]
 8006b48:	1a9b      	subs	r3, r3, r2
 8006b4a:	42ab      	cmp	r3, r5
 8006b4c:	ddd2      	ble.n	8006af4 <_printf_common+0x3c>
 8006b4e:	0022      	movs	r2, r4
 8006b50:	2301      	movs	r3, #1
 8006b52:	9901      	ldr	r1, [sp, #4]
 8006b54:	9800      	ldr	r0, [sp, #0]
 8006b56:	9f08      	ldr	r7, [sp, #32]
 8006b58:	3219      	adds	r2, #25
 8006b5a:	47b8      	blx	r7
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	d1f0      	bne.n	8006b42 <_printf_common+0x8a>
 8006b60:	2001      	movs	r0, #1
 8006b62:	4240      	negs	r0, r0
 8006b64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b66:	2030      	movs	r0, #48	; 0x30
 8006b68:	18e1      	adds	r1, r4, r3
 8006b6a:	3143      	adds	r1, #67	; 0x43
 8006b6c:	7008      	strb	r0, [r1, #0]
 8006b6e:	0021      	movs	r1, r4
 8006b70:	1c5a      	adds	r2, r3, #1
 8006b72:	3145      	adds	r1, #69	; 0x45
 8006b74:	7809      	ldrb	r1, [r1, #0]
 8006b76:	18a2      	adds	r2, r4, r2
 8006b78:	3243      	adds	r2, #67	; 0x43
 8006b7a:	3302      	adds	r3, #2
 8006b7c:	7011      	strb	r1, [r2, #0]
 8006b7e:	e7c1      	b.n	8006b04 <_printf_common+0x4c>
 8006b80:	0022      	movs	r2, r4
 8006b82:	2301      	movs	r3, #1
 8006b84:	9901      	ldr	r1, [sp, #4]
 8006b86:	9800      	ldr	r0, [sp, #0]
 8006b88:	9f08      	ldr	r7, [sp, #32]
 8006b8a:	321a      	adds	r2, #26
 8006b8c:	47b8      	blx	r7
 8006b8e:	3001      	adds	r0, #1
 8006b90:	d0e6      	beq.n	8006b60 <_printf_common+0xa8>
 8006b92:	3601      	adds	r6, #1
 8006b94:	e7d1      	b.n	8006b3a <_printf_common+0x82>
	...

08006b98 <_printf_i>:
 8006b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b9a:	b08b      	sub	sp, #44	; 0x2c
 8006b9c:	9206      	str	r2, [sp, #24]
 8006b9e:	000a      	movs	r2, r1
 8006ba0:	3243      	adds	r2, #67	; 0x43
 8006ba2:	9307      	str	r3, [sp, #28]
 8006ba4:	9005      	str	r0, [sp, #20]
 8006ba6:	9204      	str	r2, [sp, #16]
 8006ba8:	7e0a      	ldrb	r2, [r1, #24]
 8006baa:	000c      	movs	r4, r1
 8006bac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006bae:	2a78      	cmp	r2, #120	; 0x78
 8006bb0:	d809      	bhi.n	8006bc6 <_printf_i+0x2e>
 8006bb2:	2a62      	cmp	r2, #98	; 0x62
 8006bb4:	d80b      	bhi.n	8006bce <_printf_i+0x36>
 8006bb6:	2a00      	cmp	r2, #0
 8006bb8:	d100      	bne.n	8006bbc <_printf_i+0x24>
 8006bba:	e0be      	b.n	8006d3a <_printf_i+0x1a2>
 8006bbc:	497c      	ldr	r1, [pc, #496]	; (8006db0 <_printf_i+0x218>)
 8006bbe:	9103      	str	r1, [sp, #12]
 8006bc0:	2a58      	cmp	r2, #88	; 0x58
 8006bc2:	d100      	bne.n	8006bc6 <_printf_i+0x2e>
 8006bc4:	e093      	b.n	8006cee <_printf_i+0x156>
 8006bc6:	0026      	movs	r6, r4
 8006bc8:	3642      	adds	r6, #66	; 0x42
 8006bca:	7032      	strb	r2, [r6, #0]
 8006bcc:	e022      	b.n	8006c14 <_printf_i+0x7c>
 8006bce:	0010      	movs	r0, r2
 8006bd0:	3863      	subs	r0, #99	; 0x63
 8006bd2:	2815      	cmp	r0, #21
 8006bd4:	d8f7      	bhi.n	8006bc6 <_printf_i+0x2e>
 8006bd6:	f7f9 fa97 	bl	8000108 <__gnu_thumb1_case_shi>
 8006bda:	0016      	.short	0x0016
 8006bdc:	fff6001f 	.word	0xfff6001f
 8006be0:	fff6fff6 	.word	0xfff6fff6
 8006be4:	001ffff6 	.word	0x001ffff6
 8006be8:	fff6fff6 	.word	0xfff6fff6
 8006bec:	fff6fff6 	.word	0xfff6fff6
 8006bf0:	003600a3 	.word	0x003600a3
 8006bf4:	fff60083 	.word	0xfff60083
 8006bf8:	00b4fff6 	.word	0x00b4fff6
 8006bfc:	0036fff6 	.word	0x0036fff6
 8006c00:	fff6fff6 	.word	0xfff6fff6
 8006c04:	0087      	.short	0x0087
 8006c06:	0026      	movs	r6, r4
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	3642      	adds	r6, #66	; 0x42
 8006c0c:	1d11      	adds	r1, r2, #4
 8006c0e:	6019      	str	r1, [r3, #0]
 8006c10:	6813      	ldr	r3, [r2, #0]
 8006c12:	7033      	strb	r3, [r6, #0]
 8006c14:	2301      	movs	r3, #1
 8006c16:	e0a2      	b.n	8006d5e <_printf_i+0x1c6>
 8006c18:	6818      	ldr	r0, [r3, #0]
 8006c1a:	6809      	ldr	r1, [r1, #0]
 8006c1c:	1d02      	adds	r2, r0, #4
 8006c1e:	060d      	lsls	r5, r1, #24
 8006c20:	d50b      	bpl.n	8006c3a <_printf_i+0xa2>
 8006c22:	6805      	ldr	r5, [r0, #0]
 8006c24:	601a      	str	r2, [r3, #0]
 8006c26:	2d00      	cmp	r5, #0
 8006c28:	da03      	bge.n	8006c32 <_printf_i+0x9a>
 8006c2a:	232d      	movs	r3, #45	; 0x2d
 8006c2c:	9a04      	ldr	r2, [sp, #16]
 8006c2e:	426d      	negs	r5, r5
 8006c30:	7013      	strb	r3, [r2, #0]
 8006c32:	4b5f      	ldr	r3, [pc, #380]	; (8006db0 <_printf_i+0x218>)
 8006c34:	270a      	movs	r7, #10
 8006c36:	9303      	str	r3, [sp, #12]
 8006c38:	e01b      	b.n	8006c72 <_printf_i+0xda>
 8006c3a:	6805      	ldr	r5, [r0, #0]
 8006c3c:	601a      	str	r2, [r3, #0]
 8006c3e:	0649      	lsls	r1, r1, #25
 8006c40:	d5f1      	bpl.n	8006c26 <_printf_i+0x8e>
 8006c42:	b22d      	sxth	r5, r5
 8006c44:	e7ef      	b.n	8006c26 <_printf_i+0x8e>
 8006c46:	680d      	ldr	r5, [r1, #0]
 8006c48:	6819      	ldr	r1, [r3, #0]
 8006c4a:	1d08      	adds	r0, r1, #4
 8006c4c:	6018      	str	r0, [r3, #0]
 8006c4e:	062e      	lsls	r6, r5, #24
 8006c50:	d501      	bpl.n	8006c56 <_printf_i+0xbe>
 8006c52:	680d      	ldr	r5, [r1, #0]
 8006c54:	e003      	b.n	8006c5e <_printf_i+0xc6>
 8006c56:	066d      	lsls	r5, r5, #25
 8006c58:	d5fb      	bpl.n	8006c52 <_printf_i+0xba>
 8006c5a:	680d      	ldr	r5, [r1, #0]
 8006c5c:	b2ad      	uxth	r5, r5
 8006c5e:	4b54      	ldr	r3, [pc, #336]	; (8006db0 <_printf_i+0x218>)
 8006c60:	2708      	movs	r7, #8
 8006c62:	9303      	str	r3, [sp, #12]
 8006c64:	2a6f      	cmp	r2, #111	; 0x6f
 8006c66:	d000      	beq.n	8006c6a <_printf_i+0xd2>
 8006c68:	3702      	adds	r7, #2
 8006c6a:	0023      	movs	r3, r4
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	3343      	adds	r3, #67	; 0x43
 8006c70:	701a      	strb	r2, [r3, #0]
 8006c72:	6863      	ldr	r3, [r4, #4]
 8006c74:	60a3      	str	r3, [r4, #8]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	db03      	blt.n	8006c82 <_printf_i+0xea>
 8006c7a:	2104      	movs	r1, #4
 8006c7c:	6822      	ldr	r2, [r4, #0]
 8006c7e:	438a      	bics	r2, r1
 8006c80:	6022      	str	r2, [r4, #0]
 8006c82:	2d00      	cmp	r5, #0
 8006c84:	d102      	bne.n	8006c8c <_printf_i+0xf4>
 8006c86:	9e04      	ldr	r6, [sp, #16]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00c      	beq.n	8006ca6 <_printf_i+0x10e>
 8006c8c:	9e04      	ldr	r6, [sp, #16]
 8006c8e:	0028      	movs	r0, r5
 8006c90:	0039      	movs	r1, r7
 8006c92:	f7f9 fac9 	bl	8000228 <__aeabi_uidivmod>
 8006c96:	9b03      	ldr	r3, [sp, #12]
 8006c98:	3e01      	subs	r6, #1
 8006c9a:	5c5b      	ldrb	r3, [r3, r1]
 8006c9c:	7033      	strb	r3, [r6, #0]
 8006c9e:	002b      	movs	r3, r5
 8006ca0:	0005      	movs	r5, r0
 8006ca2:	429f      	cmp	r7, r3
 8006ca4:	d9f3      	bls.n	8006c8e <_printf_i+0xf6>
 8006ca6:	2f08      	cmp	r7, #8
 8006ca8:	d109      	bne.n	8006cbe <_printf_i+0x126>
 8006caa:	6823      	ldr	r3, [r4, #0]
 8006cac:	07db      	lsls	r3, r3, #31
 8006cae:	d506      	bpl.n	8006cbe <_printf_i+0x126>
 8006cb0:	6862      	ldr	r2, [r4, #4]
 8006cb2:	6923      	ldr	r3, [r4, #16]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	dc02      	bgt.n	8006cbe <_printf_i+0x126>
 8006cb8:	2330      	movs	r3, #48	; 0x30
 8006cba:	3e01      	subs	r6, #1
 8006cbc:	7033      	strb	r3, [r6, #0]
 8006cbe:	9b04      	ldr	r3, [sp, #16]
 8006cc0:	1b9b      	subs	r3, r3, r6
 8006cc2:	6123      	str	r3, [r4, #16]
 8006cc4:	9b07      	ldr	r3, [sp, #28]
 8006cc6:	0021      	movs	r1, r4
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	9805      	ldr	r0, [sp, #20]
 8006ccc:	9b06      	ldr	r3, [sp, #24]
 8006cce:	aa09      	add	r2, sp, #36	; 0x24
 8006cd0:	f7ff fef2 	bl	8006ab8 <_printf_common>
 8006cd4:	3001      	adds	r0, #1
 8006cd6:	d147      	bne.n	8006d68 <_printf_i+0x1d0>
 8006cd8:	2001      	movs	r0, #1
 8006cda:	4240      	negs	r0, r0
 8006cdc:	b00b      	add	sp, #44	; 0x2c
 8006cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ce0:	2220      	movs	r2, #32
 8006ce2:	6809      	ldr	r1, [r1, #0]
 8006ce4:	430a      	orrs	r2, r1
 8006ce6:	6022      	str	r2, [r4, #0]
 8006ce8:	2278      	movs	r2, #120	; 0x78
 8006cea:	4932      	ldr	r1, [pc, #200]	; (8006db4 <_printf_i+0x21c>)
 8006cec:	9103      	str	r1, [sp, #12]
 8006cee:	0021      	movs	r1, r4
 8006cf0:	3145      	adds	r1, #69	; 0x45
 8006cf2:	700a      	strb	r2, [r1, #0]
 8006cf4:	6819      	ldr	r1, [r3, #0]
 8006cf6:	6822      	ldr	r2, [r4, #0]
 8006cf8:	c920      	ldmia	r1!, {r5}
 8006cfa:	0610      	lsls	r0, r2, #24
 8006cfc:	d402      	bmi.n	8006d04 <_printf_i+0x16c>
 8006cfe:	0650      	lsls	r0, r2, #25
 8006d00:	d500      	bpl.n	8006d04 <_printf_i+0x16c>
 8006d02:	b2ad      	uxth	r5, r5
 8006d04:	6019      	str	r1, [r3, #0]
 8006d06:	07d3      	lsls	r3, r2, #31
 8006d08:	d502      	bpl.n	8006d10 <_printf_i+0x178>
 8006d0a:	2320      	movs	r3, #32
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	6023      	str	r3, [r4, #0]
 8006d10:	2710      	movs	r7, #16
 8006d12:	2d00      	cmp	r5, #0
 8006d14:	d1a9      	bne.n	8006c6a <_printf_i+0xd2>
 8006d16:	2220      	movs	r2, #32
 8006d18:	6823      	ldr	r3, [r4, #0]
 8006d1a:	4393      	bics	r3, r2
 8006d1c:	6023      	str	r3, [r4, #0]
 8006d1e:	e7a4      	b.n	8006c6a <_printf_i+0xd2>
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	680d      	ldr	r5, [r1, #0]
 8006d24:	1d10      	adds	r0, r2, #4
 8006d26:	6949      	ldr	r1, [r1, #20]
 8006d28:	6018      	str	r0, [r3, #0]
 8006d2a:	6813      	ldr	r3, [r2, #0]
 8006d2c:	062e      	lsls	r6, r5, #24
 8006d2e:	d501      	bpl.n	8006d34 <_printf_i+0x19c>
 8006d30:	6019      	str	r1, [r3, #0]
 8006d32:	e002      	b.n	8006d3a <_printf_i+0x1a2>
 8006d34:	066d      	lsls	r5, r5, #25
 8006d36:	d5fb      	bpl.n	8006d30 <_printf_i+0x198>
 8006d38:	8019      	strh	r1, [r3, #0]
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	9e04      	ldr	r6, [sp, #16]
 8006d3e:	6123      	str	r3, [r4, #16]
 8006d40:	e7c0      	b.n	8006cc4 <_printf_i+0x12c>
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	1d11      	adds	r1, r2, #4
 8006d46:	6019      	str	r1, [r3, #0]
 8006d48:	6816      	ldr	r6, [r2, #0]
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	0030      	movs	r0, r6
 8006d4e:	6862      	ldr	r2, [r4, #4]
 8006d50:	f000 f858 	bl	8006e04 <memchr>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	d001      	beq.n	8006d5c <_printf_i+0x1c4>
 8006d58:	1b80      	subs	r0, r0, r6
 8006d5a:	6060      	str	r0, [r4, #4]
 8006d5c:	6863      	ldr	r3, [r4, #4]
 8006d5e:	6123      	str	r3, [r4, #16]
 8006d60:	2300      	movs	r3, #0
 8006d62:	9a04      	ldr	r2, [sp, #16]
 8006d64:	7013      	strb	r3, [r2, #0]
 8006d66:	e7ad      	b.n	8006cc4 <_printf_i+0x12c>
 8006d68:	0032      	movs	r2, r6
 8006d6a:	6923      	ldr	r3, [r4, #16]
 8006d6c:	9906      	ldr	r1, [sp, #24]
 8006d6e:	9805      	ldr	r0, [sp, #20]
 8006d70:	9d07      	ldr	r5, [sp, #28]
 8006d72:	47a8      	blx	r5
 8006d74:	3001      	adds	r0, #1
 8006d76:	d0af      	beq.n	8006cd8 <_printf_i+0x140>
 8006d78:	6823      	ldr	r3, [r4, #0]
 8006d7a:	079b      	lsls	r3, r3, #30
 8006d7c:	d415      	bmi.n	8006daa <_printf_i+0x212>
 8006d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d80:	68e0      	ldr	r0, [r4, #12]
 8006d82:	4298      	cmp	r0, r3
 8006d84:	daaa      	bge.n	8006cdc <_printf_i+0x144>
 8006d86:	0018      	movs	r0, r3
 8006d88:	e7a8      	b.n	8006cdc <_printf_i+0x144>
 8006d8a:	0022      	movs	r2, r4
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	9906      	ldr	r1, [sp, #24]
 8006d90:	9805      	ldr	r0, [sp, #20]
 8006d92:	9e07      	ldr	r6, [sp, #28]
 8006d94:	3219      	adds	r2, #25
 8006d96:	47b0      	blx	r6
 8006d98:	3001      	adds	r0, #1
 8006d9a:	d09d      	beq.n	8006cd8 <_printf_i+0x140>
 8006d9c:	3501      	adds	r5, #1
 8006d9e:	68e3      	ldr	r3, [r4, #12]
 8006da0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006da2:	1a9b      	subs	r3, r3, r2
 8006da4:	42ab      	cmp	r3, r5
 8006da6:	dcf0      	bgt.n	8006d8a <_printf_i+0x1f2>
 8006da8:	e7e9      	b.n	8006d7e <_printf_i+0x1e6>
 8006daa:	2500      	movs	r5, #0
 8006dac:	e7f7      	b.n	8006d9e <_printf_i+0x206>
 8006dae:	46c0      	nop			; (mov r8, r8)
 8006db0:	08007575 	.word	0x08007575
 8006db4:	08007586 	.word	0x08007586

08006db8 <memmove>:
 8006db8:	b510      	push	{r4, lr}
 8006dba:	4288      	cmp	r0, r1
 8006dbc:	d902      	bls.n	8006dc4 <memmove+0xc>
 8006dbe:	188b      	adds	r3, r1, r2
 8006dc0:	4298      	cmp	r0, r3
 8006dc2:	d303      	bcc.n	8006dcc <memmove+0x14>
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	e007      	b.n	8006dd8 <memmove+0x20>
 8006dc8:	5c8b      	ldrb	r3, [r1, r2]
 8006dca:	5483      	strb	r3, [r0, r2]
 8006dcc:	3a01      	subs	r2, #1
 8006dce:	d2fb      	bcs.n	8006dc8 <memmove+0x10>
 8006dd0:	bd10      	pop	{r4, pc}
 8006dd2:	5ccc      	ldrb	r4, [r1, r3]
 8006dd4:	54c4      	strb	r4, [r0, r3]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d1fa      	bne.n	8006dd2 <memmove+0x1a>
 8006ddc:	e7f8      	b.n	8006dd0 <memmove+0x18>
	...

08006de0 <_sbrk_r>:
 8006de0:	2300      	movs	r3, #0
 8006de2:	b570      	push	{r4, r5, r6, lr}
 8006de4:	4d06      	ldr	r5, [pc, #24]	; (8006e00 <_sbrk_r+0x20>)
 8006de6:	0004      	movs	r4, r0
 8006de8:	0008      	movs	r0, r1
 8006dea:	602b      	str	r3, [r5, #0]
 8006dec:	f7fb fb76 	bl	80024dc <_sbrk>
 8006df0:	1c43      	adds	r3, r0, #1
 8006df2:	d103      	bne.n	8006dfc <_sbrk_r+0x1c>
 8006df4:	682b      	ldr	r3, [r5, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d000      	beq.n	8006dfc <_sbrk_r+0x1c>
 8006dfa:	6023      	str	r3, [r4, #0]
 8006dfc:	bd70      	pop	{r4, r5, r6, pc}
 8006dfe:	46c0      	nop			; (mov r8, r8)
 8006e00:	2000116c 	.word	0x2000116c

08006e04 <memchr>:
 8006e04:	b2c9      	uxtb	r1, r1
 8006e06:	1882      	adds	r2, r0, r2
 8006e08:	4290      	cmp	r0, r2
 8006e0a:	d101      	bne.n	8006e10 <memchr+0xc>
 8006e0c:	2000      	movs	r0, #0
 8006e0e:	4770      	bx	lr
 8006e10:	7803      	ldrb	r3, [r0, #0]
 8006e12:	428b      	cmp	r3, r1
 8006e14:	d0fb      	beq.n	8006e0e <memchr+0xa>
 8006e16:	3001      	adds	r0, #1
 8006e18:	e7f6      	b.n	8006e08 <memchr+0x4>

08006e1a <_realloc_r>:
 8006e1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e1c:	0007      	movs	r7, r0
 8006e1e:	000e      	movs	r6, r1
 8006e20:	0014      	movs	r4, r2
 8006e22:	2900      	cmp	r1, #0
 8006e24:	d105      	bne.n	8006e32 <_realloc_r+0x18>
 8006e26:	0011      	movs	r1, r2
 8006e28:	f7ff fc52 	bl	80066d0 <_malloc_r>
 8006e2c:	0005      	movs	r5, r0
 8006e2e:	0028      	movs	r0, r5
 8006e30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e32:	2a00      	cmp	r2, #0
 8006e34:	d103      	bne.n	8006e3e <_realloc_r+0x24>
 8006e36:	f7ff fbdf 	bl	80065f8 <_free_r>
 8006e3a:	0025      	movs	r5, r4
 8006e3c:	e7f7      	b.n	8006e2e <_realloc_r+0x14>
 8006e3e:	f000 f81b 	bl	8006e78 <_malloc_usable_size_r>
 8006e42:	9001      	str	r0, [sp, #4]
 8006e44:	4284      	cmp	r4, r0
 8006e46:	d803      	bhi.n	8006e50 <_realloc_r+0x36>
 8006e48:	0035      	movs	r5, r6
 8006e4a:	0843      	lsrs	r3, r0, #1
 8006e4c:	42a3      	cmp	r3, r4
 8006e4e:	d3ee      	bcc.n	8006e2e <_realloc_r+0x14>
 8006e50:	0021      	movs	r1, r4
 8006e52:	0038      	movs	r0, r7
 8006e54:	f7ff fc3c 	bl	80066d0 <_malloc_r>
 8006e58:	1e05      	subs	r5, r0, #0
 8006e5a:	d0e8      	beq.n	8006e2e <_realloc_r+0x14>
 8006e5c:	9b01      	ldr	r3, [sp, #4]
 8006e5e:	0022      	movs	r2, r4
 8006e60:	429c      	cmp	r4, r3
 8006e62:	d900      	bls.n	8006e66 <_realloc_r+0x4c>
 8006e64:	001a      	movs	r2, r3
 8006e66:	0031      	movs	r1, r6
 8006e68:	0028      	movs	r0, r5
 8006e6a:	f7ff fbbb 	bl	80065e4 <memcpy>
 8006e6e:	0031      	movs	r1, r6
 8006e70:	0038      	movs	r0, r7
 8006e72:	f7ff fbc1 	bl	80065f8 <_free_r>
 8006e76:	e7da      	b.n	8006e2e <_realloc_r+0x14>

08006e78 <_malloc_usable_size_r>:
 8006e78:	1f0b      	subs	r3, r1, #4
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	1f18      	subs	r0, r3, #4
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	da01      	bge.n	8006e86 <_malloc_usable_size_r+0xe>
 8006e82:	580b      	ldr	r3, [r1, r0]
 8006e84:	18c0      	adds	r0, r0, r3
 8006e86:	4770      	bx	lr

08006e88 <_init>:
 8006e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8a:	46c0      	nop			; (mov r8, r8)
 8006e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e8e:	bc08      	pop	{r3}
 8006e90:	469e      	mov	lr, r3
 8006e92:	4770      	bx	lr

08006e94 <_fini>:
 8006e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e96:	46c0      	nop			; (mov r8, r8)
 8006e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e9a:	bc08      	pop	{r3}
 8006e9c:	469e      	mov	lr, r3
 8006e9e:	4770      	bx	lr
