
DICV3Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a14  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000714  08007ad4  08007ad4  00017ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081e8  080081e8  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080081e8  080081e8  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080081e8  080081e8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081e8  080081e8  000181e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081ec  080081ec  000181ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080081f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001510  20000060  08008250  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001570  08008250  00021570  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011fba  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000324c  00000000  00000000  00032085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001158  00000000  00000000  000352d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d7a  00000000  00000000  00036430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c262  00000000  00000000  000371aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015ea0  00000000  00000000  0005340c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009db57  00000000  00000000  000692ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042c4  00000000  00000000  00106e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0010b0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007abc 	.word	0x08007abc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08007abc 	.word	0x08007abc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <write_ctrl>:
    ADC_SENSOR_NORMAL, ADC_SENSOR_NORMAL, ADC_SENSOR_NORMAL, ADC_SENSOR_NORMAL
};

// --- kleine Helfer ---
static inline void write_ctrl(uint8_t ch, ADC_SupplyMode_t s)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	0002      	movs	r2, r0
 8000420:	1dfb      	adds	r3, r7, #7
 8000422:	701a      	strb	r2, [r3, #0]
 8000424:	1dbb      	adds	r3, r7, #6
 8000426:	1c0a      	adds	r2, r1, #0
 8000428:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(adc_gpio[ch].ctrl_port, adc_gpio[ch].ctrl_pin,
 800042a:	1dfb      	adds	r3, r7, #7
 800042c:	781a      	ldrb	r2, [r3, #0]
 800042e:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <write_ctrl+0x50>)
 8000430:	0112      	lsls	r2, r2, #4
 8000432:	58d0      	ldr	r0, [r2, r3]
 8000434:	1dfb      	adds	r3, r7, #7
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	4a0b      	ldr	r2, [pc, #44]	; (8000468 <write_ctrl+0x50>)
 800043a:	011b      	lsls	r3, r3, #4
 800043c:	18d3      	adds	r3, r2, r3
 800043e:	3304      	adds	r3, #4
 8000440:	8819      	ldrh	r1, [r3, #0]
 8000442:	1dbb      	adds	r3, r7, #6
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	3b01      	subs	r3, #1
 8000448:	425a      	negs	r2, r3
 800044a:	4153      	adcs	r3, r2
 800044c:	b2db      	uxtb	r3, r3
 800044e:	001a      	movs	r2, r3
 8000450:	f005 f9de 	bl	8005810 <HAL_GPIO_WritePin>
                      (s == ADC_SUPPLY_12V) ? GPIO_PIN_SET : GPIO_PIN_RESET);
    g_supply[ch] = s;
 8000454:	1dfb      	adds	r3, r7, #7
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	4a04      	ldr	r2, [pc, #16]	; (800046c <write_ctrl+0x54>)
 800045a:	1db9      	adds	r1, r7, #6
 800045c:	7809      	ldrb	r1, [r1, #0]
 800045e:	54d1      	strb	r1, [r2, r3]
}
 8000460:	46c0      	nop			; (mov r8, r8)
 8000462:	46bd      	mov	sp, r7
 8000464:	b002      	add	sp, #8
 8000466:	bd80      	pop	{r7, pc}
 8000468:	08007b40 	.word	0x08007b40
 800046c:	200005a4 	.word	0x200005a4

08000470 <write_ntc>:
static inline void write_ntc(uint8_t ch, ADC_SensorMode_t m)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	0002      	movs	r2, r0
 8000478:	1dfb      	adds	r3, r7, #7
 800047a:	701a      	strb	r2, [r3, #0]
 800047c:	1dbb      	adds	r3, r7, #6
 800047e:	1c0a      	adds	r2, r1, #0
 8000480:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(adc_gpio[ch].ntc_port, adc_gpio[ch].ntc_pin,
 8000482:	1dfb      	adds	r3, r7, #7
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	4a0f      	ldr	r2, [pc, #60]	; (80004c4 <write_ntc+0x54>)
 8000488:	011b      	lsls	r3, r3, #4
 800048a:	18d3      	adds	r3, r2, r3
 800048c:	3308      	adds	r3, #8
 800048e:	6818      	ldr	r0, [r3, #0]
 8000490:	1dfb      	adds	r3, r7, #7
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	4a0b      	ldr	r2, [pc, #44]	; (80004c4 <write_ntc+0x54>)
 8000496:	011b      	lsls	r3, r3, #4
 8000498:	18d3      	adds	r3, r2, r3
 800049a:	330c      	adds	r3, #12
 800049c:	8819      	ldrh	r1, [r3, #0]
 800049e:	1dbb      	adds	r3, r7, #6
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	3b01      	subs	r3, #1
 80004a4:	425a      	negs	r2, r3
 80004a6:	4153      	adcs	r3, r2
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	001a      	movs	r2, r3
 80004ac:	f005 f9b0 	bl	8005810 <HAL_GPIO_WritePin>
                      (m == ADC_SENSOR_NTC) ? GPIO_PIN_SET : GPIO_PIN_RESET);
    g_sensor[ch] = m;
 80004b0:	1dfb      	adds	r3, r7, #7
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	4a04      	ldr	r2, [pc, #16]	; (80004c8 <write_ntc+0x58>)
 80004b6:	1db9      	adds	r1, r7, #6
 80004b8:	7809      	ldrb	r1, [r1, #0]
 80004ba:	54d1      	strb	r1, [r2, r3]
}
 80004bc:	46c0      	nop			; (mov r8, r8)
 80004be:	46bd      	mov	sp, r7
 80004c0:	b002      	add	sp, #8
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	08007b40 	.word	0x08007b40
 80004c8:	200005a8 	.word	0x200005a8

080004cc <ADC_CtrlInitDefaults>:

void ADC_CtrlInitDefaults(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
    for (uint8_t ch = 0; ch < ADC_CHANNEL_COUNT; ch++) {
 80004d2:	1dfb      	adds	r3, r7, #7
 80004d4:	2200      	movs	r2, #0
 80004d6:	701a      	strb	r2, [r3, #0]
 80004d8:	e01d      	b.n	8000516 <ADC_CtrlInitDefaults+0x4a>
        write_ctrl(ch, DEFAULT_SUPPLY[ch]);
 80004da:	1dfb      	adds	r3, r7, #7
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	4a12      	ldr	r2, [pc, #72]	; (8000528 <ADC_CtrlInitDefaults+0x5c>)
 80004e0:	5cd2      	ldrb	r2, [r2, r3]
 80004e2:	1dfb      	adds	r3, r7, #7
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	0011      	movs	r1, r2
 80004e8:	0018      	movs	r0, r3
 80004ea:	f7ff ff95 	bl	8000418 <write_ctrl>
        write_ntc(ch,  DEFAULT_SENSOR[ch]);
 80004ee:	1dfb      	adds	r3, r7, #7
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	4a0e      	ldr	r2, [pc, #56]	; (800052c <ADC_CtrlInitDefaults+0x60>)
 80004f4:	5cd2      	ldrb	r2, [r2, r3]
 80004f6:	1dfb      	adds	r3, r7, #7
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	0011      	movs	r1, r2
 80004fc:	0018      	movs	r0, r3
 80004fe:	f7ff ffb7 	bl	8000470 <write_ntc>
        ADC_FlushChannel(ch); // alte Mittelwerte verwerfen (neue HW-Konfig)
 8000502:	1dfb      	adds	r3, r7, #7
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	0018      	movs	r0, r3
 8000508:	f000 f86e 	bl	80005e8 <ADC_FlushChannel>
    for (uint8_t ch = 0; ch < ADC_CHANNEL_COUNT; ch++) {
 800050c:	1dfb      	adds	r3, r7, #7
 800050e:	781a      	ldrb	r2, [r3, #0]
 8000510:	1dfb      	adds	r3, r7, #7
 8000512:	3201      	adds	r2, #1
 8000514:	701a      	strb	r2, [r3, #0]
 8000516:	1dfb      	adds	r3, r7, #7
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2b03      	cmp	r3, #3
 800051c:	d9dd      	bls.n	80004da <ADC_CtrlInitDefaults+0xe>
    }
}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	46c0      	nop			; (mov r8, r8)
 8000522:	46bd      	mov	sp, r7
 8000524:	b002      	add	sp, #8
 8000526:	bd80      	pop	{r7, pc}
 8000528:	08007b80 	.word	0x08007b80
 800052c:	08007b84 	.word	0x08007b84

08000530 <ADC_CtrlApply>:

void ADC_CtrlApply(uint8_t ch, ADC_SupplyMode_t supply, ADC_SensorMode_t sensor)
{
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	0004      	movs	r4, r0
 8000538:	0008      	movs	r0, r1
 800053a:	0011      	movs	r1, r2
 800053c:	1dfb      	adds	r3, r7, #7
 800053e:	1c22      	adds	r2, r4, #0
 8000540:	701a      	strb	r2, [r3, #0]
 8000542:	1dbb      	adds	r3, r7, #6
 8000544:	1c02      	adds	r2, r0, #0
 8000546:	701a      	strb	r2, [r3, #0]
 8000548:	1d7b      	adds	r3, r7, #5
 800054a:	1c0a      	adds	r2, r1, #0
 800054c:	701a      	strb	r2, [r3, #0]
    if (ch >= ADC_CHANNEL_COUNT) {
 800054e:	1dfb      	adds	r3, r7, #7
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2b03      	cmp	r3, #3
 8000554:	d903      	bls.n	800055e <ADC_CtrlApply+0x2e>
        Error_Register(ERROR_ADC_INVALID_CHANNEL);
 8000556:	2008      	movs	r0, #8
 8000558:	f001 fac0 	bl	8001adc <Error_Register>
        return;
 800055c:	e014      	b.n	8000588 <ADC_CtrlApply+0x58>
    }
    write_ctrl(ch, supply);
 800055e:	1dbb      	adds	r3, r7, #6
 8000560:	781a      	ldrb	r2, [r3, #0]
 8000562:	1dfb      	adds	r3, r7, #7
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	0011      	movs	r1, r2
 8000568:	0018      	movs	r0, r3
 800056a:	f7ff ff55 	bl	8000418 <write_ctrl>
    write_ntc(ch,  sensor);
 800056e:	1d7b      	adds	r3, r7, #5
 8000570:	781a      	ldrb	r2, [r3, #0]
 8000572:	1dfb      	adds	r3, r7, #7
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	0011      	movs	r1, r2
 8000578:	0018      	movs	r0, r3
 800057a:	f7ff ff79 	bl	8000470 <write_ntc>
    ADC_FlushChannel(ch);   // nach Umschalten FIFO leeren, um gemischte Mittel zu vermeiden
 800057e:	1dfb      	adds	r3, r7, #7
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	0018      	movs	r0, r3
 8000584:	f000 f830 	bl	80005e8 <ADC_FlushChannel>
}
 8000588:	46bd      	mov	sp, r7
 800058a:	b003      	add	sp, #12
 800058c:	bd90      	pop	{r4, r7, pc}
	...

08000590 <ADC_CtrlGet>:

void ADC_CtrlGet(uint8_t ch, ADC_SupplyMode_t *supply, ADC_SensorMode_t *sensor)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	60b9      	str	r1, [r7, #8]
 8000598:	607a      	str	r2, [r7, #4]
 800059a:	210f      	movs	r1, #15
 800059c:	187b      	adds	r3, r7, r1
 800059e:	1c02      	adds	r2, r0, #0
 80005a0:	701a      	strb	r2, [r3, #0]
    if (ch >= ADC_CHANNEL_COUNT) {
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b03      	cmp	r3, #3
 80005a8:	d903      	bls.n	80005b2 <ADC_CtrlGet+0x22>
        Error_Register(ERROR_ADC_INVALID_CHANNEL);
 80005aa:	2008      	movs	r0, #8
 80005ac:	f001 fa96 	bl	8001adc <Error_Register>
        return;
 80005b0:	e013      	b.n	80005da <ADC_CtrlGet+0x4a>
    }
    if (supply) *supply = g_supply[ch];
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d006      	beq.n	80005c6 <ADC_CtrlGet+0x36>
 80005b8:	230f      	movs	r3, #15
 80005ba:	18fb      	adds	r3, r7, r3
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	4a08      	ldr	r2, [pc, #32]	; (80005e0 <ADC_CtrlGet+0x50>)
 80005c0:	5cd2      	ldrb	r2, [r2, r3]
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	701a      	strb	r2, [r3, #0]
    if (sensor) *sensor = g_sensor[ch];
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d006      	beq.n	80005da <ADC_CtrlGet+0x4a>
 80005cc:	230f      	movs	r3, #15
 80005ce:	18fb      	adds	r3, r7, r3
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	4a04      	ldr	r2, [pc, #16]	; (80005e4 <ADC_CtrlGet+0x54>)
 80005d4:	5cd2      	ldrb	r2, [r2, r3]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	701a      	strb	r2, [r3, #0]
}
 80005da:	46bd      	mov	sp, r7
 80005dc:	b004      	add	sp, #16
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	200005a4 	.word	0x200005a4
 80005e4:	200005a8 	.word	0x200005a8

080005e8 <ADC_FlushChannel>:

void ADC_FlushChannel(uint8_t ch)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	0002      	movs	r2, r0
 80005f0:	1dfb      	adds	r3, r7, #7
 80005f2:	701a      	strb	r2, [r3, #0]
    if (ch >= ADC_CHANNEL_COUNT) {
 80005f4:	1dfb      	adds	r3, r7, #7
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b03      	cmp	r3, #3
 80005fa:	d903      	bls.n	8000604 <ADC_FlushChannel+0x1c>
        Error_Register(ERROR_ADC_INVALID_CHANNEL);
 80005fc:	2008      	movs	r0, #8
 80005fe:	f001 fa6d 	bl	8001adc <Error_Register>
        return;
 8000602:	e00e      	b.n	8000622 <ADC_FlushChannel+0x3a>
    }
    // einfache FIFO-Löschung nur für den Kanal
    fifo_head[ch]  = 0;
 8000604:	1dfb      	adds	r3, r7, #7
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	4a07      	ldr	r2, [pc, #28]	; (8000628 <ADC_FlushChannel+0x40>)
 800060a:	2100      	movs	r1, #0
 800060c:	54d1      	strb	r1, [r2, r3]
    fifo_count[ch] = 0;
 800060e:	1dfb      	adds	r3, r7, #7
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	4a06      	ldr	r2, [pc, #24]	; (800062c <ADC_FlushChannel+0x44>)
 8000614:	2100      	movs	r1, #0
 8000616:	54d1      	strb	r1, [r2, r3]
    value_read[ch] = 0;
 8000618:	1dfb      	adds	r3, r7, #7
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4a04      	ldr	r2, [pc, #16]	; (8000630 <ADC_FlushChannel+0x48>)
 800061e:	2100      	movs	r1, #0
 8000620:	54d1      	strb	r1, [r2, r3]
}
 8000622:	46bd      	mov	sp, r7
 8000624:	b002      	add	sp, #8
 8000626:	bd80      	pop	{r7, pc}
 8000628:	2000059c 	.word	0x2000059c
 800062c:	200005a0 	.word	0x200005a0
 8000630:	20000000 	.word	0x20000000

08000634 <ADC_HandleCAN>:

void ADC_HandleCAN(uint16_t id, const uint8_t *data, uint8_t dlc, uint32_t timestamp)
{
 8000634:	b5b0      	push	{r4, r5, r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	60b9      	str	r1, [r7, #8]
 800063c:	0011      	movs	r1, r2
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	240e      	movs	r4, #14
 8000642:	193b      	adds	r3, r7, r4
 8000644:	1c02      	adds	r2, r0, #0
 8000646:	801a      	strh	r2, [r3, #0]
 8000648:	200d      	movs	r0, #13
 800064a:	183b      	adds	r3, r7, r0
 800064c:	1c0a      	adds	r2, r1, #0
 800064e:	701a      	strb	r2, [r3, #0]
    if (id != 0x120 || dlc < ADC_CHANNEL_COUNT) return;
 8000650:	193b      	adds	r3, r7, r4
 8000652:	881a      	ldrh	r2, [r3, #0]
 8000654:	2390      	movs	r3, #144	; 0x90
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	429a      	cmp	r2, r3
 800065a:	d137      	bne.n	80006cc <ADC_HandleCAN+0x98>
 800065c:	183b      	adds	r3, r7, r0
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b03      	cmp	r3, #3
 8000662:	d933      	bls.n	80006cc <ADC_HandleCAN+0x98>

    for (uint8_t ch = 0; ch < ADC_CHANNEL_COUNT; ch++) {
 8000664:	2317      	movs	r3, #23
 8000666:	18fb      	adds	r3, r7, r3
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
 800066c:	e028      	b.n	80006c0 <ADC_HandleCAN+0x8c>
        uint8_t val = data[ch];
 800066e:	2017      	movs	r0, #23
 8000670:	183b      	adds	r3, r7, r0
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	68ba      	ldr	r2, [r7, #8]
 8000676:	18d2      	adds	r2, r2, r3
 8000678:	2416      	movs	r4, #22
 800067a:	193b      	adds	r3, r7, r4
 800067c:	7812      	ldrb	r2, [r2, #0]
 800067e:	701a      	strb	r2, [r3, #0]
        ADC_SupplyMode_t supply = (val & 0x01) ? ADC_SUPPLY_12V : ADC_SUPPLY_5V;
 8000680:	2515      	movs	r5, #21
 8000682:	197b      	adds	r3, r7, r5
 8000684:	193a      	adds	r2, r7, r4
 8000686:	7812      	ldrb	r2, [r2, #0]
 8000688:	2101      	movs	r1, #1
 800068a:	400a      	ands	r2, r1
 800068c:	701a      	strb	r2, [r3, #0]
        ADC_SensorMode_t sensor = (val & 0x02) ? ADC_SENSOR_NTC  : ADC_SENSOR_NORMAL;
 800068e:	193b      	adds	r3, r7, r4
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	105b      	asrs	r3, r3, #1
 8000694:	b2da      	uxtb	r2, r3
 8000696:	2414      	movs	r4, #20
 8000698:	193b      	adds	r3, r7, r4
 800069a:	2101      	movs	r1, #1
 800069c:	400a      	ands	r2, r1
 800069e:	701a      	strb	r2, [r3, #0]
        ADC_CtrlApply(ch, supply, sensor);
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	781a      	ldrb	r2, [r3, #0]
 80006a4:	197b      	adds	r3, r7, r5
 80006a6:	7819      	ldrb	r1, [r3, #0]
 80006a8:	0004      	movs	r4, r0
 80006aa:	183b      	adds	r3, r7, r0
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	0018      	movs	r0, r3
 80006b0:	f7ff ff3e 	bl	8000530 <ADC_CtrlApply>
    for (uint8_t ch = 0; ch < ADC_CHANNEL_COUNT; ch++) {
 80006b4:	0020      	movs	r0, r4
 80006b6:	183b      	adds	r3, r7, r0
 80006b8:	781a      	ldrb	r2, [r3, #0]
 80006ba:	183b      	adds	r3, r7, r0
 80006bc:	3201      	adds	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
 80006c0:	2317      	movs	r3, #23
 80006c2:	18fb      	adds	r3, r7, r3
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b03      	cmp	r3, #3
 80006c8:	d9d1      	bls.n	800066e <ADC_HandleCAN+0x3a>
 80006ca:	e000      	b.n	80006ce <ADC_HandleCAN+0x9a>
    if (id != 0x120 || dlc < ADC_CHANNEL_COUNT) return;
 80006cc:	46c0      	nop			; (mov r8, r8)
    }
}
 80006ce:	46bd      	mov	sp, r7
 80006d0:	b006      	add	sp, #24
 80006d2:	bdb0      	pop	{r4, r5, r7, pc}

080006d4 <ADC_SendCurrentConfig>:

void ADC_SendCurrentConfig(void)
{
 80006d4:	b590      	push	{r4, r7, lr}
 80006d6:	b089      	sub	sp, #36	; 0x24
 80006d8:	af00      	add	r7, sp, #0
    CAN_Message_t msg;
    msg.id = 0x121; // Response-ID
 80006da:	2108      	movs	r1, #8
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2222      	movs	r2, #34	; 0x22
 80006e0:	32ff      	adds	r2, #255	; 0xff
 80006e2:	801a      	strh	r2, [r3, #0]
    msg.dlc = ADC_CHANNEL_COUNT;
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2204      	movs	r2, #4
 80006e8:	709a      	strb	r2, [r3, #2]

    for (uint8_t ch = 0; ch < ADC_CHANNEL_COUNT; ch++) {
 80006ea:	231f      	movs	r3, #31
 80006ec:	18fb      	adds	r3, r7, r3
 80006ee:	2200      	movs	r2, #0
 80006f0:	701a      	strb	r2, [r3, #0]
 80006f2:	e02f      	b.n	8000754 <ADC_SendCurrentConfig+0x80>
        uint8_t val = 0;
 80006f4:	241e      	movs	r4, #30
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
        ADC_SupplyMode_t supply;
        ADC_SensorMode_t sensor;
        ADC_CtrlGet(ch, &supply, &sensor);
 80006fc:	1dba      	adds	r2, r7, #6
 80006fe:	1df9      	adds	r1, r7, #7
 8000700:	231f      	movs	r3, #31
 8000702:	18fb      	adds	r3, r7, r3
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	0018      	movs	r0, r3
 8000708:	f7ff ff42 	bl	8000590 <ADC_CtrlGet>
        if (supply == ADC_SUPPLY_12V) val |= 0x01;
 800070c:	1dfb      	adds	r3, r7, #7
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d105      	bne.n	8000720 <ADC_SendCurrentConfig+0x4c>
 8000714:	193b      	adds	r3, r7, r4
 8000716:	193a      	adds	r2, r7, r4
 8000718:	7812      	ldrb	r2, [r2, #0]
 800071a:	2101      	movs	r1, #1
 800071c:	430a      	orrs	r2, r1
 800071e:	701a      	strb	r2, [r3, #0]
        if (sensor == ADC_SENSOR_NTC) val |= 0x02;
 8000720:	1dbb      	adds	r3, r7, #6
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b01      	cmp	r3, #1
 8000726:	d106      	bne.n	8000736 <ADC_SendCurrentConfig+0x62>
 8000728:	221e      	movs	r2, #30
 800072a:	18bb      	adds	r3, r7, r2
 800072c:	18ba      	adds	r2, r7, r2
 800072e:	7812      	ldrb	r2, [r2, #0]
 8000730:	2102      	movs	r1, #2
 8000732:	430a      	orrs	r2, r1
 8000734:	701a      	strb	r2, [r3, #0]
        msg.data[ch] = val;
 8000736:	211f      	movs	r1, #31
 8000738:	187b      	adds	r3, r7, r1
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2208      	movs	r2, #8
 800073e:	18ba      	adds	r2, r7, r2
 8000740:	18d3      	adds	r3, r2, r3
 8000742:	221e      	movs	r2, #30
 8000744:	18ba      	adds	r2, r7, r2
 8000746:	7812      	ldrb	r2, [r2, #0]
 8000748:	70da      	strb	r2, [r3, #3]
    for (uint8_t ch = 0; ch < ADC_CHANNEL_COUNT; ch++) {
 800074a:	187b      	adds	r3, r7, r1
 800074c:	781a      	ldrb	r2, [r3, #0]
 800074e:	187b      	adds	r3, r7, r1
 8000750:	3201      	adds	r2, #1
 8000752:	701a      	strb	r2, [r3, #0]
 8000754:	231f      	movs	r3, #31
 8000756:	18fb      	adds	r3, r7, r3
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b03      	cmp	r3, #3
 800075c:	d9ca      	bls.n	80006f4 <ADC_SendCurrentConfig+0x20>
    }
    CAN_QueueMessage(&msg);
 800075e:	2308      	movs	r3, #8
 8000760:	18fb      	adds	r3, r7, r3
 8000762:	0018      	movs	r0, r3
 8000764:	f000 fb7c 	bl	8000e60 <CAN_QueueMessage>
}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	b009      	add	sp, #36	; 0x24
 800076e:	bd90      	pop	{r4, r7, pc}

08000770 <ADC_Init>:


void ADC_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
    // wie für ~1ms-Mittelung nötig sind.
    if (ADC_DMA_BLOCK_SIZE < ADC_SHORT_AVG_SAMPLES) {
        Error_Register(ERROR_ADC_PARAM);
        // wir starten trotzdem, aber Update() wird dann 0..n behandeln
    } else {
        Error_Clear(ERROR_ADC_PARAM);
 8000774:	200a      	movs	r0, #10
 8000776:	f001 f9cf 	bl	8001b18 <Error_Clear>
    }

    // Erst die Ctrl-Defaults setzen (Transistoren schalten), dann ADC starten
    ADC_CtrlInitDefaults();
 800077a:	f7ff fea7 	bl	80004cc <ADC_CtrlInitDefaults>

    if (HAL_ADC_Start_DMA(&hadc, (uint32_t*)adc_dma_buffer, TOTAL_DMA_SAMPLES) != HAL_OK) {
 800077e:	2380      	movs	r3, #128	; 0x80
 8000780:	005a      	lsls	r2, r3, #1
 8000782:	4908      	ldr	r1, [pc, #32]	; (80007a4 <ADC_Init+0x34>)
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <ADC_Init+0x38>)
 8000786:	0018      	movs	r0, r3
 8000788:	f003 f990 	bl	8003aac <HAL_ADC_Start_DMA>
 800078c:	1e03      	subs	r3, r0, #0
 800078e:	d003      	beq.n	8000798 <ADC_Init+0x28>
        Error_Register(ERROR_ADC_DMA_START_FAILED);
 8000790:	2005      	movs	r0, #5
 8000792:	f001 f9a3 	bl	8001adc <Error_Register>
        return;
 8000796:	e002      	b.n	800079e <ADC_Init+0x2e>
    } else {
        Error_Clear(ERROR_ADC_DMA_START_FAILED);
 8000798:	2005      	movs	r0, #5
 800079a:	f001 f9bd 	bl	8001b18 <Error_Clear>
        // Falls zuvor "keine Daten" gemeldet wurde, lassen wir das beim ersten Update löschen
    }
}
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	2000007c 	.word	0x2000007c
 80007a8:	20000e44 	.word	0x20000e44

080007ac <HAL_ADC_ConvCpltCallback>:
// Voll-Callback
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc_)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
    if (hadc_->Instance != ADC1) return;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a04      	ldr	r2, [pc, #16]	; (80007cc <HAL_ADC_ConvCpltCallback+0x20>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d102      	bne.n	80007c4 <HAL_ADC_ConvCpltCallback+0x18>
    ADC_Update();
 80007be:	f000 f82b 	bl	8000818 <ADC_Update>
 80007c2:	e000      	b.n	80007c6 <HAL_ADC_ConvCpltCallback+0x1a>
    if (hadc_->Instance != ADC1) return;
 80007c4:	46c0      	nop			; (mov r8, r8)
}
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b002      	add	sp, #8
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40012400 	.word	0x40012400

080007d0 <HAL_ADC_ErrorCallback>:
//     // -> könntest du nutzen, wenn du 2x 1ms-Blöcke in einem DMA-Block löst
// }

// Fehler-Callback der HAL
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef* hadc_)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
    if (hadc_->Instance != ADC1) return;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a0d      	ldr	r2, [pc, #52]	; (8000814 <HAL_ADC_ErrorCallback+0x44>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d114      	bne.n	800080c <HAL_ADC_ErrorCallback+0x3c>

    uint32_t err = HAL_ADC_GetError(hadc_);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	0018      	movs	r0, r3
 80007e6:	f003 fba5 	bl	8003f34 <HAL_ADC_GetError>
 80007ea:	0003      	movs	r3, r0
 80007ec:	60fb      	str	r3, [r7, #12]
    if (err & HAL_ADC_ERROR_DMA) Error_Register(ERROR_ADC_DMA_ERROR);
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	2204      	movs	r2, #4
 80007f2:	4013      	ands	r3, r2
 80007f4:	d002      	beq.n	80007fc <HAL_ADC_ErrorCallback+0x2c>
 80007f6:	2006      	movs	r0, #6
 80007f8:	f001 f970 	bl	8001adc <Error_Register>
    if (err & HAL_ADC_ERROR_OVR) Error_Register(ERROR_ADC_OVERRUN);
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	2202      	movs	r2, #2
 8000800:	4013      	ands	r3, r2
 8000802:	d004      	beq.n	800080e <HAL_ADC_ErrorCallback+0x3e>
 8000804:	2007      	movs	r0, #7
 8000806:	f001 f969 	bl	8001adc <Error_Register>
 800080a:	e000      	b.n	800080e <HAL_ADC_ErrorCallback+0x3e>
    if (hadc_->Instance != ADC1) return;
 800080c:	46c0      	nop			; (mov r8, r8)

    // Weitere Fehlerarten (JQOVF etc.) hat F0 nicht, aber hier erweiterbar
}
 800080e:	46bd      	mov	sp, r7
 8000810:	b004      	add	sp, #16
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40012400 	.word	0x40012400

08000818 <ADC_Update>:

// Rechnet 1ms-Mittelwert(e) und füllt Ringpuffer
void ADC_Update(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b088      	sub	sp, #32
 800081c:	af00      	add	r7, sp, #0
    // Sobald Daten reinkommen, können wir "NO_DATA" ggf. löschen
    // (wir löschen erst NACH erfolgreichem FIFO-Schreiben unten)
    uint32_t temp_sum[ADC_CHANNEL_COUNT] = {0};
 800081e:	003b      	movs	r3, r7
 8000820:	0018      	movs	r0, r3
 8000822:	2310      	movs	r3, #16
 8000824:	001a      	movs	r2, r3
 8000826:	2100      	movs	r1, #0
 8000828:	f006 fcae 	bl	8007188 <memset>
        Error_Register(ERROR_ADC_PARAM);
        return;
    }

    // 1-ms-Mittelwert pro Kanal aus Rohsamples berechnen
    for (int i = 0; i < ADC_SHORT_AVG_SAMPLES; i++) {
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
 8000830:	e01b      	b.n	800086a <ADC_Update+0x52>
        for (int ch = 0; ch < ADC_CHANNEL_COUNT; ch++) {
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
 8000836:	e012      	b.n	800085e <ADC_Update+0x46>
            temp_sum[ch] += adc_dma_buffer[i * ADC_CHANNEL_COUNT + ch];
 8000838:	003b      	movs	r3, r7
 800083a:	69ba      	ldr	r2, [r7, #24]
 800083c:	0092      	lsls	r2, r2, #2
 800083e:	58d3      	ldr	r3, [r2, r3]
 8000840:	69fa      	ldr	r2, [r7, #28]
 8000842:	0091      	lsls	r1, r2, #2
 8000844:	69ba      	ldr	r2, [r7, #24]
 8000846:	1889      	adds	r1, r1, r2
 8000848:	4a3a      	ldr	r2, [pc, #232]	; (8000934 <ADC_Update+0x11c>)
 800084a:	0049      	lsls	r1, r1, #1
 800084c:	5a8a      	ldrh	r2, [r1, r2]
 800084e:	1899      	adds	r1, r3, r2
 8000850:	003b      	movs	r3, r7
 8000852:	69ba      	ldr	r2, [r7, #24]
 8000854:	0092      	lsls	r2, r2, #2
 8000856:	50d1      	str	r1, [r2, r3]
        for (int ch = 0; ch < ADC_CHANNEL_COUNT; ch++) {
 8000858:	69bb      	ldr	r3, [r7, #24]
 800085a:	3301      	adds	r3, #1
 800085c:	61bb      	str	r3, [r7, #24]
 800085e:	69bb      	ldr	r3, [r7, #24]
 8000860:	2b03      	cmp	r3, #3
 8000862:	dde9      	ble.n	8000838 <ADC_Update+0x20>
    for (int i = 0; i < ADC_SHORT_AVG_SAMPLES; i++) {
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	3301      	adds	r3, #1
 8000868:	61fb      	str	r3, [r7, #28]
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	2b0b      	cmp	r3, #11
 800086e:	dde0      	ble.n	8000832 <ADC_Update+0x1a>
        }
    }

    for (int ch = 0; ch < ADC_CHANNEL_COUNT; ch++) {
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	e054      	b.n	8000920 <ADC_Update+0x108>
        uint16_t one_ms_avg = (uint16_t)(temp_sum[ch] / ADC_SHORT_AVG_SAMPLES);
 8000876:	003b      	movs	r3, r7
 8000878:	697a      	ldr	r2, [r7, #20]
 800087a:	0092      	lsls	r2, r2, #2
 800087c:	58d3      	ldr	r3, [r2, r3]
 800087e:	210c      	movs	r1, #12
 8000880:	0018      	movs	r0, r3
 8000882:	f7ff fc53 	bl	800012c <__udivsi3>
 8000886:	0003      	movs	r3, r0
 8000888:	001a      	movs	r2, r3
 800088a:	2312      	movs	r3, #18
 800088c:	18fb      	adds	r3, r7, r3
 800088e:	801a      	strh	r2, [r3, #0]

        if (value_read[ch]) {
 8000890:	4a29      	ldr	r2, [pc, #164]	; (8000938 <ADC_Update+0x120>)
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	18d3      	adds	r3, r2, r3
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d00e      	beq.n	80008ba <ADC_Update+0xa2>
            // FIFO leeren, wenn seit letzter Abfrage gelesen wurde
            fifo_count[ch] = 0;
 800089c:	4a27      	ldr	r2, [pc, #156]	; (800093c <ADC_Update+0x124>)
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	18d3      	adds	r3, r2, r3
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
            fifo_head[ch]  = 0;
 80008a6:	4a26      	ldr	r2, [pc, #152]	; (8000940 <ADC_Update+0x128>)
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	18d3      	adds	r3, r2, r3
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
            value_read[ch] = 0;
 80008b0:	4a21      	ldr	r2, [pc, #132]	; (8000938 <ADC_Update+0x120>)
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	18d3      	adds	r3, r2, r3
 80008b6:	2200      	movs	r2, #0
 80008b8:	701a      	strb	r2, [r3, #0]
        }

        // Neuen 1ms-Wert in den Ringpuffer schreiben (zirkular)
        avg_fifo[ch][fifo_head[ch]] = one_ms_avg;
 80008ba:	4a21      	ldr	r2, [pc, #132]	; (8000940 <ADC_Update+0x128>)
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	18d3      	adds	r3, r2, r3
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	0018      	movs	r0, r3
 80008c4:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <ADC_Update+0x12c>)
 80008c6:	697a      	ldr	r2, [r7, #20]
 80008c8:	2164      	movs	r1, #100	; 0x64
 80008ca:	434a      	muls	r2, r1
 80008cc:	1812      	adds	r2, r2, r0
 80008ce:	0052      	lsls	r2, r2, #1
 80008d0:	2112      	movs	r1, #18
 80008d2:	1879      	adds	r1, r7, r1
 80008d4:	8809      	ldrh	r1, [r1, #0]
 80008d6:	52d1      	strh	r1, [r2, r3]
        fifo_head[ch] = (fifo_head[ch] + 1) % ADC_AGGREGATION_LIMIT;
 80008d8:	4a19      	ldr	r2, [pc, #100]	; (8000940 <ADC_Update+0x128>)
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	18d3      	adds	r3, r2, r3
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	3301      	adds	r3, #1
 80008e2:	2164      	movs	r1, #100	; 0x64
 80008e4:	0018      	movs	r0, r3
 80008e6:	f7ff fd91 	bl	800040c <__aeabi_idivmod>
 80008ea:	000b      	movs	r3, r1
 80008ec:	b2d9      	uxtb	r1, r3
 80008ee:	4a14      	ldr	r2, [pc, #80]	; (8000940 <ADC_Update+0x128>)
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	18d3      	adds	r3, r2, r3
 80008f4:	1c0a      	adds	r2, r1, #0
 80008f6:	701a      	strb	r2, [r3, #0]

        if (fifo_count[ch] < ADC_AGGREGATION_LIMIT) {
 80008f8:	4a10      	ldr	r2, [pc, #64]	; (800093c <ADC_Update+0x124>)
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	18d3      	adds	r3, r2, r3
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b63      	cmp	r3, #99	; 0x63
 8000902:	d80a      	bhi.n	800091a <ADC_Update+0x102>
            fifo_count[ch]++;
 8000904:	4a0d      	ldr	r2, [pc, #52]	; (800093c <ADC_Update+0x124>)
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	18d3      	adds	r3, r2, r3
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	3301      	adds	r3, #1
 800090e:	b2d9      	uxtb	r1, r3
 8000910:	4a0a      	ldr	r2, [pc, #40]	; (800093c <ADC_Update+0x124>)
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	18d3      	adds	r3, r2, r3
 8000916:	1c0a      	adds	r2, r1, #0
 8000918:	701a      	strb	r2, [r3, #0]
    for (int ch = 0; ch < ADC_CHANNEL_COUNT; ch++) {
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	3301      	adds	r3, #1
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	2b03      	cmp	r3, #3
 8000924:	dda7      	ble.n	8000876 <ADC_Update+0x5e>
        }
    }

    // Wenn wir hier waren, haben wir Daten -> NO_DATA zurücksetzen
    Error_Clear(ERROR_ADC_NO_DATA);
 8000926:	2009      	movs	r0, #9
 8000928:	f001 f8f6 	bl	8001b18 <Error_Clear>
}
 800092c:	46bd      	mov	sp, r7
 800092e:	b008      	add	sp, #32
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	2000007c 	.word	0x2000007c
 8000938:	20000000 	.word	0x20000000
 800093c:	200005a0 	.word	0x200005a0
 8000940:	2000059c 	.word	0x2000059c
 8000944:	2000027c 	.word	0x2000027c

08000948 <ADC_GetAverage>:

uint16_t ADC_GetAverage(uint8_t channel)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	0002      	movs	r2, r0
 8000950:	1dfb      	adds	r3, r7, #7
 8000952:	701a      	strb	r2, [r3, #0]
    if (channel >= ADC_CHANNEL_COUNT) {
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b03      	cmp	r3, #3
 800095a:	d904      	bls.n	8000966 <ADC_GetAverage+0x1e>
        Error_Register(ERROR_ADC_INVALID_CHANNEL);
 800095c:	2008      	movs	r0, #8
 800095e:	f001 f8bd 	bl	8001adc <Error_Register>
        return 0;
 8000962:	2300      	movs	r3, #0
 8000964:	e039      	b.n	80009da <ADC_GetAverage+0x92>
    }

    if (fifo_count[channel] == 0) {
 8000966:	1dfb      	adds	r3, r7, #7
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	4a1e      	ldr	r2, [pc, #120]	; (80009e4 <ADC_GetAverage+0x9c>)
 800096c:	5cd3      	ldrb	r3, [r2, r3]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d104      	bne.n	800097c <ADC_GetAverage+0x34>
        Error_Register(ERROR_ADC_NO_DATA);
 8000972:	2009      	movs	r0, #9
 8000974:	f001 f8b2 	bl	8001adc <Error_Register>
        return 0;
 8000978:	2300      	movs	r3, #0
 800097a:	e02e      	b.n	80009da <ADC_GetAverage+0x92>
    }

    // Summe bilden (O(n)); wenn du O(1) willst, sag Bescheid -> dann halten wir pro FIFO die laufende Summe mit.
    uint32_t sum = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
    // FIFO ist zirkular – aber wir mitteln über ALLE aktuell gespeicherten Werte,
    // Reihenfolge ist für den Durchschnitt egal, daher einfacher: linear über 0..fifo_count-1
    for (int i = 0; i < fifo_count[channel]; i++) {
 8000980:	2300      	movs	r3, #0
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	e00f      	b.n	80009a6 <ADC_GetAverage+0x5e>
        sum += avg_fifo[channel][i];
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	781a      	ldrb	r2, [r3, #0]
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <ADC_GetAverage+0xa0>)
 800098c:	2164      	movs	r1, #100	; 0x64
 800098e:	4351      	muls	r1, r2
 8000990:	68ba      	ldr	r2, [r7, #8]
 8000992:	188a      	adds	r2, r1, r2
 8000994:	0052      	lsls	r2, r2, #1
 8000996:	5ad3      	ldrh	r3, [r2, r3]
 8000998:	001a      	movs	r2, r3
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	189b      	adds	r3, r3, r2
 800099e:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < fifo_count[channel]; i++) {
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	3301      	adds	r3, #1
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	4a0e      	ldr	r2, [pc, #56]	; (80009e4 <ADC_GetAverage+0x9c>)
 80009ac:	5cd3      	ldrb	r3, [r2, r3]
 80009ae:	001a      	movs	r2, r3
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	4293      	cmp	r3, r2
 80009b4:	dbe7      	blt.n	8000986 <ADC_GetAverage+0x3e>
    }

    value_read[channel] = 1; // markiert, dass beim nächsten Update neu begonnen wird (FIFO wird geleert)
 80009b6:	1dfb      	adds	r3, r7, #7
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	4a0c      	ldr	r2, [pc, #48]	; (80009ec <ADC_GetAverage+0xa4>)
 80009bc:	2101      	movs	r1, #1
 80009be:	54d1      	strb	r1, [r2, r3]

    // wir haben erfolgreich geliefert -> offensichtliche Fehler löschen
    Error_Clear(ERROR_ADC_INVALID_CHANNEL);
 80009c0:	2008      	movs	r0, #8
 80009c2:	f001 f8a9 	bl	8001b18 <Error_Clear>
    // ERROR_ADC_NO_DATA wurde schon in Update() gelöscht, wenn Daten rein kamen

    return (uint16_t)(sum / fifo_count[channel]);
 80009c6:	1dfb      	adds	r3, r7, #7
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	4a06      	ldr	r2, [pc, #24]	; (80009e4 <ADC_GetAverage+0x9c>)
 80009cc:	5cd3      	ldrb	r3, [r2, r3]
 80009ce:	0019      	movs	r1, r3
 80009d0:	68f8      	ldr	r0, [r7, #12]
 80009d2:	f7ff fbab 	bl	800012c <__udivsi3>
 80009d6:	0003      	movs	r3, r0
 80009d8:	b29b      	uxth	r3, r3
}
 80009da:	0018      	movs	r0, r3
 80009dc:	46bd      	mov	sp, r7
 80009de:	b004      	add	sp, #16
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	200005a0 	.word	0x200005a0
 80009e8:	2000027c 	.word	0x2000027c
 80009ec:	20000000 	.word	0x20000000

080009f0 <CAN_RegisterRxCallback>:
static volatile uint8_t TxQueueTail = 0;

static CAN_RxCallback_t can_rx_callback = NULL;

void CAN_RegisterRxCallback(CAN_RxCallback_t cb)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
    can_rx_callback = cb;
 80009f8:	4b03      	ldr	r3, [pc, #12]	; (8000a08 <CAN_RegisterRxCallback+0x18>)
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	601a      	str	r2, [r3, #0]
}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b002      	add	sp, #8
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	20000970 	.word	0x20000970

08000a0c <HAL_CAN_RxFifo0MsgPendingCallback>:

// ---------- Empfang ----------

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a0e:	b08f      	sub	sp, #60	; 0x3c
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8];

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK) {
 8000a14:	230c      	movs	r3, #12
 8000a16:	18fb      	adds	r3, r7, r3
 8000a18:	2214      	movs	r2, #20
 8000a1a:	18ba      	adds	r2, r7, r2
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	2100      	movs	r1, #0
 8000a20:	f003 ff71 	bl	8004906 <HAL_CAN_GetRxMessage>
 8000a24:	1e03      	subs	r3, r0, #0
 8000a26:	d001      	beq.n	8000a2c <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
        Error_Handler();
 8000a28:	f002 f92e 	bl	8002c88 <Error_Handler>
    }

    // Callback aufrufen, falls registriert
    if (can_rx_callback) {
 8000a2c:	4b59      	ldr	r3, [pc, #356]	; (8000b94 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d010      	beq.n	8000a56 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
        can_rx_callback(rxHeader.StdId, rxData, rxHeader.DLC, HAL_GetTick());
 8000a34:	4b57      	ldr	r3, [pc, #348]	; (8000b94 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8000a36:	681c      	ldr	r4, [r3, #0]
 8000a38:	2214      	movs	r2, #20
 8000a3a:	18bb      	adds	r3, r7, r2
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	b29d      	uxth	r5, r3
 8000a40:	18bb      	adds	r3, r7, r2
 8000a42:	691b      	ldr	r3, [r3, #16]
 8000a44:	b2de      	uxtb	r6, r3
 8000a46:	f002 fec3 	bl	80037d0 <HAL_GetTick>
 8000a4a:	0003      	movs	r3, r0
 8000a4c:	220c      	movs	r2, #12
 8000a4e:	18b9      	adds	r1, r7, r2
 8000a50:	0032      	movs	r2, r6
 8000a52:	0028      	movs	r0, r5
 8000a54:	47a0      	blx	r4
    }

    // Update bestehende Nachricht
    for (int i = 0; i < MAX_CAN_MESSAGES; i++) {
 8000a56:	2300      	movs	r3, #0
 8000a58:	637b      	str	r3, [r7, #52]	; 0x34
 8000a5a:	e042      	b.n	8000ae2 <HAL_CAN_RxFifo0MsgPendingCallback+0xd6>
        if (CAN_MessageDB[i].valid && CAN_MessageDB[i].id == rxHeader.StdId) {
 8000a5c:	494e      	ldr	r1, [pc, #312]	; (8000b98 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8000a5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a60:	0013      	movs	r3, r2
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	189b      	adds	r3, r3, r2
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	18cb      	adds	r3, r1, r3
 8000a6a:	3310      	adds	r3, #16
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d034      	beq.n	8000adc <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>
 8000a72:	4949      	ldr	r1, [pc, #292]	; (8000b98 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8000a74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a76:	0013      	movs	r3, r2
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	189b      	adds	r3, r3, r2
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	5a5b      	ldrh	r3, [r3, r1]
 8000a80:	001a      	movs	r2, r3
 8000a82:	2414      	movs	r4, #20
 8000a84:	193b      	adds	r3, r7, r4
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d127      	bne.n	8000adc <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>
            CAN_MessageDB[i].dlc = rxHeader.DLC;
 8000a8c:	193b      	adds	r3, r7, r4
 8000a8e:	691b      	ldr	r3, [r3, #16]
 8000a90:	b2d8      	uxtb	r0, r3
 8000a92:	4941      	ldr	r1, [pc, #260]	; (8000b98 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8000a94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a96:	0013      	movs	r3, r2
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	189b      	adds	r3, r3, r2
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	18cb      	adds	r3, r1, r3
 8000aa0:	3302      	adds	r3, #2
 8000aa2:	1c02      	adds	r2, r0, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
            memcpy(CAN_MessageDB[i].data, rxData, rxHeader.DLC);
 8000aa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000aa8:	0013      	movs	r3, r2
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	189b      	adds	r3, r3, r2
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	4a39      	ldr	r2, [pc, #228]	; (8000b98 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8000ab2:	189b      	adds	r3, r3, r2
 8000ab4:	1cd8      	adds	r0, r3, #3
 8000ab6:	193b      	adds	r3, r7, r4
 8000ab8:	691a      	ldr	r2, [r3, #16]
 8000aba:	230c      	movs	r3, #12
 8000abc:	18fb      	adds	r3, r7, r3
 8000abe:	0019      	movs	r1, r3
 8000ac0:	f006 fbaa 	bl	8007218 <memcpy>
            CAN_MessageDB[i].timestamp = HAL_GetTick();
 8000ac4:	f002 fe84 	bl	80037d0 <HAL_GetTick>
 8000ac8:	4933      	ldr	r1, [pc, #204]	; (8000b98 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8000aca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000acc:	0013      	movs	r3, r2
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	189b      	adds	r3, r3, r2
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	18cb      	adds	r3, r1, r3
 8000ad6:	330c      	adds	r3, #12
 8000ad8:	6018      	str	r0, [r3, #0]
            return;
 8000ada:	e057      	b.n	8000b8c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
    for (int i = 0; i < MAX_CAN_MESSAGES; i++) {
 8000adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ade:	3301      	adds	r3, #1
 8000ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8000ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ae4:	2b0f      	cmp	r3, #15
 8000ae6:	ddb9      	ble.n	8000a5c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
        }
    }

    // Neuen Slot belegen
    for (int i = 0; i < MAX_CAN_MESSAGES; i++) {
 8000ae8:	2300      	movs	r3, #0
 8000aea:	633b      	str	r3, [r7, #48]	; 0x30
 8000aec:	e04b      	b.n	8000b86 <HAL_CAN_RxFifo0MsgPendingCallback+0x17a>
        if (!CAN_MessageDB[i].valid) {
 8000aee:	492a      	ldr	r1, [pc, #168]	; (8000b98 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8000af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000af2:	0013      	movs	r3, r2
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	189b      	adds	r3, r3, r2
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	18cb      	adds	r3, r1, r3
 8000afc:	3310      	adds	r3, #16
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d13d      	bne.n	8000b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>
            CAN_MessageDB[i].id = rxHeader.StdId;
 8000b04:	2414      	movs	r4, #20
 8000b06:	193b      	adds	r3, r7, r4
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	b298      	uxth	r0, r3
 8000b0c:	4922      	ldr	r1, [pc, #136]	; (8000b98 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8000b0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b10:	0013      	movs	r3, r2
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	189b      	adds	r3, r3, r2
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	1c02      	adds	r2, r0, #0
 8000b1a:	525a      	strh	r2, [r3, r1]
            CAN_MessageDB[i].dlc = rxHeader.DLC;
 8000b1c:	193b      	adds	r3, r7, r4
 8000b1e:	691b      	ldr	r3, [r3, #16]
 8000b20:	b2d8      	uxtb	r0, r3
 8000b22:	491d      	ldr	r1, [pc, #116]	; (8000b98 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8000b24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b26:	0013      	movs	r3, r2
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	189b      	adds	r3, r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	18cb      	adds	r3, r1, r3
 8000b30:	3302      	adds	r3, #2
 8000b32:	1c02      	adds	r2, r0, #0
 8000b34:	701a      	strb	r2, [r3, #0]
            memcpy(CAN_MessageDB[i].data, rxData, rxHeader.DLC);
 8000b36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b38:	0013      	movs	r3, r2
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	189b      	adds	r3, r3, r2
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	4a15      	ldr	r2, [pc, #84]	; (8000b98 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8000b42:	189b      	adds	r3, r3, r2
 8000b44:	1cd8      	adds	r0, r3, #3
 8000b46:	193b      	adds	r3, r7, r4
 8000b48:	691a      	ldr	r2, [r3, #16]
 8000b4a:	230c      	movs	r3, #12
 8000b4c:	18fb      	adds	r3, r7, r3
 8000b4e:	0019      	movs	r1, r3
 8000b50:	f006 fb62 	bl	8007218 <memcpy>
            CAN_MessageDB[i].timestamp = HAL_GetTick();
 8000b54:	f002 fe3c 	bl	80037d0 <HAL_GetTick>
 8000b58:	490f      	ldr	r1, [pc, #60]	; (8000b98 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8000b5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b5c:	0013      	movs	r3, r2
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	189b      	adds	r3, r3, r2
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	18cb      	adds	r3, r1, r3
 8000b66:	330c      	adds	r3, #12
 8000b68:	6018      	str	r0, [r3, #0]
            CAN_MessageDB[i].valid = 1;
 8000b6a:	490b      	ldr	r1, [pc, #44]	; (8000b98 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8000b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b6e:	0013      	movs	r3, r2
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	189b      	adds	r3, r3, r2
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	18cb      	adds	r3, r1, r3
 8000b78:	3310      	adds	r3, #16
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	701a      	strb	r2, [r3, #0]
            return;
 8000b7e:	e005      	b.n	8000b8c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
    for (int i = 0; i < MAX_CAN_MESSAGES; i++) {
 8000b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b82:	3301      	adds	r3, #1
 8000b84:	633b      	str	r3, [r7, #48]	; 0x30
 8000b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b88:	2b0f      	cmp	r3, #15
 8000b8a:	ddb0      	ble.n	8000aee <HAL_CAN_RxFifo0MsgPendingCallback+0xe2>
        }
    }
}
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	b00f      	add	sp, #60	; 0x3c
 8000b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	20000970 	.word	0x20000970
 8000b98:	200005ac 	.word	0x200005ac

08000b9c <CAN_Init>:

// ---------- Initialisierung ----------

void CAN_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	; 0x28
 8000ba0:	af00      	add	r7, sp, #0
    // Alle Filter durchlassen
    CAN_FilterTypeDef sFilterConfig;

    sFilterConfig.FilterBank = 0;
 8000ba2:	003b      	movs	r3, r7
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ba8:	003b      	movs	r3, r7
 8000baa:	2200      	movs	r2, #0
 8000bac:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000bae:	003b      	movs	r3, r7
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdHigh = 0x0000;
 8000bb4:	003b      	movs	r3, r7
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIdLow = 0x0000;
 8000bba:	003b      	movs	r3, r7
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000bc0:	003b      	movs	r3, r7
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 8000bc6:	003b      	movs	r3, r7
 8000bc8:	2200      	movs	r2, #0
 8000bca:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000bcc:	003b      	movs	r3, r7
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 8000bd2:	003b      	movs	r3, r7
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	621a      	str	r2, [r3, #32]
    sFilterConfig.SlaveStartFilterBank = 14;
 8000bd8:	003b      	movs	r3, r7
 8000bda:	220e      	movs	r2, #14
 8000bdc:	625a      	str	r2, [r3, #36]	; 0x24

    HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8000bde:	003a      	movs	r2, r7
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <CAN_Init+0x9c>)
 8000be2:	0011      	movs	r1, r2
 8000be4:	0018      	movs	r0, r3
 8000be6:	f003 fc5d 	bl	80044a4 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan);
 8000bea:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <CAN_Init+0x9c>)
 8000bec:	0018      	movs	r0, r3
 8000bee:	f003 fd4b 	bl	8004688 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <CAN_Init+0x9c>)
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f003 ffb0 	bl	8004b5c <HAL_CAN_ActivateNotification>
    HAL_CAN_ActivateNotification(&hcan, CAN_IT_TX_MAILBOX_EMPTY);  // wichtig
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <CAN_Init+0x9c>)
 8000bfe:	2101      	movs	r1, #1
 8000c00:	0018      	movs	r0, r3
 8000c02:	f003 ffab 	bl	8004b5c <HAL_CAN_ActivateNotification>

    memset(CAN_MessageDB, 0, sizeof(CAN_MessageDB));
 8000c06:	23a0      	movs	r3, #160	; 0xa0
 8000c08:	005a      	lsls	r2, r3, #1
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <CAN_Init+0xa0>)
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f006 faba 	bl	8007188 <memset>
    memset(TxQueue, 0, sizeof(TxQueue));
 8000c14:	23a0      	movs	r3, #160	; 0xa0
 8000c16:	009a      	lsls	r2, r3, #2
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <CAN_Init+0xa4>)
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f006 fab3 	bl	8007188 <memset>
    TxQueueHead = TxQueueTail = 0;
 8000c22:	2100      	movs	r1, #0
 8000c24:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <CAN_Init+0xa8>)
 8000c26:	1c0a      	adds	r2, r1, #0
 8000c28:	701a      	strb	r2, [r3, #0]
 8000c2a:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <CAN_Init+0xac>)
 8000c2c:	1c0a      	adds	r2, r1, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b00a      	add	sp, #40	; 0x28
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000ec8 	.word	0x20000ec8
 8000c3c:	200005ac 	.word	0x200005ac
 8000c40:	200006ec 	.word	0x200006ec
 8000c44:	2000096d 	.word	0x2000096d
 8000c48:	2000096c 	.word	0x2000096c

08000c4c <TxQueue_IsFull>:

// ---------- Senden ----------

static uint8_t TxQueue_IsFull(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
    return ((TxQueueHead + 1) % CAN_TX_QUEUE_LENGTH) == TxQueueTail;
 8000c50:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <TxQueue_IsFull+0x34>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	3301      	adds	r3, #1
 8000c58:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <TxQueue_IsFull+0x38>)
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	d504      	bpl.n	8000c68 <TxQueue_IsFull+0x1c>
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	2220      	movs	r2, #32
 8000c62:	4252      	negs	r2, r2
 8000c64:	4313      	orrs	r3, r2
 8000c66:	3301      	adds	r3, #1
 8000c68:	001a      	movs	r2, r3
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <TxQueue_IsFull+0x3c>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	425a      	negs	r2, r3
 8000c74:	4153      	adcs	r3, r2
 8000c76:	b2db      	uxtb	r3, r3
}
 8000c78:	0018      	movs	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	2000096c 	.word	0x2000096c
 8000c84:	8000001f 	.word	0x8000001f
 8000c88:	2000096d 	.word	0x2000096d

08000c8c <TxQueue_IsEmpty>:

static uint8_t TxQueue_IsEmpty(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
    return TxQueueHead == TxQueueTail;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <TxQueue_IsEmpty+0x20>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <TxQueue_IsEmpty+0x24>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	425a      	negs	r2, r3
 8000ca0:	4153      	adcs	r3, r2
 8000ca2:	b2db      	uxtb	r3, r3
}
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	2000096c 	.word	0x2000096c
 8000cb0:	2000096d 	.word	0x2000096d

08000cb4 <TxQueue_Push>:

static void TxQueue_Push(const CAN_Message_t* msg)
{
 8000cb4:	b590      	push	{r4, r7, lr}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
    TxQueue[TxQueueHead] = *msg;
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <TxQueue_Push+0x50>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	0019      	movs	r1, r3
 8000cc4:	4a10      	ldr	r2, [pc, #64]	; (8000d08 <TxQueue_Push+0x54>)
 8000cc6:	000b      	movs	r3, r1
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	185b      	adds	r3, r3, r1
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	18d3      	adds	r3, r2, r3
 8000cd2:	000a      	movs	r2, r1
 8000cd4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000cd6:	c313      	stmia	r3!, {r0, r1, r4}
 8000cd8:	ca03      	ldmia	r2!, {r0, r1}
 8000cda:	c303      	stmia	r3!, {r0, r1}
    TxQueueHead = (TxQueueHead + 1) % CAN_TX_QUEUE_LENGTH;
 8000cdc:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <TxQueue_Push+0x50>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	4a09      	ldr	r2, [pc, #36]	; (8000d0c <TxQueue_Push+0x58>)
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	d504      	bpl.n	8000cf4 <TxQueue_Push+0x40>
 8000cea:	3b01      	subs	r3, #1
 8000cec:	2220      	movs	r2, #32
 8000cee:	4252      	negs	r2, r2
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <TxQueue_Push+0x50>)
 8000cf8:	701a      	strb	r2, [r3, #0]
}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b003      	add	sp, #12
 8000d00:	bd90      	pop	{r4, r7, pc}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	2000096c 	.word	0x2000096c
 8000d08:	200006ec 	.word	0x200006ec
 8000d0c:	8000001f 	.word	0x8000001f

08000d10 <TxQueue_Peek>:

static CAN_Message_t* TxQueue_Peek(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
    if (TxQueue_IsEmpty()) return NULL;
 8000d14:	f7ff ffba 	bl	8000c8c <TxQueue_IsEmpty>
 8000d18:	1e03      	subs	r3, r0, #0
 8000d1a:	d001      	beq.n	8000d20 <TxQueue_Peek+0x10>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	e009      	b.n	8000d34 <TxQueue_Peek+0x24>
    return &TxQueue[TxQueueTail];
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <TxQueue_Peek+0x2c>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	001a      	movs	r2, r3
 8000d28:	0013      	movs	r3, r2
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	189b      	adds	r3, r3, r2
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	4a03      	ldr	r2, [pc, #12]	; (8000d40 <TxQueue_Peek+0x30>)
 8000d32:	189b      	adds	r3, r3, r2
}
 8000d34:	0018      	movs	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	2000096d 	.word	0x2000096d
 8000d40:	200006ec 	.word	0x200006ec

08000d44 <TxQueue_Pop>:

static void TxQueue_Pop(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
    if (!TxQueue_IsEmpty()) {
 8000d48:	f7ff ffa0 	bl	8000c8c <TxQueue_IsEmpty>
 8000d4c:	1e03      	subs	r3, r0, #0
 8000d4e:	d10e      	bne.n	8000d6e <TxQueue_Pop+0x2a>
        TxQueueTail = (TxQueueTail + 1) % CAN_TX_QUEUE_LENGTH;
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <TxQueue_Pop+0x30>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	3301      	adds	r3, #1
 8000d58:	4a07      	ldr	r2, [pc, #28]	; (8000d78 <TxQueue_Pop+0x34>)
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	d504      	bpl.n	8000d68 <TxQueue_Pop+0x24>
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	2220      	movs	r2, #32
 8000d62:	4252      	negs	r2, r2
 8000d64:	4313      	orrs	r3, r2
 8000d66:	3301      	adds	r3, #1
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4b02      	ldr	r3, [pc, #8]	; (8000d74 <TxQueue_Pop+0x30>)
 8000d6c:	701a      	strb	r2, [r3, #0]
    }
}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	2000096d 	.word	0x2000096d
 8000d78:	8000001f 	.word	0x8000001f

08000d7c <CAN_ProcessTxQueue>:

// Diese Funktion prüft freie Mailboxen und sendet aus Queue
static void CAN_ProcessTxQueue(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	; 0x28
 8000d80:	af00      	add	r7, sp, #0
    if (TxQueue_IsEmpty()) return;
 8000d82:	f7ff ff83 	bl	8000c8c <TxQueue_IsEmpty>
 8000d86:	1e03      	subs	r3, r0, #0
 8000d88:	d142      	bne.n	8000e10 <CAN_ProcessTxQueue+0x94>

    for (int mbox = 0; mbox < 3; mbox++) {
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d8e:	e03b      	b.n	8000e08 <CAN_ProcessTxQueue+0x8c>
        uint32_t mailbox = (mbox == 0) ? CAN_TX_MAILBOX0 :
 8000d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d006      	beq.n	8000da4 <CAN_ProcessTxQueue+0x28>
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d101      	bne.n	8000da0 <CAN_ProcessTxQueue+0x24>
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	e002      	b.n	8000da6 <CAN_ProcessTxQueue+0x2a>
 8000da0:	2304      	movs	r3, #4
 8000da2:	e000      	b.n	8000da6 <CAN_ProcessTxQueue+0x2a>
 8000da4:	2301      	movs	r3, #1
 8000da6:	623b      	str	r3, [r7, #32]
                           (mbox == 1) ? CAN_TX_MAILBOX1 :
                                         CAN_TX_MAILBOX2;

        if (!HAL_CAN_IsTxMessagePending(&hcan, mailbox)) {
 8000da8:	6a3a      	ldr	r2, [r7, #32]
 8000daa:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <CAN_ProcessTxQueue+0xa4>)
 8000dac:	0011      	movs	r1, r2
 8000dae:	0018      	movs	r0, r3
 8000db0:	f003 fd82 	bl	80048b8 <HAL_CAN_IsTxMessagePending>
 8000db4:	1e03      	subs	r3, r0, #0
 8000db6:	d124      	bne.n	8000e02 <CAN_ProcessTxQueue+0x86>
            CAN_Message_t* msg = TxQueue_Peek();
 8000db8:	f7ff ffaa 	bl	8000d10 <TxQueue_Peek>
 8000dbc:	0003      	movs	r3, r0
 8000dbe:	61fb      	str	r3, [r7, #28]
            if (msg == NULL) return;
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d026      	beq.n	8000e14 <CAN_ProcessTxQueue+0x98>

            CAN_TxHeaderTypeDef txHeader;
            uint32_t txMailbox;

            txHeader.StdId = msg->id;
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	001a      	movs	r2, r3
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	601a      	str	r2, [r3, #0]
            txHeader.IDE = CAN_ID_STD;
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
            txHeader.RTR = CAN_RTR_DATA;
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	2200      	movs	r2, #0
 8000dda:	60da      	str	r2, [r3, #12]
            txHeader.DLC = msg->dlc;
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	789b      	ldrb	r3, [r3, #2]
 8000de0:	001a      	movs	r2, r3
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	611a      	str	r2, [r3, #16]
            txHeader.TransmitGlobalTime = DISABLE;
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2200      	movs	r2, #0
 8000dea:	751a      	strb	r2, [r3, #20]

            if (HAL_CAN_AddTxMessage(&hcan, &txHeader, msg->data, &txMailbox) == HAL_OK) {
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	1cda      	adds	r2, r3, #3
 8000df0:	003b      	movs	r3, r7
 8000df2:	1d39      	adds	r1, r7, #4
 8000df4:	480a      	ldr	r0, [pc, #40]	; (8000e20 <CAN_ProcessTxQueue+0xa4>)
 8000df6:	f003 fc8d 	bl	8004714 <HAL_CAN_AddTxMessage>
 8000dfa:	1e03      	subs	r3, r0, #0
 8000dfc:	d10c      	bne.n	8000e18 <CAN_ProcessTxQueue+0x9c>
                TxQueue_Pop();
 8000dfe:	f7ff ffa1 	bl	8000d44 <TxQueue_Pop>
    for (int mbox = 0; mbox < 3; mbox++) {
 8000e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e04:	3301      	adds	r3, #1
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
 8000e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	ddc0      	ble.n	8000d90 <CAN_ProcessTxQueue+0x14>
 8000e0e:	e004      	b.n	8000e1a <CAN_ProcessTxQueue+0x9e>
    if (TxQueue_IsEmpty()) return;
 8000e10:	46c0      	nop			; (mov r8, r8)
 8000e12:	e002      	b.n	8000e1a <CAN_ProcessTxQueue+0x9e>
            if (msg == NULL) return;
 8000e14:	46c0      	nop			; (mov r8, r8)
 8000e16:	e000      	b.n	8000e1a <CAN_ProcessTxQueue+0x9e>
            } else {
                return; // Busy, abbrechen
 8000e18:	46c0      	nop			; (mov r8, r8)
            }
        }
    }
}
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b00a      	add	sp, #40	; 0x28
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000ec8 	.word	0x20000ec8

08000e24 <HAL_CAN_TxMailbox0CompleteCallback>:

// Wird bei Mailbox-Übertragung abgeschlossen aufgerufen
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) { CAN_ProcessTxQueue(); }
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	f7ff ffa6 	bl	8000d7c <CAN_ProcessTxQueue>
 8000e30:	46c0      	nop			; (mov r8, r8)
 8000e32:	46bd      	mov	sp, r7
 8000e34:	b002      	add	sp, #8
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) { CAN_ProcessTxQueue(); }
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	f7ff ff9c 	bl	8000d7c <CAN_ProcessTxQueue>
 8000e44:	46c0      	nop			; (mov r8, r8)
 8000e46:	46bd      	mov	sp, r7
 8000e48:	b002      	add	sp, #8
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) { CAN_ProcessTxQueue(); }
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	f7ff ff92 	bl	8000d7c <CAN_ProcessTxQueue>
 8000e58:	46c0      	nop			; (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b002      	add	sp, #8
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <CAN_QueueMessage>:

HAL_StatusTypeDef CAN_QueueMessage(const CAN_Message_t* msg)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
    if (TxQueue_IsFull()) {
 8000e68:	f7ff fef0 	bl	8000c4c <TxQueue_IsFull>
 8000e6c:	1e03      	subs	r3, r0, #0
 8000e6e:	d001      	beq.n	8000e74 <CAN_QueueMessage+0x14>
        return HAL_ERROR;  // Queue voll
 8000e70:	2301      	movs	r3, #1
 8000e72:	e006      	b.n	8000e82 <CAN_QueueMessage+0x22>
    }

    TxQueue_Push(msg);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	0018      	movs	r0, r3
 8000e78:	f7ff ff1c 	bl	8000cb4 <TxQueue_Push>
    CAN_ProcessTxQueue();  // direkt versuchen zu senden
 8000e7c:	f7ff ff7e 	bl	8000d7c <CAN_ProcessTxQueue>
    return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	0018      	movs	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b002      	add	sp, #8
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <CAN_GetMessage>:

// ---------- Lesen empfangener Daten ----------

CAN_Message_t* CAN_GetMessage(uint16_t id)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	0002      	movs	r2, r0
 8000e94:	1dbb      	adds	r3, r7, #6
 8000e96:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < MAX_CAN_MESSAGES; i++) {
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	e020      	b.n	8000ee0 <CAN_GetMessage+0x54>
        if (CAN_MessageDB[i].valid && CAN_MessageDB[i].id == id) {
 8000e9e:	4914      	ldr	r1, [pc, #80]	; (8000ef0 <CAN_GetMessage+0x64>)
 8000ea0:	68fa      	ldr	r2, [r7, #12]
 8000ea2:	0013      	movs	r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	189b      	adds	r3, r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	18cb      	adds	r3, r1, r3
 8000eac:	3310      	adds	r3, #16
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d012      	beq.n	8000eda <CAN_GetMessage+0x4e>
 8000eb4:	490e      	ldr	r1, [pc, #56]	; (8000ef0 <CAN_GetMessage+0x64>)
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	0013      	movs	r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	189b      	adds	r3, r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	5a5b      	ldrh	r3, [r3, r1]
 8000ec2:	1dba      	adds	r2, r7, #6
 8000ec4:	8812      	ldrh	r2, [r2, #0]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d107      	bne.n	8000eda <CAN_GetMessage+0x4e>
            return &CAN_MessageDB[i];
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	0013      	movs	r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	189b      	adds	r3, r3, r2
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <CAN_GetMessage+0x64>)
 8000ed6:	189b      	adds	r3, r3, r2
 8000ed8:	e006      	b.n	8000ee8 <CAN_GetMessage+0x5c>
    for (int i = 0; i < MAX_CAN_MESSAGES; i++) {
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	3301      	adds	r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2b0f      	cmp	r3, #15
 8000ee4:	dddb      	ble.n	8000e9e <CAN_GetMessage+0x12>
        }
    }
    return NULL;
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	0018      	movs	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b004      	add	sp, #16
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	200005ac 	.word	0x200005ac

08000ef4 <idx>:
// Speicher: Pages × (8 Zeilen × 21 Spalten)
static char s_pages[DISP_MAX_PAGES][DISP_ROWS * DISP_COLS];
static uint8_t s_active_page = 0;

// interne Helfer
static inline size_t idx(uint8_t row, uint8_t col) { return ((size_t)row * DISP_COLS) + col; }
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	0002      	movs	r2, r0
 8000efc:	1dfb      	adds	r3, r7, #7
 8000efe:	701a      	strb	r2, [r3, #0]
 8000f00:	1dbb      	adds	r3, r7, #6
 8000f02:	1c0a      	adds	r2, r1, #0
 8000f04:	701a      	strb	r2, [r3, #0]
 8000f06:	1dfb      	adds	r3, r7, #7
 8000f08:	781a      	ldrb	r2, [r3, #0]
 8000f0a:	0013      	movs	r3, r2
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	189b      	adds	r3, r3, r2
 8000f10:	00da      	lsls	r2, r3, #3
 8000f12:	1ad2      	subs	r2, r2, r3
 8000f14:	1dbb      	adds	r3, r7, #6
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	18d3      	adds	r3, r2, r3
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b002      	add	sp, #8
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <clear_mem>:
static inline bool in_bounds(uint8_t row, uint8_t col) { return row < DISP_ROWS && col < DISP_COLS; }
static void clear_mem(char* mem) { memset(mem, ' ', DISP_ROWS * DISP_COLS); }
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	22a8      	movs	r2, #168	; 0xa8
 8000f2e:	2120      	movs	r1, #32
 8000f30:	0018      	movs	r0, r3
 8000f32:	f006 f929 	bl	8007188 <memset>
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	b002      	add	sp, #8
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <DISP_GoHome>:

static uint8_t s_home_page = 0;  // Default-Home

void DISP_GoHome(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
    DISP_SetPage(s_home_page);
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <DISP_GoHome+0x14>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f000 f85d 	bl	8001008 <DISP_SetPage>
}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000d65 	.word	0x20000d65

08000f58 <DISP_SendStatus>:

void DISP_SendStatus(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
    CAN_Message_t m = {0};
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	0018      	movs	r0, r3
 8000f62:	2314      	movs	r3, #20
 8000f64:	001a      	movs	r2, r3
 8000f66:	2100      	movs	r1, #0
 8000f68:	f006 f90e 	bl	8007188 <memset>
    m.id  = DISP_CAN_ID_STATUS;
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	2232      	movs	r2, #50	; 0x32
 8000f70:	32ff      	adds	r2, #255	; 0xff
 8000f72:	801a      	strh	r2, [r3, #0]
    m.dlc = 1;
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	2201      	movs	r2, #1
 8000f78:	709a      	strb	r2, [r3, #2]
    m.data[0] = DISP_GetPage();
 8000f7a:	f000 f85f 	bl	800103c <DISP_GetPage>
 8000f7e:	0003      	movs	r3, r0
 8000f80:	001a      	movs	r2, r3
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	70da      	strb	r2, [r3, #3]
    CAN_QueueMessage(&m);
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f7ff ff69 	bl	8000e60 <CAN_QueueMessage>
}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b006      	add	sp, #24
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <DISP_Init>:


void DISP_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8000f9e:	f002 f979 	bl	8003294 <ssd1306_Init>
    for (uint8_t p = 0; p < DISP_MAX_PAGES; ++p) clear_mem(s_pages[p]);
 8000fa2:	1dfb      	adds	r3, r7, #7
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
 8000fa8:	e00d      	b.n	8000fc6 <DISP_Init+0x2e>
 8000faa:	1dfb      	adds	r3, r7, #7
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	22a8      	movs	r2, #168	; 0xa8
 8000fb0:	435a      	muls	r2, r3
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <DISP_Init+0x60>)
 8000fb4:	18d3      	adds	r3, r2, r3
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f7ff ffb3 	bl	8000f22 <clear_mem>
 8000fbc:	1dfb      	adds	r3, r7, #7
 8000fbe:	1dfa      	adds	r2, r7, #7
 8000fc0:	7812      	ldrb	r2, [r2, #0]
 8000fc2:	3201      	adds	r2, #1
 8000fc4:	701a      	strb	r2, [r3, #0]
 8000fc6:	1dfb      	adds	r3, r7, #7
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b05      	cmp	r3, #5
 8000fcc:	d9ed      	bls.n	8000faa <DISP_Init+0x12>
    s_home_page = 0;
 8000fce:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <DISP_Init+0x64>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
    s_active_page = s_home_page;
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <DISP_Init+0x64>)
 8000fd6:	781a      	ldrb	r2, [r3, #0]
 8000fd8:	4b09      	ldr	r3, [pc, #36]	; (8001000 <DISP_Init+0x68>)
 8000fda:	701a      	strb	r2, [r3, #0]

    // Beispiel: Header auf Page 0
    DISP_WriteText(0, 0, "Page 0");
 8000fdc:	4b09      	ldr	r3, [pc, #36]	; (8001004 <DISP_Init+0x6c>)
 8000fde:	001a      	movs	r2, r3
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f000 f87c 	bl	80010e0 <DISP_WriteText>
    DISP_Render();
 8000fe8:	f000 f832 	bl	8001050 <DISP_Render>
    DISP_SendStatus(); // einmalig den Start-Status schicken (optional)
 8000fec:	f7ff ffb4 	bl	8000f58 <DISP_SendStatus>
}
 8000ff0:	46c0      	nop			; (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b002      	add	sp, #8
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000974 	.word	0x20000974
 8000ffc:	20000d65 	.word	0x20000d65
 8001000:	20000d64 	.word	0x20000d64
 8001004:	08007ad4 	.word	0x08007ad4

08001008 <DISP_SetPage>:

void DISP_SetPage(uint8_t page)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	0002      	movs	r2, r0
 8001010:	1dfb      	adds	r3, r7, #7
 8001012:	701a      	strb	r2, [r3, #0]
    if (page >= DISP_MAX_PAGES) {
 8001014:	1dfb      	adds	r3, r7, #7
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b05      	cmp	r3, #5
 800101a:	d903      	bls.n	8001024 <DISP_SetPage+0x1c>
        Error_Register(ERROR_DISPLAY_INVALID_PAGE);
 800101c:	2010      	movs	r0, #16
 800101e:	f000 fd5d 	bl	8001adc <Error_Register>
        return;
 8001022:	e005      	b.n	8001030 <DISP_SetPage+0x28>
    }
    s_active_page = page;
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <DISP_SetPage+0x30>)
 8001026:	1dfa      	adds	r2, r7, #7
 8001028:	7812      	ldrb	r2, [r2, #0]
 800102a:	701a      	strb	r2, [r3, #0]
    DISP_Render();
 800102c:	f000 f810 	bl	8001050 <DISP_Render>
}
 8001030:	46bd      	mov	sp, r7
 8001032:	b002      	add	sp, #8
 8001034:	bd80      	pop	{r7, pc}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	20000d64 	.word	0x20000d64

0800103c <DISP_GetPage>:

uint8_t DISP_GetPage(void) { return s_active_page; }
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
 8001040:	4b02      	ldr	r3, [pc, #8]	; (800104c <DISP_GetPage+0x10>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	0018      	movs	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	20000d64 	.word	0x20000d64

08001050 <DISP_Render>:
}

void DISP_ClearActive(void) { clear_mem(s_pages[s_active_page]); }

void DISP_Render(void)
{
 8001050:	b5b0      	push	{r4, r5, r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af02      	add	r7, sp, #8
    // Blit der aktiven Page auf das Display
    for (uint8_t row = 0; row < DISP_ROWS; ++row) {
 8001056:	2317      	movs	r3, #23
 8001058:	18fb      	adds	r3, r7, r3
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
 800105e:	e02d      	b.n	80010bc <DISP_Render+0x6c>
        ssd1306_SetCursor(0, row * 8);
 8001060:	2517      	movs	r5, #23
 8001062:	197b      	adds	r3, r7, r5
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	b2db      	uxtb	r3, r3
 800106a:	0019      	movs	r1, r3
 800106c:	2000      	movs	r0, #0
 800106e:	f002 fafd 	bl	800366c <ssd1306_SetCursor>
        // Zeile als C-String puffern
        char line[DISP_COLS + 1];
        memcpy(line, &s_pages[s_active_page][idx(row, 0)], DISP_COLS);
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <DISP_Render+0x84>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	001c      	movs	r4, r3
 8001078:	197b      	adds	r3, r7, r5
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2100      	movs	r1, #0
 800107e:	0018      	movs	r0, r3
 8001080:	f7ff ff38 	bl	8000ef4 <idx>
 8001084:	0002      	movs	r2, r0
 8001086:	23a8      	movs	r3, #168	; 0xa8
 8001088:	4363      	muls	r3, r4
 800108a:	189a      	adds	r2, r3, r2
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <DISP_Render+0x88>)
 800108e:	18d1      	adds	r1, r2, r3
 8001090:	003b      	movs	r3, r7
 8001092:	2215      	movs	r2, #21
 8001094:	0018      	movs	r0, r3
 8001096:	f006 f8bf 	bl	8007218 <memcpy>
        line[DISP_COLS] = '\0';
 800109a:	003b      	movs	r3, r7
 800109c:	2200      	movs	r2, #0
 800109e:	755a      	strb	r2, [r3, #21]
        ssd1306_WriteString(line, Font_6x8, White);
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <DISP_Render+0x8c>)
 80010a2:	0038      	movs	r0, r7
 80010a4:	2201      	movs	r2, #1
 80010a6:	9200      	str	r2, [sp, #0]
 80010a8:	6819      	ldr	r1, [r3, #0]
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f002 fab1 	bl	8003614 <ssd1306_WriteString>
    for (uint8_t row = 0; row < DISP_ROWS; ++row) {
 80010b2:	197b      	adds	r3, r7, r5
 80010b4:	197a      	adds	r2, r7, r5
 80010b6:	7812      	ldrb	r2, [r2, #0]
 80010b8:	3201      	adds	r2, #1
 80010ba:	701a      	strb	r2, [r3, #0]
 80010bc:	2317      	movs	r3, #23
 80010be:	18fb      	adds	r3, r7, r3
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b07      	cmp	r3, #7
 80010c4:	d9cc      	bls.n	8001060 <DISP_Render+0x10>
    }
    ssd1306_UpdateScreen();
 80010c6:	f002 f96b 	bl	80033a0 <ssd1306_UpdateScreen>
}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b006      	add	sp, #24
 80010d0:	bdb0      	pop	{r4, r5, r7, pc}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	20000d64 	.word	0x20000d64
 80010d8:	20000974 	.word	0x20000974
 80010dc:	08008188 	.word	0x08008188

080010e0 <DISP_WriteText>:

void DISP_WriteText(uint8_t row, uint8_t col, const char* text)
{
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	603a      	str	r2, [r7, #0]
 80010e8:	1dfb      	adds	r3, r7, #7
 80010ea:	1c02      	adds	r2, r0, #0
 80010ec:	701a      	strb	r2, [r3, #0]
 80010ee:	1dbb      	adds	r3, r7, #6
 80010f0:	1c0a      	adds	r2, r1, #0
 80010f2:	701a      	strb	r2, [r3, #0]
    if (!text) return;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d048      	beq.n	800118c <DISP_WriteText+0xac>
    if (row >= DISP_ROWS) { Error_Register(ERROR_DISPLAY_INVALID_ROW); return; }
 80010fa:	1dfb      	adds	r3, r7, #7
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b07      	cmp	r3, #7
 8001100:	d903      	bls.n	800110a <DISP_WriteText+0x2a>
 8001102:	2011      	movs	r0, #17
 8001104:	f000 fcea 	bl	8001adc <Error_Register>
 8001108:	e041      	b.n	800118e <DISP_WriteText+0xae>
    if (col >= DISP_COLS) { Error_Register(ERROR_DISPLAY_INVALID_COL); return; }
 800110a:	1dbb      	adds	r3, r7, #6
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b14      	cmp	r3, #20
 8001110:	d903      	bls.n	800111a <DISP_WriteText+0x3a>
 8001112:	2012      	movs	r0, #18
 8001114:	f000 fce2 	bl	8001adc <Error_Register>
 8001118:	e039      	b.n	800118e <DISP_WriteText+0xae>

    size_t pos  = idx(row, col);
 800111a:	1dbb      	adds	r3, r7, #6
 800111c:	781a      	ldrb	r2, [r3, #0]
 800111e:	1dfb      	adds	r3, r7, #7
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	0011      	movs	r1, r2
 8001124:	0018      	movs	r0, r3
 8001126:	f7ff fee5 	bl	8000ef4 <idx>
 800112a:	0003      	movs	r3, r0
 800112c:	613b      	str	r3, [r7, #16]
    size_t left = DISP_COLS - col;
 800112e:	1dbb      	adds	r3, r7, #6
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2215      	movs	r2, #21
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	60fb      	str	r3, [r7, #12]

    size_t i = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
    for (; i < left && text[i] != '\0'; ++i) {
 800113c:	e012      	b.n	8001164 <DISP_WriteText+0x84>
        s_pages[s_active_page][pos + i] = text[i];
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	18d2      	adds	r2, r2, r3
 8001144:	4b13      	ldr	r3, [pc, #76]	; (8001194 <DISP_WriteText+0xb4>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	001c      	movs	r4, r3
 800114a:	6939      	ldr	r1, [r7, #16]
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	18cb      	adds	r3, r1, r3
 8001150:	7810      	ldrb	r0, [r2, #0]
 8001152:	4911      	ldr	r1, [pc, #68]	; (8001198 <DISP_WriteText+0xb8>)
 8001154:	22a8      	movs	r2, #168	; 0xa8
 8001156:	4362      	muls	r2, r4
 8001158:	188a      	adds	r2, r1, r2
 800115a:	1c01      	adds	r1, r0, #0
 800115c:	54d1      	strb	r1, [r2, r3]
    for (; i < left && text[i] != '\0'; ++i) {
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	3301      	adds	r3, #1
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	697a      	ldr	r2, [r7, #20]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	429a      	cmp	r2, r3
 800116a:	d205      	bcs.n	8001178 <DISP_WriteText+0x98>
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	18d3      	adds	r3, r2, r3
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1e2      	bne.n	800113e <DISP_WriteText+0x5e>
    }
    if (text[i] != '\0') {
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	18d3      	adds	r3, r2, r3
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d004      	beq.n	800118e <DISP_WriteText+0xae>
        // wurde abgeschnitten
        Error_Register(ERROR_DISPLAY_WRITE_CLIPPED);
 8001184:	2013      	movs	r0, #19
 8001186:	f000 fca9 	bl	8001adc <Error_Register>
 800118a:	e000      	b.n	800118e <DISP_WriteText+0xae>
    if (!text) return;
 800118c:	46c0      	nop			; (mov r8, r8)
    }
}
 800118e:	46bd      	mov	sp, r7
 8001190:	b007      	add	sp, #28
 8001192:	bd90      	pop	{r4, r7, pc}
 8001194:	20000d64 	.word	0x20000d64
 8001198:	20000974 	.word	0x20000974

0800119c <DISP_WriteNumber>:
    s_pages[s_active_page][idx(row, col)] = c;
}

void DISP_WriteNumber(int32_t value, int8_t decimals, uint8_t min_width,
                      uint8_t row, uint8_t col, const char* unit)
{
 800119c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800119e:	b0dd      	sub	sp, #372	; 0x174
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	000c      	movs	r4, r1
 80011a6:	0010      	movs	r0, r2
 80011a8:	0019      	movs	r1, r3
 80011aa:	4bd2      	ldr	r3, [pc, #840]	; (80014f4 <DISP_WriteNumber+0x358>)
 80011ac:	25b8      	movs	r5, #184	; 0xb8
 80011ae:	006d      	lsls	r5, r5, #1
 80011b0:	195b      	adds	r3, r3, r5
 80011b2:	19db      	adds	r3, r3, r7
 80011b4:	1c22      	adds	r2, r4, #0
 80011b6:	701a      	strb	r2, [r3, #0]
 80011b8:	4bcf      	ldr	r3, [pc, #828]	; (80014f8 <DISP_WriteNumber+0x35c>)
 80011ba:	002c      	movs	r4, r5
 80011bc:	191b      	adds	r3, r3, r4
 80011be:	19db      	adds	r3, r3, r7
 80011c0:	1c02      	adds	r2, r0, #0
 80011c2:	701a      	strb	r2, [r3, #0]
 80011c4:	4bcd      	ldr	r3, [pc, #820]	; (80014fc <DISP_WriteNumber+0x360>)
 80011c6:	191b      	adds	r3, r3, r4
 80011c8:	19db      	adds	r3, r3, r7
 80011ca:	1c0a      	adds	r2, r1, #0
 80011cc:	701a      	strb	r2, [r3, #0]
	if (decimals < 0) {
 80011ce:	4bc9      	ldr	r3, [pc, #804]	; (80014f4 <DISP_WriteNumber+0x358>)
 80011d0:	191b      	adds	r3, r3, r4
 80011d2:	19db      	adds	r3, r3, r7
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b7f      	cmp	r3, #127	; 0x7f
 80011d8:	d907      	bls.n	80011ea <DISP_WriteNumber+0x4e>
	    Error_Register(ERROR_DISPLAY_BAD_DECIMALS);
 80011da:	2014      	movs	r0, #20
 80011dc:	f000 fc7e 	bl	8001adc <Error_Register>
	    decimals = 0; // defensiv
 80011e0:	4bc4      	ldr	r3, [pc, #784]	; (80014f4 <DISP_WriteNumber+0x358>)
 80011e2:	191b      	adds	r3, r3, r4
 80011e4:	19db      	adds	r3, r3, r7
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
	}

	if (row >= DISP_ROWS) { Error_Register(ERROR_DISPLAY_INVALID_ROW); return; }
 80011ea:	4bc4      	ldr	r3, [pc, #784]	; (80014fc <DISP_WriteNumber+0x360>)
 80011ec:	22b8      	movs	r2, #184	; 0xb8
 80011ee:	0052      	lsls	r2, r2, #1
 80011f0:	189b      	adds	r3, r3, r2
 80011f2:	19db      	adds	r3, r3, r7
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b07      	cmp	r3, #7
 80011f8:	d904      	bls.n	8001204 <DISP_WriteNumber+0x68>
 80011fa:	2011      	movs	r0, #17
 80011fc:	f000 fc6e 	bl	8001adc <Error_Register>
 8001200:	f000 fbee 	bl	80019e0 <DISP_WriteNumber+0x844>
	if (col >= DISP_COLS) { Error_Register(ERROR_DISPLAY_INVALID_COL); return; }
 8001204:	23c0      	movs	r3, #192	; 0xc0
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	2208      	movs	r2, #8
 800120a:	189b      	adds	r3, r3, r2
 800120c:	19db      	adds	r3, r3, r7
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b14      	cmp	r3, #20
 8001212:	d904      	bls.n	800121e <DISP_WriteNumber+0x82>
 8001214:	2012      	movs	r0, #18
 8001216:	f000 fc61 	bl	8001adc <Error_Register>
 800121a:	f000 fbe1 	bl	80019e0 <DISP_WriteNumber+0x844>

	// Max. plausible Nachkommastellen begrenzen (z. B. 6)
	if (decimals > 6) {
 800121e:	4bb5      	ldr	r3, [pc, #724]	; (80014f4 <DISP_WriteNumber+0x358>)
 8001220:	24b8      	movs	r4, #184	; 0xb8
 8001222:	0064      	lsls	r4, r4, #1
 8001224:	191b      	adds	r3, r3, r4
 8001226:	19db      	adds	r3, r3, r7
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	b25b      	sxtb	r3, r3
 800122c:	2b06      	cmp	r3, #6
 800122e:	dd07      	ble.n	8001240 <DISP_WriteNumber+0xa4>
	    Error_Register(ERROR_DISPLAY_BAD_DECIMALS);
 8001230:	2014      	movs	r0, #20
 8001232:	f000 fc53 	bl	8001adc <Error_Register>
	    decimals = 6;
 8001236:	4baf      	ldr	r3, [pc, #700]	; (80014f4 <DISP_WriteNumber+0x358>)
 8001238:	191b      	adds	r3, r3, r4
 800123a:	19db      	adds	r3, r3, r7
 800123c:	2206      	movs	r2, #6
 800123e:	701a      	strb	r2, [r3, #0]
	}

	// Restbreite der Zeile
	uint8_t rest_cols = DISP_COLS - col;
 8001240:	2028      	movs	r0, #40	; 0x28
 8001242:	30ff      	adds	r0, #255	; 0xff
 8001244:	183a      	adds	r2, r7, r0
 8001246:	23c0      	movs	r3, #192	; 0xc0
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	2108      	movs	r1, #8
 800124c:	185b      	adds	r3, r3, r1
 800124e:	19db      	adds	r3, r3, r7
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2115      	movs	r1, #21
 8001254:	1acb      	subs	r3, r1, r3
 8001256:	7013      	strb	r3, [r2, #0]
	// Wenn min_width größer als Rest: markieren, aber trotzdem so viel wie geht schreiben
	if (min_width > rest_cols) {
 8001258:	4ba7      	ldr	r3, [pc, #668]	; (80014f8 <DISP_WriteNumber+0x35c>)
 800125a:	22b8      	movs	r2, #184	; 0xb8
 800125c:	0052      	lsls	r2, r2, #1
 800125e:	189b      	adds	r3, r3, r2
 8001260:	19da      	adds	r2, r3, r7
 8001262:	183b      	adds	r3, r7, r0
 8001264:	7812      	ldrb	r2, [r2, #0]
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	429a      	cmp	r2, r3
 800126a:	d902      	bls.n	8001272 <DISP_WriteNumber+0xd6>
	    Error_Register(ERROR_DISPLAY_MINWIDTH_TOO_BIG);
 800126c:	2015      	movs	r0, #21
 800126e:	f000 fc35 	bl	8001adc <Error_Register>
    char buf[32];        // Ziffern ohne Vorzeichen und ohne Punkt
    char out[40];        // Zahl mit optionalem '-' und Dezimalpunkt
    char final[48];      // out + optional unit
    char field[64];      // optionales Left-Padding vor final

    bool neg = (value < 0);
 8001272:	2193      	movs	r1, #147	; 0x93
 8001274:	0049      	lsls	r1, r1, #1
 8001276:	187b      	adds	r3, r7, r1
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	0fd2      	lsrs	r2, r2, #31
 800127c:	701a      	strb	r2, [r3, #0]
    uint32_t a = (neg) ? (uint32_t)(-value) : (uint32_t)value;
 800127e:	187b      	adds	r3, r7, r1
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <DISP_WriteNumber+0xf0>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	425b      	negs	r3, r3
 800128a:	e000      	b.n	800128e <DISP_WriteNumber+0xf2>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	22b6      	movs	r2, #182	; 0xb6
 8001290:	0052      	lsls	r2, r2, #1
 8001292:	18b9      	adds	r1, r7, r2
 8001294:	600b      	str	r3, [r1, #0]

    if (a == 0) {
 8001296:	18bb      	adds	r3, r7, r2
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d107      	bne.n	80012ae <DISP_WriteNumber+0x112>
        // Spezialfall 0
        buf[0] = '0';
 800129e:	21e0      	movs	r1, #224	; 0xe0
 80012a0:	187b      	adds	r3, r7, r1
 80012a2:	2230      	movs	r2, #48	; 0x30
 80012a4:	701a      	strb	r2, [r3, #0]
        buf[1] = '\0';
 80012a6:	187b      	adds	r3, r7, r1
 80012a8:	2200      	movs	r2, #0
 80012aa:	705a      	strb	r2, [r3, #1]
 80012ac:	e071      	b.n	8001392 <DISP_WriteNumber+0x1f6>
    } else {
        // a als String in buf (vorwärts)
        char rev[32];
        size_t n = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	22b4      	movs	r2, #180	; 0xb4
 80012b2:	0052      	lsls	r2, r2, #1
 80012b4:	18ba      	adds	r2, r7, r2
 80012b6:	6013      	str	r3, [r2, #0]
        while (a > 0 && n < sizeof(rev)) {
 80012b8:	e021      	b.n	80012fe <DISP_WriteNumber+0x162>
            rev[n++] = (char)('0' + (a % 10));
 80012ba:	24b6      	movs	r4, #182	; 0xb6
 80012bc:	0064      	lsls	r4, r4, #1
 80012be:	193b      	adds	r3, r7, r4
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	210a      	movs	r1, #10
 80012c4:	0018      	movs	r0, r3
 80012c6:	f7fe ffb7 	bl	8000238 <__aeabi_uidivmod>
 80012ca:	000b      	movs	r3, r1
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	20b4      	movs	r0, #180	; 0xb4
 80012d0:	0040      	lsls	r0, r0, #1
 80012d2:	183b      	adds	r3, r7, r0
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	1c59      	adds	r1, r3, #1
 80012d8:	1838      	adds	r0, r7, r0
 80012da:	6001      	str	r1, [r0, #0]
 80012dc:	3230      	adds	r2, #48	; 0x30
 80012de:	b2d1      	uxtb	r1, r2
 80012e0:	4a87      	ldr	r2, [pc, #540]	; (8001500 <DISP_WriteNumber+0x364>)
 80012e2:	20b8      	movs	r0, #184	; 0xb8
 80012e4:	0040      	lsls	r0, r0, #1
 80012e6:	1812      	adds	r2, r2, r0
 80012e8:	19d2      	adds	r2, r2, r7
 80012ea:	54d1      	strb	r1, [r2, r3]
            a /= 10;
 80012ec:	193b      	adds	r3, r7, r4
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	210a      	movs	r1, #10
 80012f2:	0018      	movs	r0, r3
 80012f4:	f7fe ff1a 	bl	800012c <__udivsi3>
 80012f8:	0003      	movs	r3, r0
 80012fa:	193a      	adds	r2, r7, r4
 80012fc:	6013      	str	r3, [r2, #0]
        while (a > 0 && n < sizeof(rev)) {
 80012fe:	23b6      	movs	r3, #182	; 0xb6
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	18fb      	adds	r3, r7, r3
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d005      	beq.n	8001316 <DISP_WriteNumber+0x17a>
 800130a:	23b4      	movs	r3, #180	; 0xb4
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	18fb      	adds	r3, r7, r3
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2b1f      	cmp	r3, #31
 8001314:	d9d1      	bls.n	80012ba <DISP_WriteNumber+0x11e>
        }
        // reverse kopieren
        size_t m = (n < sizeof(buf) - 1) ? n : (sizeof(buf) - 1);
 8001316:	23b4      	movs	r3, #180	; 0xb4
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	18fb      	adds	r3, r7, r3
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b1f      	cmp	r3, #31
 8001320:	d900      	bls.n	8001324 <DISP_WriteNumber+0x188>
 8001322:	231f      	movs	r3, #31
 8001324:	2290      	movs	r2, #144	; 0x90
 8001326:	0052      	lsls	r2, r2, #1
 8001328:	18ba      	adds	r2, r7, r2
 800132a:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < m; ++i) buf[i] = rev[n - 1 - i];
 800132c:	2300      	movs	r3, #0
 800132e:	22b2      	movs	r2, #178	; 0xb2
 8001330:	0052      	lsls	r2, r2, #1
 8001332:	18ba      	adds	r2, r7, r2
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	e01b      	b.n	8001370 <DISP_WriteNumber+0x1d4>
 8001338:	23b4      	movs	r3, #180	; 0xb4
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	18fb      	adds	r3, r7, r3
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	20b2      	movs	r0, #178	; 0xb2
 8001342:	0040      	lsls	r0, r0, #1
 8001344:	183b      	adds	r3, r7, r0
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	3b01      	subs	r3, #1
 800134c:	4a6c      	ldr	r2, [pc, #432]	; (8001500 <DISP_WriteNumber+0x364>)
 800134e:	21b8      	movs	r1, #184	; 0xb8
 8001350:	0049      	lsls	r1, r1, #1
 8001352:	1852      	adds	r2, r2, r1
 8001354:	19d2      	adds	r2, r2, r7
 8001356:	5cd1      	ldrb	r1, [r2, r3]
 8001358:	23e0      	movs	r3, #224	; 0xe0
 800135a:	18fa      	adds	r2, r7, r3
 800135c:	183b      	adds	r3, r7, r0
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	18d3      	adds	r3, r2, r3
 8001362:	1c0a      	adds	r2, r1, #0
 8001364:	701a      	strb	r2, [r3, #0]
 8001366:	183b      	adds	r3, r7, r0
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	3301      	adds	r3, #1
 800136c:	183a      	adds	r2, r7, r0
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	23b2      	movs	r3, #178	; 0xb2
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	18fb      	adds	r3, r7, r3
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	2190      	movs	r1, #144	; 0x90
 800137a:	0049      	lsls	r1, r1, #1
 800137c:	187b      	adds	r3, r7, r1
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	429a      	cmp	r2, r3
 8001382:	d3d9      	bcc.n	8001338 <DISP_WriteNumber+0x19c>
        buf[m] = '\0';
 8001384:	23e0      	movs	r3, #224	; 0xe0
 8001386:	18fa      	adds	r2, r7, r3
 8001388:	187b      	adds	r3, r7, r1
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	18d3      	adds	r3, r2, r3
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
    }

    // 2) Dezimalpunkt einfügen → out
    if (decimals > 0) {
 8001392:	4b58      	ldr	r3, [pc, #352]	; (80014f4 <DISP_WriteNumber+0x358>)
 8001394:	24b8      	movs	r4, #184	; 0xb8
 8001396:	0064      	lsls	r4, r4, #1
 8001398:	191b      	adds	r3, r3, r4
 800139a:	19db      	adds	r3, r3, r7
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	b25b      	sxtb	r3, r3
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	dc00      	bgt.n	80013a6 <DISP_WriteNumber+0x20a>
 80013a4:	e189      	b.n	80016ba <DISP_WriteNumber+0x51e>
        size_t len2 = strlen(buf);
 80013a6:	23e0      	movs	r3, #224	; 0xe0
 80013a8:	18fb      	adds	r3, r7, r3
 80013aa:	0018      	movs	r0, r3
 80013ac:	f7fe feac 	bl	8000108 <strlen>
 80013b0:	0003      	movs	r3, r0
 80013b2:	218c      	movs	r1, #140	; 0x8c
 80013b4:	0049      	lsls	r1, r1, #1
 80013b6:	187a      	adds	r2, r7, r1
 80013b8:	6013      	str	r3, [r2, #0]
        size_t int_len = (len2 > (size_t)decimals) ? (len2 - (size_t)decimals) : 0;
 80013ba:	4b4e      	ldr	r3, [pc, #312]	; (80014f4 <DISP_WriteNumber+0x358>)
 80013bc:	191b      	adds	r3, r3, r4
 80013be:	19db      	adds	r3, r3, r7
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	b25b      	sxtb	r3, r3
 80013c4:	187a      	adds	r2, r7, r1
 80013c6:	6812      	ldr	r2, [r2, #0]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d908      	bls.n	80013de <DISP_WriteNumber+0x242>
 80013cc:	4b49      	ldr	r3, [pc, #292]	; (80014f4 <DISP_WriteNumber+0x358>)
 80013ce:	191b      	adds	r3, r3, r4
 80013d0:	19db      	adds	r3, r3, r7
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	b25b      	sxtb	r3, r3
 80013d6:	187a      	adds	r2, r7, r1
 80013d8:	6812      	ldr	r2, [r2, #0]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	e000      	b.n	80013e0 <DISP_WriteNumber+0x244>
 80013de:	2300      	movs	r3, #0
 80013e0:	22b0      	movs	r2, #176	; 0xb0
 80013e2:	0052      	lsls	r2, r2, #1
 80013e4:	18b9      	adds	r1, r7, r2
 80013e6:	600b      	str	r3, [r1, #0]

        char intpart[32], fracpart[32];
        if (int_len == 0) {
 80013e8:	18bb      	adds	r3, r7, r2
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d000      	beq.n	80013f2 <DISP_WriteNumber+0x256>
 80013f0:	e088      	b.n	8001504 <DISP_WriteNumber+0x368>
            // 0.xxx (mit führenden Nullen im frac)
            strcpy(intpart, "0");
 80013f2:	2308      	movs	r3, #8
 80013f4:	18fb      	adds	r3, r7, r3
 80013f6:	2230      	movs	r2, #48	; 0x30
 80013f8:	801a      	strh	r2, [r3, #0]
            size_t need_zeros = (size_t)decimals - len2;
 80013fa:	4b3e      	ldr	r3, [pc, #248]	; (80014f4 <DISP_WriteNumber+0x358>)
 80013fc:	22b8      	movs	r2, #184	; 0xb8
 80013fe:	0052      	lsls	r2, r2, #1
 8001400:	189b      	adds	r3, r3, r2
 8001402:	19db      	adds	r3, r3, r7
 8001404:	2200      	movs	r2, #0
 8001406:	569a      	ldrsb	r2, [r3, r2]
 8001408:	238c      	movs	r3, #140	; 0x8c
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	18fb      	adds	r3, r7, r3
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	228a      	movs	r2, #138	; 0x8a
 8001414:	0052      	lsls	r2, r2, #1
 8001416:	18ba      	adds	r2, r7, r2
 8001418:	6013      	str	r3, [r2, #0]
            size_t p = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	22ae      	movs	r2, #174	; 0xae
 800141e:	0052      	lsls	r2, r2, #1
 8001420:	18ba      	adds	r2, r7, r2
 8001422:	6013      	str	r3, [r2, #0]
            for (size_t i = 0; i < need_zeros && p < sizeof(fracpart) - 1; ++i) fracpart[p++] = '0';
 8001424:	2300      	movs	r3, #0
 8001426:	22ac      	movs	r2, #172	; 0xac
 8001428:	0052      	lsls	r2, r2, #1
 800142a:	18ba      	adds	r2, r7, r2
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	e014      	b.n	800145a <DISP_WriteNumber+0x2be>
 8001430:	21ae      	movs	r1, #174	; 0xae
 8001432:	0049      	lsls	r1, r1, #1
 8001434:	187b      	adds	r3, r7, r1
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	1c5a      	adds	r2, r3, #1
 800143a:	1879      	adds	r1, r7, r1
 800143c:	600a      	str	r2, [r1, #0]
 800143e:	4a30      	ldr	r2, [pc, #192]	; (8001500 <DISP_WriteNumber+0x364>)
 8001440:	21b8      	movs	r1, #184	; 0xb8
 8001442:	0049      	lsls	r1, r1, #1
 8001444:	1852      	adds	r2, r2, r1
 8001446:	19d2      	adds	r2, r2, r7
 8001448:	2130      	movs	r1, #48	; 0x30
 800144a:	54d1      	strb	r1, [r2, r3]
 800144c:	22ac      	movs	r2, #172	; 0xac
 800144e:	0052      	lsls	r2, r2, #1
 8001450:	18bb      	adds	r3, r7, r2
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	3301      	adds	r3, #1
 8001456:	18ba      	adds	r2, r7, r2
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	23ac      	movs	r3, #172	; 0xac
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	18fb      	adds	r3, r7, r3
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	238a      	movs	r3, #138	; 0x8a
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	18fb      	adds	r3, r7, r3
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	429a      	cmp	r2, r3
 800146c:	d205      	bcs.n	800147a <DISP_WriteNumber+0x2de>
 800146e:	23ae      	movs	r3, #174	; 0xae
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	18fb      	adds	r3, r7, r3
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2b1e      	cmp	r3, #30
 8001478:	d9da      	bls.n	8001430 <DISP_WriteNumber+0x294>
            for (size_t i = 0; i < len2 && p < sizeof(fracpart) - 1; ++i) fracpart[p++] = buf[i];
 800147a:	2300      	movs	r3, #0
 800147c:	22aa      	movs	r2, #170	; 0xaa
 800147e:	0052      	lsls	r2, r2, #1
 8001480:	18ba      	adds	r2, r7, r2
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	e019      	b.n	80014ba <DISP_WriteNumber+0x31e>
 8001486:	21ae      	movs	r1, #174	; 0xae
 8001488:	0049      	lsls	r1, r1, #1
 800148a:	187b      	adds	r3, r7, r1
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	1c5a      	adds	r2, r3, #1
 8001490:	1879      	adds	r1, r7, r1
 8001492:	600a      	str	r2, [r1, #0]
 8001494:	22e0      	movs	r2, #224	; 0xe0
 8001496:	18b9      	adds	r1, r7, r2
 8001498:	20aa      	movs	r0, #170	; 0xaa
 800149a:	0040      	lsls	r0, r0, #1
 800149c:	183a      	adds	r2, r7, r0
 800149e:	6812      	ldr	r2, [r2, #0]
 80014a0:	188a      	adds	r2, r1, r2
 80014a2:	7811      	ldrb	r1, [r2, #0]
 80014a4:	4a16      	ldr	r2, [pc, #88]	; (8001500 <DISP_WriteNumber+0x364>)
 80014a6:	24b8      	movs	r4, #184	; 0xb8
 80014a8:	0064      	lsls	r4, r4, #1
 80014aa:	1912      	adds	r2, r2, r4
 80014ac:	19d2      	adds	r2, r2, r7
 80014ae:	54d1      	strb	r1, [r2, r3]
 80014b0:	183b      	adds	r3, r7, r0
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	3301      	adds	r3, #1
 80014b6:	183a      	adds	r2, r7, r0
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	23aa      	movs	r3, #170	; 0xaa
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	18fb      	adds	r3, r7, r3
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	238c      	movs	r3, #140	; 0x8c
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	18fb      	adds	r3, r7, r3
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d205      	bcs.n	80014da <DISP_WriteNumber+0x33e>
 80014ce:	23ae      	movs	r3, #174	; 0xae
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	18fb      	adds	r3, r7, r3
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b1e      	cmp	r3, #30
 80014d8:	d9d5      	bls.n	8001486 <DISP_WriteNumber+0x2ea>
            fracpart[p] = '\0';
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <DISP_WriteNumber+0x364>)
 80014dc:	22b8      	movs	r2, #184	; 0xb8
 80014de:	0052      	lsls	r2, r2, #1
 80014e0:	189b      	adds	r3, r3, r2
 80014e2:	19da      	adds	r2, r3, r7
 80014e4:	23ae      	movs	r3, #174	; 0xae
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	18fb      	adds	r3, r7, r3
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	18d3      	adds	r3, r2, r3
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]
 80014f2:	e034      	b.n	800155e <DISP_WriteNumber+0x3c2>
 80014f4:	fffffe93 	.word	0xfffffe93
 80014f8:	fffffe92 	.word	0xfffffe92
 80014fc:	fffffe91 	.word	0xfffffe91
 8001500:	fffffeb8 	.word	0xfffffeb8
        } else {
            if (int_len >= sizeof(intpart)) int_len = sizeof(intpart) - 1;
 8001504:	22b0      	movs	r2, #176	; 0xb0
 8001506:	0052      	lsls	r2, r2, #1
 8001508:	18bb      	adds	r3, r7, r2
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b1f      	cmp	r3, #31
 800150e:	d902      	bls.n	8001516 <DISP_WriteNumber+0x37a>
 8001510:	231f      	movs	r3, #31
 8001512:	18ba      	adds	r2, r7, r2
 8001514:	6013      	str	r3, [r2, #0]
            memcpy(intpart, buf, int_len);
 8001516:	24b0      	movs	r4, #176	; 0xb0
 8001518:	0064      	lsls	r4, r4, #1
 800151a:	193b      	adds	r3, r7, r4
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	25e0      	movs	r5, #224	; 0xe0
 8001520:	1979      	adds	r1, r7, r5
 8001522:	2308      	movs	r3, #8
 8001524:	18fb      	adds	r3, r7, r3
 8001526:	0018      	movs	r0, r3
 8001528:	f005 fe76 	bl	8007218 <memcpy>
            intpart[int_len] = '\0';
 800152c:	4be4      	ldr	r3, [pc, #912]	; (80018c0 <DISP_WriteNumber+0x724>)
 800152e:	26b8      	movs	r6, #184	; 0xb8
 8001530:	0076      	lsls	r6, r6, #1
 8001532:	199b      	adds	r3, r3, r6
 8001534:	19da      	adds	r2, r3, r7
 8001536:	193b      	adds	r3, r7, r4
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	18d3      	adds	r3, r2, r3
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
            strncpy(fracpart, &buf[int_len], sizeof(fracpart) - 1);
 8001540:	197a      	adds	r2, r7, r5
 8001542:	193b      	adds	r3, r7, r4
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	18d1      	adds	r1, r2, r3
 8001548:	2328      	movs	r3, #40	; 0x28
 800154a:	18fb      	adds	r3, r7, r3
 800154c:	221f      	movs	r2, #31
 800154e:	0018      	movs	r0, r3
 8001550:	f005 fe22 	bl	8007198 <strncpy>
            fracpart[sizeof(fracpart) - 1] = '\0';
 8001554:	4bdb      	ldr	r3, [pc, #876]	; (80018c4 <DISP_WriteNumber+0x728>)
 8001556:	199b      	adds	r3, r3, r6
 8001558:	19db      	adds	r3, r3, r7
 800155a:	2200      	movs	r2, #0
 800155c:	77da      	strb	r2, [r3, #31]
        }

        // out manuell zusammenbauen (bounded)
        size_t w = 0, cap = sizeof(out);
 800155e:	2300      	movs	r3, #0
 8001560:	21a8      	movs	r1, #168	; 0xa8
 8001562:	0049      	lsls	r1, r1, #1
 8001564:	187a      	adds	r2, r7, r1
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	2328      	movs	r3, #40	; 0x28
 800156a:	2288      	movs	r2, #136	; 0x88
 800156c:	0052      	lsls	r2, r2, #1
 800156e:	18b8      	adds	r0, r7, r2
 8001570:	6003      	str	r3, [r0, #0]
        if (neg && w + 1 < cap) out[w++] = '-';
 8001572:	2393      	movs	r3, #147	; 0x93
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	18fb      	adds	r3, r7, r3
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00f      	beq.n	800159e <DISP_WriteNumber+0x402>
 800157e:	187b      	adds	r3, r7, r1
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	3301      	adds	r3, #1
 8001584:	18ba      	adds	r2, r7, r2
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	d908      	bls.n	800159e <DISP_WriteNumber+0x402>
 800158c:	187b      	adds	r3, r7, r1
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	1c5a      	adds	r2, r3, #1
 8001592:	1879      	adds	r1, r7, r1
 8001594:	600a      	str	r2, [r1, #0]
 8001596:	22b8      	movs	r2, #184	; 0xb8
 8001598:	18ba      	adds	r2, r7, r2
 800159a:	212d      	movs	r1, #45	; 0x2d
 800159c:	54d1      	strb	r1, [r2, r3]
        for (size_t i = 0; intpart[i] && w + 1 < cap; ++i) out[w++] = intpart[i];
 800159e:	2300      	movs	r3, #0
 80015a0:	22a6      	movs	r2, #166	; 0xa6
 80015a2:	0052      	lsls	r2, r2, #1
 80015a4:	18ba      	adds	r2, r7, r2
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	e019      	b.n	80015de <DISP_WriteNumber+0x442>
 80015aa:	21a8      	movs	r1, #168	; 0xa8
 80015ac:	0049      	lsls	r1, r1, #1
 80015ae:	187b      	adds	r3, r7, r1
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	1c5a      	adds	r2, r3, #1
 80015b4:	1879      	adds	r1, r7, r1
 80015b6:	600a      	str	r2, [r1, #0]
 80015b8:	4ac1      	ldr	r2, [pc, #772]	; (80018c0 <DISP_WriteNumber+0x724>)
 80015ba:	21b8      	movs	r1, #184	; 0xb8
 80015bc:	0049      	lsls	r1, r1, #1
 80015be:	1852      	adds	r2, r2, r1
 80015c0:	19d1      	adds	r1, r2, r7
 80015c2:	20a6      	movs	r0, #166	; 0xa6
 80015c4:	0040      	lsls	r0, r0, #1
 80015c6:	183a      	adds	r2, r7, r0
 80015c8:	6812      	ldr	r2, [r2, #0]
 80015ca:	188a      	adds	r2, r1, r2
 80015cc:	7811      	ldrb	r1, [r2, #0]
 80015ce:	22b8      	movs	r2, #184	; 0xb8
 80015d0:	18ba      	adds	r2, r7, r2
 80015d2:	54d1      	strb	r1, [r2, r3]
 80015d4:	183b      	adds	r3, r7, r0
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	3301      	adds	r3, #1
 80015da:	183a      	adds	r2, r7, r0
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	4bb8      	ldr	r3, [pc, #736]	; (80018c0 <DISP_WriteNumber+0x724>)
 80015e0:	22b8      	movs	r2, #184	; 0xb8
 80015e2:	0052      	lsls	r2, r2, #1
 80015e4:	189b      	adds	r3, r3, r2
 80015e6:	19da      	adds	r2, r3, r7
 80015e8:	23a6      	movs	r3, #166	; 0xa6
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	18fb      	adds	r3, r7, r3
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	18d3      	adds	r3, r2, r3
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d00a      	beq.n	800160e <DISP_WriteNumber+0x472>
 80015f8:	23a8      	movs	r3, #168	; 0xa8
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	18fb      	adds	r3, r7, r3
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	3301      	adds	r3, #1
 8001602:	2288      	movs	r2, #136	; 0x88
 8001604:	0052      	lsls	r2, r2, #1
 8001606:	18ba      	adds	r2, r7, r2
 8001608:	6812      	ldr	r2, [r2, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d8cd      	bhi.n	80015aa <DISP_WriteNumber+0x40e>
        if (w + 1 < cap) out[w++] = '.';
 800160e:	21a8      	movs	r1, #168	; 0xa8
 8001610:	0049      	lsls	r1, r1, #1
 8001612:	187b      	adds	r3, r7, r1
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	3301      	adds	r3, #1
 8001618:	2288      	movs	r2, #136	; 0x88
 800161a:	0052      	lsls	r2, r2, #1
 800161c:	18ba      	adds	r2, r7, r2
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	d908      	bls.n	8001636 <DISP_WriteNumber+0x49a>
 8001624:	187b      	adds	r3, r7, r1
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	1c5a      	adds	r2, r3, #1
 800162a:	1879      	adds	r1, r7, r1
 800162c:	600a      	str	r2, [r1, #0]
 800162e:	22b8      	movs	r2, #184	; 0xb8
 8001630:	18ba      	adds	r2, r7, r2
 8001632:	212e      	movs	r1, #46	; 0x2e
 8001634:	54d1      	strb	r1, [r2, r3]
        for (size_t i = 0; fracpart[i] && w + 1 < cap; ++i) out[w++] = fracpart[i];
 8001636:	2300      	movs	r3, #0
 8001638:	22a4      	movs	r2, #164	; 0xa4
 800163a:	0052      	lsls	r2, r2, #1
 800163c:	18ba      	adds	r2, r7, r2
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	e019      	b.n	8001676 <DISP_WriteNumber+0x4da>
 8001642:	21a8      	movs	r1, #168	; 0xa8
 8001644:	0049      	lsls	r1, r1, #1
 8001646:	187b      	adds	r3, r7, r1
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	1c5a      	adds	r2, r3, #1
 800164c:	1879      	adds	r1, r7, r1
 800164e:	600a      	str	r2, [r1, #0]
 8001650:	4a9c      	ldr	r2, [pc, #624]	; (80018c4 <DISP_WriteNumber+0x728>)
 8001652:	21b8      	movs	r1, #184	; 0xb8
 8001654:	0049      	lsls	r1, r1, #1
 8001656:	1852      	adds	r2, r2, r1
 8001658:	19d1      	adds	r1, r2, r7
 800165a:	20a4      	movs	r0, #164	; 0xa4
 800165c:	0040      	lsls	r0, r0, #1
 800165e:	183a      	adds	r2, r7, r0
 8001660:	6812      	ldr	r2, [r2, #0]
 8001662:	188a      	adds	r2, r1, r2
 8001664:	7811      	ldrb	r1, [r2, #0]
 8001666:	22b8      	movs	r2, #184	; 0xb8
 8001668:	18ba      	adds	r2, r7, r2
 800166a:	54d1      	strb	r1, [r2, r3]
 800166c:	183b      	adds	r3, r7, r0
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	3301      	adds	r3, #1
 8001672:	183a      	adds	r2, r7, r0
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	4b93      	ldr	r3, [pc, #588]	; (80018c4 <DISP_WriteNumber+0x728>)
 8001678:	22b8      	movs	r2, #184	; 0xb8
 800167a:	0052      	lsls	r2, r2, #1
 800167c:	189b      	adds	r3, r3, r2
 800167e:	19da      	adds	r2, r3, r7
 8001680:	23a4      	movs	r3, #164	; 0xa4
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	18fb      	adds	r3, r7, r3
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	18d3      	adds	r3, r2, r3
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d00a      	beq.n	80016a6 <DISP_WriteNumber+0x50a>
 8001690:	23a8      	movs	r3, #168	; 0xa8
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	18fb      	adds	r3, r7, r3
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	3301      	adds	r3, #1
 800169a:	2288      	movs	r2, #136	; 0x88
 800169c:	0052      	lsls	r2, r2, #1
 800169e:	18ba      	adds	r2, r7, r2
 80016a0:	6812      	ldr	r2, [r2, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d8cd      	bhi.n	8001642 <DISP_WriteNumber+0x4a6>
        out[w] = '\0';
 80016a6:	23b8      	movs	r3, #184	; 0xb8
 80016a8:	18fa      	adds	r2, r7, r3
 80016aa:	23a8      	movs	r3, #168	; 0xa8
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	18fb      	adds	r3, r7, r3
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	18d3      	adds	r3, r2, r3
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]
 80016b8:	e05a      	b.n	8001770 <DISP_WriteNumber+0x5d4>
    } else {
        // ohne Dezimalpunkt → out
        size_t w = 0, cap = sizeof(out);
 80016ba:	2300      	movs	r3, #0
 80016bc:	21a2      	movs	r1, #162	; 0xa2
 80016be:	0049      	lsls	r1, r1, #1
 80016c0:	187a      	adds	r2, r7, r1
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	2328      	movs	r3, #40	; 0x28
 80016c6:	228e      	movs	r2, #142	; 0x8e
 80016c8:	0052      	lsls	r2, r2, #1
 80016ca:	18b8      	adds	r0, r7, r2
 80016cc:	6003      	str	r3, [r0, #0]
        if (neg && w + 1 < cap) out[w++] = '-';
 80016ce:	2393      	movs	r3, #147	; 0x93
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	18fb      	adds	r3, r7, r3
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00f      	beq.n	80016fa <DISP_WriteNumber+0x55e>
 80016da:	187b      	adds	r3, r7, r1
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	3301      	adds	r3, #1
 80016e0:	18ba      	adds	r2, r7, r2
 80016e2:	6812      	ldr	r2, [r2, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d908      	bls.n	80016fa <DISP_WriteNumber+0x55e>
 80016e8:	187b      	adds	r3, r7, r1
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	1879      	adds	r1, r7, r1
 80016f0:	600a      	str	r2, [r1, #0]
 80016f2:	22b8      	movs	r2, #184	; 0xb8
 80016f4:	18ba      	adds	r2, r7, r2
 80016f6:	212d      	movs	r1, #45	; 0x2d
 80016f8:	54d1      	strb	r1, [r2, r3]
        for (size_t i = 0; buf[i] && w + 1 < cap; ++i) out[w++] = buf[i];
 80016fa:	2300      	movs	r3, #0
 80016fc:	22a0      	movs	r2, #160	; 0xa0
 80016fe:	0052      	lsls	r2, r2, #1
 8001700:	18ba      	adds	r2, r7, r2
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	e016      	b.n	8001734 <DISP_WriteNumber+0x598>
 8001706:	21a2      	movs	r1, #162	; 0xa2
 8001708:	0049      	lsls	r1, r1, #1
 800170a:	187b      	adds	r3, r7, r1
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	1c5a      	adds	r2, r3, #1
 8001710:	1879      	adds	r1, r7, r1
 8001712:	600a      	str	r2, [r1, #0]
 8001714:	22e0      	movs	r2, #224	; 0xe0
 8001716:	18b9      	adds	r1, r7, r2
 8001718:	20a0      	movs	r0, #160	; 0xa0
 800171a:	0040      	lsls	r0, r0, #1
 800171c:	183a      	adds	r2, r7, r0
 800171e:	6812      	ldr	r2, [r2, #0]
 8001720:	188a      	adds	r2, r1, r2
 8001722:	7811      	ldrb	r1, [r2, #0]
 8001724:	22b8      	movs	r2, #184	; 0xb8
 8001726:	18ba      	adds	r2, r7, r2
 8001728:	54d1      	strb	r1, [r2, r3]
 800172a:	183b      	adds	r3, r7, r0
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	3301      	adds	r3, #1
 8001730:	183a      	adds	r2, r7, r0
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	23e0      	movs	r3, #224	; 0xe0
 8001736:	18fa      	adds	r2, r7, r3
 8001738:	23a0      	movs	r3, #160	; 0xa0
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	18fb      	adds	r3, r7, r3
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	18d3      	adds	r3, r2, r3
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00a      	beq.n	800175e <DISP_WriteNumber+0x5c2>
 8001748:	23a2      	movs	r3, #162	; 0xa2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	18fb      	adds	r3, r7, r3
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	3301      	adds	r3, #1
 8001752:	228e      	movs	r2, #142	; 0x8e
 8001754:	0052      	lsls	r2, r2, #1
 8001756:	18ba      	adds	r2, r7, r2
 8001758:	6812      	ldr	r2, [r2, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d8d3      	bhi.n	8001706 <DISP_WriteNumber+0x56a>
        out[w] = '\0';
 800175e:	23b8      	movs	r3, #184	; 0xb8
 8001760:	18fa      	adds	r2, r7, r3
 8001762:	23a2      	movs	r3, #162	; 0xa2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	18fb      	adds	r3, r7, r3
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	18d3      	adds	r3, r2, r3
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
    }

    // 3) Unit anhängen → final
    size_t f = 0, fcap = sizeof(final);
 8001770:	2300      	movs	r3, #0
 8001772:	229e      	movs	r2, #158	; 0x9e
 8001774:	0052      	lsls	r2, r2, #1
 8001776:	18ba      	adds	r2, r7, r2
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	2330      	movs	r3, #48	; 0x30
 800177c:	2286      	movs	r2, #134	; 0x86
 800177e:	0052      	lsls	r2, r2, #1
 8001780:	18ba      	adds	r2, r7, r2
 8001782:	6013      	str	r3, [r2, #0]
    for (size_t i = 0; out[i] && f + 1 < fcap; ++i) final[f++] = out[i];
 8001784:	2300      	movs	r3, #0
 8001786:	229c      	movs	r2, #156	; 0x9c
 8001788:	0052      	lsls	r2, r2, #1
 800178a:	18ba      	adds	r2, r7, r2
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	e016      	b.n	80017be <DISP_WriteNumber+0x622>
 8001790:	219e      	movs	r1, #158	; 0x9e
 8001792:	0049      	lsls	r1, r1, #1
 8001794:	187b      	adds	r3, r7, r1
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	1c5a      	adds	r2, r3, #1
 800179a:	1879      	adds	r1, r7, r1
 800179c:	600a      	str	r2, [r1, #0]
 800179e:	22b8      	movs	r2, #184	; 0xb8
 80017a0:	18b9      	adds	r1, r7, r2
 80017a2:	209c      	movs	r0, #156	; 0x9c
 80017a4:	0040      	lsls	r0, r0, #1
 80017a6:	183a      	adds	r2, r7, r0
 80017a8:	6812      	ldr	r2, [r2, #0]
 80017aa:	188a      	adds	r2, r1, r2
 80017ac:	7811      	ldrb	r1, [r2, #0]
 80017ae:	2288      	movs	r2, #136	; 0x88
 80017b0:	18ba      	adds	r2, r7, r2
 80017b2:	54d1      	strb	r1, [r2, r3]
 80017b4:	183b      	adds	r3, r7, r0
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	3301      	adds	r3, #1
 80017ba:	183a      	adds	r2, r7, r0
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	23b8      	movs	r3, #184	; 0xb8
 80017c0:	18fa      	adds	r2, r7, r3
 80017c2:	239c      	movs	r3, #156	; 0x9c
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	18fb      	adds	r3, r7, r3
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	18d3      	adds	r3, r2, r3
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00a      	beq.n	80017e8 <DISP_WriteNumber+0x64c>
 80017d2:	239e      	movs	r3, #158	; 0x9e
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	18fb      	adds	r3, r7, r3
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	3301      	adds	r3, #1
 80017dc:	2286      	movs	r2, #134	; 0x86
 80017de:	0052      	lsls	r2, r2, #1
 80017e0:	18ba      	adds	r2, r7, r2
 80017e2:	6812      	ldr	r2, [r2, #0]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d8d3      	bhi.n	8001790 <DISP_WriteNumber+0x5f4>
    if (unit && unit[0]) {
 80017e8:	22c2      	movs	r2, #194	; 0xc2
 80017ea:	0052      	lsls	r2, r2, #1
 80017ec:	2108      	movs	r1, #8
 80017ee:	1853      	adds	r3, r2, r1
 80017f0:	19db      	adds	r3, r3, r7
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d03f      	beq.n	8001878 <DISP_WriteNumber+0x6dc>
 80017f8:	1853      	adds	r3, r2, r1
 80017fa:	19db      	adds	r3, r3, r7
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d039      	beq.n	8001878 <DISP_WriteNumber+0x6dc>
        for (size_t i = 0; unit[i] && f + 1 < fcap; ++i) final[f++] = unit[i];
 8001804:	2300      	movs	r3, #0
 8001806:	229a      	movs	r2, #154	; 0x9a
 8001808:	0052      	lsls	r2, r2, #1
 800180a:	18ba      	adds	r2, r7, r2
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	e01a      	b.n	8001846 <DISP_WriteNumber+0x6aa>
 8001810:	23c2      	movs	r3, #194	; 0xc2
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	2208      	movs	r2, #8
 8001816:	189b      	adds	r3, r3, r2
 8001818:	19db      	adds	r3, r3, r7
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	209a      	movs	r0, #154	; 0x9a
 800181e:	0040      	lsls	r0, r0, #1
 8001820:	183b      	adds	r3, r7, r0
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	18d2      	adds	r2, r2, r3
 8001826:	249e      	movs	r4, #158	; 0x9e
 8001828:	0064      	lsls	r4, r4, #1
 800182a:	193b      	adds	r3, r7, r4
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	1c59      	adds	r1, r3, #1
 8001830:	193c      	adds	r4, r7, r4
 8001832:	6021      	str	r1, [r4, #0]
 8001834:	7811      	ldrb	r1, [r2, #0]
 8001836:	2288      	movs	r2, #136	; 0x88
 8001838:	18ba      	adds	r2, r7, r2
 800183a:	54d1      	strb	r1, [r2, r3]
 800183c:	183b      	adds	r3, r7, r0
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	3301      	adds	r3, #1
 8001842:	183a      	adds	r2, r7, r0
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	23c2      	movs	r3, #194	; 0xc2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	2208      	movs	r2, #8
 800184c:	189b      	adds	r3, r3, r2
 800184e:	19db      	adds	r3, r3, r7
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	239a      	movs	r3, #154	; 0x9a
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	18fb      	adds	r3, r7, r3
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	18d3      	adds	r3, r2, r3
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00a      	beq.n	8001878 <DISP_WriteNumber+0x6dc>
 8001862:	239e      	movs	r3, #158	; 0x9e
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	18fb      	adds	r3, r7, r3
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	3301      	adds	r3, #1
 800186c:	2286      	movs	r2, #134	; 0x86
 800186e:	0052      	lsls	r2, r2, #1
 8001870:	18ba      	adds	r2, r7, r2
 8001872:	6812      	ldr	r2, [r2, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d8cb      	bhi.n	8001810 <DISP_WriteNumber+0x674>
    }
    final[f] = '\0';
 8001878:	2188      	movs	r1, #136	; 0x88
 800187a:	187a      	adds	r2, r7, r1
 800187c:	239e      	movs	r3, #158	; 0x9e
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	18fb      	adds	r3, r7, r3
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	18d3      	adds	r3, r2, r3
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]

    // 4) Mindestbreite via left-padding
    size_t L = strlen(final);
 800188a:	187b      	adds	r3, r7, r1
 800188c:	0018      	movs	r0, r3
 800188e:	f7fe fc3b 	bl	8000108 <strlen>
 8001892:	0003      	movs	r3, r0
 8001894:	2184      	movs	r1, #132	; 0x84
 8001896:	0049      	lsls	r1, r1, #1
 8001898:	187a      	adds	r2, r7, r1
 800189a:	6013      	str	r3, [r2, #0]
    size_t pad = (min_width > L) ? (min_width - L) : 0;
 800189c:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <DISP_WriteNumber+0x72c>)
 800189e:	20b8      	movs	r0, #184	; 0xb8
 80018a0:	0040      	lsls	r0, r0, #1
 80018a2:	181b      	adds	r3, r3, r0
 80018a4:	19db      	adds	r3, r3, r7
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	187a      	adds	r2, r7, r1
 80018aa:	6812      	ldr	r2, [r2, #0]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d20d      	bcs.n	80018cc <DISP_WriteNumber+0x730>
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <DISP_WriteNumber+0x72c>)
 80018b2:	181b      	adds	r3, r3, r0
 80018b4:	19db      	adds	r3, r3, r7
 80018b6:	781a      	ldrb	r2, [r3, #0]
 80018b8:	187b      	adds	r3, r7, r1
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	e006      	b.n	80018ce <DISP_WriteNumber+0x732>
 80018c0:	fffffe98 	.word	0xfffffe98
 80018c4:	fffffeb8 	.word	0xfffffeb8
 80018c8:	fffffe92 	.word	0xfffffe92
 80018cc:	2300      	movs	r3, #0
 80018ce:	1d7a      	adds	r2, r7, #5
 80018d0:	32ff      	adds	r2, #255	; 0xff
 80018d2:	6013      	str	r3, [r2, #0]
    size_t w = 0, wcap = sizeof(field);
 80018d4:	2300      	movs	r3, #0
 80018d6:	2298      	movs	r2, #152	; 0x98
 80018d8:	0052      	lsls	r2, r2, #1
 80018da:	18ba      	adds	r2, r7, r2
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	2340      	movs	r3, #64	; 0x40
 80018e0:	1c7a      	adds	r2, r7, #1
 80018e2:	32ff      	adds	r2, #255	; 0xff
 80018e4:	6013      	str	r3, [r2, #0]
    for (size_t i = 0; i < pad && w + 1 < wcap; ++i) field[w++] = ' ';
 80018e6:	2300      	movs	r3, #0
 80018e8:	2296      	movs	r2, #150	; 0x96
 80018ea:	0052      	lsls	r2, r2, #1
 80018ec:	18ba      	adds	r2, r7, r2
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	e014      	b.n	800191c <DISP_WriteNumber+0x780>
 80018f2:	2198      	movs	r1, #152	; 0x98
 80018f4:	0049      	lsls	r1, r1, #1
 80018f6:	187b      	adds	r3, r7, r1
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	1c5a      	adds	r2, r3, #1
 80018fc:	1879      	adds	r1, r7, r1
 80018fe:	600a      	str	r2, [r1, #0]
 8001900:	4a39      	ldr	r2, [pc, #228]	; (80019e8 <DISP_WriteNumber+0x84c>)
 8001902:	21b8      	movs	r1, #184	; 0xb8
 8001904:	0049      	lsls	r1, r1, #1
 8001906:	1852      	adds	r2, r2, r1
 8001908:	19d2      	adds	r2, r2, r7
 800190a:	2120      	movs	r1, #32
 800190c:	54d1      	strb	r1, [r2, r3]
 800190e:	2296      	movs	r2, #150	; 0x96
 8001910:	0052      	lsls	r2, r2, #1
 8001912:	18bb      	adds	r3, r7, r2
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	3301      	adds	r3, #1
 8001918:	18ba      	adds	r2, r7, r2
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	2396      	movs	r3, #150	; 0x96
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	18fb      	adds	r3, r7, r3
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	1d7b      	adds	r3, r7, #5
 8001926:	33ff      	adds	r3, #255	; 0xff
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d209      	bcs.n	8001942 <DISP_WriteNumber+0x7a6>
 800192e:	2398      	movs	r3, #152	; 0x98
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	18fb      	adds	r3, r7, r3
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	3301      	adds	r3, #1
 8001938:	1c7a      	adds	r2, r7, #1
 800193a:	32ff      	adds	r2, #255	; 0xff
 800193c:	6812      	ldr	r2, [r2, #0]
 800193e:	429a      	cmp	r2, r3
 8001940:	d8d7      	bhi.n	80018f2 <DISP_WriteNumber+0x756>
    for (size_t i = 0; final[i] && w + 1 < wcap; ++i) field[w++] = final[i];
 8001942:	2300      	movs	r3, #0
 8001944:	2294      	movs	r2, #148	; 0x94
 8001946:	0052      	lsls	r2, r2, #1
 8001948:	18ba      	adds	r2, r7, r2
 800194a:	6013      	str	r3, [r2, #0]
 800194c:	e019      	b.n	8001982 <DISP_WriteNumber+0x7e6>
 800194e:	2198      	movs	r1, #152	; 0x98
 8001950:	0049      	lsls	r1, r1, #1
 8001952:	187b      	adds	r3, r7, r1
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	1c5a      	adds	r2, r3, #1
 8001958:	1879      	adds	r1, r7, r1
 800195a:	600a      	str	r2, [r1, #0]
 800195c:	2288      	movs	r2, #136	; 0x88
 800195e:	18b9      	adds	r1, r7, r2
 8001960:	2094      	movs	r0, #148	; 0x94
 8001962:	0040      	lsls	r0, r0, #1
 8001964:	183a      	adds	r2, r7, r0
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	188a      	adds	r2, r1, r2
 800196a:	7811      	ldrb	r1, [r2, #0]
 800196c:	4a1e      	ldr	r2, [pc, #120]	; (80019e8 <DISP_WriteNumber+0x84c>)
 800196e:	24b8      	movs	r4, #184	; 0xb8
 8001970:	0064      	lsls	r4, r4, #1
 8001972:	1912      	adds	r2, r2, r4
 8001974:	19d2      	adds	r2, r2, r7
 8001976:	54d1      	strb	r1, [r2, r3]
 8001978:	183b      	adds	r3, r7, r0
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	3301      	adds	r3, #1
 800197e:	183a      	adds	r2, r7, r0
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	2388      	movs	r3, #136	; 0x88
 8001984:	18fa      	adds	r2, r7, r3
 8001986:	2394      	movs	r3, #148	; 0x94
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	18fb      	adds	r3, r7, r3
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	18d3      	adds	r3, r2, r3
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d009      	beq.n	80019aa <DISP_WriteNumber+0x80e>
 8001996:	2398      	movs	r3, #152	; 0x98
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	18fb      	adds	r3, r7, r3
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	3301      	adds	r3, #1
 80019a0:	1c7a      	adds	r2, r7, #1
 80019a2:	32ff      	adds	r2, #255	; 0xff
 80019a4:	6812      	ldr	r2, [r2, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d8d1      	bhi.n	800194e <DISP_WriteNumber+0x7b2>
    field[w] = '\0';
 80019aa:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <DISP_WriteNumber+0x84c>)
 80019ac:	20b8      	movs	r0, #184	; 0xb8
 80019ae:	0040      	lsls	r0, r0, #1
 80019b0:	181b      	adds	r3, r3, r0
 80019b2:	19da      	adds	r2, r3, r7
 80019b4:	2398      	movs	r3, #152	; 0x98
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	18fb      	adds	r3, r7, r3
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	18d3      	adds	r3, r2, r3
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]

    // 5) in Page-Buffer schreiben (clipped von DISP_WriteText)
    DISP_WriteText(row, col, field);
 80019c2:	2348      	movs	r3, #72	; 0x48
 80019c4:	18fa      	adds	r2, r7, r3
 80019c6:	23c0      	movs	r3, #192	; 0xc0
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	2108      	movs	r1, #8
 80019cc:	185b      	adds	r3, r3, r1
 80019ce:	19db      	adds	r3, r3, r7
 80019d0:	7819      	ldrb	r1, [r3, #0]
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <DISP_WriteNumber+0x850>)
 80019d4:	181b      	adds	r3, r3, r0
 80019d6:	19db      	adds	r3, r3, r7
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	0018      	movs	r0, r3
 80019dc:	f7ff fb80 	bl	80010e0 <DISP_WriteText>
}
 80019e0:	46bd      	mov	sp, r7
 80019e2:	b05d      	add	sp, #372	; 0x174
 80019e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	fffffed8 	.word	0xfffffed8
 80019ec:	fffffe91 	.word	0xfffffe91

080019f0 <DISP_WriteLapTime>:

void DISP_WriteLapTime(uint32_t ms, uint8_t row, uint8_t col)
{
 80019f0:	b590      	push	{r4, r7, lr}
 80019f2:	b08d      	sub	sp, #52	; 0x34
 80019f4:	af02      	add	r7, sp, #8
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	0008      	movs	r0, r1
 80019fa:	0011      	movs	r1, r2
 80019fc:	1cfb      	adds	r3, r7, #3
 80019fe:	1c02      	adds	r2, r0, #0
 8001a00:	701a      	strb	r2, [r3, #0]
 8001a02:	1cbb      	adds	r3, r7, #2
 8001a04:	1c0a      	adds	r2, r1, #0
 8001a06:	701a      	strb	r2, [r3, #0]
    // Format: M:SS.mmm
    uint32_t minutes = ms / 60000u;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	491a      	ldr	r1, [pc, #104]	; (8001a74 <DISP_WriteLapTime+0x84>)
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f7fe fb8d 	bl	800012c <__udivsi3>
 8001a12:	0003      	movs	r3, r0
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t rest    = ms % 60000u;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4916      	ldr	r1, [pc, #88]	; (8001a74 <DISP_WriteLapTime+0x84>)
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f7fe fc0c 	bl	8000238 <__aeabi_uidivmod>
 8001a20:	000b      	movs	r3, r1
 8001a22:	623b      	str	r3, [r7, #32]
    uint32_t seconds = rest / 1000u;
 8001a24:	6a3b      	ldr	r3, [r7, #32]
 8001a26:	22fa      	movs	r2, #250	; 0xfa
 8001a28:	0091      	lsls	r1, r2, #2
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f7fe fb7e 	bl	800012c <__udivsi3>
 8001a30:	0003      	movs	r3, r0
 8001a32:	61fb      	str	r3, [r7, #28]
    uint32_t millis  = rest % 1000u;
 8001a34:	6a3b      	ldr	r3, [r7, #32]
 8001a36:	22fa      	movs	r2, #250	; 0xfa
 8001a38:	0091      	lsls	r1, r2, #2
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	f7fe fbfc 	bl	8000238 <__aeabi_uidivmod>
 8001a40:	000b      	movs	r3, r1
 8001a42:	61bb      	str	r3, [r7, #24]

    char t[12];
    // Minuten ohne führende Null, Sekunden zweistellig, millis dreistellig
    snprintf(t, sizeof(t), "%lu:%02lu.%03lu",
 8001a44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a46:	4a0c      	ldr	r2, [pc, #48]	; (8001a78 <DISP_WriteLapTime+0x88>)
 8001a48:	240c      	movs	r4, #12
 8001a4a:	1938      	adds	r0, r7, r4
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	9301      	str	r3, [sp, #4]
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	000b      	movs	r3, r1
 8001a56:	210c      	movs	r1, #12
 8001a58:	f005 fb62 	bl	8007120 <sniprintf>
             (unsigned long)minutes,
             (unsigned long)seconds,
             (unsigned long)millis);
    DISP_WriteText(row, col, t);
 8001a5c:	193a      	adds	r2, r7, r4
 8001a5e:	1cbb      	adds	r3, r7, #2
 8001a60:	7819      	ldrb	r1, [r3, #0]
 8001a62:	1cfb      	adds	r3, r7, #3
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	0018      	movs	r0, r3
 8001a68:	f7ff fb3a 	bl	80010e0 <DISP_WriteText>
}
 8001a6c:	46c0      	nop			; (mov r8, r8)
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	b00b      	add	sp, #44	; 0x2c
 8001a72:	bd90      	pop	{r4, r7, pc}
 8001a74:	0000ea60 	.word	0x0000ea60
 8001a78:	08007adc 	.word	0x08007adc

08001a7c <DISP_HandleCAN>:


// CAN-Handler: 0x130 → Page setzen
void DISP_HandleCAN(uint16_t id, const uint8_t* data, uint8_t dlc, uint32_t now_ms)
{
 8001a7c:	b590      	push	{r4, r7, lr}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	0011      	movs	r1, r2
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	240e      	movs	r4, #14
 8001a8a:	193b      	adds	r3, r7, r4
 8001a8c:	1c02      	adds	r2, r0, #0
 8001a8e:	801a      	strh	r2, [r3, #0]
 8001a90:	200d      	movs	r0, #13
 8001a92:	183b      	adds	r3, r7, r0
 8001a94:	1c0a      	adds	r2, r1, #0
 8001a96:	701a      	strb	r2, [r3, #0]
    (void)now_ms;
    if (id != DISP_CAN_ID_SET_PAGE || dlc < 1 || !data) return;
 8001a98:	193b      	adds	r3, r7, r4
 8001a9a:	881a      	ldrh	r2, [r3, #0]
 8001a9c:	2398      	movs	r3, #152	; 0x98
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d116      	bne.n	8001ad2 <DISP_HandleCAN+0x56>
 8001aa4:	183b      	adds	r3, r7, r0
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d012      	beq.n	8001ad2 <DISP_HandleCAN+0x56>
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00f      	beq.n	8001ad2 <DISP_HandleCAN+0x56>
    if (data[0] >= DISP_MAX_PAGES) {
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b05      	cmp	r3, #5
 8001ab8:	d903      	bls.n	8001ac2 <DISP_HandleCAN+0x46>
        Error_Register(ERROR_DISPLAY_INVALID_PAGE);
 8001aba:	2010      	movs	r0, #16
 8001abc:	f000 f80e 	bl	8001adc <Error_Register>
        return;
 8001ac0:	e008      	b.n	8001ad4 <DISP_HandleCAN+0x58>
    }
    DISP_SetPage(data[0]);
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f7ff fa9e 	bl	8001008 <DISP_SetPage>
    DISP_SendStatus();
 8001acc:	f7ff fa44 	bl	8000f58 <DISP_SendStatus>
 8001ad0:	e000      	b.n	8001ad4 <DISP_HandleCAN+0x58>
    if (id != DISP_CAN_ID_SET_PAGE || dlc < 1 || !data) return;
 8001ad2:	46c0      	nop			; (mov r8, r8)
}
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	b005      	add	sp, #20
 8001ad8:	bd90      	pop	{r4, r7, pc}
	...

08001adc <Error_Register>:
#include "ssd1306_fonts.h"

static volatile uint32_t errorFlags = 0;

void Error_Register(ErrorCode_t code)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	0002      	movs	r2, r0
 8001ae4:	1dfb      	adds	r3, r7, #7
 8001ae6:	701a      	strb	r2, [r3, #0]
    if (code > 0 && code < 32) {
 8001ae8:	1dfb      	adds	r3, r7, #7
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00c      	beq.n	8001b0a <Error_Register+0x2e>
 8001af0:	1dfb      	adds	r3, r7, #7
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b1f      	cmp	r3, #31
 8001af6:	d808      	bhi.n	8001b0a <Error_Register+0x2e>
        errorFlags |= (1U << code);
 8001af8:	1dfb      	adds	r3, r7, #7
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2201      	movs	r2, #1
 8001afe:	409a      	lsls	r2, r3
 8001b00:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <Error_Register+0x38>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	431a      	orrs	r2, r3
 8001b06:	4b03      	ldr	r3, [pc, #12]	; (8001b14 <Error_Register+0x38>)
 8001b08:	601a      	str	r2, [r3, #0]
        //printf("Error registered: %u\r\n", code);  // optional
    }
}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b002      	add	sp, #8
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	20000d68 	.word	0x20000d68

08001b18 <Error_Clear>:

void Error_Clear(ErrorCode_t code)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	0002      	movs	r2, r0
 8001b20:	1dfb      	adds	r3, r7, #7
 8001b22:	701a      	strb	r2, [r3, #0]
    if (code > 0 && code < 32) {
 8001b24:	1dfb      	adds	r3, r7, #7
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d00e      	beq.n	8001b4a <Error_Clear+0x32>
 8001b2c:	1dfb      	adds	r3, r7, #7
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b1f      	cmp	r3, #31
 8001b32:	d80a      	bhi.n	8001b4a <Error_Clear+0x32>
        errorFlags &= ~(1U << code);
 8001b34:	1dfb      	adds	r3, r7, #7
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	409a      	lsls	r2, r3
 8001b3c:	0013      	movs	r3, r2
 8001b3e:	43da      	mvns	r2, r3
 8001b40:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <Error_Clear+0x3c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	401a      	ands	r2, r3
 8001b46:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <Error_Clear+0x3c>)
 8001b48:	601a      	str	r2, [r3, #0]
    }
}
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	b002      	add	sp, #8
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	20000d68 	.word	0x20000d68

08001b58 <Error_GetAll>:

uint32_t Error_GetAll(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
    return errorFlags;
 8001b5c:	4b02      	ldr	r3, [pc, #8]	; (8001b68 <Error_GetAll+0x10>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
}
 8001b60:	0018      	movs	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	20000d68 	.word	0x20000d68

08001b6c <Display_ErrorStatus>:
   printf("Aktive Fehler: 0x%08lX\r\n", errorFlags);
}


void Display_ErrorStatus(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af02      	add	r7, sp, #8
    uint32_t errors = Error_GetAll();
 8001b72:	f7ff fff1 	bl	8001b58 <Error_GetAll>
 8001b76:	0003      	movs	r3, r0
 8001b78:	617b      	str	r3, [r7, #20]

    ssd1306_SetCursor(0, 20);
 8001b7a:	2114      	movs	r1, #20
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	f001 fd75 	bl	800366c <ssd1306_SetCursor>

    if (errors == 0) {
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d109      	bne.n	8001b9c <Display_ErrorStatus+0x30>
        ssd1306_WriteString("Status: OK", Font_6x8, White);
 8001b88:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <Display_ErrorStatus+0x5c>)
 8001b8a:	4810      	ldr	r0, [pc, #64]	; (8001bcc <Display_ErrorStatus+0x60>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	9200      	str	r2, [sp, #0]
 8001b90:	6819      	ldr	r1, [r3, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f001 fd3d 	bl	8003614 <ssd1306_WriteString>
 8001b9a:	e00e      	b.n	8001bba <Display_ErrorStatus+0x4e>
    } else {
        char buffer[20];
        snprintf(buffer, sizeof(buffer), "Err: 0x%08lX", errors);
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	4a0c      	ldr	r2, [pc, #48]	; (8001bd0 <Display_ErrorStatus+0x64>)
 8001ba0:	0038      	movs	r0, r7
 8001ba2:	2114      	movs	r1, #20
 8001ba4:	f005 fabc 	bl	8007120 <sniprintf>
        ssd1306_WriteString(buffer, Font_6x8, White);
 8001ba8:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <Display_ErrorStatus+0x5c>)
 8001baa:	0038      	movs	r0, r7
 8001bac:	2201      	movs	r2, #1
 8001bae:	9200      	str	r2, [sp, #0]
 8001bb0:	6819      	ldr	r1, [r3, #0]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f001 fd2d 	bl	8003614 <ssd1306_WriteString>
    }

    ssd1306_UpdateScreen();
 8001bba:	f001 fbf1 	bl	80033a0 <ssd1306_UpdateScreen>
}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	b006      	add	sp, #24
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	08008188 	.word	0x08008188
 8001bcc:	08007b08 	.word	0x08007b08
 8001bd0:	08007b14 	.word	0x08007b14

08001bd4 <Error_LED_Update>:

// Interner Zustand für Blink-Timing
static uint8_t error_led_state = 0;

void Error_LED_Update(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
    if (Error_GetAll() != 0)
 8001bd8:	f7ff ffbe 	bl	8001b58 <Error_GetAll>
 8001bdc:	1e03      	subs	r3, r0, #0
 8001bde:	d008      	beq.n	8001bf2 <Error_LED_Update+0x1e>
    {
        // Mindestens ein Fehler aktiv → LED toggeln
        HAL_GPIO_TogglePin(Error_GPIO_Port, Error_Pin);
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <Error_LED_Update+0x40>)
 8001be2:	2102      	movs	r1, #2
 8001be4:	0018      	movs	r0, r3
 8001be6:	f003 fe30 	bl	800584a <HAL_GPIO_TogglePin>
        error_led_state = 1;
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <Error_LED_Update+0x44>)
 8001bec:	2201      	movs	r2, #1
 8001bee:	701a      	strb	r2, [r3, #0]
        {
            HAL_GPIO_WritePin(Error_GPIO_Port, Error_Pin, GPIO_PIN_RESET);
            error_led_state = 0;
        }
    }
}
 8001bf0:	e00c      	b.n	8001c0c <Error_LED_Update+0x38>
        if (error_led_state)
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <Error_LED_Update+0x44>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d008      	beq.n	8001c0c <Error_LED_Update+0x38>
            HAL_GPIO_WritePin(Error_GPIO_Port, Error_Pin, GPIO_PIN_RESET);
 8001bfa:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <Error_LED_Update+0x40>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2102      	movs	r1, #2
 8001c00:	0018      	movs	r0, r3
 8001c02:	f003 fe05 	bl	8005810 <HAL_GPIO_WritePin>
            error_led_state = 0;
 8001c06:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <Error_LED_Update+0x44>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
}
 8001c0c:	46c0      	nop			; (mov r8, r8)
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	48000800 	.word	0x48000800
 8001c18:	20000d6c 	.word	0x20000d6c

08001c1c <RGBLED_Init>:

static uint32_t last_led_update_ms = 0;
static uint8_t  led_control_active = 0; // 0 = Testmode, 1 = CAN-Mode

void RGBLED_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < RGBLED_COUNT; i++) {
 8001c22:	1dfb      	adds	r3, r7, #7
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
 8001c28:	e022      	b.n	8001c70 <RGBLED_Init+0x54>
        leds[i].r = 0;
 8001c2a:	1dfb      	adds	r3, r7, #7
 8001c2c:	781a      	ldrb	r2, [r3, #0]
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <RGBLED_Init+0x68>)
 8001c30:	0092      	lsls	r2, r2, #2
 8001c32:	2100      	movs	r1, #0
 8001c34:	54d1      	strb	r1, [r2, r3]
        leds[i].g = 0;
 8001c36:	1dfb      	adds	r3, r7, #7
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	4a12      	ldr	r2, [pc, #72]	; (8001c84 <RGBLED_Init+0x68>)
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	18d3      	adds	r3, r2, r3
 8001c40:	3301      	adds	r3, #1
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]
        leds[i].b = 0;
 8001c46:	1dfb      	adds	r3, r7, #7
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	4a0e      	ldr	r2, [pc, #56]	; (8001c84 <RGBLED_Init+0x68>)
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	18d3      	adds	r3, r2, r3
 8001c50:	3302      	adds	r3, #2
 8001c52:	2200      	movs	r2, #0
 8001c54:	701a      	strb	r2, [r3, #0]
        leds[i].brightness = 1; // min
 8001c56:	1dfb      	adds	r3, r7, #7
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <RGBLED_Init+0x68>)
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	18d3      	adds	r3, r2, r3
 8001c60:	3303      	adds	r3, #3
 8001c62:	2201      	movs	r2, #1
 8001c64:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < RGBLED_COUNT; i++) {
 8001c66:	1dfb      	adds	r3, r7, #7
 8001c68:	781a      	ldrb	r2, [r3, #0]
 8001c6a:	1dfb      	adds	r3, r7, #7
 8001c6c:	3201      	adds	r2, #1
 8001c6e:	701a      	strb	r2, [r3, #0]
 8001c70:	1dfb      	adds	r3, r7, #7
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b17      	cmp	r3, #23
 8001c76:	d9d8      	bls.n	8001c2a <RGBLED_Init+0xe>
    }
}
 8001c78:	46c0      	nop			; (mov r8, r8)
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	b002      	add	sp, #8
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	20000d70 	.word	0x20000d70

08001c88 <RGBLED_Set>:

void RGBLED_Set(uint8_t index, uint8_t r, uint8_t g, uint8_t b, uint8_t brightness)
{
 8001c88:	b5b0      	push	{r4, r5, r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	0005      	movs	r5, r0
 8001c90:	000c      	movs	r4, r1
 8001c92:	0010      	movs	r0, r2
 8001c94:	0019      	movs	r1, r3
 8001c96:	1dfb      	adds	r3, r7, #7
 8001c98:	1c2a      	adds	r2, r5, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
 8001c9c:	1dbb      	adds	r3, r7, #6
 8001c9e:	1c22      	adds	r2, r4, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
 8001ca2:	1d7b      	adds	r3, r7, #5
 8001ca4:	1c02      	adds	r2, r0, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	1c0a      	adds	r2, r1, #0
 8001cac:	701a      	strb	r2, [r3, #0]
    if (index >= RGBLED_COUNT) return;
 8001cae:	1dfb      	adds	r3, r7, #7
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b17      	cmp	r3, #23
 8001cb4:	d829      	bhi.n	8001d0a <RGBLED_Set+0x82>
    leds[index].r = r;
 8001cb6:	1dfb      	adds	r3, r7, #7
 8001cb8:	781a      	ldrb	r2, [r3, #0]
 8001cba:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <RGBLED_Set+0x8c>)
 8001cbc:	0092      	lsls	r2, r2, #2
 8001cbe:	1db9      	adds	r1, r7, #6
 8001cc0:	7809      	ldrb	r1, [r1, #0]
 8001cc2:	54d1      	strb	r1, [r2, r3]
    leds[index].g = g;
 8001cc4:	1dfb      	adds	r3, r7, #7
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <RGBLED_Set+0x8c>)
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	18d3      	adds	r3, r2, r3
 8001cce:	3301      	adds	r3, #1
 8001cd0:	1d7a      	adds	r2, r7, #5
 8001cd2:	7812      	ldrb	r2, [r2, #0]
 8001cd4:	701a      	strb	r2, [r3, #0]
    leds[index].b = b;
 8001cd6:	1dfb      	adds	r3, r7, #7
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	4a0e      	ldr	r2, [pc, #56]	; (8001d14 <RGBLED_Set+0x8c>)
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	18d3      	adds	r3, r2, r3
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	1d3a      	adds	r2, r7, #4
 8001ce4:	7812      	ldrb	r2, [r2, #0]
 8001ce6:	701a      	strb	r2, [r3, #0]
    leds[index].brightness = (brightness > 31) ? 31 : brightness;
 8001ce8:	1dfb      	adds	r3, r7, #7
 8001cea:	7819      	ldrb	r1, [r3, #0]
 8001cec:	2318      	movs	r3, #24
 8001cee:	18fb      	adds	r3, r7, r3
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	2a1f      	cmp	r2, #31
 8001cf6:	d900      	bls.n	8001cfa <RGBLED_Set+0x72>
 8001cf8:	231f      	movs	r3, #31
 8001cfa:	b2d8      	uxtb	r0, r3
 8001cfc:	4a05      	ldr	r2, [pc, #20]	; (8001d14 <RGBLED_Set+0x8c>)
 8001cfe:	008b      	lsls	r3, r1, #2
 8001d00:	18d3      	adds	r3, r2, r3
 8001d02:	3303      	adds	r3, #3
 8001d04:	1c02      	adds	r2, r0, #0
 8001d06:	701a      	strb	r2, [r3, #0]
 8001d08:	e000      	b.n	8001d0c <RGBLED_Set+0x84>
    if (index >= RGBLED_COUNT) return;
 8001d0a:	46c0      	nop			; (mov r8, r8)
}
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	b002      	add	sp, #8
 8001d10:	bdb0      	pop	{r4, r5, r7, pc}
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	20000d70 	.word	0x20000d70

08001d18 <RGBLED_Update>:

void RGBLED_Update(SPI_HandleTypeDef *hspi)
{
 8001d18:	b5b0      	push	{r4, r5, r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
    uint16_t bufIndex = 0;
 8001d20:	230e      	movs	r3, #14
 8001d22:	18fb      	adds	r3, r7, r3
 8001d24:	2200      	movs	r2, #0
 8001d26:	801a      	strh	r2, [r3, #0]

    // Startframe (4x 0x00)
    for (uint8_t i = 0; i < 4; i++) {
 8001d28:	230d      	movs	r3, #13
 8001d2a:	18fb      	adds	r3, r7, r3
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
 8001d30:	e00f      	b.n	8001d52 <RGBLED_Update+0x3a>
        txBuffer[bufIndex++] = 0x00;
 8001d32:	220e      	movs	r2, #14
 8001d34:	18bb      	adds	r3, r7, r2
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	18ba      	adds	r2, r7, r2
 8001d3a:	1c59      	adds	r1, r3, #1
 8001d3c:	8011      	strh	r1, [r2, #0]
 8001d3e:	001a      	movs	r2, r3
 8001d40:	4b3e      	ldr	r3, [pc, #248]	; (8001e3c <RGBLED_Update+0x124>)
 8001d42:	2100      	movs	r1, #0
 8001d44:	5499      	strb	r1, [r3, r2]
    for (uint8_t i = 0; i < 4; i++) {
 8001d46:	210d      	movs	r1, #13
 8001d48:	187b      	adds	r3, r7, r1
 8001d4a:	781a      	ldrb	r2, [r3, #0]
 8001d4c:	187b      	adds	r3, r7, r1
 8001d4e:	3201      	adds	r2, #1
 8001d50:	701a      	strb	r2, [r3, #0]
 8001d52:	230d      	movs	r3, #13
 8001d54:	18fb      	adds	r3, r7, r3
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d9ea      	bls.n	8001d32 <RGBLED_Update+0x1a>
    }

    // LED-Daten
    for (uint8_t i = 0; i < RGBLED_COUNT; i++) {
 8001d5c:	230c      	movs	r3, #12
 8001d5e:	18fb      	adds	r3, r7, r3
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
 8001d64:	e044      	b.n	8001df0 <RGBLED_Update+0xd8>
        txBuffer[bufIndex++] = 0b11100000 | (leds[i].brightness & 0x1F); // Helligkeit + Header
 8001d66:	250c      	movs	r5, #12
 8001d68:	197b      	adds	r3, r7, r5
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	4a34      	ldr	r2, [pc, #208]	; (8001e40 <RGBLED_Update+0x128>)
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	18d3      	adds	r3, r2, r3
 8001d72:	3303      	adds	r3, #3
 8001d74:	781a      	ldrb	r2, [r3, #0]
 8001d76:	240e      	movs	r4, #14
 8001d78:	193b      	adds	r3, r7, r4
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	1939      	adds	r1, r7, r4
 8001d7e:	1c58      	adds	r0, r3, #1
 8001d80:	8008      	strh	r0, [r1, #0]
 8001d82:	0019      	movs	r1, r3
 8001d84:	2320      	movs	r3, #32
 8001d86:	425b      	negs	r3, r3
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	4b2b      	ldr	r3, [pc, #172]	; (8001e3c <RGBLED_Update+0x124>)
 8001d8e:	545a      	strb	r2, [r3, r1]
        txBuffer[bufIndex++] = leds[i].b;
 8001d90:	197b      	adds	r3, r7, r5
 8001d92:	7819      	ldrb	r1, [r3, #0]
 8001d94:	193b      	adds	r3, r7, r4
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	193a      	adds	r2, r7, r4
 8001d9a:	1c58      	adds	r0, r3, #1
 8001d9c:	8010      	strh	r0, [r2, #0]
 8001d9e:	0018      	movs	r0, r3
 8001da0:	4a27      	ldr	r2, [pc, #156]	; (8001e40 <RGBLED_Update+0x128>)
 8001da2:	008b      	lsls	r3, r1, #2
 8001da4:	18d3      	adds	r3, r2, r3
 8001da6:	3302      	adds	r3, #2
 8001da8:	781a      	ldrb	r2, [r3, #0]
 8001daa:	4b24      	ldr	r3, [pc, #144]	; (8001e3c <RGBLED_Update+0x124>)
 8001dac:	541a      	strb	r2, [r3, r0]
        txBuffer[bufIndex++] = leds[i].g;
 8001dae:	197b      	adds	r3, r7, r5
 8001db0:	7819      	ldrb	r1, [r3, #0]
 8001db2:	193b      	adds	r3, r7, r4
 8001db4:	881b      	ldrh	r3, [r3, #0]
 8001db6:	193a      	adds	r2, r7, r4
 8001db8:	1c58      	adds	r0, r3, #1
 8001dba:	8010      	strh	r0, [r2, #0]
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	4a20      	ldr	r2, [pc, #128]	; (8001e40 <RGBLED_Update+0x128>)
 8001dc0:	008b      	lsls	r3, r1, #2
 8001dc2:	18d3      	adds	r3, r2, r3
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	781a      	ldrb	r2, [r3, #0]
 8001dc8:	4b1c      	ldr	r3, [pc, #112]	; (8001e3c <RGBLED_Update+0x124>)
 8001dca:	541a      	strb	r2, [r3, r0]
        txBuffer[bufIndex++] = leds[i].r;
 8001dcc:	197b      	adds	r3, r7, r5
 8001dce:	781a      	ldrb	r2, [r3, #0]
 8001dd0:	193b      	adds	r3, r7, r4
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	1939      	adds	r1, r7, r4
 8001dd6:	1c58      	adds	r0, r3, #1
 8001dd8:	8008      	strh	r0, [r1, #0]
 8001dda:	0019      	movs	r1, r3
 8001ddc:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <RGBLED_Update+0x128>)
 8001dde:	0092      	lsls	r2, r2, #2
 8001de0:	5cd2      	ldrb	r2, [r2, r3]
 8001de2:	4b16      	ldr	r3, [pc, #88]	; (8001e3c <RGBLED_Update+0x124>)
 8001de4:	545a      	strb	r2, [r3, r1]
    for (uint8_t i = 0; i < RGBLED_COUNT; i++) {
 8001de6:	197b      	adds	r3, r7, r5
 8001de8:	781a      	ldrb	r2, [r3, #0]
 8001dea:	197b      	adds	r3, r7, r5
 8001dec:	3201      	adds	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]
 8001df0:	230c      	movs	r3, #12
 8001df2:	18fb      	adds	r3, r7, r3
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b17      	cmp	r3, #23
 8001df8:	d9b5      	bls.n	8001d66 <RGBLED_Update+0x4e>
    }

    // Endframe: mindestens (N/2) Bits, hier sicherheitshalber 2 Bytes
    txBuffer[bufIndex++] = 0xFF;
 8001dfa:	200e      	movs	r0, #14
 8001dfc:	183b      	adds	r3, r7, r0
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	183a      	adds	r2, r7, r0
 8001e02:	1c59      	adds	r1, r3, #1
 8001e04:	8011      	strh	r1, [r2, #0]
 8001e06:	001a      	movs	r2, r3
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <RGBLED_Update+0x124>)
 8001e0a:	21ff      	movs	r1, #255	; 0xff
 8001e0c:	5499      	strb	r1, [r3, r2]
    txBuffer[bufIndex++] = 0xFF;
 8001e0e:	183b      	adds	r3, r7, r0
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	183a      	adds	r2, r7, r0
 8001e14:	1c59      	adds	r1, r3, #1
 8001e16:	8011      	strh	r1, [r2, #0]
 8001e18:	001a      	movs	r2, r3
 8001e1a:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <RGBLED_Update+0x124>)
 8001e1c:	21ff      	movs	r1, #255	; 0xff
 8001e1e:	5499      	strb	r1, [r3, r2]

    HAL_SPI_Transmit(hspi, txBuffer, bufIndex, HAL_MAX_DELAY);
 8001e20:	2301      	movs	r3, #1
 8001e22:	425c      	negs	r4, r3
 8001e24:	183b      	adds	r3, r7, r0
 8001e26:	881a      	ldrh	r2, [r3, #0]
 8001e28:	4904      	ldr	r1, [pc, #16]	; (8001e3c <RGBLED_Update+0x124>)
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	0023      	movs	r3, r4
 8001e2e:	f004 fab3 	bl	8006398 <HAL_SPI_Transmit>
}
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	46bd      	mov	sp, r7
 8001e36:	b004      	add	sp, #16
 8001e38:	bdb0      	pop	{r4, r5, r7, pc}
 8001e3a:	46c0      	nop			; (mov r8, r8)
 8001e3c:	20000dd0 	.word	0x20000dd0
 8001e40:	20000d70 	.word	0x20000d70

08001e44 <RGBLED_TestPattern>:

void RGBLED_TestPattern(void)
{
 8001e44:	b590      	push	{r4, r7, lr}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af02      	add	r7, sp, #8
    static uint8_t R = 0;
    static uint8_t G = 0;
    static uint8_t B = 0;

    R += 1;
 8001e4a:	4b22      	ldr	r3, [pc, #136]	; (8001ed4 <RGBLED_TestPattern+0x90>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <RGBLED_TestPattern+0x90>)
 8001e54:	701a      	strb	r2, [r3, #0]
    G += 2;
 8001e56:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <RGBLED_TestPattern+0x94>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	3302      	adds	r3, #2
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ed8 <RGBLED_TestPattern+0x94>)
 8001e60:	701a      	strb	r2, [r3, #0]
    B += 3;
 8001e62:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <RGBLED_TestPattern+0x98>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	3303      	adds	r3, #3
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	4b1c      	ldr	r3, [pc, #112]	; (8001edc <RGBLED_TestPattern+0x98>)
 8001e6c:	701a      	strb	r2, [r3, #0]

    for (uint8_t i = 0; i < RGBLED_COUNT; i++) {
 8001e6e:	1dfb      	adds	r3, r7, #7
 8001e70:	2200      	movs	r2, #0
 8001e72:	701a      	strb	r2, [r3, #0]
 8001e74:	e011      	b.n	8001e9a <RGBLED_TestPattern+0x56>
        RGBLED_Set(i, R, G, B, 1);
 8001e76:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <RGBLED_TestPattern+0x90>)
 8001e78:	7819      	ldrb	r1, [r3, #0]
 8001e7a:	4b17      	ldr	r3, [pc, #92]	; (8001ed8 <RGBLED_TestPattern+0x94>)
 8001e7c:	781a      	ldrb	r2, [r3, #0]
 8001e7e:	4b17      	ldr	r3, [pc, #92]	; (8001edc <RGBLED_TestPattern+0x98>)
 8001e80:	781c      	ldrb	r4, [r3, #0]
 8001e82:	1dfb      	adds	r3, r7, #7
 8001e84:	7818      	ldrb	r0, [r3, #0]
 8001e86:	2301      	movs	r3, #1
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	0023      	movs	r3, r4
 8001e8c:	f7ff fefc 	bl	8001c88 <RGBLED_Set>
    for (uint8_t i = 0; i < RGBLED_COUNT; i++) {
 8001e90:	1dfb      	adds	r3, r7, #7
 8001e92:	781a      	ldrb	r2, [r3, #0]
 8001e94:	1dfb      	adds	r3, r7, #7
 8001e96:	3201      	adds	r2, #1
 8001e98:	701a      	strb	r2, [r3, #0]
 8001e9a:	1dfb      	adds	r3, r7, #7
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b17      	cmp	r3, #23
 8001ea0:	d9e9      	bls.n	8001e76 <RGBLED_TestPattern+0x32>
    }

    if (R >= 100) R = 0;
 8001ea2:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <RGBLED_TestPattern+0x90>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b63      	cmp	r3, #99	; 0x63
 8001ea8:	d902      	bls.n	8001eb0 <RGBLED_TestPattern+0x6c>
 8001eaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <RGBLED_TestPattern+0x90>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]
    if (G >= 150) G = 0;
 8001eb0:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <RGBLED_TestPattern+0x94>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b95      	cmp	r3, #149	; 0x95
 8001eb6:	d902      	bls.n	8001ebe <RGBLED_TestPattern+0x7a>
 8001eb8:	4b07      	ldr	r3, [pc, #28]	; (8001ed8 <RGBLED_TestPattern+0x94>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	701a      	strb	r2, [r3, #0]
    if (B >= 200) B = 0;
 8001ebe:	4b07      	ldr	r3, [pc, #28]	; (8001edc <RGBLED_TestPattern+0x98>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2bc7      	cmp	r3, #199	; 0xc7
 8001ec4:	d902      	bls.n	8001ecc <RGBLED_TestPattern+0x88>
 8001ec6:	4b05      	ldr	r3, [pc, #20]	; (8001edc <RGBLED_TestPattern+0x98>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
}
 8001ecc:	46c0      	nop			; (mov r8, r8)
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	b003      	add	sp, #12
 8001ed2:	bd90      	pop	{r4, r7, pc}
 8001ed4:	20000e3d 	.word	0x20000e3d
 8001ed8:	20000e3e 	.word	0x20000e3e
 8001edc:	20000e3f 	.word	0x20000e3f

08001ee0 <RGBLED_HandleCAN>:

// Erwartet CAN-Frame: ID 0x110 bis 0x110 + n, 8 Bytes pro LED-Paar
// Bytes: [Index, R, G, B, Bright, Index, R, G, B, Bright] (max. 2 LEDs pro Frame)
void RGBLED_HandleCAN(uint16_t id, const uint8_t *data, uint8_t dlc, uint32_t now_ms)
{
 8001ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ee2:	b089      	sub	sp, #36	; 0x24
 8001ee4:	af02      	add	r7, sp, #8
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	0011      	movs	r1, r2
 8001eea:	607b      	str	r3, [r7, #4]
 8001eec:	240e      	movs	r4, #14
 8001eee:	193b      	adds	r3, r7, r4
 8001ef0:	1c02      	adds	r2, r0, #0
 8001ef2:	801a      	strh	r2, [r3, #0]
 8001ef4:	200d      	movs	r0, #13
 8001ef6:	183b      	adds	r3, r7, r0
 8001ef8:	1c0a      	adds	r2, r1, #0
 8001efa:	701a      	strb	r2, [r3, #0]
    // Grund-ID prüfen
    if (id < 0x110 || id > 0x11B) return;
 8001efc:	0021      	movs	r1, r4
 8001efe:	187b      	adds	r3, r7, r1
 8001f00:	881a      	ldrh	r2, [r3, #0]
 8001f02:	2388      	movs	r3, #136	; 0x88
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d346      	bcc.n	8001f98 <RGBLED_HandleCAN+0xb8>
 8001f0a:	187b      	adds	r3, r7, r1
 8001f0c:	881a      	ldrh	r2, [r3, #0]
 8001f0e:	238e      	movs	r3, #142	; 0x8e
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d240      	bcs.n	8001f98 <RGBLED_HandleCAN+0xb8>
    if (dlc < 8) return;
 8001f16:	183b      	adds	r3, r7, r0
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b07      	cmp	r3, #7
 8001f1c:	d93e      	bls.n	8001f9c <RGBLED_HandleCAN+0xbc>

    uint8_t base = (uint8_t)((id - 0x110) * 2);
 8001f1e:	187b      	adds	r3, r7, r1
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	3b11      	subs	r3, #17
 8001f24:	3bff      	subs	r3, #255	; 0xff
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2017      	movs	r0, #23
 8001f2a:	183a      	adds	r2, r7, r0
 8001f2c:	18db      	adds	r3, r3, r3
 8001f2e:	7013      	strb	r3, [r2, #0]

    RGBLED_Set(base + 0, data[0], data[1], data[2], data[3] & 0x1F);
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	7819      	ldrb	r1, [r3, #0]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	3301      	adds	r3, #1
 8001f38:	781c      	ldrb	r4, [r3, #0]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	3302      	adds	r3, #2
 8001f3e:	781d      	ldrb	r5, [r3, #0]
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	3303      	adds	r3, #3
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	221f      	movs	r2, #31
 8001f48:	4013      	ands	r3, r2
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	0006      	movs	r6, r0
 8001f4e:	183a      	adds	r2, r7, r0
 8001f50:	7810      	ldrb	r0, [r2, #0]
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	002b      	movs	r3, r5
 8001f56:	0022      	movs	r2, r4
 8001f58:	f7ff fe96 	bl	8001c88 <RGBLED_Set>
    RGBLED_Set(base + 1, data[4], data[5], data[6], data[7] & 0x1F);
 8001f5c:	19bb      	adds	r3, r7, r6
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	3301      	adds	r3, #1
 8001f62:	b2d8      	uxtb	r0, r3
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	3304      	adds	r3, #4
 8001f68:	7819      	ldrb	r1, [r3, #0]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	3305      	adds	r3, #5
 8001f6e:	781a      	ldrb	r2, [r3, #0]
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	3306      	adds	r3, #6
 8001f74:	781c      	ldrb	r4, [r3, #0]
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	3307      	adds	r3, #7
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	251f      	movs	r5, #31
 8001f7e:	402b      	ands	r3, r5
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	0023      	movs	r3, r4
 8001f86:	f7ff fe7f 	bl	8001c88 <RGBLED_Set>

    last_led_update_ms = now_ms;
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <RGBLED_HandleCAN+0xc4>)
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	601a      	str	r2, [r3, #0]
    led_control_active = 1;
 8001f90:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <RGBLED_HandleCAN+0xc8>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	701a      	strb	r2, [r3, #0]
 8001f96:	e002      	b.n	8001f9e <RGBLED_HandleCAN+0xbe>
    if (id < 0x110 || id > 0x11B) return;
 8001f98:	46c0      	nop			; (mov r8, r8)
 8001f9a:	e000      	b.n	8001f9e <RGBLED_HandleCAN+0xbe>
    if (dlc < 8) return;
 8001f9c:	46c0      	nop			; (mov r8, r8)
}
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	b007      	add	sp, #28
 8001fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fa4:	20000e38 	.word	0x20000e38
 8001fa8:	20000e3c 	.word	0x20000e3c

08001fac <RGBLED_TimeoutCheck>:

void RGBLED_TimeoutCheck(uint32_t now_ms, SPI_HandleTypeDef *hspi)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
    if (led_control_active) {
 8001fb6:	4b20      	ldr	r3, [pc, #128]	; (8002038 <RGBLED_TimeoutCheck+0x8c>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00a      	beq.n	8001fd4 <RGBLED_TimeoutCheck+0x28>
        // Prüfen ob wir das Timeout überschritten haben → zurück in Testmode
        if ((now_ms - last_led_update_ms) > 1000u) {
 8001fbe:	4b1f      	ldr	r3, [pc, #124]	; (800203c <RGBLED_TimeoutCheck+0x90>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	1ad2      	subs	r2, r2, r3
 8001fc6:	23fa      	movs	r3, #250	; 0xfa
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d902      	bls.n	8001fd4 <RGBLED_TimeoutCheck+0x28>
            led_control_active = 0;
 8001fce:	4b1a      	ldr	r3, [pc, #104]	; (8002038 <RGBLED_TimeoutCheck+0x8c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	701a      	strb	r2, [r3, #0]
        }
    }

    if (led_control_active) {
 8001fd4:	4b18      	ldr	r3, [pc, #96]	; (8002038 <RGBLED_TimeoutCheck+0x8c>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d004      	beq.n	8001fe6 <RGBLED_TimeoutCheck+0x3a>
        RGBLED_Update(hspi);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f7ff fe9a 	bl	8001d18 <RGBLED_Update>
 8001fe4:	e012      	b.n	800200c <RGBLED_TimeoutCheck+0x60>
    } else {
        static uint8_t was_active = 0;

        // Wenn wir gerade aus aktivem CAN-Mode kommen → einmal alles aus
        if (was_active) {
 8001fe6:	4b16      	ldr	r3, [pc, #88]	; (8002040 <RGBLED_TimeoutCheck+0x94>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d008      	beq.n	8002000 <RGBLED_TimeoutCheck+0x54>
            RGBLED_AllOff();
 8001fee:	f000 f82b 	bl	8002048 <RGBLED_AllOff>
            RGBLED_Update(hspi);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	f7ff fe8f 	bl	8001d18 <RGBLED_Update>
            was_active = 0;
 8001ffa:	4b11      	ldr	r3, [pc, #68]	; (8002040 <RGBLED_TimeoutCheck+0x94>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
        }

        RGBLED_TestPattern();
 8002000:	f7ff ff20 	bl	8001e44 <RGBLED_TestPattern>
        RGBLED_Update(hspi);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	0018      	movs	r0, r3
 8002008:	f7ff fe86 	bl	8001d18 <RGBLED_Update>
    }

    // Merken ob wir vorher aktiv waren, um beim nächsten Wechsel reagieren zu können
    static uint8_t prev_active = 0;
    if (!prev_active && led_control_active) {
 800200c:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <RGBLED_TimeoutCheck+0x98>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d109      	bne.n	8002028 <RGBLED_TimeoutCheck+0x7c>
 8002014:	4b08      	ldr	r3, [pc, #32]	; (8002038 <RGBLED_TimeoutCheck+0x8c>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <RGBLED_TimeoutCheck+0x7c>
        // Wechsel von Testmode → CAN-Mode → vorher alle LEDs aus
        RGBLED_AllOff();
 800201c:	f000 f814 	bl	8002048 <RGBLED_AllOff>
        RGBLED_Update(hspi);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	0018      	movs	r0, r3
 8002024:	f7ff fe78 	bl	8001d18 <RGBLED_Update>
    }
    prev_active = led_control_active;
 8002028:	4b03      	ldr	r3, [pc, #12]	; (8002038 <RGBLED_TimeoutCheck+0x8c>)
 800202a:	781a      	ldrb	r2, [r3, #0]
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <RGBLED_TimeoutCheck+0x98>)
 800202e:	701a      	strb	r2, [r3, #0]
}
 8002030:	46c0      	nop			; (mov r8, r8)
 8002032:	46bd      	mov	sp, r7
 8002034:	b002      	add	sp, #8
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20000e3c 	.word	0x20000e3c
 800203c:	20000e38 	.word	0x20000e38
 8002040:	20000e40 	.word	0x20000e40
 8002044:	20000e41 	.word	0x20000e41

08002048 <RGBLED_AllOff>:

void RGBLED_AllOff(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af02      	add	r7, sp, #8
    for (uint8_t i = 0; i < RGBLED_COUNT; i++) {
 800204e:	1dfb      	adds	r3, r7, #7
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
 8002054:	e00d      	b.n	8002072 <RGBLED_AllOff+0x2a>
        RGBLED_Set(i, 0, 0, 0, 0);
 8002056:	1dfb      	adds	r3, r7, #7
 8002058:	7818      	ldrb	r0, [r3, #0]
 800205a:	2300      	movs	r3, #0
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	2300      	movs	r3, #0
 8002060:	2200      	movs	r2, #0
 8002062:	2100      	movs	r1, #0
 8002064:	f7ff fe10 	bl	8001c88 <RGBLED_Set>
    for (uint8_t i = 0; i < RGBLED_COUNT; i++) {
 8002068:	1dfb      	adds	r3, r7, #7
 800206a:	781a      	ldrb	r2, [r3, #0]
 800206c:	1dfb      	adds	r3, r7, #7
 800206e:	3201      	adds	r2, #1
 8002070:	701a      	strb	r2, [r3, #0]
 8002072:	1dfb      	adds	r3, r7, #7
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b17      	cmp	r3, #23
 8002078:	d9ed      	bls.n	8002056 <RGBLED_AllOff+0xe>
    }
}
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	46c0      	nop			; (mov r8, r8)
 800207e:	46bd      	mov	sp, r7
 8002080:	b002      	add	sp, #8
 8002082:	bd80      	pop	{r7, pc}

08002084 <loop_init>:
#else
  #define LOOP_INLINE static inline
#endif

LOOP_INLINE void loop_init(loop_timer_t *lt, uint32_t period_ms, loop_timer_t *parent)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
    lt->period_ms      = period_ms;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	601a      	str	r2, [r3, #0]
    lt->last_tick_ms   = 0;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	605a      	str	r2, [r3, #4]
    lt->start_us       = 0;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
    lt->exec_time_us   = 0;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	60da      	str	r2, [r3, #12]
    lt->usage_x10      = 0;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	821a      	strh	r2, [r3, #16]
    lt->max_curr_x10   = 0;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	825a      	strh	r2, [r3, #18]
    lt->max_prev_x10   = 0;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	829a      	strh	r2, [r3, #20]
    lt->parent         = parent;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	619a      	str	r2, [r3, #24]
}
 80020c0:	46c0      	nop			; (mov r8, r8)
 80020c2:	46bd      	mov	sp, r7
 80020c4:	b004      	add	sp, #16
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <loop_due>:

// fällig? (mit Parent-Kaskade)
LOOP_INLINE uint8_t loop_due(loop_timer_t *lt, uint32_t systime_ms)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
    if (lt->period_ms == 0) return 0; // nicht init
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <loop_due+0x16>
 80020da:	2300      	movs	r3, #0
 80020dc:	e016      	b.n	800210c <loop_due+0x44>
    // Parent muss in dieser while-Iteration bereits gelaufen sein
    if (lt->parent && lt->parent->last_tick_ms == lt->last_tick_ms) return 0;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d008      	beq.n	80020f8 <loop_due+0x30>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d101      	bne.n	80020f8 <loop_due+0x30>
 80020f4:	2300      	movs	r3, #0
 80020f6:	e009      	b.n	800210c <loop_due+0x44>
    return (systime_ms - lt->last_tick_ms) >= lt->period_ms;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	1ad1      	subs	r1, r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	2300      	movs	r3, #0
 8002106:	4291      	cmp	r1, r2
 8002108:	415b      	adcs	r3, r3
 800210a:	b2db      	uxtb	r3, r3
}
 800210c:	0018      	movs	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	b002      	add	sp, #8
 8002112:	bd80      	pop	{r7, pc}

08002114 <loop_start>:

// neue Periode starten: ROLLOVER des Max-Werts
LOOP_INLINE void loop_start(loop_timer_t *lt, uint32_t systime_ms)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
    // Rollover: abgeschlossene Periode → prev, aktuellen Puffer leeren
    lt->max_prev_x10 = lt->max_curr_x10;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	8a5a      	ldrh	r2, [r3, #18]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	829a      	strh	r2, [r3, #20]
    lt->max_curr_x10 = 0;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	825a      	strh	r2, [r3, #18]

    lt->last_tick_ms = systime_ms;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	605a      	str	r2, [r3, #4]
    lt->start_us     = MICROS();
 8002132:	4b04      	ldr	r3, [pc, #16]	; (8002144 <loop_start+0x30>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	609a      	str	r2, [r3, #8]
}
 800213c:	46c0      	nop			; (mov r8, r8)
 800213e:	46bd      	mov	sp, r7
 8002140:	b002      	add	sp, #8
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000fb8 	.word	0x20000fb8

08002148 <loop_end>:

// Periode beenden, Usage & Max der laufenden Periode aktualisieren
LOOP_INLINE void loop_end(loop_timer_t *lt, ErrorCode_t overrun_code)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	000a      	movs	r2, r1
 8002152:	1cfb      	adds	r3, r7, #3
 8002154:	701a      	strb	r2, [r3, #0]
    uint32_t now_us = MICROS();
 8002156:	4b1c      	ldr	r3, [pc, #112]	; (80021c8 <loop_end+0x80>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	60fb      	str	r3, [r7, #12]
    lt->exec_time_us = (now_us >= lt->start_us)
                     ? (now_us - lt->start_us)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	1ad2      	subs	r2, r2, r3
    lt->exec_time_us = (now_us >= lt->start_us)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	60da      	str	r2, [r3, #12]
                     : ((0xFFFFFFFFu - lt->start_us) + now_us + 1u);

    // 0.1%-Skala, „round to nearest“
    lt->usage_x10 = (uint16_t)((lt->exec_time_us + (lt->period_ms/2u)) / lt->period_ms);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	085b      	lsrs	r3, r3, #1
 8002174:	18d2      	adds	r2, r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	0019      	movs	r1, r3
 800217c:	0010      	movs	r0, r2
 800217e:	f7fd ffd5 	bl	800012c <__udivsi3>
 8002182:	0003      	movs	r3, r0
 8002184:	b29a      	uxth	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	821a      	strh	r2, [r3, #16]
    if (lt->usage_x10 > lt->max_curr_x10) lt->max_curr_x10 = lt->usage_x10;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	8a1a      	ldrh	r2, [r3, #16]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	8a5b      	ldrh	r3, [r3, #18]
 8002192:	429a      	cmp	r2, r3
 8002194:	d903      	bls.n	800219e <loop_end+0x56>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	8a1a      	ldrh	r2, [r3, #16]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	825a      	strh	r2, [r3, #18]

    // Overrun?
    if (lt->exec_time_us > (lt->period_ms * 1000u)) {
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68d9      	ldr	r1, [r3, #12]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	0013      	movs	r3, r2
 80021a8:	015b      	lsls	r3, r3, #5
 80021aa:	1a9b      	subs	r3, r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	189b      	adds	r3, r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	4299      	cmp	r1, r3
 80021b4:	d904      	bls.n	80021c0 <loop_end+0x78>
        Error_Register(overrun_code);
 80021b6:	1cfb      	adds	r3, r7, #3
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	0018      	movs	r0, r3
 80021bc:	f7ff fc8e 	bl	8001adc <Error_Register>
    }
}
 80021c0:	46c0      	nop			; (mov r8, r8)
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b004      	add	sp, #16
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20000fb8 	.word	0x20000fb8

080021cc <DISP_WriteLabel>:

// Zeit helper: ms → "M:SS.mmm" (max 7+1 = 8 Zeichen)
void DISP_WriteLapTime(uint32_t ms, uint8_t row, uint8_t col);

// Praktische Kurzhelfer
static inline void DISP_WriteLabel(uint8_t row, uint8_t col, const char* label) {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	603a      	str	r2, [r7, #0]
 80021d4:	1dfb      	adds	r3, r7, #7
 80021d6:	1c02      	adds	r2, r0, #0
 80021d8:	701a      	strb	r2, [r3, #0]
 80021da:	1dbb      	adds	r3, r7, #6
 80021dc:	1c0a      	adds	r2, r1, #0
 80021de:	701a      	strb	r2, [r3, #0]
    DISP_WriteText(row, col, label);
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	1dbb      	adds	r3, r7, #6
 80021e4:	7819      	ldrb	r1, [r3, #0]
 80021e6:	1dfb      	adds	r3, r7, #7
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	0018      	movs	r0, r3
 80021ec:	f7fe ff78 	bl	80010e0 <DISP_WriteText>
}
 80021f0:	46c0      	nop			; (mov r8, r8)
 80021f2:	46bd      	mov	sp, r7
 80021f4:	b002      	add	sp, #8
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <init_loops.0>:
  loop_timer_t loop_10ms  = {0};
  loop_timer_t loop_100ms = {0};
  loop_timer_t loop_200ms = {0};

  void init_loops(void)
  {
 80021f8:	b590      	push	{r4, r7, lr}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4664      	mov	r4, ip
 8002200:	4663      	mov	r3, ip
 8002202:	607b      	str	r3, [r7, #4]
      loop_init(&loop_1ms,   1,   NULL);
 8002204:	0023      	movs	r3, r4
 8002206:	3354      	adds	r3, #84	; 0x54
 8002208:	2200      	movs	r2, #0
 800220a:	2101      	movs	r1, #1
 800220c:	0018      	movs	r0, r3
 800220e:	f7ff ff39 	bl	8002084 <loop_init>
      loop_init(&loop_10ms,  10,  &loop_1ms);
 8002212:	0023      	movs	r3, r4
 8002214:	3338      	adds	r3, #56	; 0x38
 8002216:	0022      	movs	r2, r4
 8002218:	3254      	adds	r2, #84	; 0x54
 800221a:	210a      	movs	r1, #10
 800221c:	0018      	movs	r0, r3
 800221e:	f7ff ff31 	bl	8002084 <loop_init>
      loop_init(&loop_100ms, 100, &loop_10ms);
 8002222:	0023      	movs	r3, r4
 8002224:	331c      	adds	r3, #28
 8002226:	0022      	movs	r2, r4
 8002228:	3238      	adds	r2, #56	; 0x38
 800222a:	2164      	movs	r1, #100	; 0x64
 800222c:	0018      	movs	r0, r3
 800222e:	f7ff ff29 	bl	8002084 <loop_init>
      loop_init(&loop_200ms, 200, &loop_100ms);
 8002232:	0020      	movs	r0, r4
 8002234:	0023      	movs	r3, r4
 8002236:	331c      	adds	r3, #28
 8002238:	001a      	movs	r2, r3
 800223a:	21c8      	movs	r1, #200	; 0xc8
 800223c:	f7ff ff22 	bl	8002084 <loop_init>
  }
 8002240:	46c0      	nop			; (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	b003      	add	sp, #12
 8002246:	bd90      	pop	{r4, r7, pc}

08002248 <main>:
{
 8002248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800224a:	b0a9      	sub	sp, #164	; 0xa4
 800224c:	af02      	add	r7, sp, #8
int main(void)
 800224e:	23a8      	movs	r3, #168	; 0xa8
 8002250:	2208      	movs	r2, #8
 8002252:	189b      	adds	r3, r3, r2
 8002254:	19da      	adds	r2, r3, r7
 8002256:	2410      	movs	r4, #16
 8002258:	193b      	adds	r3, r7, r4
 800225a:	671a      	str	r2, [r3, #112]	; 0x70
  HAL_Init();
 800225c:	f001 fa5e 	bl	800371c <HAL_Init>
  SystemClock_Config();
 8002260:	f000 fa06 	bl	8002670 <SystemClock_Config>
  MX_GPIO_Init();
 8002264:	f000 fbf6 	bl	8002a54 <MX_GPIO_Init>
  MX_DMA_Init();
 8002268:	f000 fbd6 	bl	8002a18 <MX_DMA_Init>
  MX_CAN_Init();
 800226c:	f000 faca 	bl	8002804 <MX_CAN_Init>
  MX_SPI1_Init();
 8002270:	f000 fb02 	bl	8002878 <MX_SPI1_Init>
  MX_ADC_Init();
 8002274:	f000 fa44 	bl	8002700 <MX_ADC_Init>
  MX_SPI2_Init();
 8002278:	f000 fb3c 	bl	80028f4 <MX_SPI2_Init>
  MX_TIM2_Init();
 800227c:	f000 fb78 	bl	8002970 <MX_TIM2_Init>
  HAL_ADCEx_Calibration_Start(&hadc);
 8002280:	4bc8      	ldr	r3, [pc, #800]	; (80025a4 <main+0x35c>)
 8002282:	0018      	movs	r0, r3
 8002284:	f001 ff68 	bl	8004158 <HAL_ADCEx_Calibration_Start>
  HAL_TIM_Base_Start(&htim2);
 8002288:	4bc7      	ldr	r3, [pc, #796]	; (80025a8 <main+0x360>)
 800228a:	0018      	movs	r0, r3
 800228c:	f004 fcb2 	bl	8006bf4 <HAL_TIM_Base_Start>
  RGBLED_Init();
 8002290:	f7ff fcc4 	bl	8001c1c <RGBLED_Init>
  ADC_Init();
 8002294:	f7fe fa6c 	bl	8000770 <ADC_Init>
  CAN_RegisterRxCallback(RGBLED_HandleCAN);
 8002298:	4bc4      	ldr	r3, [pc, #784]	; (80025ac <main+0x364>)
 800229a:	0018      	movs	r0, r3
 800229c:	f7fe fba8 	bl	80009f0 <CAN_RegisterRxCallback>
  CAN_RegisterRxCallback(ADC_HandleCAN);
 80022a0:	4bc3      	ldr	r3, [pc, #780]	; (80025b0 <main+0x368>)
 80022a2:	0018      	movs	r0, r3
 80022a4:	f7fe fba4 	bl	80009f0 <CAN_RegisterRxCallback>
  CAN_RegisterRxCallback(DISP_HandleCAN);
 80022a8:	4bc2      	ldr	r3, [pc, #776]	; (80025b4 <main+0x36c>)
 80022aa:	0018      	movs	r0, r3
 80022ac:	f7fe fba0 	bl	80009f0 <CAN_RegisterRxCallback>
  DISP_Init();
 80022b0:	f7fe fe72 	bl	8000f98 <DISP_Init>
  DISP_GoHome();
 80022b4:	f7fe fe44 	bl	8000f40 <DISP_GoHome>
  HAL_GPIO_WritePin(GPIO1_12VOut_GPIO_Port,GPIO1_12VOut_Pin, GPIO_PIN_RESET);
 80022b8:	2380      	movs	r3, #128	; 0x80
 80022ba:	00d9      	lsls	r1, r3, #3
 80022bc:	2390      	movs	r3, #144	; 0x90
 80022be:	05db      	lsls	r3, r3, #23
 80022c0:	2200      	movs	r2, #0
 80022c2:	0018      	movs	r0, r3
 80022c4:	f003 faa4 	bl	8005810 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIO1_5VOut_GPIO_Port,GPIO1_5VOut_Pin, GPIO_PIN_RESET);
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	0099      	lsls	r1, r3, #2
 80022cc:	2390      	movs	r3, #144	; 0x90
 80022ce:	05db      	lsls	r3, r3, #23
 80022d0:	2200      	movs	r2, #0
 80022d2:	0018      	movs	r0, r3
 80022d4:	f003 fa9c 	bl	8005810 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADC1_CTRL_GPIO_Port,ADC1_CTRL_Pin, GPIO_PIN_SET);
 80022d8:	2380      	movs	r3, #128	; 0x80
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	48b6      	ldr	r0, [pc, #728]	; (80025b8 <main+0x370>)
 80022de:	2201      	movs	r2, #1
 80022e0:	0019      	movs	r1, r3
 80022e2:	f003 fa95 	bl	8005810 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADC1_NTC_CTRL_GPIO_Port,ADC1_NTC_CTRL_Pin, GPIO_PIN_RESET);
 80022e6:	4bb4      	ldr	r3, [pc, #720]	; (80025b8 <main+0x370>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	2102      	movs	r1, #2
 80022ec:	0018      	movs	r0, r3
 80022ee:	f003 fa8f 	bl	8005810 <HAL_GPIO_WritePin>
  loop_timer_t loop_1ms   = {0};
 80022f2:	193b      	adds	r3, r7, r4
 80022f4:	3354      	adds	r3, #84	; 0x54
 80022f6:	221c      	movs	r2, #28
 80022f8:	2100      	movs	r1, #0
 80022fa:	0018      	movs	r0, r3
 80022fc:	f004 ff44 	bl	8007188 <memset>
  loop_timer_t loop_10ms  = {0};
 8002300:	193b      	adds	r3, r7, r4
 8002302:	3338      	adds	r3, #56	; 0x38
 8002304:	221c      	movs	r2, #28
 8002306:	2100      	movs	r1, #0
 8002308:	0018      	movs	r0, r3
 800230a:	f004 ff3d 	bl	8007188 <memset>
  loop_timer_t loop_100ms = {0};
 800230e:	193b      	adds	r3, r7, r4
 8002310:	331c      	adds	r3, #28
 8002312:	221c      	movs	r2, #28
 8002314:	2100      	movs	r1, #0
 8002316:	0018      	movs	r0, r3
 8002318:	f004 ff36 	bl	8007188 <memset>
  loop_timer_t loop_200ms = {0};
 800231c:	193b      	adds	r3, r7, r4
 800231e:	0018      	movs	r0, r3
 8002320:	231c      	movs	r3, #28
 8002322:	001a      	movs	r2, r3
 8002324:	2100      	movs	r1, #0
 8002326:	f004 ff2f 	bl	8007188 <memset>

  init_loops();
 800232a:	193b      	adds	r3, r7, r4
 800232c:	469c      	mov	ip, r3
 800232e:	f7ff ff63 	bl	80021f8 <init_loops.0>

  while (1)
  {

	    uint32_t systime = HAL_GetTick();
 8002332:	f001 fa4d 	bl	80037d0 <HAL_GetTick>
 8002336:	0003      	movs	r3, r0
 8002338:	2490      	movs	r4, #144	; 0x90
 800233a:	193a      	adds	r2, r7, r4
 800233c:	6013      	str	r3, [r2, #0]

	  	  // --- 1 ms Loop ---
	  	  if (loop_due(&loop_1ms, systime)) {
 800233e:	193b      	adds	r3, r7, r4
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	2510      	movs	r5, #16
 8002344:	197b      	adds	r3, r7, r5
 8002346:	3354      	adds	r3, #84	; 0x54
 8002348:	0011      	movs	r1, r2
 800234a:	0018      	movs	r0, r3
 800234c:	f7ff febc 	bl	80020c8 <loop_due>
 8002350:	1e03      	subs	r3, r0, #0
 8002352:	d00d      	beq.n	8002370 <main+0x128>
	  		  loop_start(&loop_1ms, systime);
 8002354:	193b      	adds	r3, r7, r4
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	197b      	adds	r3, r7, r5
 800235a:	3354      	adds	r3, #84	; 0x54
 800235c:	0011      	movs	r1, r2
 800235e:	0018      	movs	r0, r3
 8002360:	f7ff fed8 	bl	8002114 <loop_start>
	  		  // 1ms-Tasks hier
	  		  loop_end(&loop_1ms, ERROR_LOOP_OVERRUN_1MS);
 8002364:	197b      	adds	r3, r7, r5
 8002366:	3354      	adds	r3, #84	; 0x54
 8002368:	210b      	movs	r1, #11
 800236a:	0018      	movs	r0, r3
 800236c:	f7ff feec 	bl	8002148 <loop_end>
	  	  }

	  	// --- 10 ms Loop ---
	  	    if (loop_due(&loop_10ms, systime)) {
 8002370:	2590      	movs	r5, #144	; 0x90
 8002372:	197b      	adds	r3, r7, r5
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	2410      	movs	r4, #16
 8002378:	193b      	adds	r3, r7, r4
 800237a:	3338      	adds	r3, #56	; 0x38
 800237c:	0011      	movs	r1, r2
 800237e:	0018      	movs	r0, r3
 8002380:	f7ff fea2 	bl	80020c8 <loop_due>
 8002384:	1e03      	subs	r3, r0, #0
 8002386:	d100      	bne.n	800238a <main+0x142>
 8002388:	e0b9      	b.n	80024fe <main+0x2b6>
	  	        loop_start(&loop_10ms, systime);
 800238a:	197b      	adds	r3, r7, r5
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	193b      	adds	r3, r7, r4
 8002390:	3338      	adds	r3, #56	; 0x38
 8002392:	0011      	movs	r1, r2
 8002394:	0018      	movs	r0, r3
 8002396:	f7ff febd 	bl	8002114 <loop_start>


				// Senden der Loop usages
				// Nachricht vorbereiten
				CANmsg.id = 0x100;
 800239a:	4b88      	ldr	r3, [pc, #544]	; (80025bc <main+0x374>)
 800239c:	2280      	movs	r2, #128	; 0x80
 800239e:	0052      	lsls	r2, r2, #1
 80023a0:	801a      	strh	r2, [r3, #0]
				CANmsg.dlc = 8;
 80023a2:	4b86      	ldr	r3, [pc, #536]	; (80025bc <main+0x374>)
 80023a4:	2208      	movs	r2, #8
 80023a6:	709a      	strb	r2, [r3, #2]
				CANmsg.data[0] = loop_1ms.max_prev_x10  & 0xFF; CANmsg.data[1] = loop_1ms.max_prev_x10  >> 8;
 80023a8:	193b      	adds	r3, r7, r4
 80023aa:	2268      	movs	r2, #104	; 0x68
 80023ac:	5a9b      	ldrh	r3, [r3, r2]
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	4b82      	ldr	r3, [pc, #520]	; (80025bc <main+0x374>)
 80023b2:	70da      	strb	r2, [r3, #3]
 80023b4:	193b      	adds	r3, r7, r4
 80023b6:	2268      	movs	r2, #104	; 0x68
 80023b8:	5a9b      	ldrh	r3, [r3, r2]
 80023ba:	0a1b      	lsrs	r3, r3, #8
 80023bc:	b29b      	uxth	r3, r3
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	4b7e      	ldr	r3, [pc, #504]	; (80025bc <main+0x374>)
 80023c2:	711a      	strb	r2, [r3, #4]
				CANmsg.data[2] = loop_10ms.max_prev_x10 & 0xFF; CANmsg.data[3] = loop_10ms.max_prev_x10 >> 8;
 80023c4:	0021      	movs	r1, r4
 80023c6:	187b      	adds	r3, r7, r1
 80023c8:	224c      	movs	r2, #76	; 0x4c
 80023ca:	5a9b      	ldrh	r3, [r3, r2]
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	4b7b      	ldr	r3, [pc, #492]	; (80025bc <main+0x374>)
 80023d0:	715a      	strb	r2, [r3, #5]
 80023d2:	187b      	adds	r3, r7, r1
 80023d4:	224c      	movs	r2, #76	; 0x4c
 80023d6:	5a9b      	ldrh	r3, [r3, r2]
 80023d8:	0a1b      	lsrs	r3, r3, #8
 80023da:	b29b      	uxth	r3, r3
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	4b77      	ldr	r3, [pc, #476]	; (80025bc <main+0x374>)
 80023e0:	719a      	strb	r2, [r3, #6]
				CANmsg.data[4] = loop_100ms.max_prev_x10& 0xFF; CANmsg.data[5] = loop_100ms.max_prev_x10>> 8;
 80023e2:	187b      	adds	r3, r7, r1
 80023e4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	4b74      	ldr	r3, [pc, #464]	; (80025bc <main+0x374>)
 80023ea:	71da      	strb	r2, [r3, #7]
 80023ec:	187b      	adds	r3, r7, r1
 80023ee:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80023f0:	0a1b      	lsrs	r3, r3, #8
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	4b71      	ldr	r3, [pc, #452]	; (80025bc <main+0x374>)
 80023f8:	721a      	strb	r2, [r3, #8]
				CANmsg.data[6] = loop_200ms.max_prev_x10& 0xFF; CANmsg.data[7] = loop_200ms.max_prev_x10>> 8;
 80023fa:	187b      	adds	r3, r7, r1
 80023fc:	8a9b      	ldrh	r3, [r3, #20]
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	4b6e      	ldr	r3, [pc, #440]	; (80025bc <main+0x374>)
 8002402:	725a      	strb	r2, [r3, #9]
 8002404:	187b      	adds	r3, r7, r1
 8002406:	8a9b      	ldrh	r3, [r3, #20]
 8002408:	0a1b      	lsrs	r3, r3, #8
 800240a:	b29b      	uxth	r3, r3
 800240c:	b2da      	uxtb	r2, r3
 800240e:	4b6b      	ldr	r3, [pc, #428]	; (80025bc <main+0x374>)
 8002410:	729a      	strb	r2, [r3, #10]

				if (CAN_QueueMessage(&CANmsg) != HAL_OK)
 8002412:	4b6a      	ldr	r3, [pc, #424]	; (80025bc <main+0x374>)
 8002414:	0018      	movs	r0, r3
 8002416:	f7fe fd23 	bl	8000e60 <CAN_QueueMessage>
 800241a:	1e03      	subs	r3, r0, #0
 800241c:	d002      	beq.n	8002424 <main+0x1dc>
				{
				   Error_Register(ERROR_CAN_QUEUE_FULL);
 800241e:	2001      	movs	r0, #1
 8002420:	f7ff fb5c 	bl	8001adc <Error_Register>
				}

	  	        // ADC-Werte holen (gemittelt)
				uint16_t ch0 = ADC_GetAverage(0);
 8002424:	258e      	movs	r5, #142	; 0x8e
 8002426:	197c      	adds	r4, r7, r5
 8002428:	2000      	movs	r0, #0
 800242a:	f7fe fa8d 	bl	8000948 <ADC_GetAverage>
 800242e:	0003      	movs	r3, r0
 8002430:	8023      	strh	r3, [r4, #0]
				uint16_t ch1 = ADC_GetAverage(1);
 8002432:	268c      	movs	r6, #140	; 0x8c
 8002434:	19bc      	adds	r4, r7, r6
 8002436:	2001      	movs	r0, #1
 8002438:	f7fe fa86 	bl	8000948 <ADC_GetAverage>
 800243c:	0003      	movs	r3, r0
 800243e:	8023      	strh	r3, [r4, #0]
				uint16_t ch2 = ADC_GetAverage(2);
 8002440:	218a      	movs	r1, #138	; 0x8a
 8002442:	187c      	adds	r4, r7, r1
 8002444:	2002      	movs	r0, #2
 8002446:	f7fe fa7f 	bl	8000948 <ADC_GetAverage>
 800244a:	0003      	movs	r3, r0
 800244c:	8023      	strh	r3, [r4, #0]
				uint16_t ch3 = ADC_GetAverage(3);
 800244e:	2388      	movs	r3, #136	; 0x88
 8002450:	18fc      	adds	r4, r7, r3
 8002452:	2003      	movs	r0, #3
 8002454:	f7fe fa78 	bl	8000948 <ADC_GetAverage>
 8002458:	0003      	movs	r3, r0
 800245a:	8023      	strh	r3, [r4, #0]

				// CAN-Nachricht vorbereiten
				CANmsg.id  = 0x101;   // frei wählen
 800245c:	4b57      	ldr	r3, [pc, #348]	; (80025bc <main+0x374>)
 800245e:	2202      	movs	r2, #2
 8002460:	32ff      	adds	r2, #255	; 0xff
 8002462:	801a      	strh	r2, [r3, #0]
				CANmsg.dlc = 8;
 8002464:	4b55      	ldr	r3, [pc, #340]	; (80025bc <main+0x374>)
 8002466:	2208      	movs	r2, #8
 8002468:	709a      	strb	r2, [r3, #2]
				CANmsg.data[0] = ch0 & 0xFF;
 800246a:	197b      	adds	r3, r7, r5
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	b2da      	uxtb	r2, r3
 8002470:	4b52      	ldr	r3, [pc, #328]	; (80025bc <main+0x374>)
 8002472:	70da      	strb	r2, [r3, #3]
				CANmsg.data[1] = ch0 >> 8;
 8002474:	197b      	adds	r3, r7, r5
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	0a1b      	lsrs	r3, r3, #8
 800247a:	b29b      	uxth	r3, r3
 800247c:	b2da      	uxtb	r2, r3
 800247e:	4b4f      	ldr	r3, [pc, #316]	; (80025bc <main+0x374>)
 8002480:	711a      	strb	r2, [r3, #4]
				CANmsg.data[2] = ch1 & 0xFF;
 8002482:	19bb      	adds	r3, r7, r6
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	b2da      	uxtb	r2, r3
 8002488:	4b4c      	ldr	r3, [pc, #304]	; (80025bc <main+0x374>)
 800248a:	715a      	strb	r2, [r3, #5]
				CANmsg.data[3] = ch1 >> 8;
 800248c:	19bb      	adds	r3, r7, r6
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	0a1b      	lsrs	r3, r3, #8
 8002492:	b29b      	uxth	r3, r3
 8002494:	b2da      	uxtb	r2, r3
 8002496:	4b49      	ldr	r3, [pc, #292]	; (80025bc <main+0x374>)
 8002498:	719a      	strb	r2, [r3, #6]
				CANmsg.data[4] = ch2 & 0xFF;
 800249a:	218a      	movs	r1, #138	; 0x8a
 800249c:	187b      	adds	r3, r7, r1
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b46      	ldr	r3, [pc, #280]	; (80025bc <main+0x374>)
 80024a4:	71da      	strb	r2, [r3, #7]
				CANmsg.data[5] = ch2 >> 8;
 80024a6:	187b      	adds	r3, r7, r1
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	0a1b      	lsrs	r3, r3, #8
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	4b42      	ldr	r3, [pc, #264]	; (80025bc <main+0x374>)
 80024b2:	721a      	strb	r2, [r3, #8]
				CANmsg.data[6] = ch3 & 0xFF;
 80024b4:	2188      	movs	r1, #136	; 0x88
 80024b6:	187b      	adds	r3, r7, r1
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	4b3f      	ldr	r3, [pc, #252]	; (80025bc <main+0x374>)
 80024be:	725a      	strb	r2, [r3, #9]
				CANmsg.data[7] = ch3 >> 8;
 80024c0:	187b      	adds	r3, r7, r1
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	0a1b      	lsrs	r3, r3, #8
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	4b3c      	ldr	r3, [pc, #240]	; (80025bc <main+0x374>)
 80024cc:	729a      	strb	r2, [r3, #10]

				if (CAN_QueueMessage(&CANmsg) != HAL_OK)
 80024ce:	4b3b      	ldr	r3, [pc, #236]	; (80025bc <main+0x374>)
 80024d0:	0018      	movs	r0, r3
 80024d2:	f7fe fcc5 	bl	8000e60 <CAN_QueueMessage>
 80024d6:	1e03      	subs	r3, r0, #0
 80024d8:	d002      	beq.n	80024e0 <main+0x298>
				{
				   Error_Register(ERROR_CAN_QUEUE_FULL);
 80024da:	2001      	movs	r0, #1
 80024dc:	f7ff fafe 	bl	8001adc <Error_Register>
				}

				RGBLED_TimeoutCheck(systime, &hspi2);
 80024e0:	4a37      	ldr	r2, [pc, #220]	; (80025c0 <main+0x378>)
 80024e2:	2390      	movs	r3, #144	; 0x90
 80024e4:	18fb      	adds	r3, r7, r3
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	0011      	movs	r1, r2
 80024ea:	0018      	movs	r0, r3
 80024ec:	f7ff fd5e 	bl	8001fac <RGBLED_TimeoutCheck>

	  	      loop_end(&loop_10ms, ERROR_LOOP_OVERRUN_10MS);
 80024f0:	2310      	movs	r3, #16
 80024f2:	18fb      	adds	r3, r7, r3
 80024f4:	3338      	adds	r3, #56	; 0x38
 80024f6:	210c      	movs	r1, #12
 80024f8:	0018      	movs	r0, r3
 80024fa:	f7ff fe25 	bl	8002148 <loop_end>
	  	    }

	  	    // --- 100 ms Loop ---
	  	    if (loop_due(&loop_100ms, systime)) {
 80024fe:	2490      	movs	r4, #144	; 0x90
 8002500:	193b      	adds	r3, r7, r4
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	2510      	movs	r5, #16
 8002506:	197b      	adds	r3, r7, r5
 8002508:	331c      	adds	r3, #28
 800250a:	0011      	movs	r1, r2
 800250c:	0018      	movs	r0, r3
 800250e:	f7ff fddb 	bl	80020c8 <loop_due>
 8002512:	1e03      	subs	r3, r0, #0
 8002514:	d100      	bne.n	8002518 <main+0x2d0>
 8002516:	e084      	b.n	8002622 <main+0x3da>
	  	        loop_start(&loop_100ms, systime);
 8002518:	193b      	adds	r3, r7, r4
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	197b      	adds	r3, r7, r5
 800251e:	331c      	adds	r3, #28
 8002520:	0011      	movs	r1, r2
 8002522:	0018      	movs	r0, r3
 8002524:	f7ff fdf6 	bl	8002114 <loop_start>

	  	      // Page 0 befüllen
	  	      DISP_SetPage(0);
 8002528:	2000      	movs	r0, #0
 800252a:	f7fe fd6d 	bl	8001008 <DISP_SetPage>
	  	      DISP_WriteLabel(0, 0, "Hello World");
 800252e:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <main+0x37c>)
 8002530:	001a      	movs	r2, r3
 8002532:	2100      	movs	r1, #0
 8002534:	2000      	movs	r0, #0
 8002536:	f7ff fe49 	bl	80021cc <DISP_WriteLabel>
	  	      DISP_WriteNumber(1234, 2, 6, 1, 0, "V");     // → "  12.34V" bei min_width=6
 800253a:	4823      	ldr	r0, [pc, #140]	; (80025c8 <main+0x380>)
 800253c:	4b23      	ldr	r3, [pc, #140]	; (80025cc <main+0x384>)
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	2300      	movs	r3, #0
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	2301      	movs	r3, #1
 8002546:	2206      	movs	r2, #6
 8002548:	2102      	movs	r1, #2
 800254a:	f7fe fe27 	bl	800119c <DISP_WriteNumber>
	  	      DISP_WriteLapTime(90567, 2, 0);              // → "1:30.567"
 800254e:	4b20      	ldr	r3, [pc, #128]	; (80025d0 <main+0x388>)
 8002550:	2200      	movs	r2, #0
 8002552:	2102      	movs	r1, #2
 8002554:	0018      	movs	r0, r3
 8002556:	f7ff fa4b 	bl	80019f0 <DISP_WriteLapTime>
	  	      DISP_Render();
 800255a:	f7fe fd79 	bl	8001050 <DISP_Render>

			  //RGBLED_TestPattern();
			  //RGBLED_Update(&hspi2);

			  CAN_Message_t* received = CAN_GetMessage(0x321);
 800255e:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <main+0x38c>)
 8002560:	0018      	movs	r0, r3
 8002562:	f7fe fc93 	bl	8000e8c <CAN_GetMessage>
 8002566:	0003      	movs	r3, r0
 8002568:	2184      	movs	r1, #132	; 0x84
 800256a:	187a      	adds	r2, r7, r1
 800256c:	6013      	str	r3, [r2, #0]
			  uint16_t value = 0;
 800256e:	2096      	movs	r0, #150	; 0x96
 8002570:	183b      	adds	r3, r7, r0
 8002572:	2200      	movs	r2, #0
 8002574:	801a      	strh	r2, [r3, #0]

			  if (received && received->dlc >= 2) {
 8002576:	187b      	adds	r3, r7, r1
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d02c      	beq.n	80025d8 <main+0x390>
 800257e:	187b      	adds	r3, r7, r1
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	789b      	ldrb	r3, [r3, #2]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d927      	bls.n	80025d8 <main+0x390>
			      value = (uint16_t)received->data[0] | ((uint16_t)received->data[1] << 8);
 8002588:	187b      	adds	r3, r7, r1
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	78db      	ldrb	r3, [r3, #3]
 800258e:	b21a      	sxth	r2, r3
 8002590:	187b      	adds	r3, r7, r1
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	791b      	ldrb	r3, [r3, #4]
 8002596:	021b      	lsls	r3, r3, #8
 8002598:	b21b      	sxth	r3, r3
 800259a:	4313      	orrs	r3, r2
 800259c:	b21a      	sxth	r2, r3
 800259e:	183b      	adds	r3, r7, r0
 80025a0:	801a      	strh	r2, [r3, #0]
 80025a2:	e01c      	b.n	80025de <main+0x396>
 80025a4:	20000e44 	.word	0x20000e44
 80025a8:	20000fb8 	.word	0x20000fb8
 80025ac:	08001ee1 	.word	0x08001ee1
 80025b0:	08000635 	.word	0x08000635
 80025b4:	08001a7d 	.word	0x08001a7d
 80025b8:	48000400 	.word	0x48000400
 80025bc:	20001000 	.word	0x20001000
 80025c0:	20000f54 	.word	0x20000f54
 80025c4:	08007b24 	.word	0x08007b24
 80025c8:	000004d2 	.word	0x000004d2
 80025cc:	08007b30 	.word	0x08007b30
 80025d0:	000161c7 	.word	0x000161c7
 80025d4:	00000321 	.word	0x00000321
			  } else {
			      Error_Register(ERROR_CAN_RX_EMPTY);
 80025d8:	200f      	movs	r0, #15
 80025da:	f7ff fa7f 	bl	8001adc <Error_Register>
			  }

			  char buffer[16];
			  snprintf(buffer, sizeof(buffer), "Wert: %u", value);
 80025de:	2396      	movs	r3, #150	; 0x96
 80025e0:	18fb      	adds	r3, r7, r3
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	4a1f      	ldr	r2, [pc, #124]	; (8002664 <main+0x41c>)
 80025e6:	0038      	movs	r0, r7
 80025e8:	2110      	movs	r1, #16
 80025ea:	f004 fd99 	bl	8007120 <sniprintf>

			  ssd1306_SetCursor(0, 8);
 80025ee:	2108      	movs	r1, #8
 80025f0:	2000      	movs	r0, #0
 80025f2:	f001 f83b 	bl	800366c <ssd1306_SetCursor>
			  ssd1306_WriteString(buffer, Font_6x8, White);
 80025f6:	4b1c      	ldr	r3, [pc, #112]	; (8002668 <main+0x420>)
 80025f8:	0038      	movs	r0, r7
 80025fa:	2201      	movs	r2, #1
 80025fc:	9200      	str	r2, [sp, #0]
 80025fe:	6819      	ldr	r1, [r3, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f001 f806 	bl	8003614 <ssd1306_WriteString>

			  Display_ErrorStatus();
 8002608:	f7ff fab0 	bl	8001b6c <Display_ErrorStatus>

			  ssd1306_UpdateScreen();
 800260c:	f000 fec8 	bl	80033a0 <ssd1306_UpdateScreen>

			  ADC_SendCurrentConfig();
 8002610:	f7fe f860 	bl	80006d4 <ADC_SendCurrentConfig>

			  loop_end(&loop_100ms, ERROR_LOOP_OVERRUN_100MS);
 8002614:	2310      	movs	r3, #16
 8002616:	18fb      	adds	r3, r7, r3
 8002618:	331c      	adds	r3, #28
 800261a:	210d      	movs	r1, #13
 800261c:	0018      	movs	r0, r3
 800261e:	f7ff fd93 	bl	8002148 <loop_end>
		}

			// --- 200 ms Loop ---
			if (loop_due(&loop_200ms, systime)) {
 8002622:	2590      	movs	r5, #144	; 0x90
 8002624:	197b      	adds	r3, r7, r5
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	2410      	movs	r4, #16
 800262a:	193b      	adds	r3, r7, r4
 800262c:	0011      	movs	r1, r2
 800262e:	0018      	movs	r0, r3
 8002630:	f7ff fd4a 	bl	80020c8 <loop_due>
 8002634:	1e03      	subs	r3, r0, #0
 8002636:	d100      	bne.n	800263a <main+0x3f2>
 8002638:	e67b      	b.n	8002332 <main+0xea>
				loop_start(&loop_200ms, systime);
 800263a:	197b      	adds	r3, r7, r5
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	193b      	adds	r3, r7, r4
 8002640:	0011      	movs	r1, r2
 8002642:	0018      	movs	r0, r3
 8002644:	f7ff fd66 	bl	8002114 <loop_start>

	  		  HAL_GPIO_TogglePin(Heart_GPIO_Port,Heart_Pin);
 8002648:	4b08      	ldr	r3, [pc, #32]	; (800266c <main+0x424>)
 800264a:	2101      	movs	r1, #1
 800264c:	0018      	movs	r0, r3
 800264e:	f003 f8fc 	bl	800584a <HAL_GPIO_TogglePin>
	  		  Error_LED_Update();  // LED-Steuerung hier
 8002652:	f7ff fabf 	bl	8001bd4 <Error_LED_Update>

	  		loop_end(&loop_200ms, ERROR_LOOP_OVERRUN_200MS);
 8002656:	193b      	adds	r3, r7, r4
 8002658:	210e      	movs	r1, #14
 800265a:	0018      	movs	r0, r3
 800265c:	f7ff fd74 	bl	8002148 <loop_end>
  {
 8002660:	e667      	b.n	8002332 <main+0xea>
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	08007b34 	.word	0x08007b34
 8002668:	08008188 	.word	0x08008188
 800266c:	48000800 	.word	0x48000800

08002670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002670:	b590      	push	{r4, r7, lr}
 8002672:	b093      	sub	sp, #76	; 0x4c
 8002674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002676:	2414      	movs	r4, #20
 8002678:	193b      	adds	r3, r7, r4
 800267a:	0018      	movs	r0, r3
 800267c:	2334      	movs	r3, #52	; 0x34
 800267e:	001a      	movs	r2, r3
 8002680:	2100      	movs	r1, #0
 8002682:	f004 fd81 	bl	8007188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002686:	1d3b      	adds	r3, r7, #4
 8002688:	0018      	movs	r0, r3
 800268a:	2310      	movs	r3, #16
 800268c:	001a      	movs	r2, r3
 800268e:	2100      	movs	r1, #0
 8002690:	f004 fd7a 	bl	8007188 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002694:	0021      	movs	r1, r4
 8002696:	187b      	adds	r3, r7, r1
 8002698:	2201      	movs	r2, #1
 800269a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800269c:	187b      	adds	r3, r7, r1
 800269e:	2201      	movs	r2, #1
 80026a0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026a2:	187b      	adds	r3, r7, r1
 80026a4:	2202      	movs	r2, #2
 80026a6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026a8:	187b      	adds	r3, r7, r1
 80026aa:	2280      	movs	r2, #128	; 0x80
 80026ac:	0252      	lsls	r2, r2, #9
 80026ae:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80026b0:	187b      	adds	r3, r7, r1
 80026b2:	2280      	movs	r2, #128	; 0x80
 80026b4:	02d2      	lsls	r2, r2, #11
 80026b6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80026b8:	187b      	adds	r3, r7, r1
 80026ba:	2200      	movs	r2, #0
 80026bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026be:	187b      	adds	r3, r7, r1
 80026c0:	0018      	movs	r0, r3
 80026c2:	f003 f8dd 	bl	8005880 <HAL_RCC_OscConfig>
 80026c6:	1e03      	subs	r3, r0, #0
 80026c8:	d001      	beq.n	80026ce <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80026ca:	f000 fadd 	bl	8002c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026ce:	1d3b      	adds	r3, r7, #4
 80026d0:	2207      	movs	r2, #7
 80026d2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026d4:	1d3b      	adds	r3, r7, #4
 80026d6:	2202      	movs	r2, #2
 80026d8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026da:	1d3b      	adds	r3, r7, #4
 80026dc:	2200      	movs	r2, #0
 80026de:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026e0:	1d3b      	adds	r3, r7, #4
 80026e2:	2200      	movs	r2, #0
 80026e4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80026e6:	1d3b      	adds	r3, r7, #4
 80026e8:	2101      	movs	r1, #1
 80026ea:	0018      	movs	r0, r3
 80026ec:	f003 fc4e 	bl	8005f8c <HAL_RCC_ClockConfig>
 80026f0:	1e03      	subs	r3, r0, #0
 80026f2:	d001      	beq.n	80026f8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80026f4:	f000 fac8 	bl	8002c88 <Error_Handler>
  }
}
 80026f8:	46c0      	nop			; (mov r8, r8)
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b013      	add	sp, #76	; 0x4c
 80026fe:	bd90      	pop	{r4, r7, pc}

08002700 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002706:	1d3b      	adds	r3, r7, #4
 8002708:	0018      	movs	r0, r3
 800270a:	230c      	movs	r3, #12
 800270c:	001a      	movs	r2, r3
 800270e:	2100      	movs	r1, #0
 8002710:	f004 fd3a 	bl	8007188 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002714:	4b39      	ldr	r3, [pc, #228]	; (80027fc <MX_ADC_Init+0xfc>)
 8002716:	4a3a      	ldr	r2, [pc, #232]	; (8002800 <MX_ADC_Init+0x100>)
 8002718:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800271a:	4b38      	ldr	r3, [pc, #224]	; (80027fc <MX_ADC_Init+0xfc>)
 800271c:	2280      	movs	r2, #128	; 0x80
 800271e:	0612      	lsls	r2, r2, #24
 8002720:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002722:	4b36      	ldr	r3, [pc, #216]	; (80027fc <MX_ADC_Init+0xfc>)
 8002724:	2200      	movs	r2, #0
 8002726:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002728:	4b34      	ldr	r3, [pc, #208]	; (80027fc <MX_ADC_Init+0xfc>)
 800272a:	2200      	movs	r2, #0
 800272c:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800272e:	4b33      	ldr	r3, [pc, #204]	; (80027fc <MX_ADC_Init+0xfc>)
 8002730:	2201      	movs	r2, #1
 8002732:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002734:	4b31      	ldr	r3, [pc, #196]	; (80027fc <MX_ADC_Init+0xfc>)
 8002736:	2204      	movs	r2, #4
 8002738:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800273a:	4b30      	ldr	r3, [pc, #192]	; (80027fc <MX_ADC_Init+0xfc>)
 800273c:	2200      	movs	r2, #0
 800273e:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002740:	4b2e      	ldr	r3, [pc, #184]	; (80027fc <MX_ADC_Init+0xfc>)
 8002742:	2200      	movs	r2, #0
 8002744:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002746:	4b2d      	ldr	r3, [pc, #180]	; (80027fc <MX_ADC_Init+0xfc>)
 8002748:	2201      	movs	r2, #1
 800274a:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800274c:	4b2b      	ldr	r3, [pc, #172]	; (80027fc <MX_ADC_Init+0xfc>)
 800274e:	2200      	movs	r2, #0
 8002750:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002752:	4b2a      	ldr	r3, [pc, #168]	; (80027fc <MX_ADC_Init+0xfc>)
 8002754:	22c2      	movs	r2, #194	; 0xc2
 8002756:	32ff      	adds	r2, #255	; 0xff
 8002758:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800275a:	4b28      	ldr	r3, [pc, #160]	; (80027fc <MX_ADC_Init+0xfc>)
 800275c:	2200      	movs	r2, #0
 800275e:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8002760:	4b26      	ldr	r3, [pc, #152]	; (80027fc <MX_ADC_Init+0xfc>)
 8002762:	2224      	movs	r2, #36	; 0x24
 8002764:	2101      	movs	r1, #1
 8002766:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002768:	4b24      	ldr	r3, [pc, #144]	; (80027fc <MX_ADC_Init+0xfc>)
 800276a:	2200      	movs	r2, #0
 800276c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800276e:	4b23      	ldr	r3, [pc, #140]	; (80027fc <MX_ADC_Init+0xfc>)
 8002770:	0018      	movs	r0, r3
 8002772:	f001 f85b 	bl	800382c <HAL_ADC_Init>
 8002776:	1e03      	subs	r3, r0, #0
 8002778:	d001      	beq.n	800277e <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 800277a:	f000 fa85 	bl	8002c88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800277e:	1d3b      	adds	r3, r7, #4
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002784:	1d3b      	adds	r3, r7, #4
 8002786:	2280      	movs	r2, #128	; 0x80
 8002788:	0152      	lsls	r2, r2, #5
 800278a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800278c:	1d3b      	adds	r3, r7, #4
 800278e:	2207      	movs	r2, #7
 8002790:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002792:	1d3a      	adds	r2, r7, #4
 8002794:	4b19      	ldr	r3, [pc, #100]	; (80027fc <MX_ADC_Init+0xfc>)
 8002796:	0011      	movs	r1, r2
 8002798:	0018      	movs	r0, r3
 800279a:	f001 fabd 	bl	8003d18 <HAL_ADC_ConfigChannel>
 800279e:	1e03      	subs	r3, r0, #0
 80027a0:	d001      	beq.n	80027a6 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80027a2:	f000 fa71 	bl	8002c88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80027a6:	1d3b      	adds	r3, r7, #4
 80027a8:	2201      	movs	r2, #1
 80027aa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80027ac:	1d3a      	adds	r2, r7, #4
 80027ae:	4b13      	ldr	r3, [pc, #76]	; (80027fc <MX_ADC_Init+0xfc>)
 80027b0:	0011      	movs	r1, r2
 80027b2:	0018      	movs	r0, r3
 80027b4:	f001 fab0 	bl	8003d18 <HAL_ADC_ConfigChannel>
 80027b8:	1e03      	subs	r3, r0, #0
 80027ba:	d001      	beq.n	80027c0 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80027bc:	f000 fa64 	bl	8002c88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80027c0:	1d3b      	adds	r3, r7, #4
 80027c2:	2202      	movs	r2, #2
 80027c4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80027c6:	1d3a      	adds	r2, r7, #4
 80027c8:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <MX_ADC_Init+0xfc>)
 80027ca:	0011      	movs	r1, r2
 80027cc:	0018      	movs	r0, r3
 80027ce:	f001 faa3 	bl	8003d18 <HAL_ADC_ConfigChannel>
 80027d2:	1e03      	subs	r3, r0, #0
 80027d4:	d001      	beq.n	80027da <MX_ADC_Init+0xda>
  {
    Error_Handler();
 80027d6:	f000 fa57 	bl	8002c88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80027da:	1d3b      	adds	r3, r7, #4
 80027dc:	2203      	movs	r2, #3
 80027de:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80027e0:	1d3a      	adds	r2, r7, #4
 80027e2:	4b06      	ldr	r3, [pc, #24]	; (80027fc <MX_ADC_Init+0xfc>)
 80027e4:	0011      	movs	r1, r2
 80027e6:	0018      	movs	r0, r3
 80027e8:	f001 fa96 	bl	8003d18 <HAL_ADC_ConfigChannel>
 80027ec:	1e03      	subs	r3, r0, #0
 80027ee:	d001      	beq.n	80027f4 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 80027f0:	f000 fa4a 	bl	8002c88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80027f4:	46c0      	nop			; (mov r8, r8)
 80027f6:	46bd      	mov	sp, r7
 80027f8:	b004      	add	sp, #16
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	20000e44 	.word	0x20000e44
 8002800:	40012400 	.word	0x40012400

08002804 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8002808:	4b19      	ldr	r3, [pc, #100]	; (8002870 <MX_CAN_Init+0x6c>)
 800280a:	4a1a      	ldr	r2, [pc, #104]	; (8002874 <MX_CAN_Init+0x70>)
 800280c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800280e:	4b18      	ldr	r3, [pc, #96]	; (8002870 <MX_CAN_Init+0x6c>)
 8002810:	2204      	movs	r2, #4
 8002812:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002814:	4b16      	ldr	r3, [pc, #88]	; (8002870 <MX_CAN_Init+0x6c>)
 8002816:	2200      	movs	r2, #0
 8002818:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800281a:	4b15      	ldr	r3, [pc, #84]	; (8002870 <MX_CAN_Init+0x6c>)
 800281c:	2200      	movs	r2, #0
 800281e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8002820:	4b13      	ldr	r3, [pc, #76]	; (8002870 <MX_CAN_Init+0x6c>)
 8002822:	22a0      	movs	r2, #160	; 0xa0
 8002824:	02d2      	lsls	r2, r2, #11
 8002826:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8002828:	4b11      	ldr	r3, [pc, #68]	; (8002870 <MX_CAN_Init+0x6c>)
 800282a:	2280      	movs	r2, #128	; 0x80
 800282c:	03d2      	lsls	r2, r2, #15
 800282e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002830:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <MX_CAN_Init+0x6c>)
 8002832:	2200      	movs	r2, #0
 8002834:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002836:	4b0e      	ldr	r3, [pc, #56]	; (8002870 <MX_CAN_Init+0x6c>)
 8002838:	2200      	movs	r2, #0
 800283a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800283c:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <MX_CAN_Init+0x6c>)
 800283e:	2200      	movs	r2, #0
 8002840:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002842:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <MX_CAN_Init+0x6c>)
 8002844:	2200      	movs	r2, #0
 8002846:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002848:	4b09      	ldr	r3, [pc, #36]	; (8002870 <MX_CAN_Init+0x6c>)
 800284a:	2200      	movs	r2, #0
 800284c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800284e:	4b08      	ldr	r3, [pc, #32]	; (8002870 <MX_CAN_Init+0x6c>)
 8002850:	2200      	movs	r2, #0
 8002852:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <MX_CAN_Init+0x6c>)
 8002856:	0018      	movs	r0, r3
 8002858:	f001 fd26 	bl	80042a8 <HAL_CAN_Init>
 800285c:	1e03      	subs	r3, r0, #0
 800285e:	d001      	beq.n	8002864 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8002860:	f000 fa12 	bl	8002c88 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_Init();
 8002864:	f7fe f99a 	bl	8000b9c <CAN_Init>
  /* USER CODE END CAN_Init 2 */

}
 8002868:	46c0      	nop			; (mov r8, r8)
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	20000ec8 	.word	0x20000ec8
 8002874:	40006400 	.word	0x40006400

08002878 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800287c:	4b1b      	ldr	r3, [pc, #108]	; (80028ec <MX_SPI1_Init+0x74>)
 800287e:	4a1c      	ldr	r2, [pc, #112]	; (80028f0 <MX_SPI1_Init+0x78>)
 8002880:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002882:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <MX_SPI1_Init+0x74>)
 8002884:	2282      	movs	r2, #130	; 0x82
 8002886:	0052      	lsls	r2, r2, #1
 8002888:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800288a:	4b18      	ldr	r3, [pc, #96]	; (80028ec <MX_SPI1_Init+0x74>)
 800288c:	2200      	movs	r2, #0
 800288e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002890:	4b16      	ldr	r3, [pc, #88]	; (80028ec <MX_SPI1_Init+0x74>)
 8002892:	22e0      	movs	r2, #224	; 0xe0
 8002894:	00d2      	lsls	r2, r2, #3
 8002896:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002898:	4b14      	ldr	r3, [pc, #80]	; (80028ec <MX_SPI1_Init+0x74>)
 800289a:	2202      	movs	r2, #2
 800289c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800289e:	4b13      	ldr	r3, [pc, #76]	; (80028ec <MX_SPI1_Init+0x74>)
 80028a0:	2201      	movs	r2, #1
 80028a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80028a4:	4b11      	ldr	r3, [pc, #68]	; (80028ec <MX_SPI1_Init+0x74>)
 80028a6:	2280      	movs	r2, #128	; 0x80
 80028a8:	0092      	lsls	r2, r2, #2
 80028aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80028ac:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <MX_SPI1_Init+0x74>)
 80028ae:	2218      	movs	r2, #24
 80028b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028b2:	4b0e      	ldr	r3, [pc, #56]	; (80028ec <MX_SPI1_Init+0x74>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80028b8:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <MX_SPI1_Init+0x74>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028be:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <MX_SPI1_Init+0x74>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80028c4:	4b09      	ldr	r3, [pc, #36]	; (80028ec <MX_SPI1_Init+0x74>)
 80028c6:	2207      	movs	r2, #7
 80028c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80028ca:	4b08      	ldr	r3, [pc, #32]	; (80028ec <MX_SPI1_Init+0x74>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80028d0:	4b06      	ldr	r3, [pc, #24]	; (80028ec <MX_SPI1_Init+0x74>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028d6:	4b05      	ldr	r3, [pc, #20]	; (80028ec <MX_SPI1_Init+0x74>)
 80028d8:	0018      	movs	r0, r3
 80028da:	f003 fca5 	bl	8006228 <HAL_SPI_Init>
 80028de:	1e03      	subs	r3, r0, #0
 80028e0:	d001      	beq.n	80028e6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80028e2:	f000 f9d1 	bl	8002c88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20000ef0 	.word	0x20000ef0
 80028f0:	40013000 	.word	0x40013000

080028f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80028f8:	4b1b      	ldr	r3, [pc, #108]	; (8002968 <MX_SPI2_Init+0x74>)
 80028fa:	4a1c      	ldr	r2, [pc, #112]	; (800296c <MX_SPI2_Init+0x78>)
 80028fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80028fe:	4b1a      	ldr	r3, [pc, #104]	; (8002968 <MX_SPI2_Init+0x74>)
 8002900:	2282      	movs	r2, #130	; 0x82
 8002902:	0052      	lsls	r2, r2, #1
 8002904:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002906:	4b18      	ldr	r3, [pc, #96]	; (8002968 <MX_SPI2_Init+0x74>)
 8002908:	2200      	movs	r2, #0
 800290a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800290c:	4b16      	ldr	r3, [pc, #88]	; (8002968 <MX_SPI2_Init+0x74>)
 800290e:	22e0      	movs	r2, #224	; 0xe0
 8002910:	00d2      	lsls	r2, r2, #3
 8002912:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002914:	4b14      	ldr	r3, [pc, #80]	; (8002968 <MX_SPI2_Init+0x74>)
 8002916:	2200      	movs	r2, #0
 8002918:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800291a:	4b13      	ldr	r3, [pc, #76]	; (8002968 <MX_SPI2_Init+0x74>)
 800291c:	2200      	movs	r2, #0
 800291e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002920:	4b11      	ldr	r3, [pc, #68]	; (8002968 <MX_SPI2_Init+0x74>)
 8002922:	2280      	movs	r2, #128	; 0x80
 8002924:	0092      	lsls	r2, r2, #2
 8002926:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002928:	4b0f      	ldr	r3, [pc, #60]	; (8002968 <MX_SPI2_Init+0x74>)
 800292a:	2210      	movs	r2, #16
 800292c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800292e:	4b0e      	ldr	r3, [pc, #56]	; (8002968 <MX_SPI2_Init+0x74>)
 8002930:	2200      	movs	r2, #0
 8002932:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002934:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <MX_SPI2_Init+0x74>)
 8002936:	2200      	movs	r2, #0
 8002938:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800293a:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <MX_SPI2_Init+0x74>)
 800293c:	2200      	movs	r2, #0
 800293e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002940:	4b09      	ldr	r3, [pc, #36]	; (8002968 <MX_SPI2_Init+0x74>)
 8002942:	2207      	movs	r2, #7
 8002944:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002946:	4b08      	ldr	r3, [pc, #32]	; (8002968 <MX_SPI2_Init+0x74>)
 8002948:	2200      	movs	r2, #0
 800294a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800294c:	4b06      	ldr	r3, [pc, #24]	; (8002968 <MX_SPI2_Init+0x74>)
 800294e:	2200      	movs	r2, #0
 8002950:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002952:	4b05      	ldr	r3, [pc, #20]	; (8002968 <MX_SPI2_Init+0x74>)
 8002954:	0018      	movs	r0, r3
 8002956:	f003 fc67 	bl	8006228 <HAL_SPI_Init>
 800295a:	1e03      	subs	r3, r0, #0
 800295c:	d001      	beq.n	8002962 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800295e:	f000 f993 	bl	8002c88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	20000f54 	.word	0x20000f54
 800296c:	40003800 	.word	0x40003800

08002970 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002976:	2308      	movs	r3, #8
 8002978:	18fb      	adds	r3, r7, r3
 800297a:	0018      	movs	r0, r3
 800297c:	2310      	movs	r3, #16
 800297e:	001a      	movs	r2, r3
 8002980:	2100      	movs	r1, #0
 8002982:	f004 fc01 	bl	8007188 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002986:	003b      	movs	r3, r7
 8002988:	0018      	movs	r0, r3
 800298a:	2308      	movs	r3, #8
 800298c:	001a      	movs	r2, r3
 800298e:	2100      	movs	r1, #0
 8002990:	f004 fbfa 	bl	8007188 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002994:	4b1f      	ldr	r3, [pc, #124]	; (8002a14 <MX_TIM2_Init+0xa4>)
 8002996:	2280      	movs	r2, #128	; 0x80
 8002998:	05d2      	lsls	r2, r2, #23
 800299a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 800299c:	4b1d      	ldr	r3, [pc, #116]	; (8002a14 <MX_TIM2_Init+0xa4>)
 800299e:	222f      	movs	r2, #47	; 0x2f
 80029a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029a2:	4b1c      	ldr	r3, [pc, #112]	; (8002a14 <MX_TIM2_Init+0xa4>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80029a8:	4b1a      	ldr	r3, [pc, #104]	; (8002a14 <MX_TIM2_Init+0xa4>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	4252      	negs	r2, r2
 80029ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029b0:	4b18      	ldr	r3, [pc, #96]	; (8002a14 <MX_TIM2_Init+0xa4>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029b6:	4b17      	ldr	r3, [pc, #92]	; (8002a14 <MX_TIM2_Init+0xa4>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029bc:	4b15      	ldr	r3, [pc, #84]	; (8002a14 <MX_TIM2_Init+0xa4>)
 80029be:	0018      	movs	r0, r3
 80029c0:	f004 f8c8 	bl	8006b54 <HAL_TIM_Base_Init>
 80029c4:	1e03      	subs	r3, r0, #0
 80029c6:	d001      	beq.n	80029cc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80029c8:	f000 f95e 	bl	8002c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029cc:	2108      	movs	r1, #8
 80029ce:	187b      	adds	r3, r7, r1
 80029d0:	2280      	movs	r2, #128	; 0x80
 80029d2:	0152      	lsls	r2, r2, #5
 80029d4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029d6:	187a      	adds	r2, r7, r1
 80029d8:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <MX_TIM2_Init+0xa4>)
 80029da:	0011      	movs	r1, r2
 80029dc:	0018      	movs	r0, r3
 80029de:	f004 f953 	bl	8006c88 <HAL_TIM_ConfigClockSource>
 80029e2:	1e03      	subs	r3, r0, #0
 80029e4:	d001      	beq.n	80029ea <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80029e6:	f000 f94f 	bl	8002c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ea:	003b      	movs	r3, r7
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029f0:	003b      	movs	r3, r7
 80029f2:	2200      	movs	r2, #0
 80029f4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029f6:	003a      	movs	r2, r7
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <MX_TIM2_Init+0xa4>)
 80029fa:	0011      	movs	r1, r2
 80029fc:	0018      	movs	r0, r3
 80029fe:	f004 fb31 	bl	8007064 <HAL_TIMEx_MasterConfigSynchronization>
 8002a02:	1e03      	subs	r3, r0, #0
 8002a04:	d001      	beq.n	8002a0a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002a06:	f000 f93f 	bl	8002c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	b006      	add	sp, #24
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	20000fb8 	.word	0x20000fb8

08002a18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a1e:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <MX_DMA_Init+0x38>)
 8002a20:	695a      	ldr	r2, [r3, #20]
 8002a22:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <MX_DMA_Init+0x38>)
 8002a24:	2101      	movs	r1, #1
 8002a26:	430a      	orrs	r2, r1
 8002a28:	615a      	str	r2, [r3, #20]
 8002a2a:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <MX_DMA_Init+0x38>)
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	4013      	ands	r3, r2
 8002a32:	607b      	str	r3, [r7, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002a36:	2200      	movs	r2, #0
 8002a38:	2100      	movs	r1, #0
 8002a3a:	2009      	movs	r0, #9
 8002a3c:	f002 fb60 	bl	8005100 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002a40:	2009      	movs	r0, #9
 8002a42:	f002 fb72 	bl	800512a <HAL_NVIC_EnableIRQ>

}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b002      	add	sp, #8
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	40021000 	.word	0x40021000

08002a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a54:	b590      	push	{r4, r7, lr}
 8002a56:	b08b      	sub	sp, #44	; 0x2c
 8002a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a5a:	2414      	movs	r4, #20
 8002a5c:	193b      	adds	r3, r7, r4
 8002a5e:	0018      	movs	r0, r3
 8002a60:	2314      	movs	r3, #20
 8002a62:	001a      	movs	r2, r3
 8002a64:	2100      	movs	r1, #0
 8002a66:	f004 fb8f 	bl	8007188 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a6a:	4b7f      	ldr	r3, [pc, #508]	; (8002c68 <MX_GPIO_Init+0x214>)
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	4b7e      	ldr	r3, [pc, #504]	; (8002c68 <MX_GPIO_Init+0x214>)
 8002a70:	2180      	movs	r1, #128	; 0x80
 8002a72:	03c9      	lsls	r1, r1, #15
 8002a74:	430a      	orrs	r2, r1
 8002a76:	615a      	str	r2, [r3, #20]
 8002a78:	4b7b      	ldr	r3, [pc, #492]	; (8002c68 <MX_GPIO_Init+0x214>)
 8002a7a:	695a      	ldr	r2, [r3, #20]
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	03db      	lsls	r3, r3, #15
 8002a80:	4013      	ands	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
 8002a84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a86:	4b78      	ldr	r3, [pc, #480]	; (8002c68 <MX_GPIO_Init+0x214>)
 8002a88:	695a      	ldr	r2, [r3, #20]
 8002a8a:	4b77      	ldr	r3, [pc, #476]	; (8002c68 <MX_GPIO_Init+0x214>)
 8002a8c:	2180      	movs	r1, #128	; 0x80
 8002a8e:	0309      	lsls	r1, r1, #12
 8002a90:	430a      	orrs	r2, r1
 8002a92:	615a      	str	r2, [r3, #20]
 8002a94:	4b74      	ldr	r3, [pc, #464]	; (8002c68 <MX_GPIO_Init+0x214>)
 8002a96:	695a      	ldr	r2, [r3, #20]
 8002a98:	2380      	movs	r3, #128	; 0x80
 8002a9a:	031b      	lsls	r3, r3, #12
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa2:	4b71      	ldr	r3, [pc, #452]	; (8002c68 <MX_GPIO_Init+0x214>)
 8002aa4:	695a      	ldr	r2, [r3, #20]
 8002aa6:	4b70      	ldr	r3, [pc, #448]	; (8002c68 <MX_GPIO_Init+0x214>)
 8002aa8:	2180      	movs	r1, #128	; 0x80
 8002aaa:	0289      	lsls	r1, r1, #10
 8002aac:	430a      	orrs	r2, r1
 8002aae:	615a      	str	r2, [r3, #20]
 8002ab0:	4b6d      	ldr	r3, [pc, #436]	; (8002c68 <MX_GPIO_Init+0x214>)
 8002ab2:	695a      	ldr	r2, [r3, #20]
 8002ab4:	2380      	movs	r3, #128	; 0x80
 8002ab6:	029b      	lsls	r3, r3, #10
 8002ab8:	4013      	ands	r3, r2
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002abe:	4b6a      	ldr	r3, [pc, #424]	; (8002c68 <MX_GPIO_Init+0x214>)
 8002ac0:	695a      	ldr	r2, [r3, #20]
 8002ac2:	4b69      	ldr	r3, [pc, #420]	; (8002c68 <MX_GPIO_Init+0x214>)
 8002ac4:	2180      	movs	r1, #128	; 0x80
 8002ac6:	02c9      	lsls	r1, r1, #11
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	615a      	str	r2, [r3, #20]
 8002acc:	4b66      	ldr	r3, [pc, #408]	; (8002c68 <MX_GPIO_Init+0x214>)
 8002ace:	695a      	ldr	r2, [r3, #20]
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	02db      	lsls	r3, r3, #11
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	607b      	str	r3, [r7, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ada:	4b63      	ldr	r3, [pc, #396]	; (8002c68 <MX_GPIO_Init+0x214>)
 8002adc:	695a      	ldr	r2, [r3, #20]
 8002ade:	4b62      	ldr	r3, [pc, #392]	; (8002c68 <MX_GPIO_Init+0x214>)
 8002ae0:	2180      	movs	r1, #128	; 0x80
 8002ae2:	0349      	lsls	r1, r1, #13
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	615a      	str	r2, [r3, #20]
 8002ae8:	4b5f      	ldr	r3, [pc, #380]	; (8002c68 <MX_GPIO_Init+0x214>)
 8002aea:	695a      	ldr	r2, [r3, #20]
 8002aec:	2380      	movs	r3, #128	; 0x80
 8002aee:	035b      	lsls	r3, r3, #13
 8002af0:	4013      	ands	r3, r2
 8002af2:	603b      	str	r3, [r7, #0]
 8002af4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Heart_Pin|Error_Pin|nRES_Display_Pin|GPIO3_12VOut_Pin
 8002af6:	495d      	ldr	r1, [pc, #372]	; (8002c6c <MX_GPIO_Init+0x218>)
 8002af8:	4b5d      	ldr	r3, [pc, #372]	; (8002c70 <MX_GPIO_Init+0x21c>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	0018      	movs	r0, r3
 8002afe:	f002 fe87 	bl	8005810 <HAL_GPIO_WritePin>
                          |GPIO2_5VOut_Pin|GPIO2_12VOut_Pin|GPIO6_5VOut_Pin|GPIO6_12VOut_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nCS_Display_Pin|D_nC_Display_Pin|GPIO1_5VOut_Pin|GPIO1_12VOut_Pin, GPIO_PIN_RESET);
 8002b02:	23ca      	movs	r3, #202	; 0xca
 8002b04:	00d9      	lsls	r1, r3, #3
 8002b06:	2390      	movs	r3, #144	; 0x90
 8002b08:	05db      	lsls	r3, r3, #23
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f002 fe7f 	bl	8005810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ADC2_NTC_CTRL_Pin|ADC1_NTC_CTRL_Pin|ADC0_NTC_CTRL_Pin|ADC1_CTRL_Pin
 8002b12:	4958      	ldr	r1, [pc, #352]	; (8002c74 <MX_GPIO_Init+0x220>)
 8002b14:	4b58      	ldr	r3, [pc, #352]	; (8002c78 <MX_GPIO_Init+0x224>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f002 fe79 	bl	8005810 <HAL_GPIO_WritePin>
                          |GPIO5_12VOut_Pin|GPIO4_5VOut_Pin|GPIO4_12VOut_Pin|ADC3_NTC_CTRL_Pin
                          |ADC0_CTRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Heart_Pin Error_Pin GPIO3_12VOut_Pin GPIO2_5VOut_Pin
                           GPIO2_12VOut_Pin GPIO6_5VOut_Pin GPIO6_12VOut_Pin */
  GPIO_InitStruct.Pin = Heart_Pin|Error_Pin|GPIO3_12VOut_Pin|GPIO2_5VOut_Pin
 8002b1e:	193b      	adds	r3, r7, r4
 8002b20:	4a56      	ldr	r2, [pc, #344]	; (8002c7c <MX_GPIO_Init+0x228>)
 8002b22:	601a      	str	r2, [r3, #0]
                          |GPIO2_12VOut_Pin|GPIO6_5VOut_Pin|GPIO6_12VOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b24:	193b      	adds	r3, r7, r4
 8002b26:	2201      	movs	r2, #1
 8002b28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2a:	193b      	adds	r3, r7, r4
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b30:	193b      	adds	r3, r7, r4
 8002b32:	2200      	movs	r2, #0
 8002b34:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b36:	193b      	adds	r3, r7, r4
 8002b38:	4a4d      	ldr	r2, [pc, #308]	; (8002c70 <MX_GPIO_Init+0x21c>)
 8002b3a:	0019      	movs	r1, r3
 8002b3c:	0010      	movs	r0, r2
 8002b3e:	f002 fcef 	bl	8005520 <HAL_GPIO_Init>

  /*Configure GPIO pins : nCS_Display_Pin D_nC_Display_Pin */
  GPIO_InitStruct.Pin = nCS_Display_Pin|D_nC_Display_Pin;
 8002b42:	193b      	adds	r3, r7, r4
 8002b44:	2250      	movs	r2, #80	; 0x50
 8002b46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b48:	193b      	adds	r3, r7, r4
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	193b      	adds	r3, r7, r4
 8002b50:	2200      	movs	r2, #0
 8002b52:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b54:	193b      	adds	r3, r7, r4
 8002b56:	2203      	movs	r2, #3
 8002b58:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5a:	193a      	adds	r2, r7, r4
 8002b5c:	2390      	movs	r3, #144	; 0x90
 8002b5e:	05db      	lsls	r3, r3, #23
 8002b60:	0011      	movs	r1, r2
 8002b62:	0018      	movs	r0, r3
 8002b64:	f002 fcdc 	bl	8005520 <HAL_GPIO_Init>

  /*Configure GPIO pin : nRES_Display_Pin */
  GPIO_InitStruct.Pin = nRES_Display_Pin;
 8002b68:	193b      	adds	r3, r7, r4
 8002b6a:	2210      	movs	r2, #16
 8002b6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b6e:	193b      	adds	r3, r7, r4
 8002b70:	2201      	movs	r2, #1
 8002b72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b74:	193b      	adds	r3, r7, r4
 8002b76:	2200      	movs	r2, #0
 8002b78:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b7a:	193b      	adds	r3, r7, r4
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(nRES_Display_GPIO_Port, &GPIO_InitStruct);
 8002b80:	193b      	adds	r3, r7, r4
 8002b82:	4a3b      	ldr	r2, [pc, #236]	; (8002c70 <MX_GPIO_Init+0x21c>)
 8002b84:	0019      	movs	r1, r3
 8002b86:	0010      	movs	r0, r2
 8002b88:	f002 fcca 	bl	8005520 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC2_NTC_CTRL_Pin ADC1_NTC_CTRL_Pin ADC0_NTC_CTRL_Pin ADC1_CTRL_Pin
                           ADC2_CTRL_Pin ADC3_CTRL_Pin GPIO3_5VOut_Pin GPIO5_5VOut_Pin
                           GPIO5_12VOut_Pin GPIO4_5VOut_Pin GPIO4_12VOut_Pin ADC3_NTC_CTRL_Pin
                           ADC0_CTRL_Pin */
  GPIO_InitStruct.Pin = ADC2_NTC_CTRL_Pin|ADC1_NTC_CTRL_Pin|ADC0_NTC_CTRL_Pin|ADC1_CTRL_Pin
 8002b8c:	193b      	adds	r3, r7, r4
 8002b8e:	4a39      	ldr	r2, [pc, #228]	; (8002c74 <MX_GPIO_Init+0x220>)
 8002b90:	601a      	str	r2, [r3, #0]
                          |ADC2_CTRL_Pin|ADC3_CTRL_Pin|GPIO3_5VOut_Pin|GPIO5_5VOut_Pin
                          |GPIO5_12VOut_Pin|GPIO4_5VOut_Pin|GPIO4_12VOut_Pin|ADC3_NTC_CTRL_Pin
                          |ADC0_CTRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b92:	193b      	adds	r3, r7, r4
 8002b94:	2201      	movs	r2, #1
 8002b96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b98:	193b      	adds	r3, r7, r4
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9e:	193b      	adds	r3, r7, r4
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba4:	193b      	adds	r3, r7, r4
 8002ba6:	4a34      	ldr	r2, [pc, #208]	; (8002c78 <MX_GPIO_Init+0x224>)
 8002ba8:	0019      	movs	r1, r3
 8002baa:	0010      	movs	r0, r2
 8002bac:	f002 fcb8 	bl	8005520 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO3_In_Pin GPIO4_In_Pin */
  GPIO_InitStruct.Pin = GPIO3_In_Pin|GPIO4_In_Pin;
 8002bb0:	193b      	adds	r3, r7, r4
 8002bb2:	4a33      	ldr	r2, [pc, #204]	; (8002c80 <MX_GPIO_Init+0x22c>)
 8002bb4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bb6:	193b      	adds	r3, r7, r4
 8002bb8:	2200      	movs	r2, #0
 8002bba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	193b      	adds	r3, r7, r4
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bc2:	193b      	adds	r3, r7, r4
 8002bc4:	4a2c      	ldr	r2, [pc, #176]	; (8002c78 <MX_GPIO_Init+0x224>)
 8002bc6:	0019      	movs	r1, r3
 8002bc8:	0010      	movs	r0, r2
 8002bca:	f002 fca9 	bl	8005520 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO2_In_Pin GPIO6_In_Pin */
  GPIO_InitStruct.Pin = GPIO2_In_Pin|GPIO6_In_Pin;
 8002bce:	0021      	movs	r1, r4
 8002bd0:	187b      	adds	r3, r7, r1
 8002bd2:	2290      	movs	r2, #144	; 0x90
 8002bd4:	00d2      	lsls	r2, r2, #3
 8002bd6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bd8:	000c      	movs	r4, r1
 8002bda:	193b      	adds	r3, r7, r4
 8002bdc:	2200      	movs	r2, #0
 8002bde:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be0:	193b      	adds	r3, r7, r4
 8002be2:	2200      	movs	r2, #0
 8002be4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002be6:	193b      	adds	r3, r7, r4
 8002be8:	4a21      	ldr	r2, [pc, #132]	; (8002c70 <MX_GPIO_Init+0x21c>)
 8002bea:	0019      	movs	r1, r3
 8002bec:	0010      	movs	r0, r2
 8002bee:	f002 fc97 	bl	8005520 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO1_In_Pin */
  GPIO_InitStruct.Pin = GPIO1_In_Pin;
 8002bf2:	193b      	adds	r3, r7, r4
 8002bf4:	2280      	movs	r2, #128	; 0x80
 8002bf6:	0052      	lsls	r2, r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bfa:	193b      	adds	r3, r7, r4
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	193b      	adds	r3, r7, r4
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO1_In_GPIO_Port, &GPIO_InitStruct);
 8002c06:	193a      	adds	r2, r7, r4
 8002c08:	2390      	movs	r3, #144	; 0x90
 8002c0a:	05db      	lsls	r3, r3, #23
 8002c0c:	0011      	movs	r1, r2
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f002 fc86 	bl	8005520 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO1_5VOut_Pin GPIO1_12VOut_Pin */
  GPIO_InitStruct.Pin = GPIO1_5VOut_Pin|GPIO1_12VOut_Pin;
 8002c14:	0021      	movs	r1, r4
 8002c16:	187b      	adds	r3, r7, r1
 8002c18:	22c0      	movs	r2, #192	; 0xc0
 8002c1a:	00d2      	lsls	r2, r2, #3
 8002c1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c1e:	000c      	movs	r4, r1
 8002c20:	193b      	adds	r3, r7, r4
 8002c22:	2201      	movs	r2, #1
 8002c24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c26:	193b      	adds	r3, r7, r4
 8002c28:	2200      	movs	r2, #0
 8002c2a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2c:	193b      	adds	r3, r7, r4
 8002c2e:	2200      	movs	r2, #0
 8002c30:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c32:	193a      	adds	r2, r7, r4
 8002c34:	2390      	movs	r3, #144	; 0x90
 8002c36:	05db      	lsls	r3, r3, #23
 8002c38:	0011      	movs	r1, r2
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	f002 fc70 	bl	8005520 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO5_In_Pin */
  GPIO_InitStruct.Pin = GPIO5_In_Pin;
 8002c40:	193b      	adds	r3, r7, r4
 8002c42:	2204      	movs	r2, #4
 8002c44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c46:	193b      	adds	r3, r7, r4
 8002c48:	2200      	movs	r2, #0
 8002c4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4c:	193b      	adds	r3, r7, r4
 8002c4e:	2200      	movs	r2, #0
 8002c50:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO5_In_GPIO_Port, &GPIO_InitStruct);
 8002c52:	193b      	adds	r3, r7, r4
 8002c54:	4a0b      	ldr	r2, [pc, #44]	; (8002c84 <MX_GPIO_Init+0x230>)
 8002c56:	0019      	movs	r1, r3
 8002c58:	0010      	movs	r0, r2
 8002c5a:	f002 fc61 	bl	8005520 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c5e:	46c0      	nop			; (mov r8, r8)
 8002c60:	46bd      	mov	sp, r7
 8002c62:	b00b      	add	sp, #44	; 0x2c
 8002c64:	bd90      	pop	{r4, r7, pc}
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	00001b53 	.word	0x00001b53
 8002c70:	48000800 	.word	0x48000800
 8002c74:	0000bbdf 	.word	0x0000bbdf
 8002c78:	48000400 	.word	0x48000400
 8002c7c:	00001b43 	.word	0x00001b43
 8002c80:	00004020 	.word	0x00004020
 8002c84:	48000c00 	.word	0x48000c00

08002c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c8c:	b672      	cpsid	i
}
 8002c8e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c90:	e7fe      	b.n	8002c90 <Error_Handler+0x8>
	...

08002c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c9a:	4b0f      	ldr	r3, [pc, #60]	; (8002cd8 <HAL_MspInit+0x44>)
 8002c9c:	699a      	ldr	r2, [r3, #24]
 8002c9e:	4b0e      	ldr	r3, [pc, #56]	; (8002cd8 <HAL_MspInit+0x44>)
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	619a      	str	r2, [r3, #24]
 8002ca6:	4b0c      	ldr	r3, [pc, #48]	; (8002cd8 <HAL_MspInit+0x44>)
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	2201      	movs	r2, #1
 8002cac:	4013      	ands	r3, r2
 8002cae:	607b      	str	r3, [r7, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cb2:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <HAL_MspInit+0x44>)
 8002cb4:	69da      	ldr	r2, [r3, #28]
 8002cb6:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <HAL_MspInit+0x44>)
 8002cb8:	2180      	movs	r1, #128	; 0x80
 8002cba:	0549      	lsls	r1, r1, #21
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	61da      	str	r2, [r3, #28]
 8002cc0:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <HAL_MspInit+0x44>)
 8002cc2:	69da      	ldr	r2, [r3, #28]
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	055b      	lsls	r3, r3, #21
 8002cc8:	4013      	ands	r3, r2
 8002cca:	603b      	str	r3, [r7, #0]
 8002ccc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	b002      	add	sp, #8
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	40021000 	.word	0x40021000

08002cdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002cdc:	b590      	push	{r4, r7, lr}
 8002cde:	b08b      	sub	sp, #44	; 0x2c
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce4:	2414      	movs	r4, #20
 8002ce6:	193b      	adds	r3, r7, r4
 8002ce8:	0018      	movs	r0, r3
 8002cea:	2314      	movs	r3, #20
 8002cec:	001a      	movs	r2, r3
 8002cee:	2100      	movs	r1, #0
 8002cf0:	f004 fa4a 	bl	8007188 <memset>
  if(hadc->Instance==ADC1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a31      	ldr	r2, [pc, #196]	; (8002dc0 <HAL_ADC_MspInit+0xe4>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d15b      	bne.n	8002db6 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002cfe:	4b31      	ldr	r3, [pc, #196]	; (8002dc4 <HAL_ADC_MspInit+0xe8>)
 8002d00:	699a      	ldr	r2, [r3, #24]
 8002d02:	4b30      	ldr	r3, [pc, #192]	; (8002dc4 <HAL_ADC_MspInit+0xe8>)
 8002d04:	2180      	movs	r1, #128	; 0x80
 8002d06:	0089      	lsls	r1, r1, #2
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	619a      	str	r2, [r3, #24]
 8002d0c:	4b2d      	ldr	r3, [pc, #180]	; (8002dc4 <HAL_ADC_MspInit+0xe8>)
 8002d0e:	699a      	ldr	r2, [r3, #24]
 8002d10:	2380      	movs	r3, #128	; 0x80
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4013      	ands	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d1a:	4b2a      	ldr	r3, [pc, #168]	; (8002dc4 <HAL_ADC_MspInit+0xe8>)
 8002d1c:	695a      	ldr	r2, [r3, #20]
 8002d1e:	4b29      	ldr	r3, [pc, #164]	; (8002dc4 <HAL_ADC_MspInit+0xe8>)
 8002d20:	2180      	movs	r1, #128	; 0x80
 8002d22:	0289      	lsls	r1, r1, #10
 8002d24:	430a      	orrs	r2, r1
 8002d26:	615a      	str	r2, [r3, #20]
 8002d28:	4b26      	ldr	r3, [pc, #152]	; (8002dc4 <HAL_ADC_MspInit+0xe8>)
 8002d2a:	695a      	ldr	r2, [r3, #20]
 8002d2c:	2380      	movs	r3, #128	; 0x80
 8002d2e:	029b      	lsls	r3, r3, #10
 8002d30:	4013      	ands	r3, r2
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002d36:	193b      	adds	r3, r7, r4
 8002d38:	220f      	movs	r2, #15
 8002d3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d3c:	193b      	adds	r3, r7, r4
 8002d3e:	2203      	movs	r2, #3
 8002d40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d42:	193b      	adds	r3, r7, r4
 8002d44:	2200      	movs	r2, #0
 8002d46:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d48:	193a      	adds	r2, r7, r4
 8002d4a:	2390      	movs	r3, #144	; 0x90
 8002d4c:	05db      	lsls	r3, r3, #23
 8002d4e:	0011      	movs	r1, r2
 8002d50:	0018      	movs	r0, r3
 8002d52:	f002 fbe5 	bl	8005520 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8002d56:	4b1c      	ldr	r3, [pc, #112]	; (8002dc8 <HAL_ADC_MspInit+0xec>)
 8002d58:	4a1c      	ldr	r2, [pc, #112]	; (8002dcc <HAL_ADC_MspInit+0xf0>)
 8002d5a:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d5c:	4b1a      	ldr	r3, [pc, #104]	; (8002dc8 <HAL_ADC_MspInit+0xec>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d62:	4b19      	ldr	r3, [pc, #100]	; (8002dc8 <HAL_ADC_MspInit+0xec>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002d68:	4b17      	ldr	r3, [pc, #92]	; (8002dc8 <HAL_ADC_MspInit+0xec>)
 8002d6a:	2280      	movs	r2, #128	; 0x80
 8002d6c:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d6e:	4b16      	ldr	r3, [pc, #88]	; (8002dc8 <HAL_ADC_MspInit+0xec>)
 8002d70:	2280      	movs	r2, #128	; 0x80
 8002d72:	0052      	lsls	r2, r2, #1
 8002d74:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d76:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <HAL_ADC_MspInit+0xec>)
 8002d78:	2280      	movs	r2, #128	; 0x80
 8002d7a:	00d2      	lsls	r2, r2, #3
 8002d7c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002d7e:	4b12      	ldr	r3, [pc, #72]	; (8002dc8 <HAL_ADC_MspInit+0xec>)
 8002d80:	2220      	movs	r2, #32
 8002d82:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002d84:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <HAL_ADC_MspInit+0xec>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002d8a:	4b0f      	ldr	r3, [pc, #60]	; (8002dc8 <HAL_ADC_MspInit+0xec>)
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f002 f9e9 	bl	8005164 <HAL_DMA_Init>
 8002d92:	1e03      	subs	r3, r0, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8002d96:	f7ff ff77 	bl	8002c88 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a0a      	ldr	r2, [pc, #40]	; (8002dc8 <HAL_ADC_MspInit+0xec>)
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30
 8002da0:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <HAL_ADC_MspInit+0xec>)
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	625a      	str	r2, [r3, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8002da6:	2200      	movs	r2, #0
 8002da8:	2100      	movs	r1, #0
 8002daa:	200c      	movs	r0, #12
 8002dac:	f002 f9a8 	bl	8005100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8002db0:	200c      	movs	r0, #12
 8002db2:	f002 f9ba 	bl	800512a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	46bd      	mov	sp, r7
 8002dba:	b00b      	add	sp, #44	; 0x2c
 8002dbc:	bd90      	pop	{r4, r7, pc}
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	40012400 	.word	0x40012400
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	20000e84 	.word	0x20000e84
 8002dcc:	40020008 	.word	0x40020008

08002dd0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002dd0:	b590      	push	{r4, r7, lr}
 8002dd2:	b08b      	sub	sp, #44	; 0x2c
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd8:	2414      	movs	r4, #20
 8002dda:	193b      	adds	r3, r7, r4
 8002ddc:	0018      	movs	r0, r3
 8002dde:	2314      	movs	r3, #20
 8002de0:	001a      	movs	r2, r3
 8002de2:	2100      	movs	r1, #0
 8002de4:	f004 f9d0 	bl	8007188 <memset>
  if(hcan->Instance==CAN)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a21      	ldr	r2, [pc, #132]	; (8002e74 <HAL_CAN_MspInit+0xa4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d13b      	bne.n	8002e6a <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002df2:	4b21      	ldr	r3, [pc, #132]	; (8002e78 <HAL_CAN_MspInit+0xa8>)
 8002df4:	69da      	ldr	r2, [r3, #28]
 8002df6:	4b20      	ldr	r3, [pc, #128]	; (8002e78 <HAL_CAN_MspInit+0xa8>)
 8002df8:	2180      	movs	r1, #128	; 0x80
 8002dfa:	0489      	lsls	r1, r1, #18
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	61da      	str	r2, [r3, #28]
 8002e00:	4b1d      	ldr	r3, [pc, #116]	; (8002e78 <HAL_CAN_MspInit+0xa8>)
 8002e02:	69da      	ldr	r2, [r3, #28]
 8002e04:	2380      	movs	r3, #128	; 0x80
 8002e06:	049b      	lsls	r3, r3, #18
 8002e08:	4013      	ands	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e0e:	4b1a      	ldr	r3, [pc, #104]	; (8002e78 <HAL_CAN_MspInit+0xa8>)
 8002e10:	695a      	ldr	r2, [r3, #20]
 8002e12:	4b19      	ldr	r3, [pc, #100]	; (8002e78 <HAL_CAN_MspInit+0xa8>)
 8002e14:	2180      	movs	r1, #128	; 0x80
 8002e16:	0289      	lsls	r1, r1, #10
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	615a      	str	r2, [r3, #20]
 8002e1c:	4b16      	ldr	r3, [pc, #88]	; (8002e78 <HAL_CAN_MspInit+0xa8>)
 8002e1e:	695a      	ldr	r2, [r3, #20]
 8002e20:	2380      	movs	r3, #128	; 0x80
 8002e22:	029b      	lsls	r3, r3, #10
 8002e24:	4013      	ands	r3, r2
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002e2a:	193b      	adds	r3, r7, r4
 8002e2c:	22c0      	movs	r2, #192	; 0xc0
 8002e2e:	0152      	lsls	r2, r2, #5
 8002e30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e32:	0021      	movs	r1, r4
 8002e34:	187b      	adds	r3, r7, r1
 8002e36:	2202      	movs	r2, #2
 8002e38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3a:	187b      	adds	r3, r7, r1
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e40:	187b      	adds	r3, r7, r1
 8002e42:	2203      	movs	r2, #3
 8002e44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8002e46:	187b      	adds	r3, r7, r1
 8002e48:	2204      	movs	r2, #4
 8002e4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e4c:	187a      	adds	r2, r7, r1
 8002e4e:	2390      	movs	r3, #144	; 0x90
 8002e50:	05db      	lsls	r3, r3, #23
 8002e52:	0011      	movs	r1, r2
 8002e54:	0018      	movs	r0, r3
 8002e56:	f002 fb63 	bl	8005520 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	201e      	movs	r0, #30
 8002e60:	f002 f94e 	bl	8005100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8002e64:	201e      	movs	r0, #30
 8002e66:	f002 f960 	bl	800512a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	b00b      	add	sp, #44	; 0x2c
 8002e70:	bd90      	pop	{r4, r7, pc}
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	40006400 	.word	0x40006400
 8002e78:	40021000 	.word	0x40021000

08002e7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e7c:	b590      	push	{r4, r7, lr}
 8002e7e:	b08d      	sub	sp, #52	; 0x34
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e84:	241c      	movs	r4, #28
 8002e86:	193b      	adds	r3, r7, r4
 8002e88:	0018      	movs	r0, r3
 8002e8a:	2314      	movs	r3, #20
 8002e8c:	001a      	movs	r2, r3
 8002e8e:	2100      	movs	r1, #0
 8002e90:	f004 f97a 	bl	8007188 <memset>
  if(hspi->Instance==SPI1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a53      	ldr	r2, [pc, #332]	; (8002fe8 <HAL_SPI_MspInit+0x16c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d13b      	bne.n	8002f16 <HAL_SPI_MspInit+0x9a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e9e:	4b53      	ldr	r3, [pc, #332]	; (8002fec <HAL_SPI_MspInit+0x170>)
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	4b52      	ldr	r3, [pc, #328]	; (8002fec <HAL_SPI_MspInit+0x170>)
 8002ea4:	2180      	movs	r1, #128	; 0x80
 8002ea6:	0149      	lsls	r1, r1, #5
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	619a      	str	r2, [r3, #24]
 8002eac:	4b4f      	ldr	r3, [pc, #316]	; (8002fec <HAL_SPI_MspInit+0x170>)
 8002eae:	699a      	ldr	r2, [r3, #24]
 8002eb0:	2380      	movs	r3, #128	; 0x80
 8002eb2:	015b      	lsls	r3, r3, #5
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
 8002eb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eba:	4b4c      	ldr	r3, [pc, #304]	; (8002fec <HAL_SPI_MspInit+0x170>)
 8002ebc:	695a      	ldr	r2, [r3, #20]
 8002ebe:	4b4b      	ldr	r3, [pc, #300]	; (8002fec <HAL_SPI_MspInit+0x170>)
 8002ec0:	2180      	movs	r1, #128	; 0x80
 8002ec2:	0289      	lsls	r1, r1, #10
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	615a      	str	r2, [r3, #20]
 8002ec8:	4b48      	ldr	r3, [pc, #288]	; (8002fec <HAL_SPI_MspInit+0x170>)
 8002eca:	695a      	ldr	r2, [r3, #20]
 8002ecc:	2380      	movs	r3, #128	; 0x80
 8002ece:	029b      	lsls	r3, r3, #10
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Display_Pin|SPI1_MOSI_Display_Pin;
 8002ed6:	0021      	movs	r1, r4
 8002ed8:	187b      	adds	r3, r7, r1
 8002eda:	22a0      	movs	r2, #160	; 0xa0
 8002edc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ede:	187b      	adds	r3, r7, r1
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee4:	187b      	adds	r3, r7, r1
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002eea:	187b      	adds	r3, r7, r1
 8002eec:	2203      	movs	r2, #3
 8002eee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002ef0:	187b      	adds	r3, r7, r1
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef6:	187a      	adds	r2, r7, r1
 8002ef8:	2390      	movs	r3, #144	; 0x90
 8002efa:	05db      	lsls	r3, r3, #23
 8002efc:	0011      	movs	r1, r2
 8002efe:	0018      	movs	r0, r3
 8002f00:	f002 fb0e 	bl	8005520 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002f04:	2200      	movs	r2, #0
 8002f06:	2100      	movs	r1, #0
 8002f08:	2019      	movs	r0, #25
 8002f0a:	f002 f8f9 	bl	8005100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002f0e:	2019      	movs	r0, #25
 8002f10:	f002 f90b 	bl	800512a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002f14:	e063      	b.n	8002fde <HAL_SPI_MspInit+0x162>
  else if(hspi->Instance==SPI2)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a35      	ldr	r2, [pc, #212]	; (8002ff0 <HAL_SPI_MspInit+0x174>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d15e      	bne.n	8002fde <HAL_SPI_MspInit+0x162>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f20:	4b32      	ldr	r3, [pc, #200]	; (8002fec <HAL_SPI_MspInit+0x170>)
 8002f22:	69da      	ldr	r2, [r3, #28]
 8002f24:	4b31      	ldr	r3, [pc, #196]	; (8002fec <HAL_SPI_MspInit+0x170>)
 8002f26:	2180      	movs	r1, #128	; 0x80
 8002f28:	01c9      	lsls	r1, r1, #7
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	61da      	str	r2, [r3, #28]
 8002f2e:	4b2f      	ldr	r3, [pc, #188]	; (8002fec <HAL_SPI_MspInit+0x170>)
 8002f30:	69da      	ldr	r2, [r3, #28]
 8002f32:	2380      	movs	r3, #128	; 0x80
 8002f34:	01db      	lsls	r3, r3, #7
 8002f36:	4013      	ands	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f3c:	4b2b      	ldr	r3, [pc, #172]	; (8002fec <HAL_SPI_MspInit+0x170>)
 8002f3e:	695a      	ldr	r2, [r3, #20]
 8002f40:	4b2a      	ldr	r3, [pc, #168]	; (8002fec <HAL_SPI_MspInit+0x170>)
 8002f42:	2180      	movs	r1, #128	; 0x80
 8002f44:	0309      	lsls	r1, r1, #12
 8002f46:	430a      	orrs	r2, r1
 8002f48:	615a      	str	r2, [r3, #20]
 8002f4a:	4b28      	ldr	r3, [pc, #160]	; (8002fec <HAL_SPI_MspInit+0x170>)
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	2380      	movs	r3, #128	; 0x80
 8002f50:	031b      	lsls	r3, r3, #12
 8002f52:	4013      	ands	r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f58:	4b24      	ldr	r3, [pc, #144]	; (8002fec <HAL_SPI_MspInit+0x170>)
 8002f5a:	695a      	ldr	r2, [r3, #20]
 8002f5c:	4b23      	ldr	r3, [pc, #140]	; (8002fec <HAL_SPI_MspInit+0x170>)
 8002f5e:	2180      	movs	r1, #128	; 0x80
 8002f60:	02c9      	lsls	r1, r1, #11
 8002f62:	430a      	orrs	r2, r1
 8002f64:	615a      	str	r2, [r3, #20]
 8002f66:	4b21      	ldr	r3, [pc, #132]	; (8002fec <HAL_SPI_MspInit+0x170>)
 8002f68:	695a      	ldr	r2, [r3, #20]
 8002f6a:	2380      	movs	r3, #128	; 0x80
 8002f6c:	02db      	lsls	r3, r3, #11
 8002f6e:	4013      	ands	r3, r2
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI2_MOSI_RGBLED_Pin;
 8002f74:	241c      	movs	r4, #28
 8002f76:	193b      	adds	r3, r7, r4
 8002f78:	2208      	movs	r2, #8
 8002f7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7c:	193b      	adds	r3, r7, r4
 8002f7e:	2202      	movs	r2, #2
 8002f80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f82:	193b      	adds	r3, r7, r4
 8002f84:	2200      	movs	r2, #0
 8002f86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f88:	193b      	adds	r3, r7, r4
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8002f8e:	193b      	adds	r3, r7, r4
 8002f90:	2201      	movs	r2, #1
 8002f92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SPI2_MOSI_RGBLED_GPIO_Port, &GPIO_InitStruct);
 8002f94:	193b      	adds	r3, r7, r4
 8002f96:	4a17      	ldr	r2, [pc, #92]	; (8002ff4 <HAL_SPI_MspInit+0x178>)
 8002f98:	0019      	movs	r1, r3
 8002f9a:	0010      	movs	r0, r2
 8002f9c:	f002 fac0 	bl	8005520 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_SCK_RGBLED_Pin;
 8002fa0:	0021      	movs	r1, r4
 8002fa2:	187b      	adds	r3, r7, r1
 8002fa4:	2280      	movs	r2, #128	; 0x80
 8002fa6:	00d2      	lsls	r2, r2, #3
 8002fa8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002faa:	187b      	adds	r3, r7, r1
 8002fac:	2202      	movs	r2, #2
 8002fae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb0:	187b      	adds	r3, r7, r1
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb6:	187b      	adds	r3, r7, r1
 8002fb8:	2200      	movs	r2, #0
 8002fba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002fbc:	187b      	adds	r3, r7, r1
 8002fbe:	2205      	movs	r2, #5
 8002fc0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SPI2_SCK_RGBLED_GPIO_Port, &GPIO_InitStruct);
 8002fc2:	187b      	adds	r3, r7, r1
 8002fc4:	4a0c      	ldr	r2, [pc, #48]	; (8002ff8 <HAL_SPI_MspInit+0x17c>)
 8002fc6:	0019      	movs	r1, r3
 8002fc8:	0010      	movs	r0, r2
 8002fca:	f002 faa9 	bl	8005520 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	201a      	movs	r0, #26
 8002fd4:	f002 f894 	bl	8005100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002fd8:	201a      	movs	r0, #26
 8002fda:	f002 f8a6 	bl	800512a <HAL_NVIC_EnableIRQ>
}
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	b00d      	add	sp, #52	; 0x34
 8002fe4:	bd90      	pop	{r4, r7, pc}
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	40013000 	.word	0x40013000
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	40003800 	.word	0x40003800
 8002ff4:	48000800 	.word	0x48000800
 8002ff8:	48000400 	.word	0x48000400

08002ffc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	2380      	movs	r3, #128	; 0x80
 800300a:	05db      	lsls	r3, r3, #23
 800300c:	429a      	cmp	r2, r3
 800300e:	d10b      	bne.n	8003028 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003010:	4b07      	ldr	r3, [pc, #28]	; (8003030 <HAL_TIM_Base_MspInit+0x34>)
 8003012:	69da      	ldr	r2, [r3, #28]
 8003014:	4b06      	ldr	r3, [pc, #24]	; (8003030 <HAL_TIM_Base_MspInit+0x34>)
 8003016:	2101      	movs	r1, #1
 8003018:	430a      	orrs	r2, r1
 800301a:	61da      	str	r2, [r3, #28]
 800301c:	4b04      	ldr	r3, [pc, #16]	; (8003030 <HAL_TIM_Base_MspInit+0x34>)
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	2201      	movs	r2, #1
 8003022:	4013      	ands	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003028:	46c0      	nop			; (mov r8, r8)
 800302a:	46bd      	mov	sp, r7
 800302c:	b004      	add	sp, #16
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40021000 	.word	0x40021000

08003034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003038:	e7fe      	b.n	8003038 <NMI_Handler+0x4>

0800303a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800303e:	e7fe      	b.n	800303e <HardFault_Handler+0x4>

08003040 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003044:	46c0      	nop			; (mov r8, r8)
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003058:	f000 fba8 	bl	80037ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  systime = HAL_GetTick();
 800305c:	f000 fbb8 	bl	80037d0 <HAL_GetTick>
 8003060:	0002      	movs	r2, r0
 8003062:	4b02      	ldr	r3, [pc, #8]	; (800306c <SysTick_Handler+0x18>)
 8003064:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	20001014 	.word	0x20001014

08003070 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8003074:	4b03      	ldr	r3, [pc, #12]	; (8003084 <DMA1_Channel1_IRQHandler+0x14>)
 8003076:	0018      	movs	r0, r3
 8003078:	f002 f967 	bl	800534a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800307c:	46c0      	nop			; (mov r8, r8)
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	20000e84 	.word	0x20000e84

08003088 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 800308c:	4b03      	ldr	r3, [pc, #12]	; (800309c <ADC1_COMP_IRQHandler+0x14>)
 800308e:	0018      	movs	r0, r3
 8003090:	f000 fd8e 	bl	8003bb0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8003094:	46c0      	nop			; (mov r8, r8)
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	20000e44 	.word	0x20000e44

080030a0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80030a4:	4b03      	ldr	r3, [pc, #12]	; (80030b4 <SPI1_IRQHandler+0x14>)
 80030a6:	0018      	movs	r0, r3
 80030a8:	f003 fad6 	bl	8006658 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80030ac:	46c0      	nop			; (mov r8, r8)
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	20000ef0 	.word	0x20000ef0

080030b8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80030bc:	4b03      	ldr	r3, [pc, #12]	; (80030cc <SPI2_IRQHandler+0x14>)
 80030be:	0018      	movs	r0, r3
 80030c0:	f003 faca 	bl	8006658 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80030c4:	46c0      	nop			; (mov r8, r8)
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	20000f54 	.word	0x20000f54

080030d0 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80030d4:	4b03      	ldr	r3, [pc, #12]	; (80030e4 <CEC_CAN_IRQHandler+0x14>)
 80030d6:	0018      	movs	r0, r3
 80030d8:	f001 fd6a 	bl	8004bb0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 80030dc:	46c0      	nop			; (mov r8, r8)
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	20000ec8 	.word	0x20000ec8

080030e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030f0:	4a14      	ldr	r2, [pc, #80]	; (8003144 <_sbrk+0x5c>)
 80030f2:	4b15      	ldr	r3, [pc, #84]	; (8003148 <_sbrk+0x60>)
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030fc:	4b13      	ldr	r3, [pc, #76]	; (800314c <_sbrk+0x64>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d102      	bne.n	800310a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003104:	4b11      	ldr	r3, [pc, #68]	; (800314c <_sbrk+0x64>)
 8003106:	4a12      	ldr	r2, [pc, #72]	; (8003150 <_sbrk+0x68>)
 8003108:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800310a:	4b10      	ldr	r3, [pc, #64]	; (800314c <_sbrk+0x64>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	18d3      	adds	r3, r2, r3
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	429a      	cmp	r2, r3
 8003116:	d207      	bcs.n	8003128 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003118:	f004 f852 	bl	80071c0 <__errno>
 800311c:	0003      	movs	r3, r0
 800311e:	220c      	movs	r2, #12
 8003120:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003122:	2301      	movs	r3, #1
 8003124:	425b      	negs	r3, r3
 8003126:	e009      	b.n	800313c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003128:	4b08      	ldr	r3, [pc, #32]	; (800314c <_sbrk+0x64>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800312e:	4b07      	ldr	r3, [pc, #28]	; (800314c <_sbrk+0x64>)
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	18d2      	adds	r2, r2, r3
 8003136:	4b05      	ldr	r3, [pc, #20]	; (800314c <_sbrk+0x64>)
 8003138:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800313a:	68fb      	ldr	r3, [r7, #12]
}
 800313c:	0018      	movs	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	b006      	add	sp, #24
 8003142:	bd80      	pop	{r7, pc}
 8003144:	20004000 	.word	0x20004000
 8003148:	00000400 	.word	0x00000400
 800314c:	20001018 	.word	0x20001018
 8003150:	20001570 	.word	0x20001570

08003154 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003158:	46c0      	nop			; (mov r8, r8)
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003160:	480d      	ldr	r0, [pc, #52]	; (8003198 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003162:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003164:	f7ff fff6 	bl	8003154 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003168:	480c      	ldr	r0, [pc, #48]	; (800319c <LoopForever+0x6>)
  ldr r1, =_edata
 800316a:	490d      	ldr	r1, [pc, #52]	; (80031a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800316c:	4a0d      	ldr	r2, [pc, #52]	; (80031a4 <LoopForever+0xe>)
  movs r3, #0
 800316e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003170:	e002      	b.n	8003178 <LoopCopyDataInit>

08003172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003176:	3304      	adds	r3, #4

08003178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800317a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800317c:	d3f9      	bcc.n	8003172 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800317e:	4a0a      	ldr	r2, [pc, #40]	; (80031a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003180:	4c0a      	ldr	r4, [pc, #40]	; (80031ac <LoopForever+0x16>)
  movs r3, #0
 8003182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003184:	e001      	b.n	800318a <LoopFillZerobss>

08003186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003188:	3204      	adds	r2, #4

0800318a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800318a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800318c:	d3fb      	bcc.n	8003186 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800318e:	f004 f81d 	bl	80071cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003192:	f7ff f859 	bl	8002248 <main>

08003196 <LoopForever>:

LoopForever:
    b LoopForever
 8003196:	e7fe      	b.n	8003196 <LoopForever>
  ldr   r0, =_estack
 8003198:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800319c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031a0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80031a4:	080081f0 	.word	0x080081f0
  ldr r2, =_sbss
 80031a8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80031ac:	20001570 	.word	0x20001570

080031b0 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031b0:	e7fe      	b.n	80031b0 <DMA1_Channel2_3_IRQHandler>
	...

080031b4 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 80031b8:	2390      	movs	r3, #144	; 0x90
 80031ba:	05db      	lsls	r3, r3, #23
 80031bc:	2201      	movs	r2, #1
 80031be:	2110      	movs	r1, #16
 80031c0:	0018      	movs	r0, r3
 80031c2:	f002 fb25 	bl	8005810 <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 80031c6:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <ssd1306_Reset+0x3c>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	2110      	movs	r1, #16
 80031cc:	0018      	movs	r0, r3
 80031ce:	f002 fb1f 	bl	8005810 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80031d2:	200a      	movs	r0, #10
 80031d4:	f000 fb06 	bl	80037e4 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 80031d8:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <ssd1306_Reset+0x3c>)
 80031da:	2201      	movs	r2, #1
 80031dc:	2110      	movs	r1, #16
 80031de:	0018      	movs	r0, r3
 80031e0:	f002 fb16 	bl	8005810 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80031e4:	200a      	movs	r0, #10
 80031e6:	f000 fafd 	bl	80037e4 <HAL_Delay>
}
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	48000800 	.word	0x48000800

080031f4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	0002      	movs	r2, r0
 80031fc:	1dfb      	adds	r3, r7, #7
 80031fe:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8003200:	2390      	movs	r3, #144	; 0x90
 8003202:	05db      	lsls	r3, r3, #23
 8003204:	2200      	movs	r2, #0
 8003206:	2110      	movs	r1, #16
 8003208:	0018      	movs	r0, r3
 800320a:	f002 fb01 	bl	8005810 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 800320e:	2390      	movs	r3, #144	; 0x90
 8003210:	05db      	lsls	r3, r3, #23
 8003212:	2200      	movs	r2, #0
 8003214:	2140      	movs	r1, #64	; 0x40
 8003216:	0018      	movs	r0, r3
 8003218:	f002 fafa 	bl	8005810 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 800321c:	2301      	movs	r3, #1
 800321e:	425b      	negs	r3, r3
 8003220:	1df9      	adds	r1, r7, #7
 8003222:	4807      	ldr	r0, [pc, #28]	; (8003240 <ssd1306_WriteCommand+0x4c>)
 8003224:	2201      	movs	r2, #1
 8003226:	f003 f8b7 	bl	8006398 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 800322a:	2390      	movs	r3, #144	; 0x90
 800322c:	05db      	lsls	r3, r3, #23
 800322e:	2201      	movs	r2, #1
 8003230:	2110      	movs	r1, #16
 8003232:	0018      	movs	r0, r3
 8003234:	f002 faec 	bl	8005810 <HAL_GPIO_WritePin>
}
 8003238:	46c0      	nop			; (mov r8, r8)
 800323a:	46bd      	mov	sp, r7
 800323c:	b002      	add	sp, #8
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20000ef0 	.word	0x20000ef0

08003244 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 800324e:	2390      	movs	r3, #144	; 0x90
 8003250:	05db      	lsls	r3, r3, #23
 8003252:	2200      	movs	r2, #0
 8003254:	2110      	movs	r1, #16
 8003256:	0018      	movs	r0, r3
 8003258:	f002 fada 	bl	8005810 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 800325c:	2390      	movs	r3, #144	; 0x90
 800325e:	05db      	lsls	r3, r3, #23
 8003260:	2201      	movs	r2, #1
 8003262:	2140      	movs	r1, #64	; 0x40
 8003264:	0018      	movs	r0, r3
 8003266:	f002 fad3 	bl	8005810 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	b29a      	uxth	r2, r3
 800326e:	2301      	movs	r3, #1
 8003270:	425b      	negs	r3, r3
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	4806      	ldr	r0, [pc, #24]	; (8003290 <ssd1306_WriteData+0x4c>)
 8003276:	f003 f88f 	bl	8006398 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 800327a:	2390      	movs	r3, #144	; 0x90
 800327c:	05db      	lsls	r3, r3, #23
 800327e:	2201      	movs	r2, #1
 8003280:	2110      	movs	r1, #16
 8003282:	0018      	movs	r0, r3
 8003284:	f002 fac4 	bl	8005810 <HAL_GPIO_WritePin>
}
 8003288:	46c0      	nop			; (mov r8, r8)
 800328a:	46bd      	mov	sp, r7
 800328c:	b002      	add	sp, #8
 800328e:	bd80      	pop	{r7, pc}
 8003290:	20000ef0 	.word	0x20000ef0

08003294 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003298:	f7ff ff8c 	bl	80031b4 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800329c:	2064      	movs	r0, #100	; 0x64
 800329e:	f000 faa1 	bl	80037e4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80032a2:	2000      	movs	r0, #0
 80032a4:	f000 fa14 	bl	80036d0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80032a8:	2020      	movs	r0, #32
 80032aa:	f7ff ffa3 	bl	80031f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80032ae:	2000      	movs	r0, #0
 80032b0:	f7ff ffa0 	bl	80031f4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80032b4:	20b0      	movs	r0, #176	; 0xb0
 80032b6:	f7ff ff9d 	bl	80031f4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 80032ba:	20c0      	movs	r0, #192	; 0xc0
 80032bc:	f7ff ff9a 	bl	80031f4 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80032c0:	2000      	movs	r0, #0
 80032c2:	f7ff ff97 	bl	80031f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80032c6:	2010      	movs	r0, #16
 80032c8:	f7ff ff94 	bl	80031f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80032cc:	2040      	movs	r0, #64	; 0x40
 80032ce:	f7ff ff91 	bl	80031f4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80032d2:	20ff      	movs	r0, #255	; 0xff
 80032d4:	f000 f9e4 	bl	80036a0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 80032d8:	20a0      	movs	r0, #160	; 0xa0
 80032da:	f7ff ff8b 	bl	80031f4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80032de:	20a6      	movs	r0, #166	; 0xa6
 80032e0:	f7ff ff88 	bl	80031f4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80032e4:	20a8      	movs	r0, #168	; 0xa8
 80032e6:	f7ff ff85 	bl	80031f4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80032ea:	203f      	movs	r0, #63	; 0x3f
 80032ec:	f7ff ff82 	bl	80031f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80032f0:	20a4      	movs	r0, #164	; 0xa4
 80032f2:	f7ff ff7f 	bl	80031f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80032f6:	20d3      	movs	r0, #211	; 0xd3
 80032f8:	f7ff ff7c 	bl	80031f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80032fc:	2000      	movs	r0, #0
 80032fe:	f7ff ff79 	bl	80031f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003302:	20d5      	movs	r0, #213	; 0xd5
 8003304:	f7ff ff76 	bl	80031f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set divide ratio ajusted for EA OLED 128-6
 8003308:	2040      	movs	r0, #64	; 0x40
 800330a:	f7ff ff73 	bl	80031f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800330e:	20d9      	movs	r0, #217	; 0xd9
 8003310:	f7ff ff70 	bl	80031f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x44); // ajusted for EA OLED 128-6
 8003314:	2044      	movs	r0, #68	; 0x44
 8003316:	f7ff ff6d 	bl	80031f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800331a:	20da      	movs	r0, #218	; 0xda
 800331c:	f7ff ff6a 	bl	80031f4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003320:	2012      	movs	r0, #18
 8003322:	f7ff ff67 	bl	80031f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003326:	20db      	movs	r0, #219	; 0xdb
 8003328:	f7ff ff64 	bl	80031f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800332c:	2020      	movs	r0, #32
 800332e:	f7ff ff61 	bl	80031f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003332:	208d      	movs	r0, #141	; 0x8d
 8003334:	f7ff ff5e 	bl	80031f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003338:	2014      	movs	r0, #20
 800333a:	f7ff ff5b 	bl	80031f4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800333e:	2001      	movs	r0, #1
 8003340:	f000 f9c6 	bl	80036d0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003344:	2000      	movs	r0, #0
 8003346:	f000 f811 	bl	800336c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800334a:	f000 f829 	bl	80033a0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800334e:	4b06      	ldr	r3, [pc, #24]	; (8003368 <ssd1306_Init+0xd4>)
 8003350:	2200      	movs	r2, #0
 8003352:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003354:	4b04      	ldr	r3, [pc, #16]	; (8003368 <ssd1306_Init+0xd4>)
 8003356:	2200      	movs	r2, #0
 8003358:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800335a:	4b03      	ldr	r3, [pc, #12]	; (8003368 <ssd1306_Init+0xd4>)
 800335c:	2201      	movs	r2, #1
 800335e:	711a      	strb	r2, [r3, #4]
}
 8003360:	46c0      	nop			; (mov r8, r8)
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	2000141c 	.word	0x2000141c

0800336c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	0002      	movs	r2, r0
 8003374:	1dfb      	adds	r3, r7, #7
 8003376:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003378:	1dfb      	adds	r3, r7, #7
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <ssd1306_Fill+0x18>
 8003380:	2300      	movs	r3, #0
 8003382:	e000      	b.n	8003386 <ssd1306_Fill+0x1a>
 8003384:	23ff      	movs	r3, #255	; 0xff
 8003386:	2280      	movs	r2, #128	; 0x80
 8003388:	00d2      	lsls	r2, r2, #3
 800338a:	4804      	ldr	r0, [pc, #16]	; (800339c <ssd1306_Fill+0x30>)
 800338c:	0019      	movs	r1, r3
 800338e:	f003 fefb 	bl	8007188 <memset>
}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	46bd      	mov	sp, r7
 8003396:	b002      	add	sp, #8
 8003398:	bd80      	pop	{r7, pc}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	2000101c 	.word	0x2000101c

080033a0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80033a6:	1dfb      	adds	r3, r7, #7
 80033a8:	2200      	movs	r2, #0
 80033aa:	701a      	strb	r2, [r3, #0]
 80033ac:	e01a      	b.n	80033e4 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80033ae:	1dfb      	adds	r3, r7, #7
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	3b50      	subs	r3, #80	; 0x50
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	0018      	movs	r0, r3
 80033b8:	f7ff ff1c 	bl	80031f4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80033bc:	2000      	movs	r0, #0
 80033be:	f7ff ff19 	bl	80031f4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80033c2:	2010      	movs	r0, #16
 80033c4:	f7ff ff16 	bl	80031f4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80033c8:	1dfb      	adds	r3, r7, #7
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	01da      	lsls	r2, r3, #7
 80033ce:	4b0a      	ldr	r3, [pc, #40]	; (80033f8 <ssd1306_UpdateScreen+0x58>)
 80033d0:	18d3      	adds	r3, r2, r3
 80033d2:	2180      	movs	r1, #128	; 0x80
 80033d4:	0018      	movs	r0, r3
 80033d6:	f7ff ff35 	bl	8003244 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80033da:	1dfb      	adds	r3, r7, #7
 80033dc:	781a      	ldrb	r2, [r3, #0]
 80033de:	1dfb      	adds	r3, r7, #7
 80033e0:	3201      	adds	r2, #1
 80033e2:	701a      	strb	r2, [r3, #0]
 80033e4:	1dfb      	adds	r3, r7, #7
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b07      	cmp	r3, #7
 80033ea:	d9e0      	bls.n	80033ae <ssd1306_UpdateScreen+0xe>
    }
}
 80033ec:	46c0      	nop			; (mov r8, r8)
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	46bd      	mov	sp, r7
 80033f2:	b002      	add	sp, #8
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	2000101c 	.word	0x2000101c

080033fc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80033fc:	b590      	push	{r4, r7, lr}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	0004      	movs	r4, r0
 8003404:	0008      	movs	r0, r1
 8003406:	0011      	movs	r1, r2
 8003408:	1dfb      	adds	r3, r7, #7
 800340a:	1c22      	adds	r2, r4, #0
 800340c:	701a      	strb	r2, [r3, #0]
 800340e:	1dbb      	adds	r3, r7, #6
 8003410:	1c02      	adds	r2, r0, #0
 8003412:	701a      	strb	r2, [r3, #0]
 8003414:	1d7b      	adds	r3, r7, #5
 8003416:	1c0a      	adds	r2, r1, #0
 8003418:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800341a:	1dfb      	adds	r3, r7, #7
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	b25b      	sxtb	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	db47      	blt.n	80034b4 <ssd1306_DrawPixel+0xb8>
 8003424:	1dbb      	adds	r3, r7, #6
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b3f      	cmp	r3, #63	; 0x3f
 800342a:	d843      	bhi.n	80034b4 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800342c:	1d7b      	adds	r3, r7, #5
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d11e      	bne.n	8003472 <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003434:	1dfb      	adds	r3, r7, #7
 8003436:	781a      	ldrb	r2, [r3, #0]
 8003438:	1dbb      	adds	r3, r7, #6
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	08db      	lsrs	r3, r3, #3
 800343e:	b2d8      	uxtb	r0, r3
 8003440:	0003      	movs	r3, r0
 8003442:	01db      	lsls	r3, r3, #7
 8003444:	18d3      	adds	r3, r2, r3
 8003446:	4a1d      	ldr	r2, [pc, #116]	; (80034bc <ssd1306_DrawPixel+0xc0>)
 8003448:	5cd3      	ldrb	r3, [r2, r3]
 800344a:	b25a      	sxtb	r2, r3
 800344c:	1dbb      	adds	r3, r7, #6
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2107      	movs	r1, #7
 8003452:	400b      	ands	r3, r1
 8003454:	2101      	movs	r1, #1
 8003456:	4099      	lsls	r1, r3
 8003458:	000b      	movs	r3, r1
 800345a:	b25b      	sxtb	r3, r3
 800345c:	4313      	orrs	r3, r2
 800345e:	b259      	sxtb	r1, r3
 8003460:	1dfb      	adds	r3, r7, #7
 8003462:	781a      	ldrb	r2, [r3, #0]
 8003464:	0003      	movs	r3, r0
 8003466:	01db      	lsls	r3, r3, #7
 8003468:	18d3      	adds	r3, r2, r3
 800346a:	b2c9      	uxtb	r1, r1
 800346c:	4a13      	ldr	r2, [pc, #76]	; (80034bc <ssd1306_DrawPixel+0xc0>)
 800346e:	54d1      	strb	r1, [r2, r3]
 8003470:	e021      	b.n	80034b6 <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003472:	1dfb      	adds	r3, r7, #7
 8003474:	781a      	ldrb	r2, [r3, #0]
 8003476:	1dbb      	adds	r3, r7, #6
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	08db      	lsrs	r3, r3, #3
 800347c:	b2d8      	uxtb	r0, r3
 800347e:	0003      	movs	r3, r0
 8003480:	01db      	lsls	r3, r3, #7
 8003482:	18d3      	adds	r3, r2, r3
 8003484:	4a0d      	ldr	r2, [pc, #52]	; (80034bc <ssd1306_DrawPixel+0xc0>)
 8003486:	5cd3      	ldrb	r3, [r2, r3]
 8003488:	b25b      	sxtb	r3, r3
 800348a:	1dba      	adds	r2, r7, #6
 800348c:	7812      	ldrb	r2, [r2, #0]
 800348e:	2107      	movs	r1, #7
 8003490:	400a      	ands	r2, r1
 8003492:	2101      	movs	r1, #1
 8003494:	4091      	lsls	r1, r2
 8003496:	000a      	movs	r2, r1
 8003498:	b252      	sxtb	r2, r2
 800349a:	43d2      	mvns	r2, r2
 800349c:	b252      	sxtb	r2, r2
 800349e:	4013      	ands	r3, r2
 80034a0:	b259      	sxtb	r1, r3
 80034a2:	1dfb      	adds	r3, r7, #7
 80034a4:	781a      	ldrb	r2, [r3, #0]
 80034a6:	0003      	movs	r3, r0
 80034a8:	01db      	lsls	r3, r3, #7
 80034aa:	18d3      	adds	r3, r2, r3
 80034ac:	b2c9      	uxtb	r1, r1
 80034ae:	4a03      	ldr	r2, [pc, #12]	; (80034bc <ssd1306_DrawPixel+0xc0>)
 80034b0:	54d1      	strb	r1, [r2, r3]
 80034b2:	e000      	b.n	80034b6 <ssd1306_DrawPixel+0xba>
        return;
 80034b4:	46c0      	nop			; (mov r8, r8)
    }
}
 80034b6:	46bd      	mov	sp, r7
 80034b8:	b003      	add	sp, #12
 80034ba:	bd90      	pop	{r4, r7, pc}
 80034bc:	2000101c 	.word	0x2000101c

080034c0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80034c0:	b590      	push	{r4, r7, lr}
 80034c2:	b089      	sub	sp, #36	; 0x24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	0004      	movs	r4, r0
 80034c8:	0038      	movs	r0, r7
 80034ca:	6001      	str	r1, [r0, #0]
 80034cc:	6042      	str	r2, [r0, #4]
 80034ce:	6083      	str	r3, [r0, #8]
 80034d0:	210f      	movs	r1, #15
 80034d2:	187b      	adds	r3, r7, r1
 80034d4:	1c22      	adds	r2, r4, #0
 80034d6:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80034d8:	000a      	movs	r2, r1
 80034da:	18bb      	adds	r3, r7, r2
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b1f      	cmp	r3, #31
 80034e0:	d903      	bls.n	80034ea <ssd1306_WriteChar+0x2a>
 80034e2:	18bb      	adds	r3, r7, r2
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b7e      	cmp	r3, #126	; 0x7e
 80034e8:	d901      	bls.n	80034ee <ssd1306_WriteChar+0x2e>
        return 0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	e08b      	b.n	8003606 <ssd1306_WriteChar+0x146>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 80034ee:	003b      	movs	r3, r7
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d008      	beq.n	8003508 <ssd1306_WriteChar+0x48>
 80034f6:	003b      	movs	r3, r7
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	230f      	movs	r3, #15
 80034fc:	18fb      	adds	r3, r7, r3
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	3b20      	subs	r3, #32
 8003502:	18d3      	adds	r3, r2, r3
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	e001      	b.n	800350c <ssd1306_WriteChar+0x4c>
 8003508:	003b      	movs	r3, r7
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2117      	movs	r1, #23
 800350e:	187a      	adds	r2, r7, r1
 8003510:	7013      	strb	r3, [r2, #0]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8003512:	4b3f      	ldr	r3, [pc, #252]	; (8003610 <ssd1306_WriteChar+0x150>)
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	001a      	movs	r2, r3
 8003518:	187b      	adds	r3, r7, r1
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	18d3      	adds	r3, r2, r3
 800351e:	2b80      	cmp	r3, #128	; 0x80
 8003520:	dc07      	bgt.n	8003532 <ssd1306_WriteChar+0x72>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8003522:	4b3b      	ldr	r3, [pc, #236]	; (8003610 <ssd1306_WriteChar+0x150>)
 8003524:	885b      	ldrh	r3, [r3, #2]
 8003526:	001a      	movs	r2, r3
 8003528:	003b      	movs	r3, r7
 800352a:	785b      	ldrb	r3, [r3, #1]
 800352c:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 800352e:	2b40      	cmp	r3, #64	; 0x40
 8003530:	dd01      	ble.n	8003536 <ssd1306_WriteChar+0x76>
    {
        // Not enough space on current line
        return 0;
 8003532:	2300      	movs	r3, #0
 8003534:	e067      	b.n	8003606 <ssd1306_WriteChar+0x146>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8003536:	2300      	movs	r3, #0
 8003538:	61fb      	str	r3, [r7, #28]
 800353a:	e051      	b.n	80035e0 <ssd1306_WriteChar+0x120>
        b = Font.data[(ch - 32) * Font.height + i];
 800353c:	003b      	movs	r3, r7
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	230f      	movs	r3, #15
 8003542:	18fb      	adds	r3, r7, r3
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	3b20      	subs	r3, #32
 8003548:	0039      	movs	r1, r7
 800354a:	7849      	ldrb	r1, [r1, #1]
 800354c:	434b      	muls	r3, r1
 800354e:	0019      	movs	r1, r3
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	18cb      	adds	r3, r1, r3
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	18d3      	adds	r3, r2, r3
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 800355c:	2300      	movs	r3, #0
 800355e:	61bb      	str	r3, [r7, #24]
 8003560:	e035      	b.n	80035ce <ssd1306_WriteChar+0x10e>
            if((b << j) & 0x8000)  {
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	409a      	lsls	r2, r3
 8003568:	2380      	movs	r3, #128	; 0x80
 800356a:	021b      	lsls	r3, r3, #8
 800356c:	4013      	ands	r3, r2
 800356e:	d014      	beq.n	800359a <ssd1306_WriteChar+0xda>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003570:	4b27      	ldr	r3, [pc, #156]	; (8003610 <ssd1306_WriteChar+0x150>)
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	b2da      	uxtb	r2, r3
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	b2db      	uxtb	r3, r3
 800357a:	18d3      	adds	r3, r2, r3
 800357c:	b2d8      	uxtb	r0, r3
 800357e:	4b24      	ldr	r3, [pc, #144]	; (8003610 <ssd1306_WriteChar+0x150>)
 8003580:	885b      	ldrh	r3, [r3, #2]
 8003582:	b2da      	uxtb	r2, r3
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	b2db      	uxtb	r3, r3
 8003588:	18d3      	adds	r3, r2, r3
 800358a:	b2d9      	uxtb	r1, r3
 800358c:	2330      	movs	r3, #48	; 0x30
 800358e:	18fb      	adds	r3, r7, r3
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	001a      	movs	r2, r3
 8003594:	f7ff ff32 	bl	80033fc <ssd1306_DrawPixel>
 8003598:	e016      	b.n	80035c8 <ssd1306_WriteChar+0x108>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800359a:	4b1d      	ldr	r3, [pc, #116]	; (8003610 <ssd1306_WriteChar+0x150>)
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	18d3      	adds	r3, r2, r3
 80035a6:	b2d8      	uxtb	r0, r3
 80035a8:	4b19      	ldr	r3, [pc, #100]	; (8003610 <ssd1306_WriteChar+0x150>)
 80035aa:	885b      	ldrh	r3, [r3, #2]
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	18d3      	adds	r3, r2, r3
 80035b4:	b2d9      	uxtb	r1, r3
 80035b6:	2330      	movs	r3, #48	; 0x30
 80035b8:	18fb      	adds	r3, r7, r3
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	425a      	negs	r2, r3
 80035be:	4153      	adcs	r3, r2
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	001a      	movs	r2, r3
 80035c4:	f7ff ff1a 	bl	80033fc <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	3301      	adds	r3, #1
 80035cc:	61bb      	str	r3, [r7, #24]
 80035ce:	2317      	movs	r3, #23
 80035d0:	18fb      	adds	r3, r7, r3
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d3c3      	bcc.n	8003562 <ssd1306_WriteChar+0xa2>
    for(i = 0; i < Font.height; i++) {
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	3301      	adds	r3, #1
 80035de:	61fb      	str	r3, [r7, #28]
 80035e0:	003b      	movs	r3, r7
 80035e2:	785b      	ldrb	r3, [r3, #1]
 80035e4:	001a      	movs	r2, r3
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d3a7      	bcc.n	800353c <ssd1306_WriteChar+0x7c>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 80035ec:	4b08      	ldr	r3, [pc, #32]	; (8003610 <ssd1306_WriteChar+0x150>)
 80035ee:	881a      	ldrh	r2, [r3, #0]
 80035f0:	2317      	movs	r3, #23
 80035f2:	18fb      	adds	r3, r7, r3
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	18d3      	adds	r3, r2, r3
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	4b04      	ldr	r3, [pc, #16]	; (8003610 <ssd1306_WriteChar+0x150>)
 80035fe:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003600:	230f      	movs	r3, #15
 8003602:	18fb      	adds	r3, r7, r3
 8003604:	781b      	ldrb	r3, [r3, #0]
}
 8003606:	0018      	movs	r0, r3
 8003608:	46bd      	mov	sp, r7
 800360a:	b009      	add	sp, #36	; 0x24
 800360c:	bd90      	pop	{r4, r7, pc}
 800360e:	46c0      	nop			; (mov r8, r8)
 8003610:	2000141c 	.word	0x2000141c

08003614 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af02      	add	r7, sp, #8
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	0038      	movs	r0, r7
 800361e:	6001      	str	r1, [r0, #0]
 8003620:	6042      	str	r2, [r0, #4]
 8003622:	6083      	str	r3, [r0, #8]
    while (*str) {
 8003624:	e017      	b.n	8003656 <ssd1306_WriteString+0x42>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	7818      	ldrb	r0, [r3, #0]
 800362a:	003b      	movs	r3, r7
 800362c:	2218      	movs	r2, #24
 800362e:	18ba      	adds	r2, r7, r2
 8003630:	7812      	ldrb	r2, [r2, #0]
 8003632:	9200      	str	r2, [sp, #0]
 8003634:	6819      	ldr	r1, [r3, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f7ff ff41 	bl	80034c0 <ssd1306_WriteChar>
 800363e:	0003      	movs	r3, r0
 8003640:	001a      	movs	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d002      	beq.n	8003650 <ssd1306_WriteString+0x3c>
            // Char could not be written
            return *str;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	e008      	b.n	8003662 <ssd1306_WriteString+0x4e>
        }
        str++;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	3301      	adds	r3, #1
 8003654:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1e3      	bne.n	8003626 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	781b      	ldrb	r3, [r3, #0]
}
 8003662:	0018      	movs	r0, r3
 8003664:	46bd      	mov	sp, r7
 8003666:	b004      	add	sp, #16
 8003668:	bd80      	pop	{r7, pc}
	...

0800366c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	0002      	movs	r2, r0
 8003674:	1dfb      	adds	r3, r7, #7
 8003676:	701a      	strb	r2, [r3, #0]
 8003678:	1dbb      	adds	r3, r7, #6
 800367a:	1c0a      	adds	r2, r1, #0
 800367c:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 800367e:	1dfb      	adds	r3, r7, #7
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	b29a      	uxth	r2, r3
 8003684:	4b05      	ldr	r3, [pc, #20]	; (800369c <ssd1306_SetCursor+0x30>)
 8003686:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003688:	1dbb      	adds	r3, r7, #6
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	b29a      	uxth	r2, r3
 800368e:	4b03      	ldr	r3, [pc, #12]	; (800369c <ssd1306_SetCursor+0x30>)
 8003690:	805a      	strh	r2, [r3, #2]
}
 8003692:	46c0      	nop			; (mov r8, r8)
 8003694:	46bd      	mov	sp, r7
 8003696:	b002      	add	sp, #8
 8003698:	bd80      	pop	{r7, pc}
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	2000141c 	.word	0x2000141c

080036a0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	0002      	movs	r2, r0
 80036a8:	1dfb      	adds	r3, r7, #7
 80036aa:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 80036ac:	210f      	movs	r1, #15
 80036ae:	187b      	adds	r3, r7, r1
 80036b0:	2281      	movs	r2, #129	; 0x81
 80036b2:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80036b4:	187b      	adds	r3, r7, r1
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	0018      	movs	r0, r3
 80036ba:	f7ff fd9b 	bl	80031f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80036be:	1dfb      	adds	r3, r7, #7
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	0018      	movs	r0, r3
 80036c4:	f7ff fd96 	bl	80031f4 <ssd1306_WriteCommand>
}
 80036c8:	46c0      	nop			; (mov r8, r8)
 80036ca:	46bd      	mov	sp, r7
 80036cc:	b004      	add	sp, #16
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	0002      	movs	r2, r0
 80036d8:	1dfb      	adds	r3, r7, #7
 80036da:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 80036dc:	1dfb      	adds	r3, r7, #7
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d007      	beq.n	80036f4 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 80036e4:	230f      	movs	r3, #15
 80036e6:	18fb      	adds	r3, r7, r3
 80036e8:	22af      	movs	r2, #175	; 0xaf
 80036ea:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 80036ec:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <ssd1306_SetDisplayOn+0x48>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	715a      	strb	r2, [r3, #5]
 80036f2:	e006      	b.n	8003702 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 80036f4:	230f      	movs	r3, #15
 80036f6:	18fb      	adds	r3, r7, r3
 80036f8:	22ae      	movs	r2, #174	; 0xae
 80036fa:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 80036fc:	4b06      	ldr	r3, [pc, #24]	; (8003718 <ssd1306_SetDisplayOn+0x48>)
 80036fe:	2200      	movs	r2, #0
 8003700:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003702:	230f      	movs	r3, #15
 8003704:	18fb      	adds	r3, r7, r3
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	0018      	movs	r0, r3
 800370a:	f7ff fd73 	bl	80031f4 <ssd1306_WriteCommand>
}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	46bd      	mov	sp, r7
 8003712:	b004      	add	sp, #16
 8003714:	bd80      	pop	{r7, pc}
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	2000141c 	.word	0x2000141c

0800371c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003720:	4b07      	ldr	r3, [pc, #28]	; (8003740 <HAL_Init+0x24>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	4b06      	ldr	r3, [pc, #24]	; (8003740 <HAL_Init+0x24>)
 8003726:	2110      	movs	r1, #16
 8003728:	430a      	orrs	r2, r1
 800372a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800372c:	2003      	movs	r0, #3
 800372e:	f000 f809 	bl	8003744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003732:	f7ff faaf 	bl	8002c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	0018      	movs	r0, r3
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	40022000 	.word	0x40022000

08003744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003744:	b590      	push	{r4, r7, lr}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800374c:	4b14      	ldr	r3, [pc, #80]	; (80037a0 <HAL_InitTick+0x5c>)
 800374e:	681c      	ldr	r4, [r3, #0]
 8003750:	4b14      	ldr	r3, [pc, #80]	; (80037a4 <HAL_InitTick+0x60>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	0019      	movs	r1, r3
 8003756:	23fa      	movs	r3, #250	; 0xfa
 8003758:	0098      	lsls	r0, r3, #2
 800375a:	f7fc fce7 	bl	800012c <__udivsi3>
 800375e:	0003      	movs	r3, r0
 8003760:	0019      	movs	r1, r3
 8003762:	0020      	movs	r0, r4
 8003764:	f7fc fce2 	bl	800012c <__udivsi3>
 8003768:	0003      	movs	r3, r0
 800376a:	0018      	movs	r0, r3
 800376c:	f001 fced 	bl	800514a <HAL_SYSTICK_Config>
 8003770:	1e03      	subs	r3, r0, #0
 8003772:	d001      	beq.n	8003778 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e00f      	b.n	8003798 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b03      	cmp	r3, #3
 800377c:	d80b      	bhi.n	8003796 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	2301      	movs	r3, #1
 8003782:	425b      	negs	r3, r3
 8003784:	2200      	movs	r2, #0
 8003786:	0018      	movs	r0, r3
 8003788:	f001 fcba 	bl	8005100 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800378c:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <HAL_InitTick+0x64>)
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003792:	2300      	movs	r3, #0
 8003794:	e000      	b.n	8003798 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
}
 8003798:	0018      	movs	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	b003      	add	sp, #12
 800379e:	bd90      	pop	{r4, r7, pc}
 80037a0:	20000004 	.word	0x20000004
 80037a4:	2000000c 	.word	0x2000000c
 80037a8:	20000008 	.word	0x20000008

080037ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037b0:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <HAL_IncTick+0x1c>)
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	001a      	movs	r2, r3
 80037b6:	4b05      	ldr	r3, [pc, #20]	; (80037cc <HAL_IncTick+0x20>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	18d2      	adds	r2, r2, r3
 80037bc:	4b03      	ldr	r3, [pc, #12]	; (80037cc <HAL_IncTick+0x20>)
 80037be:	601a      	str	r2, [r3, #0]
}
 80037c0:	46c0      	nop			; (mov r8, r8)
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	2000000c 	.word	0x2000000c
 80037cc:	20001424 	.word	0x20001424

080037d0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  return uwTick;
 80037d4:	4b02      	ldr	r3, [pc, #8]	; (80037e0 <HAL_GetTick+0x10>)
 80037d6:	681b      	ldr	r3, [r3, #0]
}
 80037d8:	0018      	movs	r0, r3
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	46c0      	nop			; (mov r8, r8)
 80037e0:	20001424 	.word	0x20001424

080037e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037ec:	f7ff fff0 	bl	80037d0 <HAL_GetTick>
 80037f0:	0003      	movs	r3, r0
 80037f2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	3301      	adds	r3, #1
 80037fc:	d005      	beq.n	800380a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037fe:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <HAL_Delay+0x44>)
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	001a      	movs	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	189b      	adds	r3, r3, r2
 8003808:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	f7ff ffe0 	bl	80037d0 <HAL_GetTick>
 8003810:	0002      	movs	r2, r0
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	429a      	cmp	r2, r3
 800381a:	d8f7      	bhi.n	800380c <HAL_Delay+0x28>
  {
  }
}
 800381c:	46c0      	nop			; (mov r8, r8)
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	46bd      	mov	sp, r7
 8003822:	b004      	add	sp, #16
 8003824:	bd80      	pop	{r7, pc}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	2000000c 	.word	0x2000000c

0800382c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003834:	230f      	movs	r3, #15
 8003836:	18fb      	adds	r3, r7, r3
 8003838:	2200      	movs	r2, #0
 800383a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800383c:	2300      	movs	r3, #0
 800383e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e125      	b.n	8003a96 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10a      	bne.n	8003868 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2234      	movs	r2, #52	; 0x34
 800385c:	2100      	movs	r1, #0
 800385e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	0018      	movs	r0, r3
 8003864:	f7ff fa3a 	bl	8002cdc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386c:	2210      	movs	r2, #16
 800386e:	4013      	ands	r3, r2
 8003870:	d000      	beq.n	8003874 <HAL_ADC_Init+0x48>
 8003872:	e103      	b.n	8003a7c <HAL_ADC_Init+0x250>
 8003874:	230f      	movs	r3, #15
 8003876:	18fb      	adds	r3, r7, r3
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d000      	beq.n	8003880 <HAL_ADC_Init+0x54>
 800387e:	e0fd      	b.n	8003a7c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	2204      	movs	r2, #4
 8003888:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800388a:	d000      	beq.n	800388e <HAL_ADC_Init+0x62>
 800388c:	e0f6      	b.n	8003a7c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003892:	4a83      	ldr	r2, [pc, #524]	; (8003aa0 <HAL_ADC_Init+0x274>)
 8003894:	4013      	ands	r3, r2
 8003896:	2202      	movs	r2, #2
 8003898:	431a      	orrs	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2203      	movs	r2, #3
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d112      	bne.n	80038d2 <HAL_ADC_Init+0xa6>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2201      	movs	r2, #1
 80038b4:	4013      	ands	r3, r2
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d009      	beq.n	80038ce <HAL_ADC_Init+0xa2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	2380      	movs	r3, #128	; 0x80
 80038c2:	021b      	lsls	r3, r3, #8
 80038c4:	401a      	ands	r2, r3
 80038c6:	2380      	movs	r3, #128	; 0x80
 80038c8:	021b      	lsls	r3, r3, #8
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d101      	bne.n	80038d2 <HAL_ADC_Init+0xa6>
 80038ce:	2301      	movs	r3, #1
 80038d0:	e000      	b.n	80038d4 <HAL_ADC_Init+0xa8>
 80038d2:	2300      	movs	r3, #0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d116      	bne.n	8003906 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	2218      	movs	r2, #24
 80038e0:	4393      	bics	r3, r2
 80038e2:	0019      	movs	r1, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	0899      	lsrs	r1, r3, #2
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4964      	ldr	r1, [pc, #400]	; (8003aa4 <HAL_ADC_Init+0x278>)
 8003912:	400a      	ands	r2, r1
 8003914:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	7e1b      	ldrb	r3, [r3, #24]
 800391a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	7e5b      	ldrb	r3, [r3, #25]
 8003920:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003922:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	7e9b      	ldrb	r3, [r3, #26]
 8003928:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800392a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003930:	2b01      	cmp	r3, #1
 8003932:	d002      	beq.n	800393a <HAL_ADC_Init+0x10e>
 8003934:	2380      	movs	r3, #128	; 0x80
 8003936:	015b      	lsls	r3, r3, #5
 8003938:	e000      	b.n	800393c <HAL_ADC_Init+0x110>
 800393a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800393c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003942:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	2b02      	cmp	r3, #2
 800394a:	d101      	bne.n	8003950 <HAL_ADC_Init+0x124>
 800394c:	2304      	movs	r3, #4
 800394e:	e000      	b.n	8003952 <HAL_ADC_Init+0x126>
 8003950:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8003952:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2124      	movs	r1, #36	; 0x24
 8003958:	5c5b      	ldrb	r3, [r3, r1]
 800395a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800395c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	4313      	orrs	r3, r2
 8003962:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	7edb      	ldrb	r3, [r3, #27]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d115      	bne.n	8003998 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	7e9b      	ldrb	r3, [r3, #26]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d105      	bne.n	8003980 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2280      	movs	r2, #128	; 0x80
 8003978:	0252      	lsls	r2, r2, #9
 800397a:	4313      	orrs	r3, r2
 800397c:	60bb      	str	r3, [r7, #8]
 800397e:	e00b      	b.n	8003998 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003984:	2220      	movs	r2, #32
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003990:	2201      	movs	r2, #1
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	69da      	ldr	r2, [r3, #28]
 800399c:	23c2      	movs	r3, #194	; 0xc2
 800399e:	33ff      	adds	r3, #255	; 0xff
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d007      	beq.n	80039b4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80039ac:	4313      	orrs	r3, r2
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68d9      	ldr	r1, [r3, #12]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c8:	2380      	movs	r3, #128	; 0x80
 80039ca:	055b      	lsls	r3, r3, #21
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d01b      	beq.n	8003a08 <HAL_ADC_Init+0x1dc>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d017      	beq.n	8003a08 <HAL_ADC_Init+0x1dc>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d013      	beq.n	8003a08 <HAL_ADC_Init+0x1dc>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	2b03      	cmp	r3, #3
 80039e6:	d00f      	beq.n	8003a08 <HAL_ADC_Init+0x1dc>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ec:	2b04      	cmp	r3, #4
 80039ee:	d00b      	beq.n	8003a08 <HAL_ADC_Init+0x1dc>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	2b05      	cmp	r3, #5
 80039f6:	d007      	beq.n	8003a08 <HAL_ADC_Init+0x1dc>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	2b06      	cmp	r3, #6
 80039fe:	d003      	beq.n	8003a08 <HAL_ADC_Init+0x1dc>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	2b07      	cmp	r3, #7
 8003a06:	d112      	bne.n	8003a2e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	695a      	ldr	r2, [r3, #20]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2107      	movs	r1, #7
 8003a14:	438a      	bics	r2, r1
 8003a16:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6959      	ldr	r1, [r3, #20]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a22:	2207      	movs	r2, #7
 8003a24:	401a      	ands	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	4a1c      	ldr	r2, [pc, #112]	; (8003aa8 <HAL_ADC_Init+0x27c>)
 8003a36:	4013      	ands	r3, r2
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d10b      	bne.n	8003a56 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a48:	2203      	movs	r2, #3
 8003a4a:	4393      	bics	r3, r2
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003a54:	e01c      	b.n	8003a90 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5a:	2212      	movs	r2, #18
 8003a5c:	4393      	bics	r3, r2
 8003a5e:	2210      	movs	r2, #16
 8003a60:	431a      	orrs	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003a72:	230f      	movs	r3, #15
 8003a74:	18fb      	adds	r3, r7, r3
 8003a76:	2201      	movs	r2, #1
 8003a78:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003a7a:	e009      	b.n	8003a90 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a80:	2210      	movs	r2, #16
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003a88:	230f      	movs	r3, #15
 8003a8a:	18fb      	adds	r3, r7, r3
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003a90:	230f      	movs	r3, #15
 8003a92:	18fb      	adds	r3, r7, r3
 8003a94:	781b      	ldrb	r3, [r3, #0]
}
 8003a96:	0018      	movs	r0, r3
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	b004      	add	sp, #16
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	46c0      	nop			; (mov r8, r8)
 8003aa0:	fffffefd 	.word	0xfffffefd
 8003aa4:	fffe0219 	.word	0xfffe0219
 8003aa8:	833fffe7 	.word	0x833fffe7

08003aac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003aac:	b590      	push	{r4, r7, lr}
 8003aae:	b087      	sub	sp, #28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ab8:	2317      	movs	r3, #23
 8003aba:	18fb      	adds	r3, r7, r3
 8003abc:	2200      	movs	r2, #0
 8003abe:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	2204      	movs	r2, #4
 8003ac8:	4013      	ands	r3, r2
 8003aca:	d15e      	bne.n	8003b8a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2234      	movs	r2, #52	; 0x34
 8003ad0:	5c9b      	ldrb	r3, [r3, r2]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d101      	bne.n	8003ada <HAL_ADC_Start_DMA+0x2e>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e05e      	b.n	8003b98 <HAL_ADC_Start_DMA+0xec>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2234      	movs	r2, #52	; 0x34
 8003ade:	2101      	movs	r1, #1
 8003ae0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	7e5b      	ldrb	r3, [r3, #25]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d007      	beq.n	8003afa <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003aea:	2317      	movs	r3, #23
 8003aec:	18fc      	adds	r4, r7, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	0018      	movs	r0, r3
 8003af2:	f000 fa29 	bl	8003f48 <ADC_Enable>
 8003af6:	0003      	movs	r3, r0
 8003af8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003afa:	2317      	movs	r3, #23
 8003afc:	18fb      	adds	r3, r7, r3
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d146      	bne.n	8003b92 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b08:	4a25      	ldr	r2, [pc, #148]	; (8003ba0 <HAL_ADC_Start_DMA+0xf4>)
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2280      	movs	r2, #128	; 0x80
 8003b0e:	0052      	lsls	r2, r2, #1
 8003b10:	431a      	orrs	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2234      	movs	r2, #52	; 0x34
 8003b20:	2100      	movs	r1, #0
 8003b22:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b28:	4a1e      	ldr	r2, [pc, #120]	; (8003ba4 <HAL_ADC_Start_DMA+0xf8>)
 8003b2a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b30:	4a1d      	ldr	r2, [pc, #116]	; (8003ba8 <HAL_ADC_Start_DMA+0xfc>)
 8003b32:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b38:	4a1c      	ldr	r2, [pc, #112]	; (8003bac <HAL_ADC_Start_DMA+0x100>)
 8003b3a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	221c      	movs	r2, #28
 8003b42:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2110      	movs	r1, #16
 8003b50:	430a      	orrs	r2, r1
 8003b52:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2101      	movs	r1, #1
 8003b60:	430a      	orrs	r2, r1
 8003b62:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	3340      	adds	r3, #64	; 0x40
 8003b6e:	0019      	movs	r1, r3
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f001 fb3e 	bl	80051f4 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2104      	movs	r1, #4
 8003b84:	430a      	orrs	r2, r1
 8003b86:	609a      	str	r2, [r3, #8]
 8003b88:	e003      	b.n	8003b92 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003b8a:	2317      	movs	r3, #23
 8003b8c:	18fb      	adds	r3, r7, r3
 8003b8e:	2202      	movs	r2, #2
 8003b90:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003b92:	2317      	movs	r3, #23
 8003b94:	18fb      	adds	r3, r7, r3
 8003b96:	781b      	ldrb	r3, [r3, #0]
}
 8003b98:	0018      	movs	r0, r3
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	b007      	add	sp, #28
 8003b9e:	bd90      	pop	{r4, r7, pc}
 8003ba0:	fffff0fe 	.word	0xfffff0fe
 8003ba4:	08004051 	.word	0x08004051
 8003ba8:	08004105 	.word	0x08004105
 8003bac:	08004123 	.word	0x08004123

08003bb0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2204      	movs	r2, #4
 8003bcc:	4013      	ands	r3, r2
 8003bce:	d003      	beq.n	8003bd8 <HAL_ADC_IRQHandler+0x28>
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2204      	movs	r2, #4
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	d107      	bne.n	8003be8 <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2208      	movs	r2, #8
 8003bdc:	4013      	ands	r3, r2
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003bde:	d049      	beq.n	8003c74 <HAL_ADC_IRQHandler+0xc4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2208      	movs	r2, #8
 8003be4:	4013      	ands	r3, r2
 8003be6:	d045      	beq.n	8003c74 <HAL_ADC_IRQHandler+0xc4>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bec:	2210      	movs	r2, #16
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d106      	bne.n	8003c00 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf6:	2280      	movs	r2, #128	; 0x80
 8003bf8:	0092      	lsls	r2, r2, #2
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	23c0      	movs	r3, #192	; 0xc0
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d12a      	bne.n	8003c64 <HAL_ADC_IRQHandler+0xb4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d126      	bne.n	8003c64 <HAL_ADC_IRQHandler+0xb4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2208      	movs	r2, #8
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d022      	beq.n	8003c64 <HAL_ADC_IRQHandler+0xb4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	2204      	movs	r2, #4
 8003c26:	4013      	ands	r3, r2
 8003c28:	d110      	bne.n	8003c4c <HAL_ADC_IRQHandler+0x9c>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	210c      	movs	r1, #12
 8003c36:	438a      	bics	r2, r1
 8003c38:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3e:	4a2d      	ldr	r2, [pc, #180]	; (8003cf4 <HAL_ADC_IRQHandler+0x144>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	2201      	movs	r2, #1
 8003c44:	431a      	orrs	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	639a      	str	r2, [r3, #56]	; 0x38
 8003c4a:	e00b      	b.n	8003c64 <HAL_ADC_IRQHandler+0xb4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c50:	2220      	movs	r2, #32
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	0018      	movs	r0, r3
 8003c68:	f7fc fda0 	bl	80007ac <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	220c      	movs	r2, #12
 8003c72:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2280      	movs	r2, #128	; 0x80
 8003c78:	4013      	ands	r3, r2
 8003c7a:	d012      	beq.n	8003ca2 <HAL_ADC_IRQHandler+0xf2>
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	2280      	movs	r2, #128	; 0x80
 8003c80:	4013      	ands	r3, r2
 8003c82:	d00e      	beq.n	8003ca2 <HAL_ADC_IRQHandler+0xf2>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c88:	2280      	movs	r2, #128	; 0x80
 8003c8a:	0252      	lsls	r2, r2, #9
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	0018      	movs	r0, r3
 8003c96:	f000 f837 	bl	8003d08 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2280      	movs	r2, #128	; 0x80
 8003ca0:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2210      	movs	r2, #16
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	d020      	beq.n	8003cec <HAL_ADC_IRQHandler+0x13c>
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2210      	movs	r2, #16
 8003cae:	4013      	ands	r3, r2
 8003cb0:	d01c      	beq.n	8003cec <HAL_ADC_IRQHandler+0x13c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d006      	beq.n	8003cc8 <HAL_ADC_IRQHandler+0x118>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d10d      	bne.n	8003ce4 <HAL_ADC_IRQHandler+0x134>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ccc:	2202      	movs	r2, #2
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2210      	movs	r2, #16
 8003cda:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	0018      	movs	r0, r3
 8003ce0:	f7fc fd76 	bl	80007d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2210      	movs	r2, #16
 8003cea:	601a      	str	r2, [r3, #0]
  }

}
 8003cec:	46c0      	nop			; (mov r8, r8)
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	b004      	add	sp, #16
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	fffffefe 	.word	0xfffffefe

08003cf8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003d00:	46c0      	nop			; (mov r8, r8)
 8003d02:	46bd      	mov	sp, r7
 8003d04:	b002      	add	sp, #8
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8003d10:	46c0      	nop			; (mov r8, r8)
 8003d12:	46bd      	mov	sp, r7
 8003d14:	b002      	add	sp, #8
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d22:	230f      	movs	r3, #15
 8003d24:	18fb      	adds	r3, r7, r3
 8003d26:	2200      	movs	r2, #0
 8003d28:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d32:	2380      	movs	r3, #128	; 0x80
 8003d34:	055b      	lsls	r3, r3, #21
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d011      	beq.n	8003d5e <HAL_ADC_ConfigChannel+0x46>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d00d      	beq.n	8003d5e <HAL_ADC_ConfigChannel+0x46>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d009      	beq.n	8003d5e <HAL_ADC_ConfigChannel+0x46>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4e:	2b03      	cmp	r3, #3
 8003d50:	d005      	beq.n	8003d5e <HAL_ADC_ConfigChannel+0x46>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d001      	beq.n	8003d5e <HAL_ADC_ConfigChannel+0x46>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2234      	movs	r2, #52	; 0x34
 8003d62:	5c9b      	ldrb	r3, [r3, r2]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_ADC_ConfigChannel+0x54>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e0d0      	b.n	8003f0e <HAL_ADC_ConfigChannel+0x1f6>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2234      	movs	r2, #52	; 0x34
 8003d70:	2101      	movs	r1, #1
 8003d72:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2204      	movs	r2, #4
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	d000      	beq.n	8003d82 <HAL_ADC_ConfigChannel+0x6a>
 8003d80:	e0b4      	b.n	8003eec <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	4a64      	ldr	r2, [pc, #400]	; (8003f18 <HAL_ADC_ConfigChannel+0x200>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d100      	bne.n	8003d8e <HAL_ADC_ConfigChannel+0x76>
 8003d8c:	e082      	b.n	8003e94 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	409a      	lsls	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da8:	2380      	movs	r3, #128	; 0x80
 8003daa:	055b      	lsls	r3, r3, #21
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d037      	beq.n	8003e20 <HAL_ADC_ConfigChannel+0x108>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d033      	beq.n	8003e20 <HAL_ADC_ConfigChannel+0x108>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d02f      	beq.n	8003e20 <HAL_ADC_ConfigChannel+0x108>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	2b03      	cmp	r3, #3
 8003dc6:	d02b      	beq.n	8003e20 <HAL_ADC_ConfigChannel+0x108>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	2b04      	cmp	r3, #4
 8003dce:	d027      	beq.n	8003e20 <HAL_ADC_ConfigChannel+0x108>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd4:	2b05      	cmp	r3, #5
 8003dd6:	d023      	beq.n	8003e20 <HAL_ADC_ConfigChannel+0x108>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	2b06      	cmp	r3, #6
 8003dde:	d01f      	beq.n	8003e20 <HAL_ADC_ConfigChannel+0x108>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	2b07      	cmp	r3, #7
 8003de6:	d01b      	beq.n	8003e20 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	2107      	movs	r1, #7
 8003df4:	400b      	ands	r3, r1
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d012      	beq.n	8003e20 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695a      	ldr	r2, [r3, #20]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2107      	movs	r1, #7
 8003e06:	438a      	bics	r2, r1
 8003e08:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6959      	ldr	r1, [r3, #20]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	2207      	movs	r2, #7
 8003e16:	401a      	ands	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b10      	cmp	r3, #16
 8003e26:	d007      	beq.n	8003e38 <HAL_ADC_ConfigChannel+0x120>
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b11      	cmp	r3, #17
 8003e2e:	d003      	beq.n	8003e38 <HAL_ADC_ConfigChannel+0x120>
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b12      	cmp	r3, #18
 8003e36:	d163      	bne.n	8003f00 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003e38:	4b38      	ldr	r3, [pc, #224]	; (8003f1c <HAL_ADC_ConfigChannel+0x204>)
 8003e3a:	6819      	ldr	r1, [r3, #0]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2b10      	cmp	r3, #16
 8003e42:	d009      	beq.n	8003e58 <HAL_ADC_ConfigChannel+0x140>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b11      	cmp	r3, #17
 8003e4a:	d102      	bne.n	8003e52 <HAL_ADC_ConfigChannel+0x13a>
 8003e4c:	2380      	movs	r3, #128	; 0x80
 8003e4e:	03db      	lsls	r3, r3, #15
 8003e50:	e004      	b.n	8003e5c <HAL_ADC_ConfigChannel+0x144>
 8003e52:	2380      	movs	r3, #128	; 0x80
 8003e54:	045b      	lsls	r3, r3, #17
 8003e56:	e001      	b.n	8003e5c <HAL_ADC_ConfigChannel+0x144>
 8003e58:	2380      	movs	r3, #128	; 0x80
 8003e5a:	041b      	lsls	r3, r3, #16
 8003e5c:	4a2f      	ldr	r2, [pc, #188]	; (8003f1c <HAL_ADC_ConfigChannel+0x204>)
 8003e5e:	430b      	orrs	r3, r1
 8003e60:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2b10      	cmp	r3, #16
 8003e68:	d14a      	bne.n	8003f00 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e6a:	4b2d      	ldr	r3, [pc, #180]	; (8003f20 <HAL_ADC_ConfigChannel+0x208>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	492d      	ldr	r1, [pc, #180]	; (8003f24 <HAL_ADC_ConfigChannel+0x20c>)
 8003e70:	0018      	movs	r0, r3
 8003e72:	f7fc f95b 	bl	800012c <__udivsi3>
 8003e76:	0003      	movs	r3, r0
 8003e78:	001a      	movs	r2, r3
 8003e7a:	0013      	movs	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	189b      	adds	r3, r3, r2
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003e84:	e002      	b.n	8003e8c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f9      	bne.n	8003e86 <HAL_ADC_ConfigChannel+0x16e>
 8003e92:	e035      	b.n	8003f00 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	4099      	lsls	r1, r3
 8003ea2:	000b      	movs	r3, r1
 8003ea4:	43d9      	mvns	r1, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	400a      	ands	r2, r1
 8003eac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b10      	cmp	r3, #16
 8003eb4:	d007      	beq.n	8003ec6 <HAL_ADC_ConfigChannel+0x1ae>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b11      	cmp	r3, #17
 8003ebc:	d003      	beq.n	8003ec6 <HAL_ADC_ConfigChannel+0x1ae>
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b12      	cmp	r3, #18
 8003ec4:	d11c      	bne.n	8003f00 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003ec6:	4b15      	ldr	r3, [pc, #84]	; (8003f1c <HAL_ADC_ConfigChannel+0x204>)
 8003ec8:	6819      	ldr	r1, [r3, #0]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2b10      	cmp	r3, #16
 8003ed0:	d007      	beq.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ca>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b11      	cmp	r3, #17
 8003ed8:	d101      	bne.n	8003ede <HAL_ADC_ConfigChannel+0x1c6>
 8003eda:	4b13      	ldr	r3, [pc, #76]	; (8003f28 <HAL_ADC_ConfigChannel+0x210>)
 8003edc:	e002      	b.n	8003ee4 <HAL_ADC_ConfigChannel+0x1cc>
 8003ede:	4b13      	ldr	r3, [pc, #76]	; (8003f2c <HAL_ADC_ConfigChannel+0x214>)
 8003ee0:	e000      	b.n	8003ee4 <HAL_ADC_ConfigChannel+0x1cc>
 8003ee2:	4b13      	ldr	r3, [pc, #76]	; (8003f30 <HAL_ADC_ConfigChannel+0x218>)
 8003ee4:	4a0d      	ldr	r2, [pc, #52]	; (8003f1c <HAL_ADC_ConfigChannel+0x204>)
 8003ee6:	400b      	ands	r3, r1
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	e009      	b.n	8003f00 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003ef8:	230f      	movs	r3, #15
 8003efa:	18fb      	adds	r3, r7, r3
 8003efc:	2201      	movs	r2, #1
 8003efe:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2234      	movs	r2, #52	; 0x34
 8003f04:	2100      	movs	r1, #0
 8003f06:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003f08:	230f      	movs	r3, #15
 8003f0a:	18fb      	adds	r3, r7, r3
 8003f0c:	781b      	ldrb	r3, [r3, #0]
}
 8003f0e:	0018      	movs	r0, r3
 8003f10:	46bd      	mov	sp, r7
 8003f12:	b004      	add	sp, #16
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	00001001 	.word	0x00001001
 8003f1c:	40012708 	.word	0x40012708
 8003f20:	20000004 	.word	0x20000004
 8003f24:	000f4240 	.word	0x000f4240
 8003f28:	ffbfffff 	.word	0xffbfffff
 8003f2c:	feffffff 	.word	0xfeffffff
 8003f30:	ff7fffff 	.word	0xff7fffff

08003f34 <HAL_ADC_GetError>:
  * @brief  Return the ADC error code
  * @param  hadc ADC handle
  * @retval ADC Error Code
  */
uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  return hadc->ErrorCode;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8003f40:	0018      	movs	r0, r3
 8003f42:	46bd      	mov	sp, r7
 8003f44:	b002      	add	sp, #8
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	2203      	movs	r2, #3
 8003f60:	4013      	ands	r3, r2
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d112      	bne.n	8003f8c <ADC_Enable+0x44>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	4013      	ands	r3, r2
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d009      	beq.n	8003f88 <ADC_Enable+0x40>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	2380      	movs	r3, #128	; 0x80
 8003f7c:	021b      	lsls	r3, r3, #8
 8003f7e:	401a      	ands	r2, r3
 8003f80:	2380      	movs	r3, #128	; 0x80
 8003f82:	021b      	lsls	r3, r3, #8
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d101      	bne.n	8003f8c <ADC_Enable+0x44>
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e000      	b.n	8003f8e <ADC_Enable+0x46>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d152      	bne.n	8004038 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	4a2a      	ldr	r2, [pc, #168]	; (8004044 <ADC_Enable+0xfc>)
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	d00d      	beq.n	8003fba <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa2:	2210      	movs	r2, #16
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fae:	2201      	movs	r2, #1
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e03f      	b.n	800403a <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003fca:	4b1f      	ldr	r3, [pc, #124]	; (8004048 <ADC_Enable+0x100>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	491f      	ldr	r1, [pc, #124]	; (800404c <ADC_Enable+0x104>)
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	f7fc f8ab 	bl	800012c <__udivsi3>
 8003fd6:	0003      	movs	r3, r0
 8003fd8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003fda:	e002      	b.n	8003fe2 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1f9      	bne.n	8003fdc <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003fe8:	f7ff fbf2 	bl	80037d0 <HAL_GetTick>
 8003fec:	0003      	movs	r3, r0
 8003fee:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003ff0:	e01b      	b.n	800402a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ff2:	f7ff fbed 	bl	80037d0 <HAL_GetTick>
 8003ff6:	0002      	movs	r2, r0
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d914      	bls.n	800402a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2201      	movs	r2, #1
 8004008:	4013      	ands	r3, r2
 800400a:	2b01      	cmp	r3, #1
 800400c:	d00d      	beq.n	800402a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004012:	2210      	movs	r2, #16
 8004014:	431a      	orrs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401e:	2201      	movs	r2, #1
 8004020:	431a      	orrs	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e007      	b.n	800403a <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2201      	movs	r2, #1
 8004032:	4013      	ands	r3, r2
 8004034:	2b01      	cmp	r3, #1
 8004036:	d1dc      	bne.n	8003ff2 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	0018      	movs	r0, r3
 800403c:	46bd      	mov	sp, r7
 800403e:	b004      	add	sp, #16
 8004040:	bd80      	pop	{r7, pc}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	80000017 	.word	0x80000017
 8004048:	20000004 	.word	0x20000004
 800404c:	000f4240 	.word	0x000f4240

08004050 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004062:	2250      	movs	r2, #80	; 0x50
 8004064:	4013      	ands	r3, r2
 8004066:	d140      	bne.n	80040ea <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406c:	2280      	movs	r2, #128	; 0x80
 800406e:	0092      	lsls	r2, r2, #2
 8004070:	431a      	orrs	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	23c0      	movs	r3, #192	; 0xc0
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	4013      	ands	r3, r2
 8004082:	d12d      	bne.n	80040e0 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004088:	2b00      	cmp	r3, #0
 800408a:	d129      	bne.n	80040e0 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2208      	movs	r2, #8
 8004094:	4013      	ands	r3, r2
 8004096:	2b08      	cmp	r3, #8
 8004098:	d122      	bne.n	80040e0 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	2204      	movs	r2, #4
 80040a2:	4013      	ands	r3, r2
 80040a4:	d110      	bne.n	80040c8 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	210c      	movs	r1, #12
 80040b2:	438a      	bics	r2, r1
 80040b4:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ba:	4a11      	ldr	r2, [pc, #68]	; (8004100 <ADC_DMAConvCplt+0xb0>)
 80040bc:	4013      	ands	r3, r2
 80040be:	2201      	movs	r2, #1
 80040c0:	431a      	orrs	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	639a      	str	r2, [r3, #56]	; 0x38
 80040c6:	e00b      	b.n	80040e0 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040cc:	2220      	movs	r2, #32
 80040ce:	431a      	orrs	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d8:	2201      	movs	r2, #1
 80040da:	431a      	orrs	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	0018      	movs	r0, r3
 80040e4:	f7fc fb62 	bl	80007ac <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80040e8:	e005      	b.n	80040f6 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	0010      	movs	r0, r2
 80040f4:	4798      	blx	r3
}
 80040f6:	46c0      	nop			; (mov r8, r8)
 80040f8:	46bd      	mov	sp, r7
 80040fa:	b004      	add	sp, #16
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	46c0      	nop			; (mov r8, r8)
 8004100:	fffffefe 	.word	0xfffffefe

08004104 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	0018      	movs	r0, r3
 8004116:	f7ff fdef 	bl	8003cf8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	46bd      	mov	sp, r7
 800411e:	b004      	add	sp, #16
 8004120:	bd80      	pop	{r7, pc}

08004122 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b084      	sub	sp, #16
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004134:	2240      	movs	r2, #64	; 0x40
 8004136:	431a      	orrs	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004140:	2204      	movs	r2, #4
 8004142:	431a      	orrs	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	0018      	movs	r0, r3
 800414c:	f7fc fb40 	bl	80007d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004150:	46c0      	nop			; (mov r8, r8)
 8004152:	46bd      	mov	sp, r7
 8004154:	b004      	add	sp, #16
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004160:	2317      	movs	r3, #23
 8004162:	18fb      	adds	r3, r7, r3
 8004164:	2200      	movs	r2, #0
 8004166:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 800416c:	2300      	movs	r3, #0
 800416e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2234      	movs	r2, #52	; 0x34
 8004174:	5c9b      	ldrb	r3, [r3, r2]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d101      	bne.n	800417e <HAL_ADCEx_Calibration_Start+0x26>
 800417a:	2302      	movs	r3, #2
 800417c:	e08d      	b.n	800429a <HAL_ADCEx_Calibration_Start+0x142>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2234      	movs	r2, #52	; 0x34
 8004182:	2101      	movs	r1, #1
 8004184:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	2203      	movs	r2, #3
 800418e:	4013      	ands	r3, r2
 8004190:	2b01      	cmp	r3, #1
 8004192:	d112      	bne.n	80041ba <HAL_ADCEx_Calibration_Start+0x62>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2201      	movs	r2, #1
 800419c:	4013      	ands	r3, r2
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d009      	beq.n	80041b6 <HAL_ADCEx_Calibration_Start+0x5e>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	2380      	movs	r3, #128	; 0x80
 80041aa:	021b      	lsls	r3, r3, #8
 80041ac:	401a      	ands	r2, r3
 80041ae:	2380      	movs	r3, #128	; 0x80
 80041b0:	021b      	lsls	r3, r3, #8
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d101      	bne.n	80041ba <HAL_ADCEx_Calibration_Start+0x62>
 80041b6:	2301      	movs	r3, #1
 80041b8:	e000      	b.n	80041bc <HAL_ADCEx_Calibration_Start+0x64>
 80041ba:	2300      	movs	r3, #0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d15b      	bne.n	8004278 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c4:	4a37      	ldr	r2, [pc, #220]	; (80042a4 <HAL_ADCEx_Calibration_Start+0x14c>)
 80041c6:	4013      	ands	r3, r2
 80041c8:	2202      	movs	r2, #2
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	2203      	movs	r2, #3
 80041d8:	4013      	ands	r3, r2
 80041da:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2103      	movs	r1, #3
 80041e8:	438a      	bics	r2, r1
 80041ea:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2180      	movs	r1, #128	; 0x80
 80041f8:	0609      	lsls	r1, r1, #24
 80041fa:	430a      	orrs	r2, r1
 80041fc:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80041fe:	f7ff fae7 	bl	80037d0 <HAL_GetTick>
 8004202:	0003      	movs	r3, r0
 8004204:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004206:	e01d      	b.n	8004244 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004208:	f7ff fae2 	bl	80037d0 <HAL_GetTick>
 800420c:	0002      	movs	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d916      	bls.n	8004244 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	0fdb      	lsrs	r3, r3, #31
 800421e:	07da      	lsls	r2, r3, #31
 8004220:	2380      	movs	r3, #128	; 0x80
 8004222:	061b      	lsls	r3, r3, #24
 8004224:	429a      	cmp	r2, r3
 8004226:	d10d      	bne.n	8004244 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422c:	2212      	movs	r2, #18
 800422e:	4393      	bics	r3, r2
 8004230:	2210      	movs	r2, #16
 8004232:	431a      	orrs	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2234      	movs	r2, #52	; 0x34
 800423c:	2100      	movs	r1, #0
 800423e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e02a      	b.n	800429a <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	0fdb      	lsrs	r3, r3, #31
 800424c:	07da      	lsls	r2, r3, #31
 800424e:	2380      	movs	r3, #128	; 0x80
 8004250:	061b      	lsls	r3, r3, #24
 8004252:	429a      	cmp	r2, r3
 8004254:	d0d8      	beq.n	8004208 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68d9      	ldr	r1, [r3, #12]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	430a      	orrs	r2, r1
 8004264:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426a:	2203      	movs	r2, #3
 800426c:	4393      	bics	r3, r2
 800426e:	2201      	movs	r2, #1
 8004270:	431a      	orrs	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	639a      	str	r2, [r3, #56]	; 0x38
 8004276:	e009      	b.n	800428c <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427c:	2220      	movs	r2, #32
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8004284:	2317      	movs	r3, #23
 8004286:	18fb      	adds	r3, r7, r3
 8004288:	2201      	movs	r2, #1
 800428a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2234      	movs	r2, #52	; 0x34
 8004290:	2100      	movs	r1, #0
 8004292:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004294:	2317      	movs	r3, #23
 8004296:	18fb      	adds	r3, r7, r3
 8004298:	781b      	ldrb	r3, [r3, #0]
}
 800429a:	0018      	movs	r0, r3
 800429c:	46bd      	mov	sp, r7
 800429e:	b006      	add	sp, #24
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	46c0      	nop			; (mov r8, r8)
 80042a4:	fffffefd 	.word	0xfffffefd

080042a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e0f0      	b.n	800449c <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2220      	movs	r2, #32
 80042be:	5c9b      	ldrb	r3, [r3, r2]
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d103      	bne.n	80042ce <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	0018      	movs	r0, r3
 80042ca:	f7fe fd81 	bl	8002dd0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2101      	movs	r1, #1
 80042da:	430a      	orrs	r2, r1
 80042dc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042de:	f7ff fa77 	bl	80037d0 <HAL_GetTick>
 80042e2:	0003      	movs	r3, r0
 80042e4:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80042e6:	e013      	b.n	8004310 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80042e8:	f7ff fa72 	bl	80037d0 <HAL_GetTick>
 80042ec:	0002      	movs	r2, r0
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b0a      	cmp	r3, #10
 80042f4:	d90c      	bls.n	8004310 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	2280      	movs	r2, #128	; 0x80
 80042fc:	0292      	lsls	r2, r2, #10
 80042fe:	431a      	orrs	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2220      	movs	r2, #32
 8004308:	2105      	movs	r1, #5
 800430a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e0c5      	b.n	800449c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	4013      	ands	r3, r2
 800431a:	d0e5      	beq.n	80042e8 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2102      	movs	r1, #2
 8004328:	438a      	bics	r2, r1
 800432a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800432c:	f7ff fa50 	bl	80037d0 <HAL_GetTick>
 8004330:	0003      	movs	r3, r0
 8004332:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004334:	e013      	b.n	800435e <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004336:	f7ff fa4b 	bl	80037d0 <HAL_GetTick>
 800433a:	0002      	movs	r2, r0
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b0a      	cmp	r3, #10
 8004342:	d90c      	bls.n	800435e <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	2280      	movs	r2, #128	; 0x80
 800434a:	0292      	lsls	r2, r2, #10
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2220      	movs	r2, #32
 8004356:	2105      	movs	r1, #5
 8004358:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e09e      	b.n	800449c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2202      	movs	r2, #2
 8004366:	4013      	ands	r3, r2
 8004368:	d1e5      	bne.n	8004336 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	7e1b      	ldrb	r3, [r3, #24]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d108      	bne.n	8004384 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2180      	movs	r1, #128	; 0x80
 800437e:	430a      	orrs	r2, r1
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	e007      	b.n	8004394 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2180      	movs	r1, #128	; 0x80
 8004390:	438a      	bics	r2, r1
 8004392:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	7e5b      	ldrb	r3, [r3, #25]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d108      	bne.n	80043ae <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2140      	movs	r1, #64	; 0x40
 80043a8:	430a      	orrs	r2, r1
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	e007      	b.n	80043be <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2140      	movs	r1, #64	; 0x40
 80043ba:	438a      	bics	r2, r1
 80043bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	7e9b      	ldrb	r3, [r3, #26]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d108      	bne.n	80043d8 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2120      	movs	r1, #32
 80043d2:	430a      	orrs	r2, r1
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	e007      	b.n	80043e8 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2120      	movs	r1, #32
 80043e4:	438a      	bics	r2, r1
 80043e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	7edb      	ldrb	r3, [r3, #27]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d108      	bne.n	8004402 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2110      	movs	r1, #16
 80043fc:	438a      	bics	r2, r1
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	e007      	b.n	8004412 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2110      	movs	r1, #16
 800440e:	430a      	orrs	r2, r1
 8004410:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	7f1b      	ldrb	r3, [r3, #28]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d108      	bne.n	800442c <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2108      	movs	r1, #8
 8004426:	430a      	orrs	r2, r1
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	e007      	b.n	800443c <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2108      	movs	r1, #8
 8004438:	438a      	bics	r2, r1
 800443a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	7f5b      	ldrb	r3, [r3, #29]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d108      	bne.n	8004456 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2104      	movs	r1, #4
 8004450:	430a      	orrs	r2, r1
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	e007      	b.n	8004466 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2104      	movs	r1, #4
 8004462:	438a      	bics	r2, r1
 8004464:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689a      	ldr	r2, [r3, #8]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	431a      	orrs	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	431a      	orrs	r2, r3
 800447c:	0011      	movs	r1, r2
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	1e5a      	subs	r2, r3, #1
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2220      	movs	r2, #32
 8004496:	2101      	movs	r1, #1
 8004498:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	0018      	movs	r0, r3
 800449e:	46bd      	mov	sp, r7
 80044a0:	b004      	add	sp, #16
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80044b4:	2013      	movs	r0, #19
 80044b6:	183b      	adds	r3, r7, r0
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	2120      	movs	r1, #32
 80044bc:	5c52      	ldrb	r2, [r2, r1]
 80044be:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 80044c0:	0002      	movs	r2, r0
 80044c2:	18bb      	adds	r3, r7, r2
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d004      	beq.n	80044d4 <HAL_CAN_ConfigFilter+0x30>
 80044ca:	18bb      	adds	r3, r7, r2
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d000      	beq.n	80044d4 <HAL_CAN_ConfigFilter+0x30>
 80044d2:	e0cd      	b.n	8004670 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	2380      	movs	r3, #128	; 0x80
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	58d3      	ldr	r3, [r2, r3]
 80044dc:	2201      	movs	r2, #1
 80044de:	431a      	orrs	r2, r3
 80044e0:	0011      	movs	r1, r2
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	2380      	movs	r3, #128	; 0x80
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	221f      	movs	r2, #31
 80044f0:	4013      	ands	r3, r2
 80044f2:	2201      	movs	r2, #1
 80044f4:	409a      	lsls	r2, r3
 80044f6:	0013      	movs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	2387      	movs	r3, #135	; 0x87
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	58d3      	ldr	r3, [r2, r3]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	43d2      	mvns	r2, r2
 8004506:	401a      	ands	r2, r3
 8004508:	0011      	movs	r1, r2
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	2387      	movs	r3, #135	; 0x87
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d129      	bne.n	800456e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	2383      	movs	r3, #131	; 0x83
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	58d3      	ldr	r3, [r2, r3]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	43d2      	mvns	r2, r2
 8004526:	401a      	ands	r2, r3
 8004528:	0011      	movs	r1, r2
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	2383      	movs	r3, #131	; 0x83
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	041b      	lsls	r3, r3, #16
 800453e:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004544:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	3248      	adds	r2, #72	; 0x48
 800454a:	00d2      	lsls	r2, r2, #3
 800454c:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	041b      	lsls	r3, r3, #16
 800455a:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004560:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004562:	6979      	ldr	r1, [r7, #20]
 8004564:	3348      	adds	r3, #72	; 0x48
 8004566:	00db      	lsls	r3, r3, #3
 8004568:	18cb      	adds	r3, r1, r3
 800456a:	3304      	adds	r3, #4
 800456c:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d128      	bne.n	80045c8 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	2383      	movs	r3, #131	; 0x83
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	58d2      	ldr	r2, [r2, r3]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	431a      	orrs	r2, r3
 8004582:	0011      	movs	r1, r2
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	2383      	movs	r3, #131	; 0x83
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	041b      	lsls	r3, r3, #16
 8004598:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800459e:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	3248      	adds	r2, #72	; 0x48
 80045a4:	00d2      	lsls	r2, r2, #3
 80045a6:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	041b      	lsls	r3, r3, #16
 80045b4:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80045ba:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80045bc:	6979      	ldr	r1, [r7, #20]
 80045be:	3348      	adds	r3, #72	; 0x48
 80045c0:	00db      	lsls	r3, r3, #3
 80045c2:	18cb      	adds	r3, r1, r3
 80045c4:	3304      	adds	r3, #4
 80045c6:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10c      	bne.n	80045ea <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	2381      	movs	r3, #129	; 0x81
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	58d3      	ldr	r3, [r2, r3]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	43d2      	mvns	r2, r2
 80045dc:	401a      	ands	r2, r3
 80045de:	0011      	movs	r1, r2
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	2381      	movs	r3, #129	; 0x81
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	50d1      	str	r1, [r2, r3]
 80045e8:	e00a      	b.n	8004600 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	2381      	movs	r3, #129	; 0x81
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	58d2      	ldr	r2, [r2, r3]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	431a      	orrs	r2, r3
 80045f6:	0011      	movs	r1, r2
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	2381      	movs	r3, #129	; 0x81
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10c      	bne.n	8004622 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	2385      	movs	r3, #133	; 0x85
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	58d3      	ldr	r3, [r2, r3]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	43d2      	mvns	r2, r2
 8004614:	401a      	ands	r2, r3
 8004616:	0011      	movs	r1, r2
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	2385      	movs	r3, #133	; 0x85
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	50d1      	str	r1, [r2, r3]
 8004620:	e00a      	b.n	8004638 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	2385      	movs	r3, #133	; 0x85
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	58d2      	ldr	r2, [r2, r3]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	431a      	orrs	r2, r3
 800462e:	0011      	movs	r1, r2
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	2385      	movs	r3, #133	; 0x85
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d10a      	bne.n	8004656 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	2387      	movs	r3, #135	; 0x87
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	58d2      	ldr	r2, [r2, r3]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	431a      	orrs	r2, r3
 800464c:	0011      	movs	r1, r2
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	2387      	movs	r3, #135	; 0x87
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	2380      	movs	r3, #128	; 0x80
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	58d3      	ldr	r3, [r2, r3]
 800465e:	2201      	movs	r2, #1
 8004660:	4393      	bics	r3, r2
 8004662:	0019      	movs	r1, r3
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	2380      	movs	r3, #128	; 0x80
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 800466c:	2300      	movs	r3, #0
 800466e:	e007      	b.n	8004680 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	2280      	movs	r2, #128	; 0x80
 8004676:	02d2      	lsls	r2, r2, #11
 8004678:	431a      	orrs	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
  }
}
 8004680:	0018      	movs	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	b006      	add	sp, #24
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2220      	movs	r2, #32
 8004694:	5c9b      	ldrb	r3, [r3, r2]
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b01      	cmp	r3, #1
 800469a:	d12f      	bne.n	80046fc <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2220      	movs	r2, #32
 80046a0:	2102      	movs	r1, #2
 80046a2:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2101      	movs	r1, #1
 80046b0:	438a      	bics	r2, r1
 80046b2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046b4:	f7ff f88c 	bl	80037d0 <HAL_GetTick>
 80046b8:	0003      	movs	r3, r0
 80046ba:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80046bc:	e013      	b.n	80046e6 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80046be:	f7ff f887 	bl	80037d0 <HAL_GetTick>
 80046c2:	0002      	movs	r2, r0
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b0a      	cmp	r3, #10
 80046ca:	d90c      	bls.n	80046e6 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	2280      	movs	r2, #128	; 0x80
 80046d2:	0292      	lsls	r2, r2, #10
 80046d4:	431a      	orrs	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2220      	movs	r2, #32
 80046de:	2105      	movs	r1, #5
 80046e0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e012      	b.n	800470c <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	4013      	ands	r3, r2
 80046f0:	d1e5      	bne.n	80046be <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80046f8:	2300      	movs	r3, #0
 80046fa:	e007      	b.n	800470c <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	2280      	movs	r2, #128	; 0x80
 8004702:	0312      	lsls	r2, r2, #12
 8004704:	431a      	orrs	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
  }
}
 800470c:	0018      	movs	r0, r3
 800470e:	46bd      	mov	sp, r7
 8004710:	b004      	add	sp, #16
 8004712:	bd80      	pop	{r7, pc}

08004714 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b088      	sub	sp, #32
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
 8004720:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004722:	201f      	movs	r0, #31
 8004724:	183b      	adds	r3, r7, r0
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	2120      	movs	r1, #32
 800472a:	5c52      	ldrb	r2, [r2, r1]
 800472c:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004736:	183b      	adds	r3, r7, r0
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d004      	beq.n	8004748 <HAL_CAN_AddTxMessage+0x34>
 800473e:	183b      	adds	r3, r7, r0
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	2b02      	cmp	r3, #2
 8004744:	d000      	beq.n	8004748 <HAL_CAN_AddTxMessage+0x34>
 8004746:	e0ab      	b.n	80048a0 <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	2380      	movs	r3, #128	; 0x80
 800474c:	04db      	lsls	r3, r3, #19
 800474e:	4013      	ands	r3, r2
 8004750:	d10a      	bne.n	8004768 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	2380      	movs	r3, #128	; 0x80
 8004756:	051b      	lsls	r3, r3, #20
 8004758:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800475a:	d105      	bne.n	8004768 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	2380      	movs	r3, #128	; 0x80
 8004760:	055b      	lsls	r3, r3, #21
 8004762:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004764:	d100      	bne.n	8004768 <HAL_CAN_AddTxMessage+0x54>
 8004766:	e092      	b.n	800488e <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	0e1b      	lsrs	r3, r3, #24
 800476c:	2203      	movs	r2, #3
 800476e:	4013      	ands	r3, r2
 8004770:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004772:	2201      	movs	r2, #1
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	409a      	lsls	r2, r3
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10c      	bne.n	800479e <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4311      	orrs	r1, r2
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	3218      	adds	r2, #24
 8004798:	0112      	lsls	r2, r2, #4
 800479a:	50d1      	str	r1, [r2, r3]
 800479c:	e00f      	b.n	80047be <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80047a8:	431a      	orrs	r2, r3
 80047aa:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 80047b4:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	3218      	adds	r2, #24
 80047ba:	0112      	lsls	r2, r2, #4
 80047bc:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6819      	ldr	r1, [r3, #0]
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	691a      	ldr	r2, [r3, #16]
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	3318      	adds	r3, #24
 80047ca:	011b      	lsls	r3, r3, #4
 80047cc:	18cb      	adds	r3, r1, r3
 80047ce:	3304      	adds	r3, #4
 80047d0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	7d1b      	ldrb	r3, [r3, #20]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d112      	bne.n	8004800 <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	3318      	adds	r3, #24
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	18d3      	adds	r3, r2, r3
 80047e6:	3304      	adds	r3, #4
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6819      	ldr	r1, [r3, #0]
 80047ee:	2380      	movs	r3, #128	; 0x80
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	431a      	orrs	r2, r3
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	3318      	adds	r3, #24
 80047f8:	011b      	lsls	r3, r3, #4
 80047fa:	18cb      	adds	r3, r1, r3
 80047fc:	3304      	adds	r3, #4
 80047fe:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	3307      	adds	r3, #7
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	061a      	lsls	r2, r3, #24
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3306      	adds	r3, #6
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	041b      	lsls	r3, r3, #16
 8004810:	431a      	orrs	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	3305      	adds	r3, #5
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	021b      	lsls	r3, r3, #8
 800481a:	431a      	orrs	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	3304      	adds	r3, #4
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	0019      	movs	r1, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6818      	ldr	r0, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	6979      	ldr	r1, [r7, #20]
 800482c:	23c6      	movs	r3, #198	; 0xc6
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	0109      	lsls	r1, r1, #4
 8004832:	1841      	adds	r1, r0, r1
 8004834:	18cb      	adds	r3, r1, r3
 8004836:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3303      	adds	r3, #3
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	061a      	lsls	r2, r3, #24
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3302      	adds	r3, #2
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	041b      	lsls	r3, r3, #16
 8004848:	431a      	orrs	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	3301      	adds	r3, #1
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	021b      	lsls	r3, r3, #8
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	0019      	movs	r1, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6818      	ldr	r0, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	6979      	ldr	r1, [r7, #20]
 8004862:	23c4      	movs	r3, #196	; 0xc4
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	0109      	lsls	r1, r1, #4
 8004868:	1841      	adds	r1, r0, r1
 800486a:	18cb      	adds	r3, r1, r3
 800486c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	3218      	adds	r2, #24
 8004876:	0112      	lsls	r2, r2, #4
 8004878:	58d2      	ldr	r2, [r2, r3]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2101      	movs	r1, #1
 8004880:	4311      	orrs	r1, r2
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	3218      	adds	r2, #24
 8004886:	0112      	lsls	r2, r2, #4
 8004888:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	e010      	b.n	80048b0 <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	2280      	movs	r2, #128	; 0x80
 8004894:	0392      	lsls	r2, r2, #14
 8004896:	431a      	orrs	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e007      	b.n	80048b0 <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a4:	2280      	movs	r2, #128	; 0x80
 80048a6:	02d2      	lsls	r2, r2, #11
 80048a8:	431a      	orrs	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
  }
}
 80048b0:	0018      	movs	r0, r3
 80048b2:	46bd      	mov	sp, r7
 80048b4:	b008      	add	sp, #32
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80048c6:	200b      	movs	r0, #11
 80048c8:	183b      	adds	r3, r7, r0
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	2120      	movs	r1, #32
 80048ce:	5c52      	ldrb	r2, [r2, r1]
 80048d0:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80048d2:	0002      	movs	r2, r0
 80048d4:	18bb      	adds	r3, r7, r2
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d003      	beq.n	80048e4 <HAL_CAN_IsTxMessagePending+0x2c>
 80048dc:	18bb      	adds	r3, r7, r2
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d10b      	bne.n	80048fc <HAL_CAN_IsTxMessagePending+0x44>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	0692      	lsls	r2, r2, #26
 80048ee:	401a      	ands	r2, r3
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	069b      	lsls	r3, r3, #26
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d001      	beq.n	80048fc <HAL_CAN_IsTxMessagePending+0x44>
    {
      status = 1U;
 80048f8:	2301      	movs	r3, #1
 80048fa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80048fc:	68fb      	ldr	r3, [r7, #12]
}
 80048fe:	0018      	movs	r0, r3
 8004900:	46bd      	mov	sp, r7
 8004902:	b004      	add	sp, #16
 8004904:	bd80      	pop	{r7, pc}

08004906 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b086      	sub	sp, #24
 800490a:	af00      	add	r7, sp, #0
 800490c:	60f8      	str	r0, [r7, #12]
 800490e:	60b9      	str	r1, [r7, #8]
 8004910:	607a      	str	r2, [r7, #4]
 8004912:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004914:	2017      	movs	r0, #23
 8004916:	183b      	adds	r3, r7, r0
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	2120      	movs	r1, #32
 800491c:	5c52      	ldrb	r2, [r2, r1]
 800491e:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004920:	0002      	movs	r2, r0
 8004922:	18bb      	adds	r3, r7, r2
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d004      	beq.n	8004934 <HAL_CAN_GetRxMessage+0x2e>
 800492a:	18bb      	adds	r3, r7, r2
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	2b02      	cmp	r3, #2
 8004930:	d000      	beq.n	8004934 <HAL_CAN_GetRxMessage+0x2e>
 8004932:	e107      	b.n	8004b44 <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10e      	bne.n	8004958 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	2203      	movs	r2, #3
 8004942:	4013      	ands	r3, r2
 8004944:	d117      	bne.n	8004976 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	2280      	movs	r2, #128	; 0x80
 800494c:	0392      	lsls	r2, r2, #14
 800494e:	431a      	orrs	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e0fd      	b.n	8004b54 <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	2203      	movs	r2, #3
 8004960:	4013      	ands	r3, r2
 8004962:	d108      	bne.n	8004976 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	2280      	movs	r2, #128	; 0x80
 800496a:	0392      	lsls	r2, r2, #14
 800496c:	431a      	orrs	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e0ee      	b.n	8004b54 <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	321b      	adds	r2, #27
 800497e:	0112      	lsls	r2, r2, #4
 8004980:	58d3      	ldr	r3, [r2, r3]
 8004982:	2204      	movs	r2, #4
 8004984:	401a      	ands	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10b      	bne.n	80049aa <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	321b      	adds	r2, #27
 800499a:	0112      	lsls	r2, r2, #4
 800499c:	58d3      	ldr	r3, [r2, r3]
 800499e:	0d5b      	lsrs	r3, r3, #21
 80049a0:	055b      	lsls	r3, r3, #21
 80049a2:	0d5a      	lsrs	r2, r3, #21
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	e00a      	b.n	80049c0 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	321b      	adds	r2, #27
 80049b2:	0112      	lsls	r2, r2, #4
 80049b4:	58d3      	ldr	r3, [r2, r3]
 80049b6:	08db      	lsrs	r3, r3, #3
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	321b      	adds	r2, #27
 80049c8:	0112      	lsls	r2, r2, #4
 80049ca:	58d3      	ldr	r3, [r2, r3]
 80049cc:	2202      	movs	r2, #2
 80049ce:	401a      	ands	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	331b      	adds	r3, #27
 80049dc:	011b      	lsls	r3, r3, #4
 80049de:	18d3      	adds	r3, r2, r3
 80049e0:	3304      	adds	r3, #4
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2208      	movs	r2, #8
 80049e6:	4013      	ands	r3, r2
 80049e8:	d003      	beq.n	80049f2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2208      	movs	r2, #8
 80049ee:	611a      	str	r2, [r3, #16]
 80049f0:	e00b      	b.n	8004a0a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	331b      	adds	r3, #27
 80049fa:	011b      	lsls	r3, r3, #4
 80049fc:	18d3      	adds	r3, r2, r3
 80049fe:	3304      	adds	r3, #4
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	220f      	movs	r2, #15
 8004a04:	401a      	ands	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	331b      	adds	r3, #27
 8004a12:	011b      	lsls	r3, r3, #4
 8004a14:	18d3      	adds	r3, r2, r3
 8004a16:	3304      	adds	r3, #4
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	0a1b      	lsrs	r3, r3, #8
 8004a1c:	22ff      	movs	r2, #255	; 0xff
 8004a1e:	401a      	ands	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	331b      	adds	r3, #27
 8004a2c:	011b      	lsls	r3, r3, #4
 8004a2e:	18d3      	adds	r3, r2, r3
 8004a30:	3304      	adds	r3, #4
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	0c1b      	lsrs	r3, r3, #16
 8004a36:	041b      	lsls	r3, r3, #16
 8004a38:	0c1a      	lsrs	r2, r3, #16
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6819      	ldr	r1, [r3, #0]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	23dc      	movs	r3, #220	; 0xdc
 8004a46:	005b      	lsls	r3, r3, #1
 8004a48:	0112      	lsls	r2, r2, #4
 8004a4a:	188a      	adds	r2, r1, r2
 8004a4c:	18d3      	adds	r3, r2, r3
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6819      	ldr	r1, [r3, #0]
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	23dc      	movs	r3, #220	; 0xdc
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	0112      	lsls	r2, r2, #4
 8004a62:	188a      	adds	r2, r1, r2
 8004a64:	18d3      	adds	r3, r2, r3
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	0a1a      	lsrs	r2, r3, #8
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	b2d2      	uxtb	r2, r2
 8004a70:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6819      	ldr	r1, [r3, #0]
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	23dc      	movs	r3, #220	; 0xdc
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	0112      	lsls	r2, r2, #4
 8004a7e:	188a      	adds	r2, r1, r2
 8004a80:	18d3      	adds	r3, r2, r3
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	0c1a      	lsrs	r2, r3, #16
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	3302      	adds	r3, #2
 8004a8a:	b2d2      	uxtb	r2, r2
 8004a8c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6819      	ldr	r1, [r3, #0]
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	23dc      	movs	r3, #220	; 0xdc
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	0112      	lsls	r2, r2, #4
 8004a9a:	188a      	adds	r2, r1, r2
 8004a9c:	18d3      	adds	r3, r2, r3
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	0e1a      	lsrs	r2, r3, #24
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	3303      	adds	r3, #3
 8004aa6:	b2d2      	uxtb	r2, r2
 8004aa8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6819      	ldr	r1, [r3, #0]
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	23de      	movs	r3, #222	; 0xde
 8004ab2:	005b      	lsls	r3, r3, #1
 8004ab4:	0112      	lsls	r2, r2, #4
 8004ab6:	188a      	adds	r2, r1, r2
 8004ab8:	18d3      	adds	r3, r2, r3
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	b2d2      	uxtb	r2, r2
 8004ac2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6819      	ldr	r1, [r3, #0]
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	23de      	movs	r3, #222	; 0xde
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	0112      	lsls	r2, r2, #4
 8004ad0:	188a      	adds	r2, r1, r2
 8004ad2:	18d3      	adds	r3, r2, r3
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	0a1a      	lsrs	r2, r3, #8
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	3305      	adds	r3, #5
 8004adc:	b2d2      	uxtb	r2, r2
 8004ade:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6819      	ldr	r1, [r3, #0]
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	23de      	movs	r3, #222	; 0xde
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	0112      	lsls	r2, r2, #4
 8004aec:	188a      	adds	r2, r1, r2
 8004aee:	18d3      	adds	r3, r2, r3
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	0c1a      	lsrs	r2, r3, #16
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	3306      	adds	r3, #6
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6819      	ldr	r1, [r3, #0]
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	23de      	movs	r3, #222	; 0xde
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	0112      	lsls	r2, r2, #4
 8004b08:	188a      	adds	r2, r1, r2
 8004b0a:	18d3      	adds	r3, r2, r3
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	0e1a      	lsrs	r2, r3, #24
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	3307      	adds	r3, #7
 8004b14:	b2d2      	uxtb	r2, r2
 8004b16:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d108      	bne.n	8004b30 <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68da      	ldr	r2, [r3, #12]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2120      	movs	r1, #32
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	60da      	str	r2, [r3, #12]
 8004b2e:	e007      	b.n	8004b40 <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	691a      	ldr	r2, [r3, #16]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2120      	movs	r1, #32
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004b40:	2300      	movs	r3, #0
 8004b42:	e007      	b.n	8004b54 <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	2280      	movs	r2, #128	; 0x80
 8004b4a:	02d2      	lsls	r2, r2, #11
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
  }
}
 8004b54:	0018      	movs	r0, r3
 8004b56:	46bd      	mov	sp, r7
 8004b58:	b006      	add	sp, #24
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004b66:	200f      	movs	r0, #15
 8004b68:	183b      	adds	r3, r7, r0
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	2120      	movs	r1, #32
 8004b6e:	5c52      	ldrb	r2, [r2, r1]
 8004b70:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004b72:	0002      	movs	r2, r0
 8004b74:	18bb      	adds	r3, r7, r2
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d003      	beq.n	8004b84 <HAL_CAN_ActivateNotification+0x28>
 8004b7c:	18bb      	adds	r3, r7, r2
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d109      	bne.n	8004b98 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6959      	ldr	r1, [r3, #20]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004b94:	2300      	movs	r3, #0
 8004b96:	e007      	b.n	8004ba8 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	2280      	movs	r2, #128	; 0x80
 8004b9e:	02d2      	lsls	r2, r2, #11
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
  }
}
 8004ba8:	0018      	movs	r0, r3
 8004baa:	46bd      	mov	sp, r7
 8004bac:	b004      	add	sp, #16
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08a      	sub	sp, #40	; 0x28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	d100      	bne.n	8004bf6 <HAL_CAN_IRQHandler+0x46>
 8004bf4:	e084      	b.n	8004d00 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	d024      	beq.n	8004c48 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2201      	movs	r2, #1
 8004c04:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	2202      	movs	r2, #2
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	d004      	beq.n	8004c18 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	0018      	movs	r0, r3
 8004c12:	f7fc f907 	bl	8000e24 <HAL_CAN_TxMailbox0CompleteCallback>
 8004c16:	e017      	b.n	8004c48 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	2204      	movs	r2, #4
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	d005      	beq.n	8004c2c <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	2280      	movs	r2, #128	; 0x80
 8004c24:	0112      	lsls	r2, r2, #4
 8004c26:	4313      	orrs	r3, r2
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24
 8004c2a:	e00d      	b.n	8004c48 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	2208      	movs	r2, #8
 8004c30:	4013      	ands	r3, r2
 8004c32:	d005      	beq.n	8004c40 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	2280      	movs	r2, #128	; 0x80
 8004c38:	0152      	lsls	r2, r2, #5
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c3e:	e003      	b.n	8004c48 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	0018      	movs	r0, r3
 8004c44:	f000 f968 	bl	8004f18 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	2380      	movs	r3, #128	; 0x80
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	4013      	ands	r3, r2
 8004c50:	d028      	beq.n	8004ca4 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2280      	movs	r2, #128	; 0x80
 8004c58:	0052      	lsls	r2, r2, #1
 8004c5a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	2380      	movs	r3, #128	; 0x80
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4013      	ands	r3, r2
 8004c64:	d004      	beq.n	8004c70 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f7fc f8e5 	bl	8000e38 <HAL_CAN_TxMailbox1CompleteCallback>
 8004c6e:	e019      	b.n	8004ca4 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	2380      	movs	r3, #128	; 0x80
 8004c74:	00db      	lsls	r3, r3, #3
 8004c76:	4013      	ands	r3, r2
 8004c78:	d005      	beq.n	8004c86 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	2280      	movs	r2, #128	; 0x80
 8004c7e:	0192      	lsls	r2, r2, #6
 8004c80:	4313      	orrs	r3, r2
 8004c82:	627b      	str	r3, [r7, #36]	; 0x24
 8004c84:	e00e      	b.n	8004ca4 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	2380      	movs	r3, #128	; 0x80
 8004c8a:	011b      	lsls	r3, r3, #4
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	d005      	beq.n	8004c9c <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	2280      	movs	r2, #128	; 0x80
 8004c94:	01d2      	lsls	r2, r2, #7
 8004c96:	4313      	orrs	r3, r2
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24
 8004c9a:	e003      	b.n	8004ca4 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	0018      	movs	r0, r3
 8004ca0:	f000 f942 	bl	8004f28 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	2380      	movs	r3, #128	; 0x80
 8004ca8:	025b      	lsls	r3, r3, #9
 8004caa:	4013      	ands	r3, r2
 8004cac:	d028      	beq.n	8004d00 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2280      	movs	r2, #128	; 0x80
 8004cb4:	0252      	lsls	r2, r2, #9
 8004cb6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	2380      	movs	r3, #128	; 0x80
 8004cbc:	029b      	lsls	r3, r3, #10
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	d004      	beq.n	8004ccc <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	f7fc f8c1 	bl	8000e4c <HAL_CAN_TxMailbox2CompleteCallback>
 8004cca:	e019      	b.n	8004d00 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	2380      	movs	r3, #128	; 0x80
 8004cd0:	02db      	lsls	r3, r3, #11
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	d005      	beq.n	8004ce2 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	2280      	movs	r2, #128	; 0x80
 8004cda:	0212      	lsls	r2, r2, #8
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce0:	e00e      	b.n	8004d00 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	2380      	movs	r3, #128	; 0x80
 8004ce6:	031b      	lsls	r3, r3, #12
 8004ce8:	4013      	ands	r3, r2
 8004cea:	d005      	beq.n	8004cf8 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	2280      	movs	r2, #128	; 0x80
 8004cf0:	0252      	lsls	r2, r2, #9
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf6:	e003      	b.n	8004d00 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	0018      	movs	r0, r3
 8004cfc:	f000 f91c 	bl	8004f38 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	2208      	movs	r2, #8
 8004d04:	4013      	ands	r3, r2
 8004d06:	d00c      	beq.n	8004d22 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	2210      	movs	r2, #16
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	d008      	beq.n	8004d22 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	2280      	movs	r2, #128	; 0x80
 8004d14:	0092      	lsls	r2, r2, #2
 8004d16:	4313      	orrs	r3, r2
 8004d18:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2210      	movs	r2, #16
 8004d20:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004d22:	6a3b      	ldr	r3, [r7, #32]
 8004d24:	2204      	movs	r2, #4
 8004d26:	4013      	ands	r3, r2
 8004d28:	d00b      	beq.n	8004d42 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2208      	movs	r2, #8
 8004d2e:	4013      	ands	r3, r2
 8004d30:	d007      	beq.n	8004d42 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2208      	movs	r2, #8
 8004d38:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	f000 f903 	bl	8004f48 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	2202      	movs	r2, #2
 8004d46:	4013      	ands	r3, r2
 8004d48:	d009      	beq.n	8004d5e <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	2203      	movs	r2, #3
 8004d52:	4013      	ands	r3, r2
 8004d54:	d003      	beq.n	8004d5e <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	0018      	movs	r0, r3
 8004d5a:	f7fb fe57 	bl	8000a0c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004d5e:	6a3b      	ldr	r3, [r7, #32]
 8004d60:	2240      	movs	r2, #64	; 0x40
 8004d62:	4013      	ands	r3, r2
 8004d64:	d00c      	beq.n	8004d80 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	2210      	movs	r2, #16
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	d008      	beq.n	8004d80 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	2280      	movs	r2, #128	; 0x80
 8004d72:	00d2      	lsls	r2, r2, #3
 8004d74:	4313      	orrs	r3, r2
 8004d76:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2210      	movs	r2, #16
 8004d7e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	2220      	movs	r2, #32
 8004d84:	4013      	ands	r3, r2
 8004d86:	d00b      	beq.n	8004da0 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	2208      	movs	r2, #8
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	d007      	beq.n	8004da0 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2208      	movs	r2, #8
 8004d96:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	f000 f8e4 	bl	8004f68 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004da0:	6a3b      	ldr	r3, [r7, #32]
 8004da2:	2210      	movs	r2, #16
 8004da4:	4013      	ands	r3, r2
 8004da6:	d009      	beq.n	8004dbc <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	2203      	movs	r2, #3
 8004db0:	4013      	ands	r3, r2
 8004db2:	d003      	beq.n	8004dbc <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	0018      	movs	r0, r3
 8004db8:	f000 f8ce 	bl	8004f58 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004dbc:	6a3a      	ldr	r2, [r7, #32]
 8004dbe:	2380      	movs	r3, #128	; 0x80
 8004dc0:	029b      	lsls	r3, r3, #10
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	d00b      	beq.n	8004dde <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	2210      	movs	r2, #16
 8004dca:	4013      	ands	r3, r2
 8004dcc:	d007      	beq.n	8004dde <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2210      	movs	r2, #16
 8004dd4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	0018      	movs	r0, r3
 8004dda:	f000 f8cd 	bl	8004f78 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004dde:	6a3a      	ldr	r2, [r7, #32]
 8004de0:	2380      	movs	r3, #128	; 0x80
 8004de2:	025b      	lsls	r3, r3, #9
 8004de4:	4013      	ands	r3, r2
 8004de6:	d00b      	beq.n	8004e00 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	2208      	movs	r2, #8
 8004dec:	4013      	ands	r3, r2
 8004dee:	d007      	beq.n	8004e00 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2208      	movs	r2, #8
 8004df6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	f000 f8c4 	bl	8004f88 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004e00:	6a3a      	ldr	r2, [r7, #32]
 8004e02:	2380      	movs	r3, #128	; 0x80
 8004e04:	021b      	lsls	r3, r3, #8
 8004e06:	4013      	ands	r3, r2
 8004e08:	d100      	bne.n	8004e0c <HAL_CAN_IRQHandler+0x25c>
 8004e0a:	e074      	b.n	8004ef6 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	2204      	movs	r2, #4
 8004e10:	4013      	ands	r3, r2
 8004e12:	d100      	bne.n	8004e16 <HAL_CAN_IRQHandler+0x266>
 8004e14:	e06b      	b.n	8004eee <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004e16:	6a3a      	ldr	r2, [r7, #32]
 8004e18:	2380      	movs	r3, #128	; 0x80
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	d007      	beq.n	8004e30 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2201      	movs	r2, #1
 8004e24:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004e26:	d003      	beq.n	8004e30 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004e30:	6a3a      	ldr	r2, [r7, #32]
 8004e32:	2380      	movs	r3, #128	; 0x80
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4013      	ands	r3, r2
 8004e38:	d007      	beq.n	8004e4a <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004e40:	d003      	beq.n	8004e4a <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	2202      	movs	r2, #2
 8004e46:	4313      	orrs	r3, r2
 8004e48:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004e4a:	6a3a      	ldr	r2, [r7, #32]
 8004e4c:	2380      	movs	r3, #128	; 0x80
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	4013      	ands	r3, r2
 8004e52:	d007      	beq.n	8004e64 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2204      	movs	r2, #4
 8004e58:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004e5a:	d003      	beq.n	8004e64 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	2204      	movs	r2, #4
 8004e60:	4313      	orrs	r3, r2
 8004e62:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004e64:	6a3a      	ldr	r2, [r7, #32]
 8004e66:	2380      	movs	r3, #128	; 0x80
 8004e68:	011b      	lsls	r3, r3, #4
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	d03f      	beq.n	8004eee <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2270      	movs	r2, #112	; 0x70
 8004e72:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004e74:	d03b      	beq.n	8004eee <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2270      	movs	r2, #112	; 0x70
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	2b60      	cmp	r3, #96	; 0x60
 8004e7e:	d027      	beq.n	8004ed0 <HAL_CAN_IRQHandler+0x320>
 8004e80:	d82c      	bhi.n	8004edc <HAL_CAN_IRQHandler+0x32c>
 8004e82:	2b50      	cmp	r3, #80	; 0x50
 8004e84:	d01f      	beq.n	8004ec6 <HAL_CAN_IRQHandler+0x316>
 8004e86:	d829      	bhi.n	8004edc <HAL_CAN_IRQHandler+0x32c>
 8004e88:	2b40      	cmp	r3, #64	; 0x40
 8004e8a:	d017      	beq.n	8004ebc <HAL_CAN_IRQHandler+0x30c>
 8004e8c:	d826      	bhi.n	8004edc <HAL_CAN_IRQHandler+0x32c>
 8004e8e:	2b30      	cmp	r3, #48	; 0x30
 8004e90:	d00f      	beq.n	8004eb2 <HAL_CAN_IRQHandler+0x302>
 8004e92:	d823      	bhi.n	8004edc <HAL_CAN_IRQHandler+0x32c>
 8004e94:	2b10      	cmp	r3, #16
 8004e96:	d002      	beq.n	8004e9e <HAL_CAN_IRQHandler+0x2ee>
 8004e98:	2b20      	cmp	r3, #32
 8004e9a:	d005      	beq.n	8004ea8 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004e9c:	e01e      	b.n	8004edc <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea0:	2208      	movs	r2, #8
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ea6:	e01a      	b.n	8004ede <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	2210      	movs	r2, #16
 8004eac:	4313      	orrs	r3, r2
 8004eae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004eb0:	e015      	b.n	8004ede <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004eba:	e010      	b.n	8004ede <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	2240      	movs	r2, #64	; 0x40
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ec4:	e00b      	b.n	8004ede <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	2280      	movs	r2, #128	; 0x80
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ece:	e006      	b.n	8004ede <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	2280      	movs	r2, #128	; 0x80
 8004ed4:	0052      	lsls	r2, r2, #1
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004eda:	e000      	b.n	8004ede <HAL_CAN_IRQHandler+0x32e>
            break;
 8004edc:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	699a      	ldr	r2, [r3, #24]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2170      	movs	r1, #112	; 0x70
 8004eea:	438a      	bics	r2, r1
 8004eec:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2204      	movs	r2, #4
 8004ef4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d009      	beq.n	8004f10 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	0018      	movs	r0, r3
 8004f0c:	f000 f844 	bl	8004f98 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004f10:	46c0      	nop			; (mov r8, r8)
 8004f12:	46bd      	mov	sp, r7
 8004f14:	b00a      	add	sp, #40	; 0x28
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004f20:	46c0      	nop			; (mov r8, r8)
 8004f22:	46bd      	mov	sp, r7
 8004f24:	b002      	add	sp, #8
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004f30:	46c0      	nop			; (mov r8, r8)
 8004f32:	46bd      	mov	sp, r7
 8004f34:	b002      	add	sp, #8
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004f40:	46c0      	nop			; (mov r8, r8)
 8004f42:	46bd      	mov	sp, r7
 8004f44:	b002      	add	sp, #8
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004f50:	46c0      	nop			; (mov r8, r8)
 8004f52:	46bd      	mov	sp, r7
 8004f54:	b002      	add	sp, #8
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004f60:	46c0      	nop			; (mov r8, r8)
 8004f62:	46bd      	mov	sp, r7
 8004f64:	b002      	add	sp, #8
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004f70:	46c0      	nop			; (mov r8, r8)
 8004f72:	46bd      	mov	sp, r7
 8004f74:	b002      	add	sp, #8
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004f80:	46c0      	nop			; (mov r8, r8)
 8004f82:	46bd      	mov	sp, r7
 8004f84:	b002      	add	sp, #8
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004f90:	46c0      	nop			; (mov r8, r8)
 8004f92:	46bd      	mov	sp, r7
 8004f94:	b002      	add	sp, #8
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004fa0:	46c0      	nop			; (mov r8, r8)
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	b002      	add	sp, #8
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	0002      	movs	r2, r0
 8004fb0:	1dfb      	adds	r3, r7, #7
 8004fb2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004fb4:	1dfb      	adds	r3, r7, #7
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2b7f      	cmp	r3, #127	; 0x7f
 8004fba:	d809      	bhi.n	8004fd0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fbc:	1dfb      	adds	r3, r7, #7
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	001a      	movs	r2, r3
 8004fc2:	231f      	movs	r3, #31
 8004fc4:	401a      	ands	r2, r3
 8004fc6:	4b04      	ldr	r3, [pc, #16]	; (8004fd8 <__NVIC_EnableIRQ+0x30>)
 8004fc8:	2101      	movs	r1, #1
 8004fca:	4091      	lsls	r1, r2
 8004fcc:	000a      	movs	r2, r1
 8004fce:	601a      	str	r2, [r3, #0]
  }
}
 8004fd0:	46c0      	nop			; (mov r8, r8)
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	b002      	add	sp, #8
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	e000e100 	.word	0xe000e100

08004fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fdc:	b590      	push	{r4, r7, lr}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	0002      	movs	r2, r0
 8004fe4:	6039      	str	r1, [r7, #0]
 8004fe6:	1dfb      	adds	r3, r7, #7
 8004fe8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004fea:	1dfb      	adds	r3, r7, #7
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	2b7f      	cmp	r3, #127	; 0x7f
 8004ff0:	d828      	bhi.n	8005044 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ff2:	4a2f      	ldr	r2, [pc, #188]	; (80050b0 <__NVIC_SetPriority+0xd4>)
 8004ff4:	1dfb      	adds	r3, r7, #7
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	b25b      	sxtb	r3, r3
 8004ffa:	089b      	lsrs	r3, r3, #2
 8004ffc:	33c0      	adds	r3, #192	; 0xc0
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	589b      	ldr	r3, [r3, r2]
 8005002:	1dfa      	adds	r2, r7, #7
 8005004:	7812      	ldrb	r2, [r2, #0]
 8005006:	0011      	movs	r1, r2
 8005008:	2203      	movs	r2, #3
 800500a:	400a      	ands	r2, r1
 800500c:	00d2      	lsls	r2, r2, #3
 800500e:	21ff      	movs	r1, #255	; 0xff
 8005010:	4091      	lsls	r1, r2
 8005012:	000a      	movs	r2, r1
 8005014:	43d2      	mvns	r2, r2
 8005016:	401a      	ands	r2, r3
 8005018:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	019b      	lsls	r3, r3, #6
 800501e:	22ff      	movs	r2, #255	; 0xff
 8005020:	401a      	ands	r2, r3
 8005022:	1dfb      	adds	r3, r7, #7
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	0018      	movs	r0, r3
 8005028:	2303      	movs	r3, #3
 800502a:	4003      	ands	r3, r0
 800502c:	00db      	lsls	r3, r3, #3
 800502e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005030:	481f      	ldr	r0, [pc, #124]	; (80050b0 <__NVIC_SetPriority+0xd4>)
 8005032:	1dfb      	adds	r3, r7, #7
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	b25b      	sxtb	r3, r3
 8005038:	089b      	lsrs	r3, r3, #2
 800503a:	430a      	orrs	r2, r1
 800503c:	33c0      	adds	r3, #192	; 0xc0
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005042:	e031      	b.n	80050a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005044:	4a1b      	ldr	r2, [pc, #108]	; (80050b4 <__NVIC_SetPriority+0xd8>)
 8005046:	1dfb      	adds	r3, r7, #7
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	0019      	movs	r1, r3
 800504c:	230f      	movs	r3, #15
 800504e:	400b      	ands	r3, r1
 8005050:	3b08      	subs	r3, #8
 8005052:	089b      	lsrs	r3, r3, #2
 8005054:	3306      	adds	r3, #6
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	18d3      	adds	r3, r2, r3
 800505a:	3304      	adds	r3, #4
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	1dfa      	adds	r2, r7, #7
 8005060:	7812      	ldrb	r2, [r2, #0]
 8005062:	0011      	movs	r1, r2
 8005064:	2203      	movs	r2, #3
 8005066:	400a      	ands	r2, r1
 8005068:	00d2      	lsls	r2, r2, #3
 800506a:	21ff      	movs	r1, #255	; 0xff
 800506c:	4091      	lsls	r1, r2
 800506e:	000a      	movs	r2, r1
 8005070:	43d2      	mvns	r2, r2
 8005072:	401a      	ands	r2, r3
 8005074:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	019b      	lsls	r3, r3, #6
 800507a:	22ff      	movs	r2, #255	; 0xff
 800507c:	401a      	ands	r2, r3
 800507e:	1dfb      	adds	r3, r7, #7
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	0018      	movs	r0, r3
 8005084:	2303      	movs	r3, #3
 8005086:	4003      	ands	r3, r0
 8005088:	00db      	lsls	r3, r3, #3
 800508a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800508c:	4809      	ldr	r0, [pc, #36]	; (80050b4 <__NVIC_SetPriority+0xd8>)
 800508e:	1dfb      	adds	r3, r7, #7
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	001c      	movs	r4, r3
 8005094:	230f      	movs	r3, #15
 8005096:	4023      	ands	r3, r4
 8005098:	3b08      	subs	r3, #8
 800509a:	089b      	lsrs	r3, r3, #2
 800509c:	430a      	orrs	r2, r1
 800509e:	3306      	adds	r3, #6
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	18c3      	adds	r3, r0, r3
 80050a4:	3304      	adds	r3, #4
 80050a6:	601a      	str	r2, [r3, #0]
}
 80050a8:	46c0      	nop			; (mov r8, r8)
 80050aa:	46bd      	mov	sp, r7
 80050ac:	b003      	add	sp, #12
 80050ae:	bd90      	pop	{r4, r7, pc}
 80050b0:	e000e100 	.word	0xe000e100
 80050b4:	e000ed00 	.word	0xe000ed00

080050b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	1e5a      	subs	r2, r3, #1
 80050c4:	2380      	movs	r3, #128	; 0x80
 80050c6:	045b      	lsls	r3, r3, #17
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d301      	bcc.n	80050d0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050cc:	2301      	movs	r3, #1
 80050ce:	e010      	b.n	80050f2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050d0:	4b0a      	ldr	r3, [pc, #40]	; (80050fc <SysTick_Config+0x44>)
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	3a01      	subs	r2, #1
 80050d6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050d8:	2301      	movs	r3, #1
 80050da:	425b      	negs	r3, r3
 80050dc:	2103      	movs	r1, #3
 80050de:	0018      	movs	r0, r3
 80050e0:	f7ff ff7c 	bl	8004fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050e4:	4b05      	ldr	r3, [pc, #20]	; (80050fc <SysTick_Config+0x44>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050ea:	4b04      	ldr	r3, [pc, #16]	; (80050fc <SysTick_Config+0x44>)
 80050ec:	2207      	movs	r2, #7
 80050ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	0018      	movs	r0, r3
 80050f4:	46bd      	mov	sp, r7
 80050f6:	b002      	add	sp, #8
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	46c0      	nop			; (mov r8, r8)
 80050fc:	e000e010 	.word	0xe000e010

08005100 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	60b9      	str	r1, [r7, #8]
 8005108:	607a      	str	r2, [r7, #4]
 800510a:	210f      	movs	r1, #15
 800510c:	187b      	adds	r3, r7, r1
 800510e:	1c02      	adds	r2, r0, #0
 8005110:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	187b      	adds	r3, r7, r1
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	b25b      	sxtb	r3, r3
 800511a:	0011      	movs	r1, r2
 800511c:	0018      	movs	r0, r3
 800511e:	f7ff ff5d 	bl	8004fdc <__NVIC_SetPriority>
}
 8005122:	46c0      	nop			; (mov r8, r8)
 8005124:	46bd      	mov	sp, r7
 8005126:	b004      	add	sp, #16
 8005128:	bd80      	pop	{r7, pc}

0800512a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b082      	sub	sp, #8
 800512e:	af00      	add	r7, sp, #0
 8005130:	0002      	movs	r2, r0
 8005132:	1dfb      	adds	r3, r7, #7
 8005134:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005136:	1dfb      	adds	r3, r7, #7
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	b25b      	sxtb	r3, r3
 800513c:	0018      	movs	r0, r3
 800513e:	f7ff ff33 	bl	8004fa8 <__NVIC_EnableIRQ>
}
 8005142:	46c0      	nop			; (mov r8, r8)
 8005144:	46bd      	mov	sp, r7
 8005146:	b002      	add	sp, #8
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b082      	sub	sp, #8
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	0018      	movs	r0, r3
 8005156:	f7ff ffaf 	bl	80050b8 <SysTick_Config>
 800515a:	0003      	movs	r3, r0
}
 800515c:	0018      	movs	r0, r3
 800515e:	46bd      	mov	sp, r7
 8005160:	b002      	add	sp, #8
 8005162:	bd80      	pop	{r7, pc}

08005164 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800516c:	2300      	movs	r3, #0
 800516e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e036      	b.n	80051e8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2221      	movs	r2, #33	; 0x21
 800517e:	2102      	movs	r1, #2
 8005180:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4a18      	ldr	r2, [pc, #96]	; (80051f0 <HAL_DMA_Init+0x8c>)
 800518e:	4013      	ands	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800519a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	69db      	ldr	r3, [r3, #28]
 80051b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4313      	orrs	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	0018      	movs	r0, r3
 80051cc:	f000 f98c 	bl	80054e8 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2221      	movs	r2, #33	; 0x21
 80051da:	2101      	movs	r1, #1
 80051dc:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2220      	movs	r2, #32
 80051e2:	2100      	movs	r1, #0
 80051e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	0018      	movs	r0, r3
 80051ea:	46bd      	mov	sp, r7
 80051ec:	b004      	add	sp, #16
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	ffffc00f 	.word	0xffffc00f

080051f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005202:	2317      	movs	r3, #23
 8005204:	18fb      	adds	r3, r7, r3
 8005206:	2200      	movs	r2, #0
 8005208:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2220      	movs	r2, #32
 800520e:	5c9b      	ldrb	r3, [r3, r2]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d101      	bne.n	8005218 <HAL_DMA_Start_IT+0x24>
 8005214:	2302      	movs	r3, #2
 8005216:	e04f      	b.n	80052b8 <HAL_DMA_Start_IT+0xc4>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2220      	movs	r2, #32
 800521c:	2101      	movs	r1, #1
 800521e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2221      	movs	r2, #33	; 0x21
 8005224:	5c9b      	ldrb	r3, [r3, r2]
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b01      	cmp	r3, #1
 800522a:	d13a      	bne.n	80052a2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2221      	movs	r2, #33	; 0x21
 8005230:	2102      	movs	r1, #2
 8005232:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2101      	movs	r1, #1
 8005246:	438a      	bics	r2, r1
 8005248:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	68b9      	ldr	r1, [r7, #8]
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 f91c 	bl	800548e <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525a:	2b00      	cmp	r3, #0
 800525c:	d008      	beq.n	8005270 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	210e      	movs	r1, #14
 800526a:	430a      	orrs	r2, r1
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	e00f      	b.n	8005290 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	210a      	movs	r1, #10
 800527c:	430a      	orrs	r2, r1
 800527e:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2104      	movs	r1, #4
 800528c:	438a      	bics	r2, r1
 800528e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2101      	movs	r1, #1
 800529c:	430a      	orrs	r2, r1
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	e007      	b.n	80052b2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2220      	movs	r2, #32
 80052a6:	2100      	movs	r1, #0
 80052a8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80052aa:	2317      	movs	r3, #23
 80052ac:	18fb      	adds	r3, r7, r3
 80052ae:	2202      	movs	r2, #2
 80052b0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80052b2:	2317      	movs	r3, #23
 80052b4:	18fb      	adds	r3, r7, r3
 80052b6:	781b      	ldrb	r3, [r3, #0]
}
 80052b8:	0018      	movs	r0, r3
 80052ba:	46bd      	mov	sp, r7
 80052bc:	b006      	add	sp, #24
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052c8:	210f      	movs	r1, #15
 80052ca:	187b      	adds	r3, r7, r1
 80052cc:	2200      	movs	r2, #0
 80052ce:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2221      	movs	r2, #33	; 0x21
 80052d4:	5c9b      	ldrb	r3, [r3, r2]
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d006      	beq.n	80052ea <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2204      	movs	r2, #4
 80052e0:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80052e2:	187b      	adds	r3, r7, r1
 80052e4:	2201      	movs	r2, #1
 80052e6:	701a      	strb	r2, [r3, #0]
 80052e8:	e028      	b.n	800533c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	210e      	movs	r1, #14
 80052f6:	438a      	bics	r2, r1
 80052f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2101      	movs	r1, #1
 8005306:	438a      	bics	r2, r1
 8005308:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005312:	2101      	movs	r1, #1
 8005314:	4091      	lsls	r1, r2
 8005316:	000a      	movs	r2, r1
 8005318:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2221      	movs	r2, #33	; 0x21
 800531e:	2101      	movs	r1, #1
 8005320:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2220      	movs	r2, #32
 8005326:	2100      	movs	r1, #0
 8005328:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532e:	2b00      	cmp	r3, #0
 8005330:	d004      	beq.n	800533c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	0010      	movs	r0, r2
 800533a:	4798      	blx	r3
    }
  }
  return status;
 800533c:	230f      	movs	r3, #15
 800533e:	18fb      	adds	r3, r7, r3
 8005340:	781b      	ldrb	r3, [r3, #0]
}
 8005342:	0018      	movs	r0, r3
 8005344:	46bd      	mov	sp, r7
 8005346:	b004      	add	sp, #16
 8005348:	bd80      	pop	{r7, pc}

0800534a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b084      	sub	sp, #16
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005366:	2204      	movs	r2, #4
 8005368:	409a      	lsls	r2, r3
 800536a:	0013      	movs	r3, r2
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4013      	ands	r3, r2
 8005370:	d024      	beq.n	80053bc <HAL_DMA_IRQHandler+0x72>
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	2204      	movs	r2, #4
 8005376:	4013      	ands	r3, r2
 8005378:	d020      	beq.n	80053bc <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2220      	movs	r2, #32
 8005382:	4013      	ands	r3, r2
 8005384:	d107      	bne.n	8005396 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2104      	movs	r1, #4
 8005392:	438a      	bics	r2, r1
 8005394:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800539e:	2104      	movs	r1, #4
 80053a0:	4091      	lsls	r1, r2
 80053a2:	000a      	movs	r2, r1
 80053a4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d100      	bne.n	80053b0 <HAL_DMA_IRQHandler+0x66>
 80053ae:	e06a      	b.n	8005486 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	0010      	movs	r0, r2
 80053b8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80053ba:	e064      	b.n	8005486 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c0:	2202      	movs	r2, #2
 80053c2:	409a      	lsls	r2, r3
 80053c4:	0013      	movs	r3, r2
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	4013      	ands	r3, r2
 80053ca:	d02b      	beq.n	8005424 <HAL_DMA_IRQHandler+0xda>
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	2202      	movs	r2, #2
 80053d0:	4013      	ands	r3, r2
 80053d2:	d027      	beq.n	8005424 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2220      	movs	r2, #32
 80053dc:	4013      	ands	r3, r2
 80053de:	d10b      	bne.n	80053f8 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	210a      	movs	r1, #10
 80053ec:	438a      	bics	r2, r1
 80053ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2221      	movs	r2, #33	; 0x21
 80053f4:	2101      	movs	r1, #1
 80053f6:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005400:	2102      	movs	r1, #2
 8005402:	4091      	lsls	r1, r2
 8005404:	000a      	movs	r2, r1
 8005406:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2220      	movs	r2, #32
 800540c:	2100      	movs	r1, #0
 800540e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005414:	2b00      	cmp	r3, #0
 8005416:	d036      	beq.n	8005486 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	0010      	movs	r0, r2
 8005420:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005422:	e030      	b.n	8005486 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	2208      	movs	r2, #8
 800542a:	409a      	lsls	r2, r3
 800542c:	0013      	movs	r3, r2
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	4013      	ands	r3, r2
 8005432:	d028      	beq.n	8005486 <HAL_DMA_IRQHandler+0x13c>
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	2208      	movs	r2, #8
 8005438:	4013      	ands	r3, r2
 800543a:	d024      	beq.n	8005486 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	210e      	movs	r1, #14
 8005448:	438a      	bics	r2, r1
 800544a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005454:	2101      	movs	r1, #1
 8005456:	4091      	lsls	r1, r2
 8005458:	000a      	movs	r2, r1
 800545a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2221      	movs	r2, #33	; 0x21
 8005466:	2101      	movs	r1, #1
 8005468:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2220      	movs	r2, #32
 800546e:	2100      	movs	r1, #0
 8005470:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005476:	2b00      	cmp	r3, #0
 8005478:	d005      	beq.n	8005486 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	0010      	movs	r0, r2
 8005482:	4798      	blx	r3
    }
  }
}
 8005484:	e7ff      	b.n	8005486 <HAL_DMA_IRQHandler+0x13c>
 8005486:	46c0      	nop			; (mov r8, r8)
 8005488:	46bd      	mov	sp, r7
 800548a:	b004      	add	sp, #16
 800548c:	bd80      	pop	{r7, pc}

0800548e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b084      	sub	sp, #16
 8005492:	af00      	add	r7, sp, #0
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	60b9      	str	r1, [r7, #8]
 8005498:	607a      	str	r2, [r7, #4]
 800549a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a4:	2101      	movs	r1, #1
 80054a6:	4091      	lsls	r1, r2
 80054a8:	000a      	movs	r2, r1
 80054aa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	2b10      	cmp	r3, #16
 80054ba:	d108      	bne.n	80054ce <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80054cc:	e007      	b.n	80054de <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	60da      	str	r2, [r3, #12]
}
 80054de:	46c0      	nop			; (mov r8, r8)
 80054e0:	46bd      	mov	sp, r7
 80054e2:	b004      	add	sp, #16
 80054e4:	bd80      	pop	{r7, pc}
	...

080054e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a08      	ldr	r2, [pc, #32]	; (8005518 <DMA_CalcBaseAndBitshift+0x30>)
 80054f6:	4694      	mov	ip, r2
 80054f8:	4463      	add	r3, ip
 80054fa:	2114      	movs	r1, #20
 80054fc:	0018      	movs	r0, r3
 80054fe:	f7fa fe15 	bl	800012c <__udivsi3>
 8005502:	0003      	movs	r3, r0
 8005504:	009a      	lsls	r2, r3, #2
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a03      	ldr	r2, [pc, #12]	; (800551c <DMA_CalcBaseAndBitshift+0x34>)
 800550e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8005510:	46c0      	nop			; (mov r8, r8)
 8005512:	46bd      	mov	sp, r7
 8005514:	b002      	add	sp, #8
 8005516:	bd80      	pop	{r7, pc}
 8005518:	bffdfff8 	.word	0xbffdfff8
 800551c:	40020000 	.word	0x40020000

08005520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800552a:	2300      	movs	r3, #0
 800552c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800552e:	e155      	b.n	80057dc <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2101      	movs	r1, #1
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	4091      	lsls	r1, r2
 800553a:	000a      	movs	r2, r1
 800553c:	4013      	ands	r3, r2
 800553e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d100      	bne.n	8005548 <HAL_GPIO_Init+0x28>
 8005546:	e146      	b.n	80057d6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	2203      	movs	r2, #3
 800554e:	4013      	ands	r3, r2
 8005550:	2b01      	cmp	r3, #1
 8005552:	d005      	beq.n	8005560 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	2203      	movs	r2, #3
 800555a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800555c:	2b02      	cmp	r3, #2
 800555e:	d130      	bne.n	80055c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	2203      	movs	r2, #3
 800556c:	409a      	lsls	r2, r3
 800556e:	0013      	movs	r3, r2
 8005570:	43da      	mvns	r2, r3
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	4013      	ands	r3, r2
 8005576:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	68da      	ldr	r2, [r3, #12]
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	409a      	lsls	r2, r3
 8005582:	0013      	movs	r3, r2
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	4313      	orrs	r3, r2
 8005588:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005596:	2201      	movs	r2, #1
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	409a      	lsls	r2, r3
 800559c:	0013      	movs	r3, r2
 800559e:	43da      	mvns	r2, r3
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	4013      	ands	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	091b      	lsrs	r3, r3, #4
 80055ac:	2201      	movs	r2, #1
 80055ae:	401a      	ands	r2, r3
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	409a      	lsls	r2, r3
 80055b4:	0013      	movs	r3, r2
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2203      	movs	r2, #3
 80055c8:	4013      	ands	r3, r2
 80055ca:	2b03      	cmp	r3, #3
 80055cc:	d017      	beq.n	80055fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	005b      	lsls	r3, r3, #1
 80055d8:	2203      	movs	r2, #3
 80055da:	409a      	lsls	r2, r3
 80055dc:	0013      	movs	r3, r2
 80055de:	43da      	mvns	r2, r3
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	4013      	ands	r3, r2
 80055e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	689a      	ldr	r2, [r3, #8]
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	005b      	lsls	r3, r3, #1
 80055ee:	409a      	lsls	r2, r3
 80055f0:	0013      	movs	r3, r2
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	2203      	movs	r2, #3
 8005604:	4013      	ands	r3, r2
 8005606:	2b02      	cmp	r3, #2
 8005608:	d123      	bne.n	8005652 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	08da      	lsrs	r2, r3, #3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	3208      	adds	r2, #8
 8005612:	0092      	lsls	r2, r2, #2
 8005614:	58d3      	ldr	r3, [r2, r3]
 8005616:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2207      	movs	r2, #7
 800561c:	4013      	ands	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	220f      	movs	r2, #15
 8005622:	409a      	lsls	r2, r3
 8005624:	0013      	movs	r3, r2
 8005626:	43da      	mvns	r2, r3
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	4013      	ands	r3, r2
 800562c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	691a      	ldr	r2, [r3, #16]
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	2107      	movs	r1, #7
 8005636:	400b      	ands	r3, r1
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	409a      	lsls	r2, r3
 800563c:	0013      	movs	r3, r2
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	4313      	orrs	r3, r2
 8005642:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	08da      	lsrs	r2, r3, #3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3208      	adds	r2, #8
 800564c:	0092      	lsls	r2, r2, #2
 800564e:	6939      	ldr	r1, [r7, #16]
 8005650:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	2203      	movs	r2, #3
 800565e:	409a      	lsls	r2, r3
 8005660:	0013      	movs	r3, r2
 8005662:	43da      	mvns	r2, r3
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	4013      	ands	r3, r2
 8005668:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2203      	movs	r2, #3
 8005670:	401a      	ands	r2, r3
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	005b      	lsls	r3, r3, #1
 8005676:	409a      	lsls	r2, r3
 8005678:	0013      	movs	r3, r2
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	4313      	orrs	r3, r2
 800567e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	23c0      	movs	r3, #192	; 0xc0
 800568c:	029b      	lsls	r3, r3, #10
 800568e:	4013      	ands	r3, r2
 8005690:	d100      	bne.n	8005694 <HAL_GPIO_Init+0x174>
 8005692:	e0a0      	b.n	80057d6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005694:	4b57      	ldr	r3, [pc, #348]	; (80057f4 <HAL_GPIO_Init+0x2d4>)
 8005696:	699a      	ldr	r2, [r3, #24]
 8005698:	4b56      	ldr	r3, [pc, #344]	; (80057f4 <HAL_GPIO_Init+0x2d4>)
 800569a:	2101      	movs	r1, #1
 800569c:	430a      	orrs	r2, r1
 800569e:	619a      	str	r2, [r3, #24]
 80056a0:	4b54      	ldr	r3, [pc, #336]	; (80057f4 <HAL_GPIO_Init+0x2d4>)
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	2201      	movs	r2, #1
 80056a6:	4013      	ands	r3, r2
 80056a8:	60bb      	str	r3, [r7, #8]
 80056aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80056ac:	4a52      	ldr	r2, [pc, #328]	; (80057f8 <HAL_GPIO_Init+0x2d8>)
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	089b      	lsrs	r3, r3, #2
 80056b2:	3302      	adds	r3, #2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	589b      	ldr	r3, [r3, r2]
 80056b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2203      	movs	r2, #3
 80056be:	4013      	ands	r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	220f      	movs	r2, #15
 80056c4:	409a      	lsls	r2, r3
 80056c6:	0013      	movs	r3, r2
 80056c8:	43da      	mvns	r2, r3
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	4013      	ands	r3, r2
 80056ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	2390      	movs	r3, #144	; 0x90
 80056d4:	05db      	lsls	r3, r3, #23
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d019      	beq.n	800570e <HAL_GPIO_Init+0x1ee>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a47      	ldr	r2, [pc, #284]	; (80057fc <HAL_GPIO_Init+0x2dc>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d013      	beq.n	800570a <HAL_GPIO_Init+0x1ea>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a46      	ldr	r2, [pc, #280]	; (8005800 <HAL_GPIO_Init+0x2e0>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d00d      	beq.n	8005706 <HAL_GPIO_Init+0x1e6>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a45      	ldr	r2, [pc, #276]	; (8005804 <HAL_GPIO_Init+0x2e4>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d007      	beq.n	8005702 <HAL_GPIO_Init+0x1e2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a44      	ldr	r2, [pc, #272]	; (8005808 <HAL_GPIO_Init+0x2e8>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d101      	bne.n	80056fe <HAL_GPIO_Init+0x1de>
 80056fa:	2304      	movs	r3, #4
 80056fc:	e008      	b.n	8005710 <HAL_GPIO_Init+0x1f0>
 80056fe:	2305      	movs	r3, #5
 8005700:	e006      	b.n	8005710 <HAL_GPIO_Init+0x1f0>
 8005702:	2303      	movs	r3, #3
 8005704:	e004      	b.n	8005710 <HAL_GPIO_Init+0x1f0>
 8005706:	2302      	movs	r3, #2
 8005708:	e002      	b.n	8005710 <HAL_GPIO_Init+0x1f0>
 800570a:	2301      	movs	r3, #1
 800570c:	e000      	b.n	8005710 <HAL_GPIO_Init+0x1f0>
 800570e:	2300      	movs	r3, #0
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	2103      	movs	r1, #3
 8005714:	400a      	ands	r2, r1
 8005716:	0092      	lsls	r2, r2, #2
 8005718:	4093      	lsls	r3, r2
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	4313      	orrs	r3, r2
 800571e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005720:	4935      	ldr	r1, [pc, #212]	; (80057f8 <HAL_GPIO_Init+0x2d8>)
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	089b      	lsrs	r3, r3, #2
 8005726:	3302      	adds	r3, #2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800572e:	4b37      	ldr	r3, [pc, #220]	; (800580c <HAL_GPIO_Init+0x2ec>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	43da      	mvns	r2, r3
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	4013      	ands	r3, r2
 800573c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	2380      	movs	r3, #128	; 0x80
 8005744:	035b      	lsls	r3, r3, #13
 8005746:	4013      	ands	r3, r2
 8005748:	d003      	beq.n	8005752 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4313      	orrs	r3, r2
 8005750:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005752:	4b2e      	ldr	r3, [pc, #184]	; (800580c <HAL_GPIO_Init+0x2ec>)
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005758:	4b2c      	ldr	r3, [pc, #176]	; (800580c <HAL_GPIO_Init+0x2ec>)
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	43da      	mvns	r2, r3
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	4013      	ands	r3, r2
 8005766:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	2380      	movs	r3, #128	; 0x80
 800576e:	039b      	lsls	r3, r3, #14
 8005770:	4013      	ands	r3, r2
 8005772:	d003      	beq.n	800577c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	4313      	orrs	r3, r2
 800577a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800577c:	4b23      	ldr	r3, [pc, #140]	; (800580c <HAL_GPIO_Init+0x2ec>)
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8005782:	4b22      	ldr	r3, [pc, #136]	; (800580c <HAL_GPIO_Init+0x2ec>)
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	43da      	mvns	r2, r3
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	4013      	ands	r3, r2
 8005790:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	2380      	movs	r3, #128	; 0x80
 8005798:	029b      	lsls	r3, r3, #10
 800579a:	4013      	ands	r3, r2
 800579c:	d003      	beq.n	80057a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80057a6:	4b19      	ldr	r3, [pc, #100]	; (800580c <HAL_GPIO_Init+0x2ec>)
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80057ac:	4b17      	ldr	r3, [pc, #92]	; (800580c <HAL_GPIO_Init+0x2ec>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	43da      	mvns	r2, r3
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	4013      	ands	r3, r2
 80057ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	2380      	movs	r3, #128	; 0x80
 80057c2:	025b      	lsls	r3, r3, #9
 80057c4:	4013      	ands	r3, r2
 80057c6:	d003      	beq.n	80057d0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80057d0:	4b0e      	ldr	r3, [pc, #56]	; (800580c <HAL_GPIO_Init+0x2ec>)
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	3301      	adds	r3, #1
 80057da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	40da      	lsrs	r2, r3
 80057e4:	1e13      	subs	r3, r2, #0
 80057e6:	d000      	beq.n	80057ea <HAL_GPIO_Init+0x2ca>
 80057e8:	e6a2      	b.n	8005530 <HAL_GPIO_Init+0x10>
  } 
}
 80057ea:	46c0      	nop			; (mov r8, r8)
 80057ec:	46c0      	nop			; (mov r8, r8)
 80057ee:	46bd      	mov	sp, r7
 80057f0:	b006      	add	sp, #24
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	40021000 	.word	0x40021000
 80057f8:	40010000 	.word	0x40010000
 80057fc:	48000400 	.word	0x48000400
 8005800:	48000800 	.word	0x48000800
 8005804:	48000c00 	.word	0x48000c00
 8005808:	48001000 	.word	0x48001000
 800580c:	40010400 	.word	0x40010400

08005810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	0008      	movs	r0, r1
 800581a:	0011      	movs	r1, r2
 800581c:	1cbb      	adds	r3, r7, #2
 800581e:	1c02      	adds	r2, r0, #0
 8005820:	801a      	strh	r2, [r3, #0]
 8005822:	1c7b      	adds	r3, r7, #1
 8005824:	1c0a      	adds	r2, r1, #0
 8005826:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005828:	1c7b      	adds	r3, r7, #1
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d004      	beq.n	800583a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005830:	1cbb      	adds	r3, r7, #2
 8005832:	881a      	ldrh	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005838:	e003      	b.n	8005842 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800583a:	1cbb      	adds	r3, r7, #2
 800583c:	881a      	ldrh	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005842:	46c0      	nop			; (mov r8, r8)
 8005844:	46bd      	mov	sp, r7
 8005846:	b002      	add	sp, #8
 8005848:	bd80      	pop	{r7, pc}

0800584a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b084      	sub	sp, #16
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	000a      	movs	r2, r1
 8005854:	1cbb      	adds	r3, r7, #2
 8005856:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800585e:	1cbb      	adds	r3, r7, #2
 8005860:	881b      	ldrh	r3, [r3, #0]
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	4013      	ands	r3, r2
 8005866:	041a      	lsls	r2, r3, #16
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	43db      	mvns	r3, r3
 800586c:	1cb9      	adds	r1, r7, #2
 800586e:	8809      	ldrh	r1, [r1, #0]
 8005870:	400b      	ands	r3, r1
 8005872:	431a      	orrs	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	619a      	str	r2, [r3, #24]
}
 8005878:	46c0      	nop			; (mov r8, r8)
 800587a:	46bd      	mov	sp, r7
 800587c:	b004      	add	sp, #16
 800587e:	bd80      	pop	{r7, pc}

08005880 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b088      	sub	sp, #32
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d102      	bne.n	8005894 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	f000 fb76 	bl	8005f80 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2201      	movs	r2, #1
 800589a:	4013      	ands	r3, r2
 800589c:	d100      	bne.n	80058a0 <HAL_RCC_OscConfig+0x20>
 800589e:	e08e      	b.n	80059be <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80058a0:	4bc5      	ldr	r3, [pc, #788]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	220c      	movs	r2, #12
 80058a6:	4013      	ands	r3, r2
 80058a8:	2b04      	cmp	r3, #4
 80058aa:	d00e      	beq.n	80058ca <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80058ac:	4bc2      	ldr	r3, [pc, #776]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	220c      	movs	r2, #12
 80058b2:	4013      	ands	r3, r2
 80058b4:	2b08      	cmp	r3, #8
 80058b6:	d117      	bne.n	80058e8 <HAL_RCC_OscConfig+0x68>
 80058b8:	4bbf      	ldr	r3, [pc, #764]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 80058ba:	685a      	ldr	r2, [r3, #4]
 80058bc:	23c0      	movs	r3, #192	; 0xc0
 80058be:	025b      	lsls	r3, r3, #9
 80058c0:	401a      	ands	r2, r3
 80058c2:	2380      	movs	r3, #128	; 0x80
 80058c4:	025b      	lsls	r3, r3, #9
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d10e      	bne.n	80058e8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058ca:	4bbb      	ldr	r3, [pc, #748]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	2380      	movs	r3, #128	; 0x80
 80058d0:	029b      	lsls	r3, r3, #10
 80058d2:	4013      	ands	r3, r2
 80058d4:	d100      	bne.n	80058d8 <HAL_RCC_OscConfig+0x58>
 80058d6:	e071      	b.n	80059bc <HAL_RCC_OscConfig+0x13c>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d000      	beq.n	80058e2 <HAL_RCC_OscConfig+0x62>
 80058e0:	e06c      	b.n	80059bc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	f000 fb4c 	bl	8005f80 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d107      	bne.n	8005900 <HAL_RCC_OscConfig+0x80>
 80058f0:	4bb1      	ldr	r3, [pc, #708]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	4bb0      	ldr	r3, [pc, #704]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 80058f6:	2180      	movs	r1, #128	; 0x80
 80058f8:	0249      	lsls	r1, r1, #9
 80058fa:	430a      	orrs	r2, r1
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	e02f      	b.n	8005960 <HAL_RCC_OscConfig+0xe0>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10c      	bne.n	8005922 <HAL_RCC_OscConfig+0xa2>
 8005908:	4bab      	ldr	r3, [pc, #684]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	4baa      	ldr	r3, [pc, #680]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 800590e:	49ab      	ldr	r1, [pc, #684]	; (8005bbc <HAL_RCC_OscConfig+0x33c>)
 8005910:	400a      	ands	r2, r1
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	4ba8      	ldr	r3, [pc, #672]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	4ba7      	ldr	r3, [pc, #668]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 800591a:	49a9      	ldr	r1, [pc, #676]	; (8005bc0 <HAL_RCC_OscConfig+0x340>)
 800591c:	400a      	ands	r2, r1
 800591e:	601a      	str	r2, [r3, #0]
 8005920:	e01e      	b.n	8005960 <HAL_RCC_OscConfig+0xe0>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	2b05      	cmp	r3, #5
 8005928:	d10e      	bne.n	8005948 <HAL_RCC_OscConfig+0xc8>
 800592a:	4ba3      	ldr	r3, [pc, #652]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	4ba2      	ldr	r3, [pc, #648]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 8005930:	2180      	movs	r1, #128	; 0x80
 8005932:	02c9      	lsls	r1, r1, #11
 8005934:	430a      	orrs	r2, r1
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	4b9f      	ldr	r3, [pc, #636]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	4b9e      	ldr	r3, [pc, #632]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 800593e:	2180      	movs	r1, #128	; 0x80
 8005940:	0249      	lsls	r1, r1, #9
 8005942:	430a      	orrs	r2, r1
 8005944:	601a      	str	r2, [r3, #0]
 8005946:	e00b      	b.n	8005960 <HAL_RCC_OscConfig+0xe0>
 8005948:	4b9b      	ldr	r3, [pc, #620]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	4b9a      	ldr	r3, [pc, #616]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 800594e:	499b      	ldr	r1, [pc, #620]	; (8005bbc <HAL_RCC_OscConfig+0x33c>)
 8005950:	400a      	ands	r2, r1
 8005952:	601a      	str	r2, [r3, #0]
 8005954:	4b98      	ldr	r3, [pc, #608]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	4b97      	ldr	r3, [pc, #604]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 800595a:	4999      	ldr	r1, [pc, #612]	; (8005bc0 <HAL_RCC_OscConfig+0x340>)
 800595c:	400a      	ands	r2, r1
 800595e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d014      	beq.n	8005992 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005968:	f7fd ff32 	bl	80037d0 <HAL_GetTick>
 800596c:	0003      	movs	r3, r0
 800596e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005970:	e008      	b.n	8005984 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005972:	f7fd ff2d 	bl	80037d0 <HAL_GetTick>
 8005976:	0002      	movs	r2, r0
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	2b64      	cmp	r3, #100	; 0x64
 800597e:	d901      	bls.n	8005984 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e2fd      	b.n	8005f80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005984:	4b8c      	ldr	r3, [pc, #560]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	2380      	movs	r3, #128	; 0x80
 800598a:	029b      	lsls	r3, r3, #10
 800598c:	4013      	ands	r3, r2
 800598e:	d0f0      	beq.n	8005972 <HAL_RCC_OscConfig+0xf2>
 8005990:	e015      	b.n	80059be <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005992:	f7fd ff1d 	bl	80037d0 <HAL_GetTick>
 8005996:	0003      	movs	r3, r0
 8005998:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800599a:	e008      	b.n	80059ae <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800599c:	f7fd ff18 	bl	80037d0 <HAL_GetTick>
 80059a0:	0002      	movs	r2, r0
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2b64      	cmp	r3, #100	; 0x64
 80059a8:	d901      	bls.n	80059ae <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e2e8      	b.n	8005f80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059ae:	4b82      	ldr	r3, [pc, #520]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	2380      	movs	r3, #128	; 0x80
 80059b4:	029b      	lsls	r3, r3, #10
 80059b6:	4013      	ands	r3, r2
 80059b8:	d1f0      	bne.n	800599c <HAL_RCC_OscConfig+0x11c>
 80059ba:	e000      	b.n	80059be <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059bc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2202      	movs	r2, #2
 80059c4:	4013      	ands	r3, r2
 80059c6:	d100      	bne.n	80059ca <HAL_RCC_OscConfig+0x14a>
 80059c8:	e06c      	b.n	8005aa4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80059ca:	4b7b      	ldr	r3, [pc, #492]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	220c      	movs	r2, #12
 80059d0:	4013      	ands	r3, r2
 80059d2:	d00e      	beq.n	80059f2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80059d4:	4b78      	ldr	r3, [pc, #480]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	220c      	movs	r2, #12
 80059da:	4013      	ands	r3, r2
 80059dc:	2b08      	cmp	r3, #8
 80059de:	d11f      	bne.n	8005a20 <HAL_RCC_OscConfig+0x1a0>
 80059e0:	4b75      	ldr	r3, [pc, #468]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	23c0      	movs	r3, #192	; 0xc0
 80059e6:	025b      	lsls	r3, r3, #9
 80059e8:	401a      	ands	r2, r3
 80059ea:	2380      	movs	r3, #128	; 0x80
 80059ec:	021b      	lsls	r3, r3, #8
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d116      	bne.n	8005a20 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059f2:	4b71      	ldr	r3, [pc, #452]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2202      	movs	r2, #2
 80059f8:	4013      	ands	r3, r2
 80059fa:	d005      	beq.n	8005a08 <HAL_RCC_OscConfig+0x188>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d001      	beq.n	8005a08 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e2bb      	b.n	8005f80 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a08:	4b6b      	ldr	r3, [pc, #428]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	22f8      	movs	r2, #248	; 0xf8
 8005a0e:	4393      	bics	r3, r2
 8005a10:	0019      	movs	r1, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	00da      	lsls	r2, r3, #3
 8005a18:	4b67      	ldr	r3, [pc, #412]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a1e:	e041      	b.n	8005aa4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d024      	beq.n	8005a72 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a28:	4b63      	ldr	r3, [pc, #396]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	4b62      	ldr	r3, [pc, #392]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 8005a2e:	2101      	movs	r1, #1
 8005a30:	430a      	orrs	r2, r1
 8005a32:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a34:	f7fd fecc 	bl	80037d0 <HAL_GetTick>
 8005a38:	0003      	movs	r3, r0
 8005a3a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a3c:	e008      	b.n	8005a50 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a3e:	f7fd fec7 	bl	80037d0 <HAL_GetTick>
 8005a42:	0002      	movs	r2, r0
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d901      	bls.n	8005a50 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e297      	b.n	8005f80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a50:	4b59      	ldr	r3, [pc, #356]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2202      	movs	r2, #2
 8005a56:	4013      	ands	r3, r2
 8005a58:	d0f1      	beq.n	8005a3e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a5a:	4b57      	ldr	r3, [pc, #348]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	22f8      	movs	r2, #248	; 0xf8
 8005a60:	4393      	bics	r3, r2
 8005a62:	0019      	movs	r1, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	00da      	lsls	r2, r3, #3
 8005a6a:	4b53      	ldr	r3, [pc, #332]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	e018      	b.n	8005aa4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a72:	4b51      	ldr	r3, [pc, #324]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	4b50      	ldr	r3, [pc, #320]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 8005a78:	2101      	movs	r1, #1
 8005a7a:	438a      	bics	r2, r1
 8005a7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a7e:	f7fd fea7 	bl	80037d0 <HAL_GetTick>
 8005a82:	0003      	movs	r3, r0
 8005a84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a86:	e008      	b.n	8005a9a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a88:	f7fd fea2 	bl	80037d0 <HAL_GetTick>
 8005a8c:	0002      	movs	r2, r0
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d901      	bls.n	8005a9a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e272      	b.n	8005f80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a9a:	4b47      	ldr	r3, [pc, #284]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	d1f1      	bne.n	8005a88 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2208      	movs	r2, #8
 8005aaa:	4013      	ands	r3, r2
 8005aac:	d036      	beq.n	8005b1c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d019      	beq.n	8005aea <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ab6:	4b40      	ldr	r3, [pc, #256]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 8005ab8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aba:	4b3f      	ldr	r3, [pc, #252]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 8005abc:	2101      	movs	r1, #1
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ac2:	f7fd fe85 	bl	80037d0 <HAL_GetTick>
 8005ac6:	0003      	movs	r3, r0
 8005ac8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005aca:	e008      	b.n	8005ade <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005acc:	f7fd fe80 	bl	80037d0 <HAL_GetTick>
 8005ad0:	0002      	movs	r2, r0
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d901      	bls.n	8005ade <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e250      	b.n	8005f80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ade:	4b36      	ldr	r3, [pc, #216]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	d0f1      	beq.n	8005acc <HAL_RCC_OscConfig+0x24c>
 8005ae8:	e018      	b.n	8005b1c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005aea:	4b33      	ldr	r3, [pc, #204]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 8005aec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aee:	4b32      	ldr	r3, [pc, #200]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 8005af0:	2101      	movs	r1, #1
 8005af2:	438a      	bics	r2, r1
 8005af4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005af6:	f7fd fe6b 	bl	80037d0 <HAL_GetTick>
 8005afa:	0003      	movs	r3, r0
 8005afc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005afe:	e008      	b.n	8005b12 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b00:	f7fd fe66 	bl	80037d0 <HAL_GetTick>
 8005b04:	0002      	movs	r2, r0
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e236      	b.n	8005f80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b12:	4b29      	ldr	r3, [pc, #164]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 8005b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b16:	2202      	movs	r2, #2
 8005b18:	4013      	ands	r3, r2
 8005b1a:	d1f1      	bne.n	8005b00 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2204      	movs	r2, #4
 8005b22:	4013      	ands	r3, r2
 8005b24:	d100      	bne.n	8005b28 <HAL_RCC_OscConfig+0x2a8>
 8005b26:	e0b5      	b.n	8005c94 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b28:	201f      	movs	r0, #31
 8005b2a:	183b      	adds	r3, r7, r0
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b30:	4b21      	ldr	r3, [pc, #132]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 8005b32:	69da      	ldr	r2, [r3, #28]
 8005b34:	2380      	movs	r3, #128	; 0x80
 8005b36:	055b      	lsls	r3, r3, #21
 8005b38:	4013      	ands	r3, r2
 8005b3a:	d110      	bne.n	8005b5e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b3c:	4b1e      	ldr	r3, [pc, #120]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 8005b3e:	69da      	ldr	r2, [r3, #28]
 8005b40:	4b1d      	ldr	r3, [pc, #116]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 8005b42:	2180      	movs	r1, #128	; 0x80
 8005b44:	0549      	lsls	r1, r1, #21
 8005b46:	430a      	orrs	r2, r1
 8005b48:	61da      	str	r2, [r3, #28]
 8005b4a:	4b1b      	ldr	r3, [pc, #108]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 8005b4c:	69da      	ldr	r2, [r3, #28]
 8005b4e:	2380      	movs	r3, #128	; 0x80
 8005b50:	055b      	lsls	r3, r3, #21
 8005b52:	4013      	ands	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]
 8005b56:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005b58:	183b      	adds	r3, r7, r0
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b5e:	4b19      	ldr	r3, [pc, #100]	; (8005bc4 <HAL_RCC_OscConfig+0x344>)
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	2380      	movs	r3, #128	; 0x80
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	4013      	ands	r3, r2
 8005b68:	d11a      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b6a:	4b16      	ldr	r3, [pc, #88]	; (8005bc4 <HAL_RCC_OscConfig+0x344>)
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	4b15      	ldr	r3, [pc, #84]	; (8005bc4 <HAL_RCC_OscConfig+0x344>)
 8005b70:	2180      	movs	r1, #128	; 0x80
 8005b72:	0049      	lsls	r1, r1, #1
 8005b74:	430a      	orrs	r2, r1
 8005b76:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b78:	f7fd fe2a 	bl	80037d0 <HAL_GetTick>
 8005b7c:	0003      	movs	r3, r0
 8005b7e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b80:	e008      	b.n	8005b94 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b82:	f7fd fe25 	bl	80037d0 <HAL_GetTick>
 8005b86:	0002      	movs	r2, r0
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	2b64      	cmp	r3, #100	; 0x64
 8005b8e:	d901      	bls.n	8005b94 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e1f5      	b.n	8005f80 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b94:	4b0b      	ldr	r3, [pc, #44]	; (8005bc4 <HAL_RCC_OscConfig+0x344>)
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	2380      	movs	r3, #128	; 0x80
 8005b9a:	005b      	lsls	r3, r3, #1
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	d0f0      	beq.n	8005b82 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d10f      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x348>
 8005ba8:	4b03      	ldr	r3, [pc, #12]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 8005baa:	6a1a      	ldr	r2, [r3, #32]
 8005bac:	4b02      	ldr	r3, [pc, #8]	; (8005bb8 <HAL_RCC_OscConfig+0x338>)
 8005bae:	2101      	movs	r1, #1
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	621a      	str	r2, [r3, #32]
 8005bb4:	e036      	b.n	8005c24 <HAL_RCC_OscConfig+0x3a4>
 8005bb6:	46c0      	nop			; (mov r8, r8)
 8005bb8:	40021000 	.word	0x40021000
 8005bbc:	fffeffff 	.word	0xfffeffff
 8005bc0:	fffbffff 	.word	0xfffbffff
 8005bc4:	40007000 	.word	0x40007000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10c      	bne.n	8005bea <HAL_RCC_OscConfig+0x36a>
 8005bd0:	4bca      	ldr	r3, [pc, #808]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005bd2:	6a1a      	ldr	r2, [r3, #32]
 8005bd4:	4bc9      	ldr	r3, [pc, #804]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005bd6:	2101      	movs	r1, #1
 8005bd8:	438a      	bics	r2, r1
 8005bda:	621a      	str	r2, [r3, #32]
 8005bdc:	4bc7      	ldr	r3, [pc, #796]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005bde:	6a1a      	ldr	r2, [r3, #32]
 8005be0:	4bc6      	ldr	r3, [pc, #792]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005be2:	2104      	movs	r1, #4
 8005be4:	438a      	bics	r2, r1
 8005be6:	621a      	str	r2, [r3, #32]
 8005be8:	e01c      	b.n	8005c24 <HAL_RCC_OscConfig+0x3a4>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	2b05      	cmp	r3, #5
 8005bf0:	d10c      	bne.n	8005c0c <HAL_RCC_OscConfig+0x38c>
 8005bf2:	4bc2      	ldr	r3, [pc, #776]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005bf4:	6a1a      	ldr	r2, [r3, #32]
 8005bf6:	4bc1      	ldr	r3, [pc, #772]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005bf8:	2104      	movs	r1, #4
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	621a      	str	r2, [r3, #32]
 8005bfe:	4bbf      	ldr	r3, [pc, #764]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005c00:	6a1a      	ldr	r2, [r3, #32]
 8005c02:	4bbe      	ldr	r3, [pc, #760]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005c04:	2101      	movs	r1, #1
 8005c06:	430a      	orrs	r2, r1
 8005c08:	621a      	str	r2, [r3, #32]
 8005c0a:	e00b      	b.n	8005c24 <HAL_RCC_OscConfig+0x3a4>
 8005c0c:	4bbb      	ldr	r3, [pc, #748]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005c0e:	6a1a      	ldr	r2, [r3, #32]
 8005c10:	4bba      	ldr	r3, [pc, #744]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005c12:	2101      	movs	r1, #1
 8005c14:	438a      	bics	r2, r1
 8005c16:	621a      	str	r2, [r3, #32]
 8005c18:	4bb8      	ldr	r3, [pc, #736]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005c1a:	6a1a      	ldr	r2, [r3, #32]
 8005c1c:	4bb7      	ldr	r3, [pc, #732]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005c1e:	2104      	movs	r1, #4
 8005c20:	438a      	bics	r2, r1
 8005c22:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d014      	beq.n	8005c56 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c2c:	f7fd fdd0 	bl	80037d0 <HAL_GetTick>
 8005c30:	0003      	movs	r3, r0
 8005c32:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c34:	e009      	b.n	8005c4a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c36:	f7fd fdcb 	bl	80037d0 <HAL_GetTick>
 8005c3a:	0002      	movs	r2, r0
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	4aaf      	ldr	r2, [pc, #700]	; (8005f00 <HAL_RCC_OscConfig+0x680>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d901      	bls.n	8005c4a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e19a      	b.n	8005f80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c4a:	4bac      	ldr	r3, [pc, #688]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	4013      	ands	r3, r2
 8005c52:	d0f0      	beq.n	8005c36 <HAL_RCC_OscConfig+0x3b6>
 8005c54:	e013      	b.n	8005c7e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c56:	f7fd fdbb 	bl	80037d0 <HAL_GetTick>
 8005c5a:	0003      	movs	r3, r0
 8005c5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c5e:	e009      	b.n	8005c74 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c60:	f7fd fdb6 	bl	80037d0 <HAL_GetTick>
 8005c64:	0002      	movs	r2, r0
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	4aa5      	ldr	r2, [pc, #660]	; (8005f00 <HAL_RCC_OscConfig+0x680>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d901      	bls.n	8005c74 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e185      	b.n	8005f80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c74:	4ba1      	ldr	r3, [pc, #644]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	2202      	movs	r2, #2
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	d1f0      	bne.n	8005c60 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005c7e:	231f      	movs	r3, #31
 8005c80:	18fb      	adds	r3, r7, r3
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d105      	bne.n	8005c94 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c88:	4b9c      	ldr	r3, [pc, #624]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005c8a:	69da      	ldr	r2, [r3, #28]
 8005c8c:	4b9b      	ldr	r3, [pc, #620]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005c8e:	499d      	ldr	r1, [pc, #628]	; (8005f04 <HAL_RCC_OscConfig+0x684>)
 8005c90:	400a      	ands	r2, r1
 8005c92:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2210      	movs	r2, #16
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	d063      	beq.n	8005d66 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d12a      	bne.n	8005cfc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005ca6:	4b95      	ldr	r3, [pc, #596]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005caa:	4b94      	ldr	r3, [pc, #592]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005cac:	2104      	movs	r1, #4
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005cb2:	4b92      	ldr	r3, [pc, #584]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005cb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cb6:	4b91      	ldr	r3, [pc, #580]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005cb8:	2101      	movs	r1, #1
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cbe:	f7fd fd87 	bl	80037d0 <HAL_GetTick>
 8005cc2:	0003      	movs	r3, r0
 8005cc4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005cc6:	e008      	b.n	8005cda <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005cc8:	f7fd fd82 	bl	80037d0 <HAL_GetTick>
 8005ccc:	0002      	movs	r2, r0
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d901      	bls.n	8005cda <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e152      	b.n	8005f80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005cda:	4b88      	ldr	r3, [pc, #544]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cde:	2202      	movs	r2, #2
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	d0f1      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005ce4:	4b85      	ldr	r3, [pc, #532]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce8:	22f8      	movs	r2, #248	; 0xf8
 8005cea:	4393      	bics	r3, r2
 8005cec:	0019      	movs	r1, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	00da      	lsls	r2, r3, #3
 8005cf4:	4b81      	ldr	r3, [pc, #516]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	635a      	str	r2, [r3, #52]	; 0x34
 8005cfa:	e034      	b.n	8005d66 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	3305      	adds	r3, #5
 8005d02:	d111      	bne.n	8005d28 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005d04:	4b7d      	ldr	r3, [pc, #500]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d08:	4b7c      	ldr	r3, [pc, #496]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005d0a:	2104      	movs	r1, #4
 8005d0c:	438a      	bics	r2, r1
 8005d0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005d10:	4b7a      	ldr	r3, [pc, #488]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d14:	22f8      	movs	r2, #248	; 0xf8
 8005d16:	4393      	bics	r3, r2
 8005d18:	0019      	movs	r1, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	00da      	lsls	r2, r3, #3
 8005d20:	4b76      	ldr	r3, [pc, #472]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005d22:	430a      	orrs	r2, r1
 8005d24:	635a      	str	r2, [r3, #52]	; 0x34
 8005d26:	e01e      	b.n	8005d66 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005d28:	4b74      	ldr	r3, [pc, #464]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005d2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d2c:	4b73      	ldr	r3, [pc, #460]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005d2e:	2104      	movs	r1, #4
 8005d30:	430a      	orrs	r2, r1
 8005d32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005d34:	4b71      	ldr	r3, [pc, #452]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005d36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d38:	4b70      	ldr	r3, [pc, #448]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005d3a:	2101      	movs	r1, #1
 8005d3c:	438a      	bics	r2, r1
 8005d3e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d40:	f7fd fd46 	bl	80037d0 <HAL_GetTick>
 8005d44:	0003      	movs	r3, r0
 8005d46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005d48:	e008      	b.n	8005d5c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005d4a:	f7fd fd41 	bl	80037d0 <HAL_GetTick>
 8005d4e:	0002      	movs	r2, r0
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d901      	bls.n	8005d5c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e111      	b.n	8005f80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005d5c:	4b67      	ldr	r3, [pc, #412]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d60:	2202      	movs	r2, #2
 8005d62:	4013      	ands	r3, r2
 8005d64:	d1f1      	bne.n	8005d4a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	d05c      	beq.n	8005e2a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005d70:	4b62      	ldr	r3, [pc, #392]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	220c      	movs	r2, #12
 8005d76:	4013      	ands	r3, r2
 8005d78:	2b0c      	cmp	r3, #12
 8005d7a:	d00e      	beq.n	8005d9a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005d7c:	4b5f      	ldr	r3, [pc, #380]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	220c      	movs	r2, #12
 8005d82:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005d84:	2b08      	cmp	r3, #8
 8005d86:	d114      	bne.n	8005db2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005d88:	4b5c      	ldr	r3, [pc, #368]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	23c0      	movs	r3, #192	; 0xc0
 8005d8e:	025b      	lsls	r3, r3, #9
 8005d90:	401a      	ands	r2, r3
 8005d92:	23c0      	movs	r3, #192	; 0xc0
 8005d94:	025b      	lsls	r3, r3, #9
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d10b      	bne.n	8005db2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005d9a:	4b58      	ldr	r3, [pc, #352]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005d9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d9e:	2380      	movs	r3, #128	; 0x80
 8005da0:	029b      	lsls	r3, r3, #10
 8005da2:	4013      	ands	r3, r2
 8005da4:	d040      	beq.n	8005e28 <HAL_RCC_OscConfig+0x5a8>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d03c      	beq.n	8005e28 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e0e6      	b.n	8005f80 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d01b      	beq.n	8005df2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005dba:	4b50      	ldr	r3, [pc, #320]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005dbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dbe:	4b4f      	ldr	r3, [pc, #316]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005dc0:	2180      	movs	r1, #128	; 0x80
 8005dc2:	0249      	lsls	r1, r1, #9
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc8:	f7fd fd02 	bl	80037d0 <HAL_GetTick>
 8005dcc:	0003      	movs	r3, r0
 8005dce:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005dd0:	e008      	b.n	8005de4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005dd2:	f7fd fcfd 	bl	80037d0 <HAL_GetTick>
 8005dd6:	0002      	movs	r2, r0
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d901      	bls.n	8005de4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e0cd      	b.n	8005f80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005de4:	4b45      	ldr	r3, [pc, #276]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005de6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005de8:	2380      	movs	r3, #128	; 0x80
 8005dea:	029b      	lsls	r3, r3, #10
 8005dec:	4013      	ands	r3, r2
 8005dee:	d0f0      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x552>
 8005df0:	e01b      	b.n	8005e2a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005df2:	4b42      	ldr	r3, [pc, #264]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005df6:	4b41      	ldr	r3, [pc, #260]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005df8:	4943      	ldr	r1, [pc, #268]	; (8005f08 <HAL_RCC_OscConfig+0x688>)
 8005dfa:	400a      	ands	r2, r1
 8005dfc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dfe:	f7fd fce7 	bl	80037d0 <HAL_GetTick>
 8005e02:	0003      	movs	r3, r0
 8005e04:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005e06:	e008      	b.n	8005e1a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e08:	f7fd fce2 	bl	80037d0 <HAL_GetTick>
 8005e0c:	0002      	movs	r2, r0
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e0b2      	b.n	8005f80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005e1a:	4b38      	ldr	r3, [pc, #224]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005e1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e1e:	2380      	movs	r3, #128	; 0x80
 8005e20:	029b      	lsls	r3, r3, #10
 8005e22:	4013      	ands	r3, r2
 8005e24:	d1f0      	bne.n	8005e08 <HAL_RCC_OscConfig+0x588>
 8005e26:	e000      	b.n	8005e2a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005e28:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d100      	bne.n	8005e34 <HAL_RCC_OscConfig+0x5b4>
 8005e32:	e0a4      	b.n	8005f7e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e34:	4b31      	ldr	r3, [pc, #196]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	220c      	movs	r2, #12
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	2b08      	cmp	r3, #8
 8005e3e:	d100      	bne.n	8005e42 <HAL_RCC_OscConfig+0x5c2>
 8005e40:	e078      	b.n	8005f34 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d14c      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e4a:	4b2c      	ldr	r3, [pc, #176]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	4b2b      	ldr	r3, [pc, #172]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005e50:	492e      	ldr	r1, [pc, #184]	; (8005f0c <HAL_RCC_OscConfig+0x68c>)
 8005e52:	400a      	ands	r2, r1
 8005e54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e56:	f7fd fcbb 	bl	80037d0 <HAL_GetTick>
 8005e5a:	0003      	movs	r3, r0
 8005e5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e5e:	e008      	b.n	8005e72 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e60:	f7fd fcb6 	bl	80037d0 <HAL_GetTick>
 8005e64:	0002      	movs	r2, r0
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e086      	b.n	8005f80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e72:	4b22      	ldr	r3, [pc, #136]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	2380      	movs	r3, #128	; 0x80
 8005e78:	049b      	lsls	r3, r3, #18
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	d1f0      	bne.n	8005e60 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e7e:	4b1f      	ldr	r3, [pc, #124]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e82:	220f      	movs	r2, #15
 8005e84:	4393      	bics	r3, r2
 8005e86:	0019      	movs	r1, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e8c:	4b1b      	ldr	r3, [pc, #108]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	62da      	str	r2, [r3, #44]	; 0x2c
 8005e92:	4b1a      	ldr	r3, [pc, #104]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	4a1e      	ldr	r2, [pc, #120]	; (8005f10 <HAL_RCC_OscConfig+0x690>)
 8005e98:	4013      	ands	r3, r2
 8005e9a:	0019      	movs	r1, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea4:	431a      	orrs	r2, r3
 8005ea6:	4b15      	ldr	r3, [pc, #84]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005eac:	4b13      	ldr	r3, [pc, #76]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	4b12      	ldr	r3, [pc, #72]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005eb2:	2180      	movs	r1, #128	; 0x80
 8005eb4:	0449      	lsls	r1, r1, #17
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eba:	f7fd fc89 	bl	80037d0 <HAL_GetTick>
 8005ebe:	0003      	movs	r3, r0
 8005ec0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ec2:	e008      	b.n	8005ed6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ec4:	f7fd fc84 	bl	80037d0 <HAL_GetTick>
 8005ec8:	0002      	movs	r2, r0
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e054      	b.n	8005f80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ed6:	4b09      	ldr	r3, [pc, #36]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	2380      	movs	r3, #128	; 0x80
 8005edc:	049b      	lsls	r3, r3, #18
 8005ede:	4013      	ands	r3, r2
 8005ee0:	d0f0      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x644>
 8005ee2:	e04c      	b.n	8005f7e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ee4:	4b05      	ldr	r3, [pc, #20]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	4b04      	ldr	r3, [pc, #16]	; (8005efc <HAL_RCC_OscConfig+0x67c>)
 8005eea:	4908      	ldr	r1, [pc, #32]	; (8005f0c <HAL_RCC_OscConfig+0x68c>)
 8005eec:	400a      	ands	r2, r1
 8005eee:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef0:	f7fd fc6e 	bl	80037d0 <HAL_GetTick>
 8005ef4:	0003      	movs	r3, r0
 8005ef6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ef8:	e015      	b.n	8005f26 <HAL_RCC_OscConfig+0x6a6>
 8005efa:	46c0      	nop			; (mov r8, r8)
 8005efc:	40021000 	.word	0x40021000
 8005f00:	00001388 	.word	0x00001388
 8005f04:	efffffff 	.word	0xefffffff
 8005f08:	fffeffff 	.word	0xfffeffff
 8005f0c:	feffffff 	.word	0xfeffffff
 8005f10:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f14:	f7fd fc5c 	bl	80037d0 <HAL_GetTick>
 8005f18:	0002      	movs	r2, r0
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e02c      	b.n	8005f80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f26:	4b18      	ldr	r3, [pc, #96]	; (8005f88 <HAL_RCC_OscConfig+0x708>)
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	2380      	movs	r3, #128	; 0x80
 8005f2c:	049b      	lsls	r3, r3, #18
 8005f2e:	4013      	ands	r3, r2
 8005f30:	d1f0      	bne.n	8005f14 <HAL_RCC_OscConfig+0x694>
 8005f32:	e024      	b.n	8005f7e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d101      	bne.n	8005f40 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e01f      	b.n	8005f80 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005f40:	4b11      	ldr	r3, [pc, #68]	; (8005f88 <HAL_RCC_OscConfig+0x708>)
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005f46:	4b10      	ldr	r3, [pc, #64]	; (8005f88 <HAL_RCC_OscConfig+0x708>)
 8005f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	23c0      	movs	r3, #192	; 0xc0
 8005f50:	025b      	lsls	r3, r3, #9
 8005f52:	401a      	ands	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d10e      	bne.n	8005f7a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	220f      	movs	r2, #15
 8005f60:	401a      	ands	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d107      	bne.n	8005f7a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	23f0      	movs	r3, #240	; 0xf0
 8005f6e:	039b      	lsls	r3, r3, #14
 8005f70:	401a      	ands	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d001      	beq.n	8005f7e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e000      	b.n	8005f80 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	0018      	movs	r0, r3
 8005f82:	46bd      	mov	sp, r7
 8005f84:	b008      	add	sp, #32
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	40021000 	.word	0x40021000

08005f8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d101      	bne.n	8005fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e0bf      	b.n	8006120 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fa0:	4b61      	ldr	r3, [pc, #388]	; (8006128 <HAL_RCC_ClockConfig+0x19c>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d911      	bls.n	8005fd2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fae:	4b5e      	ldr	r3, [pc, #376]	; (8006128 <HAL_RCC_ClockConfig+0x19c>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	4393      	bics	r3, r2
 8005fb6:	0019      	movs	r1, r3
 8005fb8:	4b5b      	ldr	r3, [pc, #364]	; (8006128 <HAL_RCC_ClockConfig+0x19c>)
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fc0:	4b59      	ldr	r3, [pc, #356]	; (8006128 <HAL_RCC_ClockConfig+0x19c>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d001      	beq.n	8005fd2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e0a6      	b.n	8006120 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	4013      	ands	r3, r2
 8005fda:	d015      	beq.n	8006008 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2204      	movs	r2, #4
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	d006      	beq.n	8005ff4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005fe6:	4b51      	ldr	r3, [pc, #324]	; (800612c <HAL_RCC_ClockConfig+0x1a0>)
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	4b50      	ldr	r3, [pc, #320]	; (800612c <HAL_RCC_ClockConfig+0x1a0>)
 8005fec:	21e0      	movs	r1, #224	; 0xe0
 8005fee:	00c9      	lsls	r1, r1, #3
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ff4:	4b4d      	ldr	r3, [pc, #308]	; (800612c <HAL_RCC_ClockConfig+0x1a0>)
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	22f0      	movs	r2, #240	; 0xf0
 8005ffa:	4393      	bics	r3, r2
 8005ffc:	0019      	movs	r1, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	689a      	ldr	r2, [r3, #8]
 8006002:	4b4a      	ldr	r3, [pc, #296]	; (800612c <HAL_RCC_ClockConfig+0x1a0>)
 8006004:	430a      	orrs	r2, r1
 8006006:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2201      	movs	r2, #1
 800600e:	4013      	ands	r3, r2
 8006010:	d04c      	beq.n	80060ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d107      	bne.n	800602a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800601a:	4b44      	ldr	r3, [pc, #272]	; (800612c <HAL_RCC_ClockConfig+0x1a0>)
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	2380      	movs	r3, #128	; 0x80
 8006020:	029b      	lsls	r3, r3, #10
 8006022:	4013      	ands	r3, r2
 8006024:	d120      	bne.n	8006068 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e07a      	b.n	8006120 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	2b02      	cmp	r3, #2
 8006030:	d107      	bne.n	8006042 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006032:	4b3e      	ldr	r3, [pc, #248]	; (800612c <HAL_RCC_ClockConfig+0x1a0>)
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	2380      	movs	r3, #128	; 0x80
 8006038:	049b      	lsls	r3, r3, #18
 800603a:	4013      	ands	r3, r2
 800603c:	d114      	bne.n	8006068 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e06e      	b.n	8006120 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	2b03      	cmp	r3, #3
 8006048:	d107      	bne.n	800605a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800604a:	4b38      	ldr	r3, [pc, #224]	; (800612c <HAL_RCC_ClockConfig+0x1a0>)
 800604c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800604e:	2380      	movs	r3, #128	; 0x80
 8006050:	029b      	lsls	r3, r3, #10
 8006052:	4013      	ands	r3, r2
 8006054:	d108      	bne.n	8006068 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e062      	b.n	8006120 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800605a:	4b34      	ldr	r3, [pc, #208]	; (800612c <HAL_RCC_ClockConfig+0x1a0>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2202      	movs	r2, #2
 8006060:	4013      	ands	r3, r2
 8006062:	d101      	bne.n	8006068 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e05b      	b.n	8006120 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006068:	4b30      	ldr	r3, [pc, #192]	; (800612c <HAL_RCC_ClockConfig+0x1a0>)
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	2203      	movs	r2, #3
 800606e:	4393      	bics	r3, r2
 8006070:	0019      	movs	r1, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685a      	ldr	r2, [r3, #4]
 8006076:	4b2d      	ldr	r3, [pc, #180]	; (800612c <HAL_RCC_ClockConfig+0x1a0>)
 8006078:	430a      	orrs	r2, r1
 800607a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800607c:	f7fd fba8 	bl	80037d0 <HAL_GetTick>
 8006080:	0003      	movs	r3, r0
 8006082:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006084:	e009      	b.n	800609a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006086:	f7fd fba3 	bl	80037d0 <HAL_GetTick>
 800608a:	0002      	movs	r2, r0
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	4a27      	ldr	r2, [pc, #156]	; (8006130 <HAL_RCC_ClockConfig+0x1a4>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d901      	bls.n	800609a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e042      	b.n	8006120 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800609a:	4b24      	ldr	r3, [pc, #144]	; (800612c <HAL_RCC_ClockConfig+0x1a0>)
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	220c      	movs	r2, #12
 80060a0:	401a      	ands	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d1ec      	bne.n	8006086 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060ac:	4b1e      	ldr	r3, [pc, #120]	; (8006128 <HAL_RCC_ClockConfig+0x19c>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2201      	movs	r2, #1
 80060b2:	4013      	ands	r3, r2
 80060b4:	683a      	ldr	r2, [r7, #0]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d211      	bcs.n	80060de <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ba:	4b1b      	ldr	r3, [pc, #108]	; (8006128 <HAL_RCC_ClockConfig+0x19c>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2201      	movs	r2, #1
 80060c0:	4393      	bics	r3, r2
 80060c2:	0019      	movs	r1, r3
 80060c4:	4b18      	ldr	r3, [pc, #96]	; (8006128 <HAL_RCC_ClockConfig+0x19c>)
 80060c6:	683a      	ldr	r2, [r7, #0]
 80060c8:	430a      	orrs	r2, r1
 80060ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060cc:	4b16      	ldr	r3, [pc, #88]	; (8006128 <HAL_RCC_ClockConfig+0x19c>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2201      	movs	r2, #1
 80060d2:	4013      	ands	r3, r2
 80060d4:	683a      	ldr	r2, [r7, #0]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d001      	beq.n	80060de <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e020      	b.n	8006120 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2204      	movs	r2, #4
 80060e4:	4013      	ands	r3, r2
 80060e6:	d009      	beq.n	80060fc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80060e8:	4b10      	ldr	r3, [pc, #64]	; (800612c <HAL_RCC_ClockConfig+0x1a0>)
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	4a11      	ldr	r2, [pc, #68]	; (8006134 <HAL_RCC_ClockConfig+0x1a8>)
 80060ee:	4013      	ands	r3, r2
 80060f0:	0019      	movs	r1, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68da      	ldr	r2, [r3, #12]
 80060f6:	4b0d      	ldr	r3, [pc, #52]	; (800612c <HAL_RCC_ClockConfig+0x1a0>)
 80060f8:	430a      	orrs	r2, r1
 80060fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80060fc:	f000 f820 	bl	8006140 <HAL_RCC_GetSysClockFreq>
 8006100:	0001      	movs	r1, r0
 8006102:	4b0a      	ldr	r3, [pc, #40]	; (800612c <HAL_RCC_ClockConfig+0x1a0>)
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	091b      	lsrs	r3, r3, #4
 8006108:	220f      	movs	r2, #15
 800610a:	4013      	ands	r3, r2
 800610c:	4a0a      	ldr	r2, [pc, #40]	; (8006138 <HAL_RCC_ClockConfig+0x1ac>)
 800610e:	5cd3      	ldrb	r3, [r2, r3]
 8006110:	000a      	movs	r2, r1
 8006112:	40da      	lsrs	r2, r3
 8006114:	4b09      	ldr	r3, [pc, #36]	; (800613c <HAL_RCC_ClockConfig+0x1b0>)
 8006116:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006118:	2003      	movs	r0, #3
 800611a:	f7fd fb13 	bl	8003744 <HAL_InitTick>
  
  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	0018      	movs	r0, r3
 8006122:	46bd      	mov	sp, r7
 8006124:	b004      	add	sp, #16
 8006126:	bd80      	pop	{r7, pc}
 8006128:	40022000 	.word	0x40022000
 800612c:	40021000 	.word	0x40021000
 8006130:	00001388 	.word	0x00001388
 8006134:	fffff8ff 	.word	0xfffff8ff
 8006138:	08007b88 	.word	0x08007b88
 800613c:	20000004 	.word	0x20000004

08006140 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006146:	2300      	movs	r3, #0
 8006148:	60fb      	str	r3, [r7, #12]
 800614a:	2300      	movs	r3, #0
 800614c:	60bb      	str	r3, [r7, #8]
 800614e:	2300      	movs	r3, #0
 8006150:	617b      	str	r3, [r7, #20]
 8006152:	2300      	movs	r3, #0
 8006154:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006156:	2300      	movs	r3, #0
 8006158:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800615a:	4b2d      	ldr	r3, [pc, #180]	; (8006210 <HAL_RCC_GetSysClockFreq+0xd0>)
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	220c      	movs	r2, #12
 8006164:	4013      	ands	r3, r2
 8006166:	2b0c      	cmp	r3, #12
 8006168:	d046      	beq.n	80061f8 <HAL_RCC_GetSysClockFreq+0xb8>
 800616a:	d848      	bhi.n	80061fe <HAL_RCC_GetSysClockFreq+0xbe>
 800616c:	2b04      	cmp	r3, #4
 800616e:	d002      	beq.n	8006176 <HAL_RCC_GetSysClockFreq+0x36>
 8006170:	2b08      	cmp	r3, #8
 8006172:	d003      	beq.n	800617c <HAL_RCC_GetSysClockFreq+0x3c>
 8006174:	e043      	b.n	80061fe <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006176:	4b27      	ldr	r3, [pc, #156]	; (8006214 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006178:	613b      	str	r3, [r7, #16]
      break;
 800617a:	e043      	b.n	8006204 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	0c9b      	lsrs	r3, r3, #18
 8006180:	220f      	movs	r2, #15
 8006182:	4013      	ands	r3, r2
 8006184:	4a24      	ldr	r2, [pc, #144]	; (8006218 <HAL_RCC_GetSysClockFreq+0xd8>)
 8006186:	5cd3      	ldrb	r3, [r2, r3]
 8006188:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800618a:	4b21      	ldr	r3, [pc, #132]	; (8006210 <HAL_RCC_GetSysClockFreq+0xd0>)
 800618c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618e:	220f      	movs	r2, #15
 8006190:	4013      	ands	r3, r2
 8006192:	4a22      	ldr	r2, [pc, #136]	; (800621c <HAL_RCC_GetSysClockFreq+0xdc>)
 8006194:	5cd3      	ldrb	r3, [r2, r3]
 8006196:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	23c0      	movs	r3, #192	; 0xc0
 800619c:	025b      	lsls	r3, r3, #9
 800619e:	401a      	ands	r2, r3
 80061a0:	2380      	movs	r3, #128	; 0x80
 80061a2:	025b      	lsls	r3, r3, #9
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d109      	bne.n	80061bc <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80061a8:	68b9      	ldr	r1, [r7, #8]
 80061aa:	481a      	ldr	r0, [pc, #104]	; (8006214 <HAL_RCC_GetSysClockFreq+0xd4>)
 80061ac:	f7f9 ffbe 	bl	800012c <__udivsi3>
 80061b0:	0003      	movs	r3, r0
 80061b2:	001a      	movs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4353      	muls	r3, r2
 80061b8:	617b      	str	r3, [r7, #20]
 80061ba:	e01a      	b.n	80061f2 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	23c0      	movs	r3, #192	; 0xc0
 80061c0:	025b      	lsls	r3, r3, #9
 80061c2:	401a      	ands	r2, r3
 80061c4:	23c0      	movs	r3, #192	; 0xc0
 80061c6:	025b      	lsls	r3, r3, #9
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d109      	bne.n	80061e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80061cc:	68b9      	ldr	r1, [r7, #8]
 80061ce:	4814      	ldr	r0, [pc, #80]	; (8006220 <HAL_RCC_GetSysClockFreq+0xe0>)
 80061d0:	f7f9 ffac 	bl	800012c <__udivsi3>
 80061d4:	0003      	movs	r3, r0
 80061d6:	001a      	movs	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4353      	muls	r3, r2
 80061dc:	617b      	str	r3, [r7, #20]
 80061de:	e008      	b.n	80061f2 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80061e0:	68b9      	ldr	r1, [r7, #8]
 80061e2:	4810      	ldr	r0, [pc, #64]	; (8006224 <HAL_RCC_GetSysClockFreq+0xe4>)
 80061e4:	f7f9 ffa2 	bl	800012c <__udivsi3>
 80061e8:	0003      	movs	r3, r0
 80061ea:	001a      	movs	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4353      	muls	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	613b      	str	r3, [r7, #16]
      break;
 80061f6:	e005      	b.n	8006204 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80061f8:	4b09      	ldr	r3, [pc, #36]	; (8006220 <HAL_RCC_GetSysClockFreq+0xe0>)
 80061fa:	613b      	str	r3, [r7, #16]
      break;
 80061fc:	e002      	b.n	8006204 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80061fe:	4b09      	ldr	r3, [pc, #36]	; (8006224 <HAL_RCC_GetSysClockFreq+0xe4>)
 8006200:	613b      	str	r3, [r7, #16]
      break;
 8006202:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006204:	693b      	ldr	r3, [r7, #16]
}
 8006206:	0018      	movs	r0, r3
 8006208:	46bd      	mov	sp, r7
 800620a:	b006      	add	sp, #24
 800620c:	bd80      	pop	{r7, pc}
 800620e:	46c0      	nop			; (mov r8, r8)
 8006210:	40021000 	.word	0x40021000
 8006214:	00f42400 	.word	0x00f42400
 8006218:	08008194 	.word	0x08008194
 800621c:	080081a4 	.word	0x080081a4
 8006220:	02dc6c00 	.word	0x02dc6c00
 8006224:	007a1200 	.word	0x007a1200

08006228 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e0a8      	b.n	800638c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623e:	2b00      	cmp	r3, #0
 8006240:	d109      	bne.n	8006256 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	2382      	movs	r3, #130	; 0x82
 8006248:	005b      	lsls	r3, r3, #1
 800624a:	429a      	cmp	r2, r3
 800624c:	d009      	beq.n	8006262 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	61da      	str	r2, [r3, #28]
 8006254:	e005      	b.n	8006262 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	225d      	movs	r2, #93	; 0x5d
 800626c:	5c9b      	ldrb	r3, [r3, r2]
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b00      	cmp	r3, #0
 8006272:	d107      	bne.n	8006284 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	225c      	movs	r2, #92	; 0x5c
 8006278:	2100      	movs	r1, #0
 800627a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	0018      	movs	r0, r3
 8006280:	f7fc fdfc 	bl	8002e7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	225d      	movs	r2, #93	; 0x5d
 8006288:	2102      	movs	r1, #2
 800628a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2140      	movs	r1, #64	; 0x40
 8006298:	438a      	bics	r2, r1
 800629a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68da      	ldr	r2, [r3, #12]
 80062a0:	23e0      	movs	r3, #224	; 0xe0
 80062a2:	00db      	lsls	r3, r3, #3
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d902      	bls.n	80062ae <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80062a8:	2300      	movs	r3, #0
 80062aa:	60fb      	str	r3, [r7, #12]
 80062ac:	e002      	b.n	80062b4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80062ae:	2380      	movs	r3, #128	; 0x80
 80062b0:	015b      	lsls	r3, r3, #5
 80062b2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68da      	ldr	r2, [r3, #12]
 80062b8:	23f0      	movs	r3, #240	; 0xf0
 80062ba:	011b      	lsls	r3, r3, #4
 80062bc:	429a      	cmp	r2, r3
 80062be:	d008      	beq.n	80062d2 <HAL_SPI_Init+0xaa>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	68da      	ldr	r2, [r3, #12]
 80062c4:	23e0      	movs	r3, #224	; 0xe0
 80062c6:	00db      	lsls	r3, r3, #3
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d002      	beq.n	80062d2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	2382      	movs	r3, #130	; 0x82
 80062d8:	005b      	lsls	r3, r3, #1
 80062da:	401a      	ands	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6899      	ldr	r1, [r3, #8]
 80062e0:	2384      	movs	r3, #132	; 0x84
 80062e2:	021b      	lsls	r3, r3, #8
 80062e4:	400b      	ands	r3, r1
 80062e6:	431a      	orrs	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	2102      	movs	r1, #2
 80062ee:	400b      	ands	r3, r1
 80062f0:	431a      	orrs	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	2101      	movs	r1, #1
 80062f8:	400b      	ands	r3, r1
 80062fa:	431a      	orrs	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6999      	ldr	r1, [r3, #24]
 8006300:	2380      	movs	r3, #128	; 0x80
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	400b      	ands	r3, r1
 8006306:	431a      	orrs	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	69db      	ldr	r3, [r3, #28]
 800630c:	2138      	movs	r1, #56	; 0x38
 800630e:	400b      	ands	r3, r1
 8006310:	431a      	orrs	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	2180      	movs	r1, #128	; 0x80
 8006318:	400b      	ands	r3, r1
 800631a:	431a      	orrs	r2, r3
 800631c:	0011      	movs	r1, r2
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006322:	2380      	movs	r3, #128	; 0x80
 8006324:	019b      	lsls	r3, r3, #6
 8006326:	401a      	ands	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	430a      	orrs	r2, r1
 800632e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	0c1b      	lsrs	r3, r3, #16
 8006336:	2204      	movs	r2, #4
 8006338:	401a      	ands	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633e:	2110      	movs	r1, #16
 8006340:	400b      	ands	r3, r1
 8006342:	431a      	orrs	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006348:	2108      	movs	r1, #8
 800634a:	400b      	ands	r3, r1
 800634c:	431a      	orrs	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68d9      	ldr	r1, [r3, #12]
 8006352:	23f0      	movs	r3, #240	; 0xf0
 8006354:	011b      	lsls	r3, r3, #4
 8006356:	400b      	ands	r3, r1
 8006358:	431a      	orrs	r2, r3
 800635a:	0011      	movs	r1, r2
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	2380      	movs	r3, #128	; 0x80
 8006360:	015b      	lsls	r3, r3, #5
 8006362:	401a      	ands	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	430a      	orrs	r2, r1
 800636a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	69da      	ldr	r2, [r3, #28]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4907      	ldr	r1, [pc, #28]	; (8006394 <HAL_SPI_Init+0x16c>)
 8006378:	400a      	ands	r2, r1
 800637a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	225d      	movs	r2, #93	; 0x5d
 8006386:	2101      	movs	r1, #1
 8006388:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	0018      	movs	r0, r3
 800638e:	46bd      	mov	sp, r7
 8006390:	b004      	add	sp, #16
 8006392:	bd80      	pop	{r7, pc}
 8006394:	fffff7ff 	.word	0xfffff7ff

08006398 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b088      	sub	sp, #32
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	603b      	str	r3, [r7, #0]
 80063a4:	1dbb      	adds	r3, r7, #6
 80063a6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063a8:	231f      	movs	r3, #31
 80063aa:	18fb      	adds	r3, r7, r3
 80063ac:	2200      	movs	r2, #0
 80063ae:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	225c      	movs	r2, #92	; 0x5c
 80063b4:	5c9b      	ldrb	r3, [r3, r2]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d101      	bne.n	80063be <HAL_SPI_Transmit+0x26>
 80063ba:	2302      	movs	r3, #2
 80063bc:	e147      	b.n	800664e <HAL_SPI_Transmit+0x2b6>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	225c      	movs	r2, #92	; 0x5c
 80063c2:	2101      	movs	r1, #1
 80063c4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063c6:	f7fd fa03 	bl	80037d0 <HAL_GetTick>
 80063ca:	0003      	movs	r3, r0
 80063cc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80063ce:	2316      	movs	r3, #22
 80063d0:	18fb      	adds	r3, r7, r3
 80063d2:	1dba      	adds	r2, r7, #6
 80063d4:	8812      	ldrh	r2, [r2, #0]
 80063d6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	225d      	movs	r2, #93	; 0x5d
 80063dc:	5c9b      	ldrb	r3, [r3, r2]
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d004      	beq.n	80063ee <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80063e4:	231f      	movs	r3, #31
 80063e6:	18fb      	adds	r3, r7, r3
 80063e8:	2202      	movs	r2, #2
 80063ea:	701a      	strb	r2, [r3, #0]
    goto error;
 80063ec:	e128      	b.n	8006640 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d003      	beq.n	80063fc <HAL_SPI_Transmit+0x64>
 80063f4:	1dbb      	adds	r3, r7, #6
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d104      	bne.n	8006406 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80063fc:	231f      	movs	r3, #31
 80063fe:	18fb      	adds	r3, r7, r3
 8006400:	2201      	movs	r2, #1
 8006402:	701a      	strb	r2, [r3, #0]
    goto error;
 8006404:	e11c      	b.n	8006640 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	225d      	movs	r2, #93	; 0x5d
 800640a:	2103      	movs	r1, #3
 800640c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	1dba      	adds	r2, r7, #6
 800641e:	8812      	ldrh	r2, [r2, #0]
 8006420:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	1dba      	adds	r2, r7, #6
 8006426:	8812      	ldrh	r2, [r2, #0]
 8006428:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2244      	movs	r2, #68	; 0x44
 8006434:	2100      	movs	r1, #0
 8006436:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2246      	movs	r2, #70	; 0x46
 800643c:	2100      	movs	r1, #0
 800643e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	2380      	movs	r3, #128	; 0x80
 8006452:	021b      	lsls	r3, r3, #8
 8006454:	429a      	cmp	r2, r3
 8006456:	d110      	bne.n	800647a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2140      	movs	r1, #64	; 0x40
 8006464:	438a      	bics	r2, r1
 8006466:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2180      	movs	r1, #128	; 0x80
 8006474:	01c9      	lsls	r1, r1, #7
 8006476:	430a      	orrs	r2, r1
 8006478:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2240      	movs	r2, #64	; 0x40
 8006482:	4013      	ands	r3, r2
 8006484:	2b40      	cmp	r3, #64	; 0x40
 8006486:	d007      	beq.n	8006498 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2140      	movs	r1, #64	; 0x40
 8006494:	430a      	orrs	r2, r1
 8006496:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	23e0      	movs	r3, #224	; 0xe0
 800649e:	00db      	lsls	r3, r3, #3
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d952      	bls.n	800654a <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d004      	beq.n	80064b6 <HAL_SPI_Transmit+0x11e>
 80064ac:	2316      	movs	r3, #22
 80064ae:	18fb      	adds	r3, r7, r3
 80064b0:	881b      	ldrh	r3, [r3, #0]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d143      	bne.n	800653e <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ba:	881a      	ldrh	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c6:	1c9a      	adds	r2, r3, #2
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	3b01      	subs	r3, #1
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80064da:	e030      	b.n	800653e <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	2202      	movs	r2, #2
 80064e4:	4013      	ands	r3, r2
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d112      	bne.n	8006510 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ee:	881a      	ldrh	r2, [r3, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fa:	1c9a      	adds	r2, r3, #2
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006504:	b29b      	uxth	r3, r3
 8006506:	3b01      	subs	r3, #1
 8006508:	b29a      	uxth	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800650e:	e016      	b.n	800653e <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006510:	f7fd f95e 	bl	80037d0 <HAL_GetTick>
 8006514:	0002      	movs	r2, r0
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	429a      	cmp	r2, r3
 800651e:	d802      	bhi.n	8006526 <HAL_SPI_Transmit+0x18e>
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	3301      	adds	r3, #1
 8006524:	d102      	bne.n	800652c <HAL_SPI_Transmit+0x194>
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d108      	bne.n	800653e <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800652c:	231f      	movs	r3, #31
 800652e:	18fb      	adds	r3, r7, r3
 8006530:	2203      	movs	r2, #3
 8006532:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	225d      	movs	r2, #93	; 0x5d
 8006538:	2101      	movs	r1, #1
 800653a:	5499      	strb	r1, [r3, r2]
          goto error;
 800653c:	e080      	b.n	8006640 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006542:	b29b      	uxth	r3, r3
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1c9      	bne.n	80064dc <HAL_SPI_Transmit+0x144>
 8006548:	e053      	b.n	80065f2 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d004      	beq.n	800655c <HAL_SPI_Transmit+0x1c4>
 8006552:	2316      	movs	r3, #22
 8006554:	18fb      	adds	r3, r7, r3
 8006556:	881b      	ldrh	r3, [r3, #0]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d145      	bne.n	80065e8 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	330c      	adds	r3, #12
 8006566:	7812      	ldrb	r2, [r2, #0]
 8006568:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656e:	1c5a      	adds	r2, r3, #1
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006578:	b29b      	uxth	r3, r3
 800657a:	3b01      	subs	r3, #1
 800657c:	b29a      	uxth	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006582:	e031      	b.n	80065e8 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	2202      	movs	r2, #2
 800658c:	4013      	ands	r3, r2
 800658e:	2b02      	cmp	r3, #2
 8006590:	d113      	bne.n	80065ba <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	330c      	adds	r3, #12
 800659c:	7812      	ldrb	r2, [r2, #0]
 800659e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a4:	1c5a      	adds	r2, r3, #1
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	3b01      	subs	r3, #1
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065b8:	e016      	b.n	80065e8 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065ba:	f7fd f909 	bl	80037d0 <HAL_GetTick>
 80065be:	0002      	movs	r2, r0
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d802      	bhi.n	80065d0 <HAL_SPI_Transmit+0x238>
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	3301      	adds	r3, #1
 80065ce:	d102      	bne.n	80065d6 <HAL_SPI_Transmit+0x23e>
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d108      	bne.n	80065e8 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80065d6:	231f      	movs	r3, #31
 80065d8:	18fb      	adds	r3, r7, r3
 80065da:	2203      	movs	r2, #3
 80065dc:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	225d      	movs	r2, #93	; 0x5d
 80065e2:	2101      	movs	r1, #1
 80065e4:	5499      	strb	r1, [r3, r2]
          goto error;
 80065e6:	e02b      	b.n	8006640 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1c8      	bne.n	8006584 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065f2:	69ba      	ldr	r2, [r7, #24]
 80065f4:	6839      	ldr	r1, [r7, #0]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	0018      	movs	r0, r3
 80065fa:	f000 fa65 	bl	8006ac8 <SPI_EndRxTxTransaction>
 80065fe:	1e03      	subs	r3, r0, #0
 8006600:	d002      	beq.n	8006608 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2220      	movs	r2, #32
 8006606:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10a      	bne.n	8006626 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006610:	2300      	movs	r3, #0
 8006612:	613b      	str	r3, [r7, #16]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	613b      	str	r3, [r7, #16]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	613b      	str	r3, [r7, #16]
 8006624:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800662a:	2b00      	cmp	r3, #0
 800662c:	d004      	beq.n	8006638 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800662e:	231f      	movs	r3, #31
 8006630:	18fb      	adds	r3, r7, r3
 8006632:	2201      	movs	r2, #1
 8006634:	701a      	strb	r2, [r3, #0]
 8006636:	e003      	b.n	8006640 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	225d      	movs	r2, #93	; 0x5d
 800663c:	2101      	movs	r1, #1
 800663e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	225c      	movs	r2, #92	; 0x5c
 8006644:	2100      	movs	r1, #0
 8006646:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006648:	231f      	movs	r3, #31
 800664a:	18fb      	adds	r3, r7, r3
 800664c:	781b      	ldrb	r3, [r3, #0]
}
 800664e:	0018      	movs	r0, r3
 8006650:	46bd      	mov	sp, r7
 8006652:	b008      	add	sp, #32
 8006654:	bd80      	pop	{r7, pc}
	...

08006658 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b088      	sub	sp, #32
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	2240      	movs	r2, #64	; 0x40
 8006674:	4013      	ands	r3, r2
 8006676:	d10d      	bne.n	8006694 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	2201      	movs	r2, #1
 800667c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800667e:	d009      	beq.n	8006694 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	2240      	movs	r2, #64	; 0x40
 8006684:	4013      	ands	r3, r2
 8006686:	d005      	beq.n	8006694 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	0010      	movs	r0, r2
 8006690:	4798      	blx	r3
    return;
 8006692:	e0c5      	b.n	8006820 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	2202      	movs	r2, #2
 8006698:	4013      	ands	r3, r2
 800669a:	d009      	beq.n	80066b0 <HAL_SPI_IRQHandler+0x58>
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	2280      	movs	r2, #128	; 0x80
 80066a0:	4013      	ands	r3, r2
 80066a2:	d005      	beq.n	80066b0 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	0010      	movs	r0, r2
 80066ac:	4798      	blx	r3
    return;
 80066ae:	e0b7      	b.n	8006820 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	2220      	movs	r2, #32
 80066b4:	4013      	ands	r3, r2
 80066b6:	d109      	bne.n	80066cc <HAL_SPI_IRQHandler+0x74>
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	2240      	movs	r2, #64	; 0x40
 80066bc:	4013      	ands	r3, r2
 80066be:	d105      	bne.n	80066cc <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80066c0:	69ba      	ldr	r2, [r7, #24]
 80066c2:	2380      	movs	r3, #128	; 0x80
 80066c4:	005b      	lsls	r3, r3, #1
 80066c6:	4013      	ands	r3, r2
 80066c8:	d100      	bne.n	80066cc <HAL_SPI_IRQHandler+0x74>
 80066ca:	e0a9      	b.n	8006820 <HAL_SPI_IRQHandler+0x1c8>
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	2220      	movs	r2, #32
 80066d0:	4013      	ands	r3, r2
 80066d2:	d100      	bne.n	80066d6 <HAL_SPI_IRQHandler+0x7e>
 80066d4:	e0a4      	b.n	8006820 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	2240      	movs	r2, #64	; 0x40
 80066da:	4013      	ands	r3, r2
 80066dc:	d023      	beq.n	8006726 <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	225d      	movs	r2, #93	; 0x5d
 80066e2:	5c9b      	ldrb	r3, [r3, r2]
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b03      	cmp	r3, #3
 80066e8:	d011      	beq.n	800670e <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066ee:	2204      	movs	r2, #4
 80066f0:	431a      	orrs	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066f6:	2300      	movs	r3, #0
 80066f8:	617b      	str	r3, [r7, #20]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	617b      	str	r3, [r7, #20]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	617b      	str	r3, [r7, #20]
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	e00b      	b.n	8006726 <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800670e:	2300      	movs	r3, #0
 8006710:	613b      	str	r3, [r7, #16]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	613b      	str	r3, [r7, #16]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	613b      	str	r3, [r7, #16]
 8006722:	693b      	ldr	r3, [r7, #16]
        return;
 8006724:	e07c      	b.n	8006820 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	2220      	movs	r2, #32
 800672a:	4013      	ands	r3, r2
 800672c:	d014      	beq.n	8006758 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006732:	2201      	movs	r2, #1
 8006734:	431a      	orrs	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800673a:	2300      	movs	r3, #0
 800673c:	60fb      	str	r3, [r7, #12]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	60fb      	str	r3, [r7, #12]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2140      	movs	r1, #64	; 0x40
 8006752:	438a      	bics	r2, r1
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006758:	69ba      	ldr	r2, [r7, #24]
 800675a:	2380      	movs	r3, #128	; 0x80
 800675c:	005b      	lsls	r3, r3, #1
 800675e:	4013      	ands	r3, r2
 8006760:	d00c      	beq.n	800677c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006766:	2208      	movs	r2, #8
 8006768:	431a      	orrs	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800676e:	2300      	movs	r3, #0
 8006770:	60bb      	str	r3, [r7, #8]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	60bb      	str	r3, [r7, #8]
 800677a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006780:	2b00      	cmp	r3, #0
 8006782:	d04c      	beq.n	800681e <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685a      	ldr	r2, [r3, #4]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	21e0      	movs	r1, #224	; 0xe0
 8006790:	438a      	bics	r2, r1
 8006792:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	225d      	movs	r2, #93	; 0x5d
 8006798:	2101      	movs	r1, #1
 800679a:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	2202      	movs	r2, #2
 80067a0:	4013      	ands	r3, r2
 80067a2:	d103      	bne.n	80067ac <HAL_SPI_IRQHandler+0x154>
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	2201      	movs	r2, #1
 80067a8:	4013      	ands	r3, r2
 80067aa:	d032      	beq.n	8006812 <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	685a      	ldr	r2, [r3, #4]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2103      	movs	r1, #3
 80067b8:	438a      	bics	r2, r1
 80067ba:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d010      	beq.n	80067e6 <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067c8:	4a17      	ldr	r2, [pc, #92]	; (8006828 <HAL_SPI_IRQHandler+0x1d0>)
 80067ca:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067d0:	0018      	movs	r0, r3
 80067d2:	f7fe fd75 	bl	80052c0 <HAL_DMA_Abort_IT>
 80067d6:	1e03      	subs	r3, r0, #0
 80067d8:	d005      	beq.n	80067e6 <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067de:	2240      	movs	r2, #64	; 0x40
 80067e0:	431a      	orrs	r2, r3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d016      	beq.n	800681c <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f2:	4a0d      	ldr	r2, [pc, #52]	; (8006828 <HAL_SPI_IRQHandler+0x1d0>)
 80067f4:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fa:	0018      	movs	r0, r3
 80067fc:	f7fe fd60 	bl	80052c0 <HAL_DMA_Abort_IT>
 8006800:	1e03      	subs	r3, r0, #0
 8006802:	d00b      	beq.n	800681c <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006808:	2240      	movs	r2, #64	; 0x40
 800680a:	431a      	orrs	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006810:	e004      	b.n	800681c <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	0018      	movs	r0, r3
 8006816:	f000 f809 	bl	800682c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800681a:	e000      	b.n	800681e <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 800681c:	46c0      	nop			; (mov r8, r8)
    return;
 800681e:	46c0      	nop			; (mov r8, r8)
  }
}
 8006820:	46bd      	mov	sp, r7
 8006822:	b008      	add	sp, #32
 8006824:	bd80      	pop	{r7, pc}
 8006826:	46c0      	nop			; (mov r8, r8)
 8006828:	0800683d 	.word	0x0800683d

0800682c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006834:	46c0      	nop			; (mov r8, r8)
 8006836:	46bd      	mov	sp, r7
 8006838:	b002      	add	sp, #8
 800683a:	bd80      	pop	{r7, pc}

0800683c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006848:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2246      	movs	r2, #70	; 0x46
 800684e:	2100      	movs	r1, #0
 8006850:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	0018      	movs	r0, r3
 800685c:	f7ff ffe6 	bl	800682c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006860:	46c0      	nop			; (mov r8, r8)
 8006862:	46bd      	mov	sp, r7
 8006864:	b004      	add	sp, #16
 8006866:	bd80      	pop	{r7, pc}

08006868 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b088      	sub	sp, #32
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	603b      	str	r3, [r7, #0]
 8006874:	1dfb      	adds	r3, r7, #7
 8006876:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006878:	f7fc ffaa 	bl	80037d0 <HAL_GetTick>
 800687c:	0002      	movs	r2, r0
 800687e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006880:	1a9b      	subs	r3, r3, r2
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	18d3      	adds	r3, r2, r3
 8006886:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006888:	f7fc ffa2 	bl	80037d0 <HAL_GetTick>
 800688c:	0003      	movs	r3, r0
 800688e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006890:	4b3a      	ldr	r3, [pc, #232]	; (800697c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	015b      	lsls	r3, r3, #5
 8006896:	0d1b      	lsrs	r3, r3, #20
 8006898:	69fa      	ldr	r2, [r7, #28]
 800689a:	4353      	muls	r3, r2
 800689c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800689e:	e058      	b.n	8006952 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	3301      	adds	r3, #1
 80068a4:	d055      	beq.n	8006952 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068a6:	f7fc ff93 	bl	80037d0 <HAL_GetTick>
 80068aa:	0002      	movs	r2, r0
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	69fa      	ldr	r2, [r7, #28]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d902      	bls.n	80068bc <SPI_WaitFlagStateUntilTimeout+0x54>
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d142      	bne.n	8006942 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685a      	ldr	r2, [r3, #4]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	21e0      	movs	r1, #224	; 0xe0
 80068c8:	438a      	bics	r2, r1
 80068ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	685a      	ldr	r2, [r3, #4]
 80068d0:	2382      	movs	r3, #130	; 0x82
 80068d2:	005b      	lsls	r3, r3, #1
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d113      	bne.n	8006900 <SPI_WaitFlagStateUntilTimeout+0x98>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	689a      	ldr	r2, [r3, #8]
 80068dc:	2380      	movs	r3, #128	; 0x80
 80068de:	021b      	lsls	r3, r3, #8
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d005      	beq.n	80068f0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	689a      	ldr	r2, [r3, #8]
 80068e8:	2380      	movs	r3, #128	; 0x80
 80068ea:	00db      	lsls	r3, r3, #3
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d107      	bne.n	8006900 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2140      	movs	r1, #64	; 0x40
 80068fc:	438a      	bics	r2, r1
 80068fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006904:	2380      	movs	r3, #128	; 0x80
 8006906:	019b      	lsls	r3, r3, #6
 8006908:	429a      	cmp	r2, r3
 800690a:	d110      	bne.n	800692e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	491a      	ldr	r1, [pc, #104]	; (8006980 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006918:	400a      	ands	r2, r1
 800691a:	601a      	str	r2, [r3, #0]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2180      	movs	r1, #128	; 0x80
 8006928:	0189      	lsls	r1, r1, #6
 800692a:	430a      	orrs	r2, r1
 800692c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	225d      	movs	r2, #93	; 0x5d
 8006932:	2101      	movs	r1, #1
 8006934:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	225c      	movs	r2, #92	; 0x5c
 800693a:	2100      	movs	r1, #0
 800693c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e017      	b.n	8006972 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d101      	bne.n	800694c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006948:	2300      	movs	r3, #0
 800694a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	3b01      	subs	r3, #1
 8006950:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	4013      	ands	r3, r2
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	425a      	negs	r2, r3
 8006962:	4153      	adcs	r3, r2
 8006964:	b2db      	uxtb	r3, r3
 8006966:	001a      	movs	r2, r3
 8006968:	1dfb      	adds	r3, r7, #7
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	429a      	cmp	r2, r3
 800696e:	d197      	bne.n	80068a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	0018      	movs	r0, r3
 8006974:	46bd      	mov	sp, r7
 8006976:	b008      	add	sp, #32
 8006978:	bd80      	pop	{r7, pc}
 800697a:	46c0      	nop			; (mov r8, r8)
 800697c:	20000004 	.word	0x20000004
 8006980:	ffffdfff 	.word	0xffffdfff

08006984 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b08a      	sub	sp, #40	; 0x28
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
 8006990:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006992:	2317      	movs	r3, #23
 8006994:	18fb      	adds	r3, r7, r3
 8006996:	2200      	movs	r2, #0
 8006998:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800699a:	f7fc ff19 	bl	80037d0 <HAL_GetTick>
 800699e:	0002      	movs	r2, r0
 80069a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a2:	1a9b      	subs	r3, r3, r2
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	18d3      	adds	r3, r2, r3
 80069a8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80069aa:	f7fc ff11 	bl	80037d0 <HAL_GetTick>
 80069ae:	0003      	movs	r3, r0
 80069b0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	330c      	adds	r3, #12
 80069b8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80069ba:	4b41      	ldr	r3, [pc, #260]	; (8006ac0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	0013      	movs	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	189b      	adds	r3, r3, r2
 80069c4:	00da      	lsls	r2, r3, #3
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	0d1b      	lsrs	r3, r3, #20
 80069ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069cc:	4353      	muls	r3, r2
 80069ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80069d0:	e068      	b.n	8006aa4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	23c0      	movs	r3, #192	; 0xc0
 80069d6:	00db      	lsls	r3, r3, #3
 80069d8:	429a      	cmp	r2, r3
 80069da:	d10a      	bne.n	80069f2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d107      	bne.n	80069f2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	2117      	movs	r1, #23
 80069ea:	187b      	adds	r3, r7, r1
 80069ec:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80069ee:	187b      	adds	r3, r7, r1
 80069f0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	3301      	adds	r3, #1
 80069f6:	d055      	beq.n	8006aa4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069f8:	f7fc feea 	bl	80037d0 <HAL_GetTick>
 80069fc:	0002      	movs	r2, r0
 80069fe:	6a3b      	ldr	r3, [r7, #32]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d902      	bls.n	8006a0e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d142      	bne.n	8006a94 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	21e0      	movs	r1, #224	; 0xe0
 8006a1a:	438a      	bics	r2, r1
 8006a1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	2382      	movs	r3, #130	; 0x82
 8006a24:	005b      	lsls	r3, r3, #1
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d113      	bne.n	8006a52 <SPI_WaitFifoStateUntilTimeout+0xce>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	689a      	ldr	r2, [r3, #8]
 8006a2e:	2380      	movs	r3, #128	; 0x80
 8006a30:	021b      	lsls	r3, r3, #8
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d005      	beq.n	8006a42 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	689a      	ldr	r2, [r3, #8]
 8006a3a:	2380      	movs	r3, #128	; 0x80
 8006a3c:	00db      	lsls	r3, r3, #3
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d107      	bne.n	8006a52 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2140      	movs	r1, #64	; 0x40
 8006a4e:	438a      	bics	r2, r1
 8006a50:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a56:	2380      	movs	r3, #128	; 0x80
 8006a58:	019b      	lsls	r3, r3, #6
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d110      	bne.n	8006a80 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4916      	ldr	r1, [pc, #88]	; (8006ac4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006a6a:	400a      	ands	r2, r1
 8006a6c:	601a      	str	r2, [r3, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2180      	movs	r1, #128	; 0x80
 8006a7a:	0189      	lsls	r1, r1, #6
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	225d      	movs	r2, #93	; 0x5d
 8006a84:	2101      	movs	r1, #1
 8006a86:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	225c      	movs	r2, #92	; 0x5c
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	e010      	b.n	8006ab6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	4013      	ands	r3, r2
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d18e      	bne.n	80069d2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	0018      	movs	r0, r3
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	b00a      	add	sp, #40	; 0x28
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	46c0      	nop			; (mov r8, r8)
 8006ac0:	20000004 	.word	0x20000004
 8006ac4:	ffffdfff 	.word	0xffffdfff

08006ac8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af02      	add	r7, sp, #8
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	23c0      	movs	r3, #192	; 0xc0
 8006ad8:	0159      	lsls	r1, r3, #5
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	9300      	str	r3, [sp, #0]
 8006ae0:	0013      	movs	r3, r2
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f7ff ff4e 	bl	8006984 <SPI_WaitFifoStateUntilTimeout>
 8006ae8:	1e03      	subs	r3, r0, #0
 8006aea:	d007      	beq.n	8006afc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006af0:	2220      	movs	r2, #32
 8006af2:	431a      	orrs	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e027      	b.n	8006b4c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	9300      	str	r3, [sp, #0]
 8006b04:	0013      	movs	r3, r2
 8006b06:	2200      	movs	r2, #0
 8006b08:	2180      	movs	r1, #128	; 0x80
 8006b0a:	f7ff fead 	bl	8006868 <SPI_WaitFlagStateUntilTimeout>
 8006b0e:	1e03      	subs	r3, r0, #0
 8006b10:	d007      	beq.n	8006b22 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b16:	2220      	movs	r2, #32
 8006b18:	431a      	orrs	r2, r3
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e014      	b.n	8006b4c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	23c0      	movs	r3, #192	; 0xc0
 8006b26:	00d9      	lsls	r1, r3, #3
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	0013      	movs	r3, r2
 8006b30:	2200      	movs	r2, #0
 8006b32:	f7ff ff27 	bl	8006984 <SPI_WaitFifoStateUntilTimeout>
 8006b36:	1e03      	subs	r3, r0, #0
 8006b38:	d007      	beq.n	8006b4a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b3e:	2220      	movs	r2, #32
 8006b40:	431a      	orrs	r2, r3
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e000      	b.n	8006b4c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	0018      	movs	r0, r3
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	b004      	add	sp, #16
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d101      	bne.n	8006b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e042      	b.n	8006bec <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	223d      	movs	r2, #61	; 0x3d
 8006b6a:	5c9b      	ldrb	r3, [r3, r2]
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d107      	bne.n	8006b82 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	223c      	movs	r2, #60	; 0x3c
 8006b76:	2100      	movs	r1, #0
 8006b78:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	0018      	movs	r0, r3
 8006b7e:	f7fc fa3d 	bl	8002ffc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	223d      	movs	r2, #61	; 0x3d
 8006b86:	2102      	movs	r1, #2
 8006b88:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	3304      	adds	r3, #4
 8006b92:	0019      	movs	r1, r3
 8006b94:	0010      	movs	r0, r2
 8006b96:	f000 f94b 	bl	8006e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2246      	movs	r2, #70	; 0x46
 8006b9e:	2101      	movs	r1, #1
 8006ba0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	223e      	movs	r2, #62	; 0x3e
 8006ba6:	2101      	movs	r1, #1
 8006ba8:	5499      	strb	r1, [r3, r2]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	223f      	movs	r2, #63	; 0x3f
 8006bae:	2101      	movs	r1, #1
 8006bb0:	5499      	strb	r1, [r3, r2]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2240      	movs	r2, #64	; 0x40
 8006bb6:	2101      	movs	r1, #1
 8006bb8:	5499      	strb	r1, [r3, r2]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2241      	movs	r2, #65	; 0x41
 8006bbe:	2101      	movs	r1, #1
 8006bc0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2242      	movs	r2, #66	; 0x42
 8006bc6:	2101      	movs	r1, #1
 8006bc8:	5499      	strb	r1, [r3, r2]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2243      	movs	r2, #67	; 0x43
 8006bce:	2101      	movs	r1, #1
 8006bd0:	5499      	strb	r1, [r3, r2]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2244      	movs	r2, #68	; 0x44
 8006bd6:	2101      	movs	r1, #1
 8006bd8:	5499      	strb	r1, [r3, r2]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2245      	movs	r2, #69	; 0x45
 8006bde:	2101      	movs	r1, #1
 8006be0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	223d      	movs	r2, #61	; 0x3d
 8006be6:	2101      	movs	r1, #1
 8006be8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	0018      	movs	r0, r3
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	b002      	add	sp, #8
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	223d      	movs	r2, #61	; 0x3d
 8006c00:	5c9b      	ldrb	r3, [r3, r2]
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d001      	beq.n	8006c0c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e033      	b.n	8006c74 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	223d      	movs	r2, #61	; 0x3d
 8006c10:	2102      	movs	r1, #2
 8006c12:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a18      	ldr	r2, [pc, #96]	; (8006c7c <HAL_TIM_Base_Start+0x88>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d00f      	beq.n	8006c3e <HAL_TIM_Base_Start+0x4a>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	2380      	movs	r3, #128	; 0x80
 8006c24:	05db      	lsls	r3, r3, #23
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d009      	beq.n	8006c3e <HAL_TIM_Base_Start+0x4a>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a14      	ldr	r2, [pc, #80]	; (8006c80 <HAL_TIM_Base_Start+0x8c>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d004      	beq.n	8006c3e <HAL_TIM_Base_Start+0x4a>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a12      	ldr	r2, [pc, #72]	; (8006c84 <HAL_TIM_Base_Start+0x90>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d111      	bne.n	8006c62 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	2207      	movs	r2, #7
 8006c46:	4013      	ands	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2b06      	cmp	r3, #6
 8006c4e:	d010      	beq.n	8006c72 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2101      	movs	r1, #1
 8006c5c:	430a      	orrs	r2, r1
 8006c5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c60:	e007      	b.n	8006c72 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2101      	movs	r1, #1
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	0018      	movs	r0, r3
 8006c76:	46bd      	mov	sp, r7
 8006c78:	b004      	add	sp, #16
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	40012c00 	.word	0x40012c00
 8006c80:	40000400 	.word	0x40000400
 8006c84:	40014000 	.word	0x40014000

08006c88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c92:	230f      	movs	r3, #15
 8006c94:	18fb      	adds	r3, r7, r3
 8006c96:	2200      	movs	r2, #0
 8006c98:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	223c      	movs	r2, #60	; 0x3c
 8006c9e:	5c9b      	ldrb	r3, [r3, r2]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d101      	bne.n	8006ca8 <HAL_TIM_ConfigClockSource+0x20>
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	e0bc      	b.n	8006e22 <HAL_TIM_ConfigClockSource+0x19a>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	223c      	movs	r2, #60	; 0x3c
 8006cac:	2101      	movs	r1, #1
 8006cae:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	223d      	movs	r2, #61	; 0x3d
 8006cb4:	2102      	movs	r1, #2
 8006cb6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	2277      	movs	r2, #119	; 0x77
 8006cc4:	4393      	bics	r3, r2
 8006cc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	4a58      	ldr	r2, [pc, #352]	; (8006e2c <HAL_TIM_ConfigClockSource+0x1a4>)
 8006ccc:	4013      	ands	r3, r2
 8006cce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2280      	movs	r2, #128	; 0x80
 8006cde:	0192      	lsls	r2, r2, #6
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d040      	beq.n	8006d66 <HAL_TIM_ConfigClockSource+0xde>
 8006ce4:	2280      	movs	r2, #128	; 0x80
 8006ce6:	0192      	lsls	r2, r2, #6
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d900      	bls.n	8006cee <HAL_TIM_ConfigClockSource+0x66>
 8006cec:	e088      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x178>
 8006cee:	2280      	movs	r2, #128	; 0x80
 8006cf0:	0152      	lsls	r2, r2, #5
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d100      	bne.n	8006cf8 <HAL_TIM_ConfigClockSource+0x70>
 8006cf6:	e088      	b.n	8006e0a <HAL_TIM_ConfigClockSource+0x182>
 8006cf8:	2280      	movs	r2, #128	; 0x80
 8006cfa:	0152      	lsls	r2, r2, #5
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d900      	bls.n	8006d02 <HAL_TIM_ConfigClockSource+0x7a>
 8006d00:	e07e      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x178>
 8006d02:	2b70      	cmp	r3, #112	; 0x70
 8006d04:	d018      	beq.n	8006d38 <HAL_TIM_ConfigClockSource+0xb0>
 8006d06:	d900      	bls.n	8006d0a <HAL_TIM_ConfigClockSource+0x82>
 8006d08:	e07a      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x178>
 8006d0a:	2b60      	cmp	r3, #96	; 0x60
 8006d0c:	d04f      	beq.n	8006dae <HAL_TIM_ConfigClockSource+0x126>
 8006d0e:	d900      	bls.n	8006d12 <HAL_TIM_ConfigClockSource+0x8a>
 8006d10:	e076      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x178>
 8006d12:	2b50      	cmp	r3, #80	; 0x50
 8006d14:	d03b      	beq.n	8006d8e <HAL_TIM_ConfigClockSource+0x106>
 8006d16:	d900      	bls.n	8006d1a <HAL_TIM_ConfigClockSource+0x92>
 8006d18:	e072      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x178>
 8006d1a:	2b40      	cmp	r3, #64	; 0x40
 8006d1c:	d057      	beq.n	8006dce <HAL_TIM_ConfigClockSource+0x146>
 8006d1e:	d900      	bls.n	8006d22 <HAL_TIM_ConfigClockSource+0x9a>
 8006d20:	e06e      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x178>
 8006d22:	2b30      	cmp	r3, #48	; 0x30
 8006d24:	d063      	beq.n	8006dee <HAL_TIM_ConfigClockSource+0x166>
 8006d26:	d86b      	bhi.n	8006e00 <HAL_TIM_ConfigClockSource+0x178>
 8006d28:	2b20      	cmp	r3, #32
 8006d2a:	d060      	beq.n	8006dee <HAL_TIM_ConfigClockSource+0x166>
 8006d2c:	d868      	bhi.n	8006e00 <HAL_TIM_ConfigClockSource+0x178>
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d05d      	beq.n	8006dee <HAL_TIM_ConfigClockSource+0x166>
 8006d32:	2b10      	cmp	r3, #16
 8006d34:	d05b      	beq.n	8006dee <HAL_TIM_ConfigClockSource+0x166>
 8006d36:	e063      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d48:	f000 f96c 	bl	8007024 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	2277      	movs	r2, #119	; 0x77
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	609a      	str	r2, [r3, #8]
      break;
 8006d64:	e052      	b.n	8006e0c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d76:	f000 f955 	bl	8007024 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	689a      	ldr	r2, [r3, #8]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2180      	movs	r1, #128	; 0x80
 8006d86:	01c9      	lsls	r1, r1, #7
 8006d88:	430a      	orrs	r2, r1
 8006d8a:	609a      	str	r2, [r3, #8]
      break;
 8006d8c:	e03e      	b.n	8006e0c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d9a:	001a      	movs	r2, r3
 8006d9c:	f000 f8c8 	bl	8006f30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2150      	movs	r1, #80	; 0x50
 8006da6:	0018      	movs	r0, r3
 8006da8:	f000 f922 	bl	8006ff0 <TIM_ITRx_SetConfig>
      break;
 8006dac:	e02e      	b.n	8006e0c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dba:	001a      	movs	r2, r3
 8006dbc:	f000 f8e6 	bl	8006f8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2160      	movs	r1, #96	; 0x60
 8006dc6:	0018      	movs	r0, r3
 8006dc8:	f000 f912 	bl	8006ff0 <TIM_ITRx_SetConfig>
      break;
 8006dcc:	e01e      	b.n	8006e0c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dda:	001a      	movs	r2, r3
 8006ddc:	f000 f8a8 	bl	8006f30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2140      	movs	r1, #64	; 0x40
 8006de6:	0018      	movs	r0, r3
 8006de8:	f000 f902 	bl	8006ff0 <TIM_ITRx_SetConfig>
      break;
 8006dec:	e00e      	b.n	8006e0c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	0019      	movs	r1, r3
 8006df8:	0010      	movs	r0, r2
 8006dfa:	f000 f8f9 	bl	8006ff0 <TIM_ITRx_SetConfig>
      break;
 8006dfe:	e005      	b.n	8006e0c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006e00:	230f      	movs	r3, #15
 8006e02:	18fb      	adds	r3, r7, r3
 8006e04:	2201      	movs	r2, #1
 8006e06:	701a      	strb	r2, [r3, #0]
      break;
 8006e08:	e000      	b.n	8006e0c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8006e0a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	223d      	movs	r2, #61	; 0x3d
 8006e10:	2101      	movs	r1, #1
 8006e12:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	223c      	movs	r2, #60	; 0x3c
 8006e18:	2100      	movs	r1, #0
 8006e1a:	5499      	strb	r1, [r3, r2]

  return status;
 8006e1c:	230f      	movs	r3, #15
 8006e1e:	18fb      	adds	r3, r7, r3
 8006e20:	781b      	ldrb	r3, [r3, #0]
}
 8006e22:	0018      	movs	r0, r3
 8006e24:	46bd      	mov	sp, r7
 8006e26:	b004      	add	sp, #16
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	46c0      	nop			; (mov r8, r8)
 8006e2c:	ffff00ff 	.word	0xffff00ff

08006e30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a34      	ldr	r2, [pc, #208]	; (8006f14 <TIM_Base_SetConfig+0xe4>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d008      	beq.n	8006e5a <TIM_Base_SetConfig+0x2a>
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	2380      	movs	r3, #128	; 0x80
 8006e4c:	05db      	lsls	r3, r3, #23
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d003      	beq.n	8006e5a <TIM_Base_SetConfig+0x2a>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a30      	ldr	r2, [pc, #192]	; (8006f18 <TIM_Base_SetConfig+0xe8>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d108      	bne.n	8006e6c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2270      	movs	r2, #112	; 0x70
 8006e5e:	4393      	bics	r3, r2
 8006e60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a29      	ldr	r2, [pc, #164]	; (8006f14 <TIM_Base_SetConfig+0xe4>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d018      	beq.n	8006ea6 <TIM_Base_SetConfig+0x76>
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	2380      	movs	r3, #128	; 0x80
 8006e78:	05db      	lsls	r3, r3, #23
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d013      	beq.n	8006ea6 <TIM_Base_SetConfig+0x76>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a25      	ldr	r2, [pc, #148]	; (8006f18 <TIM_Base_SetConfig+0xe8>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d00f      	beq.n	8006ea6 <TIM_Base_SetConfig+0x76>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a24      	ldr	r2, [pc, #144]	; (8006f1c <TIM_Base_SetConfig+0xec>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d00b      	beq.n	8006ea6 <TIM_Base_SetConfig+0x76>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a23      	ldr	r2, [pc, #140]	; (8006f20 <TIM_Base_SetConfig+0xf0>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d007      	beq.n	8006ea6 <TIM_Base_SetConfig+0x76>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a22      	ldr	r2, [pc, #136]	; (8006f24 <TIM_Base_SetConfig+0xf4>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d003      	beq.n	8006ea6 <TIM_Base_SetConfig+0x76>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a21      	ldr	r2, [pc, #132]	; (8006f28 <TIM_Base_SetConfig+0xf8>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d108      	bne.n	8006eb8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	4a20      	ldr	r2, [pc, #128]	; (8006f2c <TIM_Base_SetConfig+0xfc>)
 8006eaa:	4013      	ands	r3, r2
 8006eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2280      	movs	r2, #128	; 0x80
 8006ebc:	4393      	bics	r3, r2
 8006ebe:	001a      	movs	r2, r3
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	695b      	ldr	r3, [r3, #20]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	689a      	ldr	r2, [r3, #8]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a0c      	ldr	r2, [pc, #48]	; (8006f14 <TIM_Base_SetConfig+0xe4>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d00b      	beq.n	8006efe <TIM_Base_SetConfig+0xce>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a0d      	ldr	r2, [pc, #52]	; (8006f20 <TIM_Base_SetConfig+0xf0>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d007      	beq.n	8006efe <TIM_Base_SetConfig+0xce>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a0c      	ldr	r2, [pc, #48]	; (8006f24 <TIM_Base_SetConfig+0xf4>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d003      	beq.n	8006efe <TIM_Base_SetConfig+0xce>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a0b      	ldr	r2, [pc, #44]	; (8006f28 <TIM_Base_SetConfig+0xf8>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d103      	bne.n	8006f06 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	691a      	ldr	r2, [r3, #16]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	615a      	str	r2, [r3, #20]
}
 8006f0c:	46c0      	nop			; (mov r8, r8)
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	b004      	add	sp, #16
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	40012c00 	.word	0x40012c00
 8006f18:	40000400 	.word	0x40000400
 8006f1c:	40002000 	.word	0x40002000
 8006f20:	40014000 	.word	0x40014000
 8006f24:	40014400 	.word	0x40014400
 8006f28:	40014800 	.word	0x40014800
 8006f2c:	fffffcff 	.word	0xfffffcff

08006f30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6a1b      	ldr	r3, [r3, #32]
 8006f40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	2201      	movs	r2, #1
 8006f48:	4393      	bics	r3, r2
 8006f4a:	001a      	movs	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	22f0      	movs	r2, #240	; 0xf0
 8006f5a:	4393      	bics	r3, r2
 8006f5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	011b      	lsls	r3, r3, #4
 8006f62:	693a      	ldr	r2, [r7, #16]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	220a      	movs	r2, #10
 8006f6c:	4393      	bics	r3, r2
 8006f6e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	621a      	str	r2, [r3, #32]
}
 8006f84:	46c0      	nop			; (mov r8, r8)
 8006f86:	46bd      	mov	sp, r7
 8006f88:	b006      	add	sp, #24
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b086      	sub	sp, #24
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6a1b      	ldr	r3, [r3, #32]
 8006f9c:	2210      	movs	r2, #16
 8006f9e:	4393      	bics	r3, r2
 8006fa0:	001a      	movs	r2, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6a1b      	ldr	r3, [r3, #32]
 8006fb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	4a0d      	ldr	r2, [pc, #52]	; (8006fec <TIM_TI2_ConfigInputStage+0x60>)
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	031b      	lsls	r3, r3, #12
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	22a0      	movs	r2, #160	; 0xa0
 8006fc8:	4393      	bics	r3, r2
 8006fca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	011b      	lsls	r3, r3, #4
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	697a      	ldr	r2, [r7, #20]
 8006fda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	693a      	ldr	r2, [r7, #16]
 8006fe0:	621a      	str	r2, [r3, #32]
}
 8006fe2:	46c0      	nop			; (mov r8, r8)
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	b006      	add	sp, #24
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	46c0      	nop			; (mov r8, r8)
 8006fec:	ffff0fff 	.word	0xffff0fff

08006ff0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2270      	movs	r2, #112	; 0x70
 8007004:	4393      	bics	r3, r2
 8007006:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007008:	683a      	ldr	r2, [r7, #0]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	4313      	orrs	r3, r2
 800700e:	2207      	movs	r2, #7
 8007010:	4313      	orrs	r3, r2
 8007012:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	609a      	str	r2, [r3, #8]
}
 800701a:	46c0      	nop			; (mov r8, r8)
 800701c:	46bd      	mov	sp, r7
 800701e:	b004      	add	sp, #16
 8007020:	bd80      	pop	{r7, pc}
	...

08007024 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
 8007030:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	4a09      	ldr	r2, [pc, #36]	; (8007060 <TIM_ETR_SetConfig+0x3c>)
 800703c:	4013      	ands	r3, r2
 800703e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	021a      	lsls	r2, r3, #8
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	431a      	orrs	r2, r3
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	4313      	orrs	r3, r2
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	4313      	orrs	r3, r2
 8007050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	697a      	ldr	r2, [r7, #20]
 8007056:	609a      	str	r2, [r3, #8]
}
 8007058:	46c0      	nop			; (mov r8, r8)
 800705a:	46bd      	mov	sp, r7
 800705c:	b006      	add	sp, #24
 800705e:	bd80      	pop	{r7, pc}
 8007060:	ffff00ff 	.word	0xffff00ff

08007064 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	223c      	movs	r2, #60	; 0x3c
 8007072:	5c9b      	ldrb	r3, [r3, r2]
 8007074:	2b01      	cmp	r3, #1
 8007076:	d101      	bne.n	800707c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007078:	2302      	movs	r3, #2
 800707a:	e047      	b.n	800710c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	223c      	movs	r2, #60	; 0x3c
 8007080:	2101      	movs	r1, #1
 8007082:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	223d      	movs	r2, #61	; 0x3d
 8007088:	2102      	movs	r1, #2
 800708a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2270      	movs	r2, #112	; 0x70
 80070a0:	4393      	bics	r3, r2
 80070a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a16      	ldr	r2, [pc, #88]	; (8007114 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d00f      	beq.n	80070e0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	2380      	movs	r3, #128	; 0x80
 80070c6:	05db      	lsls	r3, r3, #23
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d009      	beq.n	80070e0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a11      	ldr	r2, [pc, #68]	; (8007118 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d004      	beq.n	80070e0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a10      	ldr	r2, [pc, #64]	; (800711c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d10c      	bne.n	80070fa <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	2280      	movs	r2, #128	; 0x80
 80070e4:	4393      	bics	r3, r2
 80070e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	223d      	movs	r2, #61	; 0x3d
 80070fe:	2101      	movs	r1, #1
 8007100:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	223c      	movs	r2, #60	; 0x3c
 8007106:	2100      	movs	r1, #0
 8007108:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	0018      	movs	r0, r3
 800710e:	46bd      	mov	sp, r7
 8007110:	b004      	add	sp, #16
 8007112:	bd80      	pop	{r7, pc}
 8007114:	40012c00 	.word	0x40012c00
 8007118:	40000400 	.word	0x40000400
 800711c:	40014000 	.word	0x40014000

08007120 <sniprintf>:
 8007120:	b40c      	push	{r2, r3}
 8007122:	b530      	push	{r4, r5, lr}
 8007124:	4b17      	ldr	r3, [pc, #92]	; (8007184 <sniprintf+0x64>)
 8007126:	000c      	movs	r4, r1
 8007128:	681d      	ldr	r5, [r3, #0]
 800712a:	b09d      	sub	sp, #116	; 0x74
 800712c:	2900      	cmp	r1, #0
 800712e:	da08      	bge.n	8007142 <sniprintf+0x22>
 8007130:	238b      	movs	r3, #139	; 0x8b
 8007132:	2001      	movs	r0, #1
 8007134:	602b      	str	r3, [r5, #0]
 8007136:	4240      	negs	r0, r0
 8007138:	b01d      	add	sp, #116	; 0x74
 800713a:	bc30      	pop	{r4, r5}
 800713c:	bc08      	pop	{r3}
 800713e:	b002      	add	sp, #8
 8007140:	4718      	bx	r3
 8007142:	2382      	movs	r3, #130	; 0x82
 8007144:	466a      	mov	r2, sp
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	8293      	strh	r3, [r2, #20]
 800714a:	2300      	movs	r3, #0
 800714c:	9002      	str	r0, [sp, #8]
 800714e:	9006      	str	r0, [sp, #24]
 8007150:	4299      	cmp	r1, r3
 8007152:	d000      	beq.n	8007156 <sniprintf+0x36>
 8007154:	1e4b      	subs	r3, r1, #1
 8007156:	9304      	str	r3, [sp, #16]
 8007158:	9307      	str	r3, [sp, #28]
 800715a:	2301      	movs	r3, #1
 800715c:	466a      	mov	r2, sp
 800715e:	425b      	negs	r3, r3
 8007160:	82d3      	strh	r3, [r2, #22]
 8007162:	0028      	movs	r0, r5
 8007164:	ab21      	add	r3, sp, #132	; 0x84
 8007166:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007168:	a902      	add	r1, sp, #8
 800716a:	9301      	str	r3, [sp, #4]
 800716c:	f000 f9be 	bl	80074ec <_svfiprintf_r>
 8007170:	1c43      	adds	r3, r0, #1
 8007172:	da01      	bge.n	8007178 <sniprintf+0x58>
 8007174:	238b      	movs	r3, #139	; 0x8b
 8007176:	602b      	str	r3, [r5, #0]
 8007178:	2c00      	cmp	r4, #0
 800717a:	d0dd      	beq.n	8007138 <sniprintf+0x18>
 800717c:	2200      	movs	r2, #0
 800717e:	9b02      	ldr	r3, [sp, #8]
 8007180:	701a      	strb	r2, [r3, #0]
 8007182:	e7d9      	b.n	8007138 <sniprintf+0x18>
 8007184:	2000005c 	.word	0x2000005c

08007188 <memset>:
 8007188:	0003      	movs	r3, r0
 800718a:	1882      	adds	r2, r0, r2
 800718c:	4293      	cmp	r3, r2
 800718e:	d100      	bne.n	8007192 <memset+0xa>
 8007190:	4770      	bx	lr
 8007192:	7019      	strb	r1, [r3, #0]
 8007194:	3301      	adds	r3, #1
 8007196:	e7f9      	b.n	800718c <memset+0x4>

08007198 <strncpy>:
 8007198:	0003      	movs	r3, r0
 800719a:	b530      	push	{r4, r5, lr}
 800719c:	001d      	movs	r5, r3
 800719e:	2a00      	cmp	r2, #0
 80071a0:	d006      	beq.n	80071b0 <strncpy+0x18>
 80071a2:	780c      	ldrb	r4, [r1, #0]
 80071a4:	3a01      	subs	r2, #1
 80071a6:	3301      	adds	r3, #1
 80071a8:	702c      	strb	r4, [r5, #0]
 80071aa:	3101      	adds	r1, #1
 80071ac:	2c00      	cmp	r4, #0
 80071ae:	d1f5      	bne.n	800719c <strncpy+0x4>
 80071b0:	2100      	movs	r1, #0
 80071b2:	189a      	adds	r2, r3, r2
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d100      	bne.n	80071ba <strncpy+0x22>
 80071b8:	bd30      	pop	{r4, r5, pc}
 80071ba:	7019      	strb	r1, [r3, #0]
 80071bc:	3301      	adds	r3, #1
 80071be:	e7f9      	b.n	80071b4 <strncpy+0x1c>

080071c0 <__errno>:
 80071c0:	4b01      	ldr	r3, [pc, #4]	; (80071c8 <__errno+0x8>)
 80071c2:	6818      	ldr	r0, [r3, #0]
 80071c4:	4770      	bx	lr
 80071c6:	46c0      	nop			; (mov r8, r8)
 80071c8:	2000005c 	.word	0x2000005c

080071cc <__libc_init_array>:
 80071cc:	b570      	push	{r4, r5, r6, lr}
 80071ce:	2600      	movs	r6, #0
 80071d0:	4c0c      	ldr	r4, [pc, #48]	; (8007204 <__libc_init_array+0x38>)
 80071d2:	4d0d      	ldr	r5, [pc, #52]	; (8007208 <__libc_init_array+0x3c>)
 80071d4:	1b64      	subs	r4, r4, r5
 80071d6:	10a4      	asrs	r4, r4, #2
 80071d8:	42a6      	cmp	r6, r4
 80071da:	d109      	bne.n	80071f0 <__libc_init_array+0x24>
 80071dc:	2600      	movs	r6, #0
 80071de:	f000 fc6d 	bl	8007abc <_init>
 80071e2:	4c0a      	ldr	r4, [pc, #40]	; (800720c <__libc_init_array+0x40>)
 80071e4:	4d0a      	ldr	r5, [pc, #40]	; (8007210 <__libc_init_array+0x44>)
 80071e6:	1b64      	subs	r4, r4, r5
 80071e8:	10a4      	asrs	r4, r4, #2
 80071ea:	42a6      	cmp	r6, r4
 80071ec:	d105      	bne.n	80071fa <__libc_init_array+0x2e>
 80071ee:	bd70      	pop	{r4, r5, r6, pc}
 80071f0:	00b3      	lsls	r3, r6, #2
 80071f2:	58eb      	ldr	r3, [r5, r3]
 80071f4:	4798      	blx	r3
 80071f6:	3601      	adds	r6, #1
 80071f8:	e7ee      	b.n	80071d8 <__libc_init_array+0xc>
 80071fa:	00b3      	lsls	r3, r6, #2
 80071fc:	58eb      	ldr	r3, [r5, r3]
 80071fe:	4798      	blx	r3
 8007200:	3601      	adds	r6, #1
 8007202:	e7f2      	b.n	80071ea <__libc_init_array+0x1e>
 8007204:	080081e8 	.word	0x080081e8
 8007208:	080081e8 	.word	0x080081e8
 800720c:	080081ec 	.word	0x080081ec
 8007210:	080081e8 	.word	0x080081e8

08007214 <__retarget_lock_acquire_recursive>:
 8007214:	4770      	bx	lr

08007216 <__retarget_lock_release_recursive>:
 8007216:	4770      	bx	lr

08007218 <memcpy>:
 8007218:	2300      	movs	r3, #0
 800721a:	b510      	push	{r4, lr}
 800721c:	429a      	cmp	r2, r3
 800721e:	d100      	bne.n	8007222 <memcpy+0xa>
 8007220:	bd10      	pop	{r4, pc}
 8007222:	5ccc      	ldrb	r4, [r1, r3]
 8007224:	54c4      	strb	r4, [r0, r3]
 8007226:	3301      	adds	r3, #1
 8007228:	e7f8      	b.n	800721c <memcpy+0x4>
	...

0800722c <_free_r>:
 800722c:	b570      	push	{r4, r5, r6, lr}
 800722e:	0005      	movs	r5, r0
 8007230:	2900      	cmp	r1, #0
 8007232:	d010      	beq.n	8007256 <_free_r+0x2a>
 8007234:	1f0c      	subs	r4, r1, #4
 8007236:	6823      	ldr	r3, [r4, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	da00      	bge.n	800723e <_free_r+0x12>
 800723c:	18e4      	adds	r4, r4, r3
 800723e:	0028      	movs	r0, r5
 8007240:	f000 f8e2 	bl	8007408 <__malloc_lock>
 8007244:	4a1d      	ldr	r2, [pc, #116]	; (80072bc <_free_r+0x90>)
 8007246:	6813      	ldr	r3, [r2, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d105      	bne.n	8007258 <_free_r+0x2c>
 800724c:	6063      	str	r3, [r4, #4]
 800724e:	6014      	str	r4, [r2, #0]
 8007250:	0028      	movs	r0, r5
 8007252:	f000 f8e1 	bl	8007418 <__malloc_unlock>
 8007256:	bd70      	pop	{r4, r5, r6, pc}
 8007258:	42a3      	cmp	r3, r4
 800725a:	d908      	bls.n	800726e <_free_r+0x42>
 800725c:	6820      	ldr	r0, [r4, #0]
 800725e:	1821      	adds	r1, r4, r0
 8007260:	428b      	cmp	r3, r1
 8007262:	d1f3      	bne.n	800724c <_free_r+0x20>
 8007264:	6819      	ldr	r1, [r3, #0]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	1809      	adds	r1, r1, r0
 800726a:	6021      	str	r1, [r4, #0]
 800726c:	e7ee      	b.n	800724c <_free_r+0x20>
 800726e:	001a      	movs	r2, r3
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <_free_r+0x4e>
 8007276:	42a3      	cmp	r3, r4
 8007278:	d9f9      	bls.n	800726e <_free_r+0x42>
 800727a:	6811      	ldr	r1, [r2, #0]
 800727c:	1850      	adds	r0, r2, r1
 800727e:	42a0      	cmp	r0, r4
 8007280:	d10b      	bne.n	800729a <_free_r+0x6e>
 8007282:	6820      	ldr	r0, [r4, #0]
 8007284:	1809      	adds	r1, r1, r0
 8007286:	1850      	adds	r0, r2, r1
 8007288:	6011      	str	r1, [r2, #0]
 800728a:	4283      	cmp	r3, r0
 800728c:	d1e0      	bne.n	8007250 <_free_r+0x24>
 800728e:	6818      	ldr	r0, [r3, #0]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	1841      	adds	r1, r0, r1
 8007294:	6011      	str	r1, [r2, #0]
 8007296:	6053      	str	r3, [r2, #4]
 8007298:	e7da      	b.n	8007250 <_free_r+0x24>
 800729a:	42a0      	cmp	r0, r4
 800729c:	d902      	bls.n	80072a4 <_free_r+0x78>
 800729e:	230c      	movs	r3, #12
 80072a0:	602b      	str	r3, [r5, #0]
 80072a2:	e7d5      	b.n	8007250 <_free_r+0x24>
 80072a4:	6820      	ldr	r0, [r4, #0]
 80072a6:	1821      	adds	r1, r4, r0
 80072a8:	428b      	cmp	r3, r1
 80072aa:	d103      	bne.n	80072b4 <_free_r+0x88>
 80072ac:	6819      	ldr	r1, [r3, #0]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	1809      	adds	r1, r1, r0
 80072b2:	6021      	str	r1, [r4, #0]
 80072b4:	6063      	str	r3, [r4, #4]
 80072b6:	6054      	str	r4, [r2, #4]
 80072b8:	e7ca      	b.n	8007250 <_free_r+0x24>
 80072ba:	46c0      	nop			; (mov r8, r8)
 80072bc:	20001568 	.word	0x20001568

080072c0 <sbrk_aligned>:
 80072c0:	b570      	push	{r4, r5, r6, lr}
 80072c2:	4e0f      	ldr	r6, [pc, #60]	; (8007300 <sbrk_aligned+0x40>)
 80072c4:	000d      	movs	r5, r1
 80072c6:	6831      	ldr	r1, [r6, #0]
 80072c8:	0004      	movs	r4, r0
 80072ca:	2900      	cmp	r1, #0
 80072cc:	d102      	bne.n	80072d4 <sbrk_aligned+0x14>
 80072ce:	f000 fba1 	bl	8007a14 <_sbrk_r>
 80072d2:	6030      	str	r0, [r6, #0]
 80072d4:	0029      	movs	r1, r5
 80072d6:	0020      	movs	r0, r4
 80072d8:	f000 fb9c 	bl	8007a14 <_sbrk_r>
 80072dc:	1c43      	adds	r3, r0, #1
 80072de:	d00a      	beq.n	80072f6 <sbrk_aligned+0x36>
 80072e0:	2303      	movs	r3, #3
 80072e2:	1cc5      	adds	r5, r0, #3
 80072e4:	439d      	bics	r5, r3
 80072e6:	42a8      	cmp	r0, r5
 80072e8:	d007      	beq.n	80072fa <sbrk_aligned+0x3a>
 80072ea:	1a29      	subs	r1, r5, r0
 80072ec:	0020      	movs	r0, r4
 80072ee:	f000 fb91 	bl	8007a14 <_sbrk_r>
 80072f2:	3001      	adds	r0, #1
 80072f4:	d101      	bne.n	80072fa <sbrk_aligned+0x3a>
 80072f6:	2501      	movs	r5, #1
 80072f8:	426d      	negs	r5, r5
 80072fa:	0028      	movs	r0, r5
 80072fc:	bd70      	pop	{r4, r5, r6, pc}
 80072fe:	46c0      	nop			; (mov r8, r8)
 8007300:	2000156c 	.word	0x2000156c

08007304 <_malloc_r>:
 8007304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007306:	2203      	movs	r2, #3
 8007308:	1ccb      	adds	r3, r1, #3
 800730a:	4393      	bics	r3, r2
 800730c:	3308      	adds	r3, #8
 800730e:	0006      	movs	r6, r0
 8007310:	001f      	movs	r7, r3
 8007312:	2b0c      	cmp	r3, #12
 8007314:	d238      	bcs.n	8007388 <_malloc_r+0x84>
 8007316:	270c      	movs	r7, #12
 8007318:	42b9      	cmp	r1, r7
 800731a:	d837      	bhi.n	800738c <_malloc_r+0x88>
 800731c:	0030      	movs	r0, r6
 800731e:	f000 f873 	bl	8007408 <__malloc_lock>
 8007322:	4b38      	ldr	r3, [pc, #224]	; (8007404 <_malloc_r+0x100>)
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	001c      	movs	r4, r3
 800732a:	2c00      	cmp	r4, #0
 800732c:	d133      	bne.n	8007396 <_malloc_r+0x92>
 800732e:	0039      	movs	r1, r7
 8007330:	0030      	movs	r0, r6
 8007332:	f7ff ffc5 	bl	80072c0 <sbrk_aligned>
 8007336:	0004      	movs	r4, r0
 8007338:	1c43      	adds	r3, r0, #1
 800733a:	d15e      	bne.n	80073fa <_malloc_r+0xf6>
 800733c:	9b00      	ldr	r3, [sp, #0]
 800733e:	681c      	ldr	r4, [r3, #0]
 8007340:	0025      	movs	r5, r4
 8007342:	2d00      	cmp	r5, #0
 8007344:	d14e      	bne.n	80073e4 <_malloc_r+0xe0>
 8007346:	2c00      	cmp	r4, #0
 8007348:	d051      	beq.n	80073ee <_malloc_r+0xea>
 800734a:	6823      	ldr	r3, [r4, #0]
 800734c:	0029      	movs	r1, r5
 800734e:	18e3      	adds	r3, r4, r3
 8007350:	0030      	movs	r0, r6
 8007352:	9301      	str	r3, [sp, #4]
 8007354:	f000 fb5e 	bl	8007a14 <_sbrk_r>
 8007358:	9b01      	ldr	r3, [sp, #4]
 800735a:	4283      	cmp	r3, r0
 800735c:	d147      	bne.n	80073ee <_malloc_r+0xea>
 800735e:	6823      	ldr	r3, [r4, #0]
 8007360:	0030      	movs	r0, r6
 8007362:	1aff      	subs	r7, r7, r3
 8007364:	0039      	movs	r1, r7
 8007366:	f7ff ffab 	bl	80072c0 <sbrk_aligned>
 800736a:	3001      	adds	r0, #1
 800736c:	d03f      	beq.n	80073ee <_malloc_r+0xea>
 800736e:	6823      	ldr	r3, [r4, #0]
 8007370:	19db      	adds	r3, r3, r7
 8007372:	6023      	str	r3, [r4, #0]
 8007374:	9b00      	ldr	r3, [sp, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d040      	beq.n	80073fe <_malloc_r+0xfa>
 800737c:	685a      	ldr	r2, [r3, #4]
 800737e:	42a2      	cmp	r2, r4
 8007380:	d133      	bne.n	80073ea <_malloc_r+0xe6>
 8007382:	2200      	movs	r2, #0
 8007384:	605a      	str	r2, [r3, #4]
 8007386:	e014      	b.n	80073b2 <_malloc_r+0xae>
 8007388:	2b00      	cmp	r3, #0
 800738a:	dac5      	bge.n	8007318 <_malloc_r+0x14>
 800738c:	230c      	movs	r3, #12
 800738e:	2500      	movs	r5, #0
 8007390:	6033      	str	r3, [r6, #0]
 8007392:	0028      	movs	r0, r5
 8007394:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007396:	6821      	ldr	r1, [r4, #0]
 8007398:	1bc9      	subs	r1, r1, r7
 800739a:	d420      	bmi.n	80073de <_malloc_r+0xda>
 800739c:	290b      	cmp	r1, #11
 800739e:	d918      	bls.n	80073d2 <_malloc_r+0xce>
 80073a0:	19e2      	adds	r2, r4, r7
 80073a2:	6027      	str	r7, [r4, #0]
 80073a4:	42a3      	cmp	r3, r4
 80073a6:	d112      	bne.n	80073ce <_malloc_r+0xca>
 80073a8:	9b00      	ldr	r3, [sp, #0]
 80073aa:	601a      	str	r2, [r3, #0]
 80073ac:	6863      	ldr	r3, [r4, #4]
 80073ae:	6011      	str	r1, [r2, #0]
 80073b0:	6053      	str	r3, [r2, #4]
 80073b2:	0030      	movs	r0, r6
 80073b4:	0025      	movs	r5, r4
 80073b6:	f000 f82f 	bl	8007418 <__malloc_unlock>
 80073ba:	2207      	movs	r2, #7
 80073bc:	350b      	adds	r5, #11
 80073be:	1d23      	adds	r3, r4, #4
 80073c0:	4395      	bics	r5, r2
 80073c2:	1aea      	subs	r2, r5, r3
 80073c4:	429d      	cmp	r5, r3
 80073c6:	d0e4      	beq.n	8007392 <_malloc_r+0x8e>
 80073c8:	1b5b      	subs	r3, r3, r5
 80073ca:	50a3      	str	r3, [r4, r2]
 80073cc:	e7e1      	b.n	8007392 <_malloc_r+0x8e>
 80073ce:	605a      	str	r2, [r3, #4]
 80073d0:	e7ec      	b.n	80073ac <_malloc_r+0xa8>
 80073d2:	6862      	ldr	r2, [r4, #4]
 80073d4:	42a3      	cmp	r3, r4
 80073d6:	d1d5      	bne.n	8007384 <_malloc_r+0x80>
 80073d8:	9b00      	ldr	r3, [sp, #0]
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	e7e9      	b.n	80073b2 <_malloc_r+0xae>
 80073de:	0023      	movs	r3, r4
 80073e0:	6864      	ldr	r4, [r4, #4]
 80073e2:	e7a2      	b.n	800732a <_malloc_r+0x26>
 80073e4:	002c      	movs	r4, r5
 80073e6:	686d      	ldr	r5, [r5, #4]
 80073e8:	e7ab      	b.n	8007342 <_malloc_r+0x3e>
 80073ea:	0013      	movs	r3, r2
 80073ec:	e7c4      	b.n	8007378 <_malloc_r+0x74>
 80073ee:	230c      	movs	r3, #12
 80073f0:	0030      	movs	r0, r6
 80073f2:	6033      	str	r3, [r6, #0]
 80073f4:	f000 f810 	bl	8007418 <__malloc_unlock>
 80073f8:	e7cb      	b.n	8007392 <_malloc_r+0x8e>
 80073fa:	6027      	str	r7, [r4, #0]
 80073fc:	e7d9      	b.n	80073b2 <_malloc_r+0xae>
 80073fe:	605b      	str	r3, [r3, #4]
 8007400:	deff      	udf	#255	; 0xff
 8007402:	46c0      	nop			; (mov r8, r8)
 8007404:	20001568 	.word	0x20001568

08007408 <__malloc_lock>:
 8007408:	b510      	push	{r4, lr}
 800740a:	4802      	ldr	r0, [pc, #8]	; (8007414 <__malloc_lock+0xc>)
 800740c:	f7ff ff02 	bl	8007214 <__retarget_lock_acquire_recursive>
 8007410:	bd10      	pop	{r4, pc}
 8007412:	46c0      	nop			; (mov r8, r8)
 8007414:	20001564 	.word	0x20001564

08007418 <__malloc_unlock>:
 8007418:	b510      	push	{r4, lr}
 800741a:	4802      	ldr	r0, [pc, #8]	; (8007424 <__malloc_unlock+0xc>)
 800741c:	f7ff fefb 	bl	8007216 <__retarget_lock_release_recursive>
 8007420:	bd10      	pop	{r4, pc}
 8007422:	46c0      	nop			; (mov r8, r8)
 8007424:	20001564 	.word	0x20001564

08007428 <__ssputs_r>:
 8007428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800742a:	b085      	sub	sp, #20
 800742c:	9301      	str	r3, [sp, #4]
 800742e:	9203      	str	r2, [sp, #12]
 8007430:	688e      	ldr	r6, [r1, #8]
 8007432:	9a01      	ldr	r2, [sp, #4]
 8007434:	0007      	movs	r7, r0
 8007436:	000c      	movs	r4, r1
 8007438:	680b      	ldr	r3, [r1, #0]
 800743a:	4296      	cmp	r6, r2
 800743c:	d831      	bhi.n	80074a2 <__ssputs_r+0x7a>
 800743e:	898a      	ldrh	r2, [r1, #12]
 8007440:	2190      	movs	r1, #144	; 0x90
 8007442:	00c9      	lsls	r1, r1, #3
 8007444:	420a      	tst	r2, r1
 8007446:	d029      	beq.n	800749c <__ssputs_r+0x74>
 8007448:	2003      	movs	r0, #3
 800744a:	6921      	ldr	r1, [r4, #16]
 800744c:	1a5b      	subs	r3, r3, r1
 800744e:	9302      	str	r3, [sp, #8]
 8007450:	6963      	ldr	r3, [r4, #20]
 8007452:	4343      	muls	r3, r0
 8007454:	0fdd      	lsrs	r5, r3, #31
 8007456:	18ed      	adds	r5, r5, r3
 8007458:	9b01      	ldr	r3, [sp, #4]
 800745a:	9802      	ldr	r0, [sp, #8]
 800745c:	3301      	adds	r3, #1
 800745e:	181b      	adds	r3, r3, r0
 8007460:	106d      	asrs	r5, r5, #1
 8007462:	42ab      	cmp	r3, r5
 8007464:	d900      	bls.n	8007468 <__ssputs_r+0x40>
 8007466:	001d      	movs	r5, r3
 8007468:	0552      	lsls	r2, r2, #21
 800746a:	d529      	bpl.n	80074c0 <__ssputs_r+0x98>
 800746c:	0029      	movs	r1, r5
 800746e:	0038      	movs	r0, r7
 8007470:	f7ff ff48 	bl	8007304 <_malloc_r>
 8007474:	1e06      	subs	r6, r0, #0
 8007476:	d02d      	beq.n	80074d4 <__ssputs_r+0xac>
 8007478:	9a02      	ldr	r2, [sp, #8]
 800747a:	6921      	ldr	r1, [r4, #16]
 800747c:	f7ff fecc 	bl	8007218 <memcpy>
 8007480:	89a2      	ldrh	r2, [r4, #12]
 8007482:	4b19      	ldr	r3, [pc, #100]	; (80074e8 <__ssputs_r+0xc0>)
 8007484:	401a      	ands	r2, r3
 8007486:	2380      	movs	r3, #128	; 0x80
 8007488:	4313      	orrs	r3, r2
 800748a:	81a3      	strh	r3, [r4, #12]
 800748c:	9b02      	ldr	r3, [sp, #8]
 800748e:	6126      	str	r6, [r4, #16]
 8007490:	18f6      	adds	r6, r6, r3
 8007492:	6026      	str	r6, [r4, #0]
 8007494:	6165      	str	r5, [r4, #20]
 8007496:	9e01      	ldr	r6, [sp, #4]
 8007498:	1aed      	subs	r5, r5, r3
 800749a:	60a5      	str	r5, [r4, #8]
 800749c:	9b01      	ldr	r3, [sp, #4]
 800749e:	429e      	cmp	r6, r3
 80074a0:	d900      	bls.n	80074a4 <__ssputs_r+0x7c>
 80074a2:	9e01      	ldr	r6, [sp, #4]
 80074a4:	0032      	movs	r2, r6
 80074a6:	9903      	ldr	r1, [sp, #12]
 80074a8:	6820      	ldr	r0, [r4, #0]
 80074aa:	f000 fa9f 	bl	80079ec <memmove>
 80074ae:	2000      	movs	r0, #0
 80074b0:	68a3      	ldr	r3, [r4, #8]
 80074b2:	1b9b      	subs	r3, r3, r6
 80074b4:	60a3      	str	r3, [r4, #8]
 80074b6:	6823      	ldr	r3, [r4, #0]
 80074b8:	199b      	adds	r3, r3, r6
 80074ba:	6023      	str	r3, [r4, #0]
 80074bc:	b005      	add	sp, #20
 80074be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074c0:	002a      	movs	r2, r5
 80074c2:	0038      	movs	r0, r7
 80074c4:	f000 fac3 	bl	8007a4e <_realloc_r>
 80074c8:	1e06      	subs	r6, r0, #0
 80074ca:	d1df      	bne.n	800748c <__ssputs_r+0x64>
 80074cc:	0038      	movs	r0, r7
 80074ce:	6921      	ldr	r1, [r4, #16]
 80074d0:	f7ff feac 	bl	800722c <_free_r>
 80074d4:	230c      	movs	r3, #12
 80074d6:	2001      	movs	r0, #1
 80074d8:	603b      	str	r3, [r7, #0]
 80074da:	89a2      	ldrh	r2, [r4, #12]
 80074dc:	3334      	adds	r3, #52	; 0x34
 80074de:	4313      	orrs	r3, r2
 80074e0:	81a3      	strh	r3, [r4, #12]
 80074e2:	4240      	negs	r0, r0
 80074e4:	e7ea      	b.n	80074bc <__ssputs_r+0x94>
 80074e6:	46c0      	nop			; (mov r8, r8)
 80074e8:	fffffb7f 	.word	0xfffffb7f

080074ec <_svfiprintf_r>:
 80074ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074ee:	b0a1      	sub	sp, #132	; 0x84
 80074f0:	9003      	str	r0, [sp, #12]
 80074f2:	001d      	movs	r5, r3
 80074f4:	898b      	ldrh	r3, [r1, #12]
 80074f6:	000f      	movs	r7, r1
 80074f8:	0016      	movs	r6, r2
 80074fa:	061b      	lsls	r3, r3, #24
 80074fc:	d511      	bpl.n	8007522 <_svfiprintf_r+0x36>
 80074fe:	690b      	ldr	r3, [r1, #16]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10e      	bne.n	8007522 <_svfiprintf_r+0x36>
 8007504:	2140      	movs	r1, #64	; 0x40
 8007506:	f7ff fefd 	bl	8007304 <_malloc_r>
 800750a:	6038      	str	r0, [r7, #0]
 800750c:	6138      	str	r0, [r7, #16]
 800750e:	2800      	cmp	r0, #0
 8007510:	d105      	bne.n	800751e <_svfiprintf_r+0x32>
 8007512:	230c      	movs	r3, #12
 8007514:	9a03      	ldr	r2, [sp, #12]
 8007516:	3801      	subs	r0, #1
 8007518:	6013      	str	r3, [r2, #0]
 800751a:	b021      	add	sp, #132	; 0x84
 800751c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800751e:	2340      	movs	r3, #64	; 0x40
 8007520:	617b      	str	r3, [r7, #20]
 8007522:	2300      	movs	r3, #0
 8007524:	ac08      	add	r4, sp, #32
 8007526:	6163      	str	r3, [r4, #20]
 8007528:	3320      	adds	r3, #32
 800752a:	7663      	strb	r3, [r4, #25]
 800752c:	3310      	adds	r3, #16
 800752e:	76a3      	strb	r3, [r4, #26]
 8007530:	9507      	str	r5, [sp, #28]
 8007532:	0035      	movs	r5, r6
 8007534:	782b      	ldrb	r3, [r5, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d001      	beq.n	800753e <_svfiprintf_r+0x52>
 800753a:	2b25      	cmp	r3, #37	; 0x25
 800753c:	d148      	bne.n	80075d0 <_svfiprintf_r+0xe4>
 800753e:	1bab      	subs	r3, r5, r6
 8007540:	9305      	str	r3, [sp, #20]
 8007542:	42b5      	cmp	r5, r6
 8007544:	d00b      	beq.n	800755e <_svfiprintf_r+0x72>
 8007546:	0032      	movs	r2, r6
 8007548:	0039      	movs	r1, r7
 800754a:	9803      	ldr	r0, [sp, #12]
 800754c:	f7ff ff6c 	bl	8007428 <__ssputs_r>
 8007550:	3001      	adds	r0, #1
 8007552:	d100      	bne.n	8007556 <_svfiprintf_r+0x6a>
 8007554:	e0af      	b.n	80076b6 <_svfiprintf_r+0x1ca>
 8007556:	6963      	ldr	r3, [r4, #20]
 8007558:	9a05      	ldr	r2, [sp, #20]
 800755a:	189b      	adds	r3, r3, r2
 800755c:	6163      	str	r3, [r4, #20]
 800755e:	782b      	ldrb	r3, [r5, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d100      	bne.n	8007566 <_svfiprintf_r+0x7a>
 8007564:	e0a7      	b.n	80076b6 <_svfiprintf_r+0x1ca>
 8007566:	2201      	movs	r2, #1
 8007568:	2300      	movs	r3, #0
 800756a:	4252      	negs	r2, r2
 800756c:	6062      	str	r2, [r4, #4]
 800756e:	a904      	add	r1, sp, #16
 8007570:	3254      	adds	r2, #84	; 0x54
 8007572:	1852      	adds	r2, r2, r1
 8007574:	1c6e      	adds	r6, r5, #1
 8007576:	6023      	str	r3, [r4, #0]
 8007578:	60e3      	str	r3, [r4, #12]
 800757a:	60a3      	str	r3, [r4, #8]
 800757c:	7013      	strb	r3, [r2, #0]
 800757e:	65a3      	str	r3, [r4, #88]	; 0x58
 8007580:	4b55      	ldr	r3, [pc, #340]	; (80076d8 <_svfiprintf_r+0x1ec>)
 8007582:	2205      	movs	r2, #5
 8007584:	0018      	movs	r0, r3
 8007586:	7831      	ldrb	r1, [r6, #0]
 8007588:	9305      	str	r3, [sp, #20]
 800758a:	f000 fa55 	bl	8007a38 <memchr>
 800758e:	1c75      	adds	r5, r6, #1
 8007590:	2800      	cmp	r0, #0
 8007592:	d11f      	bne.n	80075d4 <_svfiprintf_r+0xe8>
 8007594:	6822      	ldr	r2, [r4, #0]
 8007596:	06d3      	lsls	r3, r2, #27
 8007598:	d504      	bpl.n	80075a4 <_svfiprintf_r+0xb8>
 800759a:	2353      	movs	r3, #83	; 0x53
 800759c:	a904      	add	r1, sp, #16
 800759e:	185b      	adds	r3, r3, r1
 80075a0:	2120      	movs	r1, #32
 80075a2:	7019      	strb	r1, [r3, #0]
 80075a4:	0713      	lsls	r3, r2, #28
 80075a6:	d504      	bpl.n	80075b2 <_svfiprintf_r+0xc6>
 80075a8:	2353      	movs	r3, #83	; 0x53
 80075aa:	a904      	add	r1, sp, #16
 80075ac:	185b      	adds	r3, r3, r1
 80075ae:	212b      	movs	r1, #43	; 0x2b
 80075b0:	7019      	strb	r1, [r3, #0]
 80075b2:	7833      	ldrb	r3, [r6, #0]
 80075b4:	2b2a      	cmp	r3, #42	; 0x2a
 80075b6:	d016      	beq.n	80075e6 <_svfiprintf_r+0xfa>
 80075b8:	0035      	movs	r5, r6
 80075ba:	2100      	movs	r1, #0
 80075bc:	200a      	movs	r0, #10
 80075be:	68e3      	ldr	r3, [r4, #12]
 80075c0:	782a      	ldrb	r2, [r5, #0]
 80075c2:	1c6e      	adds	r6, r5, #1
 80075c4:	3a30      	subs	r2, #48	; 0x30
 80075c6:	2a09      	cmp	r2, #9
 80075c8:	d94e      	bls.n	8007668 <_svfiprintf_r+0x17c>
 80075ca:	2900      	cmp	r1, #0
 80075cc:	d111      	bne.n	80075f2 <_svfiprintf_r+0x106>
 80075ce:	e017      	b.n	8007600 <_svfiprintf_r+0x114>
 80075d0:	3501      	adds	r5, #1
 80075d2:	e7af      	b.n	8007534 <_svfiprintf_r+0x48>
 80075d4:	9b05      	ldr	r3, [sp, #20]
 80075d6:	6822      	ldr	r2, [r4, #0]
 80075d8:	1ac0      	subs	r0, r0, r3
 80075da:	2301      	movs	r3, #1
 80075dc:	4083      	lsls	r3, r0
 80075de:	4313      	orrs	r3, r2
 80075e0:	002e      	movs	r6, r5
 80075e2:	6023      	str	r3, [r4, #0]
 80075e4:	e7cc      	b.n	8007580 <_svfiprintf_r+0x94>
 80075e6:	9b07      	ldr	r3, [sp, #28]
 80075e8:	1d19      	adds	r1, r3, #4
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	9107      	str	r1, [sp, #28]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	db01      	blt.n	80075f6 <_svfiprintf_r+0x10a>
 80075f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80075f4:	e004      	b.n	8007600 <_svfiprintf_r+0x114>
 80075f6:	425b      	negs	r3, r3
 80075f8:	60e3      	str	r3, [r4, #12]
 80075fa:	2302      	movs	r3, #2
 80075fc:	4313      	orrs	r3, r2
 80075fe:	6023      	str	r3, [r4, #0]
 8007600:	782b      	ldrb	r3, [r5, #0]
 8007602:	2b2e      	cmp	r3, #46	; 0x2e
 8007604:	d10a      	bne.n	800761c <_svfiprintf_r+0x130>
 8007606:	786b      	ldrb	r3, [r5, #1]
 8007608:	2b2a      	cmp	r3, #42	; 0x2a
 800760a:	d135      	bne.n	8007678 <_svfiprintf_r+0x18c>
 800760c:	9b07      	ldr	r3, [sp, #28]
 800760e:	3502      	adds	r5, #2
 8007610:	1d1a      	adds	r2, r3, #4
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	9207      	str	r2, [sp, #28]
 8007616:	2b00      	cmp	r3, #0
 8007618:	db2b      	blt.n	8007672 <_svfiprintf_r+0x186>
 800761a:	9309      	str	r3, [sp, #36]	; 0x24
 800761c:	4e2f      	ldr	r6, [pc, #188]	; (80076dc <_svfiprintf_r+0x1f0>)
 800761e:	2203      	movs	r2, #3
 8007620:	0030      	movs	r0, r6
 8007622:	7829      	ldrb	r1, [r5, #0]
 8007624:	f000 fa08 	bl	8007a38 <memchr>
 8007628:	2800      	cmp	r0, #0
 800762a:	d006      	beq.n	800763a <_svfiprintf_r+0x14e>
 800762c:	2340      	movs	r3, #64	; 0x40
 800762e:	1b80      	subs	r0, r0, r6
 8007630:	4083      	lsls	r3, r0
 8007632:	6822      	ldr	r2, [r4, #0]
 8007634:	3501      	adds	r5, #1
 8007636:	4313      	orrs	r3, r2
 8007638:	6023      	str	r3, [r4, #0]
 800763a:	7829      	ldrb	r1, [r5, #0]
 800763c:	2206      	movs	r2, #6
 800763e:	4828      	ldr	r0, [pc, #160]	; (80076e0 <_svfiprintf_r+0x1f4>)
 8007640:	1c6e      	adds	r6, r5, #1
 8007642:	7621      	strb	r1, [r4, #24]
 8007644:	f000 f9f8 	bl	8007a38 <memchr>
 8007648:	2800      	cmp	r0, #0
 800764a:	d03c      	beq.n	80076c6 <_svfiprintf_r+0x1da>
 800764c:	4b25      	ldr	r3, [pc, #148]	; (80076e4 <_svfiprintf_r+0x1f8>)
 800764e:	2b00      	cmp	r3, #0
 8007650:	d125      	bne.n	800769e <_svfiprintf_r+0x1b2>
 8007652:	2207      	movs	r2, #7
 8007654:	9b07      	ldr	r3, [sp, #28]
 8007656:	3307      	adds	r3, #7
 8007658:	4393      	bics	r3, r2
 800765a:	3308      	adds	r3, #8
 800765c:	9307      	str	r3, [sp, #28]
 800765e:	6963      	ldr	r3, [r4, #20]
 8007660:	9a04      	ldr	r2, [sp, #16]
 8007662:	189b      	adds	r3, r3, r2
 8007664:	6163      	str	r3, [r4, #20]
 8007666:	e764      	b.n	8007532 <_svfiprintf_r+0x46>
 8007668:	4343      	muls	r3, r0
 800766a:	0035      	movs	r5, r6
 800766c:	2101      	movs	r1, #1
 800766e:	189b      	adds	r3, r3, r2
 8007670:	e7a6      	b.n	80075c0 <_svfiprintf_r+0xd4>
 8007672:	2301      	movs	r3, #1
 8007674:	425b      	negs	r3, r3
 8007676:	e7d0      	b.n	800761a <_svfiprintf_r+0x12e>
 8007678:	2300      	movs	r3, #0
 800767a:	200a      	movs	r0, #10
 800767c:	001a      	movs	r2, r3
 800767e:	3501      	adds	r5, #1
 8007680:	6063      	str	r3, [r4, #4]
 8007682:	7829      	ldrb	r1, [r5, #0]
 8007684:	1c6e      	adds	r6, r5, #1
 8007686:	3930      	subs	r1, #48	; 0x30
 8007688:	2909      	cmp	r1, #9
 800768a:	d903      	bls.n	8007694 <_svfiprintf_r+0x1a8>
 800768c:	2b00      	cmp	r3, #0
 800768e:	d0c5      	beq.n	800761c <_svfiprintf_r+0x130>
 8007690:	9209      	str	r2, [sp, #36]	; 0x24
 8007692:	e7c3      	b.n	800761c <_svfiprintf_r+0x130>
 8007694:	4342      	muls	r2, r0
 8007696:	0035      	movs	r5, r6
 8007698:	2301      	movs	r3, #1
 800769a:	1852      	adds	r2, r2, r1
 800769c:	e7f1      	b.n	8007682 <_svfiprintf_r+0x196>
 800769e:	aa07      	add	r2, sp, #28
 80076a0:	9200      	str	r2, [sp, #0]
 80076a2:	0021      	movs	r1, r4
 80076a4:	003a      	movs	r2, r7
 80076a6:	4b10      	ldr	r3, [pc, #64]	; (80076e8 <_svfiprintf_r+0x1fc>)
 80076a8:	9803      	ldr	r0, [sp, #12]
 80076aa:	e000      	b.n	80076ae <_svfiprintf_r+0x1c2>
 80076ac:	bf00      	nop
 80076ae:	9004      	str	r0, [sp, #16]
 80076b0:	9b04      	ldr	r3, [sp, #16]
 80076b2:	3301      	adds	r3, #1
 80076b4:	d1d3      	bne.n	800765e <_svfiprintf_r+0x172>
 80076b6:	89bb      	ldrh	r3, [r7, #12]
 80076b8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80076ba:	065b      	lsls	r3, r3, #25
 80076bc:	d400      	bmi.n	80076c0 <_svfiprintf_r+0x1d4>
 80076be:	e72c      	b.n	800751a <_svfiprintf_r+0x2e>
 80076c0:	2001      	movs	r0, #1
 80076c2:	4240      	negs	r0, r0
 80076c4:	e729      	b.n	800751a <_svfiprintf_r+0x2e>
 80076c6:	aa07      	add	r2, sp, #28
 80076c8:	9200      	str	r2, [sp, #0]
 80076ca:	0021      	movs	r1, r4
 80076cc:	003a      	movs	r2, r7
 80076ce:	4b06      	ldr	r3, [pc, #24]	; (80076e8 <_svfiprintf_r+0x1fc>)
 80076d0:	9803      	ldr	r0, [sp, #12]
 80076d2:	f000 f87b 	bl	80077cc <_printf_i>
 80076d6:	e7ea      	b.n	80076ae <_svfiprintf_r+0x1c2>
 80076d8:	080081b4 	.word	0x080081b4
 80076dc:	080081ba 	.word	0x080081ba
 80076e0:	080081be 	.word	0x080081be
 80076e4:	00000000 	.word	0x00000000
 80076e8:	08007429 	.word	0x08007429

080076ec <_printf_common>:
 80076ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076ee:	0016      	movs	r6, r2
 80076f0:	9301      	str	r3, [sp, #4]
 80076f2:	688a      	ldr	r2, [r1, #8]
 80076f4:	690b      	ldr	r3, [r1, #16]
 80076f6:	000c      	movs	r4, r1
 80076f8:	9000      	str	r0, [sp, #0]
 80076fa:	4293      	cmp	r3, r2
 80076fc:	da00      	bge.n	8007700 <_printf_common+0x14>
 80076fe:	0013      	movs	r3, r2
 8007700:	0022      	movs	r2, r4
 8007702:	6033      	str	r3, [r6, #0]
 8007704:	3243      	adds	r2, #67	; 0x43
 8007706:	7812      	ldrb	r2, [r2, #0]
 8007708:	2a00      	cmp	r2, #0
 800770a:	d001      	beq.n	8007710 <_printf_common+0x24>
 800770c:	3301      	adds	r3, #1
 800770e:	6033      	str	r3, [r6, #0]
 8007710:	6823      	ldr	r3, [r4, #0]
 8007712:	069b      	lsls	r3, r3, #26
 8007714:	d502      	bpl.n	800771c <_printf_common+0x30>
 8007716:	6833      	ldr	r3, [r6, #0]
 8007718:	3302      	adds	r3, #2
 800771a:	6033      	str	r3, [r6, #0]
 800771c:	6822      	ldr	r2, [r4, #0]
 800771e:	2306      	movs	r3, #6
 8007720:	0015      	movs	r5, r2
 8007722:	401d      	ands	r5, r3
 8007724:	421a      	tst	r2, r3
 8007726:	d027      	beq.n	8007778 <_printf_common+0x8c>
 8007728:	0023      	movs	r3, r4
 800772a:	3343      	adds	r3, #67	; 0x43
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	1e5a      	subs	r2, r3, #1
 8007730:	4193      	sbcs	r3, r2
 8007732:	6822      	ldr	r2, [r4, #0]
 8007734:	0692      	lsls	r2, r2, #26
 8007736:	d430      	bmi.n	800779a <_printf_common+0xae>
 8007738:	0022      	movs	r2, r4
 800773a:	9901      	ldr	r1, [sp, #4]
 800773c:	9800      	ldr	r0, [sp, #0]
 800773e:	9d08      	ldr	r5, [sp, #32]
 8007740:	3243      	adds	r2, #67	; 0x43
 8007742:	47a8      	blx	r5
 8007744:	3001      	adds	r0, #1
 8007746:	d025      	beq.n	8007794 <_printf_common+0xa8>
 8007748:	2206      	movs	r2, #6
 800774a:	6823      	ldr	r3, [r4, #0]
 800774c:	2500      	movs	r5, #0
 800774e:	4013      	ands	r3, r2
 8007750:	2b04      	cmp	r3, #4
 8007752:	d105      	bne.n	8007760 <_printf_common+0x74>
 8007754:	6833      	ldr	r3, [r6, #0]
 8007756:	68e5      	ldr	r5, [r4, #12]
 8007758:	1aed      	subs	r5, r5, r3
 800775a:	43eb      	mvns	r3, r5
 800775c:	17db      	asrs	r3, r3, #31
 800775e:	401d      	ands	r5, r3
 8007760:	68a3      	ldr	r3, [r4, #8]
 8007762:	6922      	ldr	r2, [r4, #16]
 8007764:	4293      	cmp	r3, r2
 8007766:	dd01      	ble.n	800776c <_printf_common+0x80>
 8007768:	1a9b      	subs	r3, r3, r2
 800776a:	18ed      	adds	r5, r5, r3
 800776c:	2600      	movs	r6, #0
 800776e:	42b5      	cmp	r5, r6
 8007770:	d120      	bne.n	80077b4 <_printf_common+0xc8>
 8007772:	2000      	movs	r0, #0
 8007774:	e010      	b.n	8007798 <_printf_common+0xac>
 8007776:	3501      	adds	r5, #1
 8007778:	68e3      	ldr	r3, [r4, #12]
 800777a:	6832      	ldr	r2, [r6, #0]
 800777c:	1a9b      	subs	r3, r3, r2
 800777e:	42ab      	cmp	r3, r5
 8007780:	ddd2      	ble.n	8007728 <_printf_common+0x3c>
 8007782:	0022      	movs	r2, r4
 8007784:	2301      	movs	r3, #1
 8007786:	9901      	ldr	r1, [sp, #4]
 8007788:	9800      	ldr	r0, [sp, #0]
 800778a:	9f08      	ldr	r7, [sp, #32]
 800778c:	3219      	adds	r2, #25
 800778e:	47b8      	blx	r7
 8007790:	3001      	adds	r0, #1
 8007792:	d1f0      	bne.n	8007776 <_printf_common+0x8a>
 8007794:	2001      	movs	r0, #1
 8007796:	4240      	negs	r0, r0
 8007798:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800779a:	2030      	movs	r0, #48	; 0x30
 800779c:	18e1      	adds	r1, r4, r3
 800779e:	3143      	adds	r1, #67	; 0x43
 80077a0:	7008      	strb	r0, [r1, #0]
 80077a2:	0021      	movs	r1, r4
 80077a4:	1c5a      	adds	r2, r3, #1
 80077a6:	3145      	adds	r1, #69	; 0x45
 80077a8:	7809      	ldrb	r1, [r1, #0]
 80077aa:	18a2      	adds	r2, r4, r2
 80077ac:	3243      	adds	r2, #67	; 0x43
 80077ae:	3302      	adds	r3, #2
 80077b0:	7011      	strb	r1, [r2, #0]
 80077b2:	e7c1      	b.n	8007738 <_printf_common+0x4c>
 80077b4:	0022      	movs	r2, r4
 80077b6:	2301      	movs	r3, #1
 80077b8:	9901      	ldr	r1, [sp, #4]
 80077ba:	9800      	ldr	r0, [sp, #0]
 80077bc:	9f08      	ldr	r7, [sp, #32]
 80077be:	321a      	adds	r2, #26
 80077c0:	47b8      	blx	r7
 80077c2:	3001      	adds	r0, #1
 80077c4:	d0e6      	beq.n	8007794 <_printf_common+0xa8>
 80077c6:	3601      	adds	r6, #1
 80077c8:	e7d1      	b.n	800776e <_printf_common+0x82>
	...

080077cc <_printf_i>:
 80077cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077ce:	b08b      	sub	sp, #44	; 0x2c
 80077d0:	9206      	str	r2, [sp, #24]
 80077d2:	000a      	movs	r2, r1
 80077d4:	3243      	adds	r2, #67	; 0x43
 80077d6:	9307      	str	r3, [sp, #28]
 80077d8:	9005      	str	r0, [sp, #20]
 80077da:	9204      	str	r2, [sp, #16]
 80077dc:	7e0a      	ldrb	r2, [r1, #24]
 80077de:	000c      	movs	r4, r1
 80077e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80077e2:	2a78      	cmp	r2, #120	; 0x78
 80077e4:	d809      	bhi.n	80077fa <_printf_i+0x2e>
 80077e6:	2a62      	cmp	r2, #98	; 0x62
 80077e8:	d80b      	bhi.n	8007802 <_printf_i+0x36>
 80077ea:	2a00      	cmp	r2, #0
 80077ec:	d100      	bne.n	80077f0 <_printf_i+0x24>
 80077ee:	e0be      	b.n	800796e <_printf_i+0x1a2>
 80077f0:	497c      	ldr	r1, [pc, #496]	; (80079e4 <_printf_i+0x218>)
 80077f2:	9103      	str	r1, [sp, #12]
 80077f4:	2a58      	cmp	r2, #88	; 0x58
 80077f6:	d100      	bne.n	80077fa <_printf_i+0x2e>
 80077f8:	e093      	b.n	8007922 <_printf_i+0x156>
 80077fa:	0026      	movs	r6, r4
 80077fc:	3642      	adds	r6, #66	; 0x42
 80077fe:	7032      	strb	r2, [r6, #0]
 8007800:	e022      	b.n	8007848 <_printf_i+0x7c>
 8007802:	0010      	movs	r0, r2
 8007804:	3863      	subs	r0, #99	; 0x63
 8007806:	2815      	cmp	r0, #21
 8007808:	d8f7      	bhi.n	80077fa <_printf_i+0x2e>
 800780a:	f7f8 fc85 	bl	8000118 <__gnu_thumb1_case_shi>
 800780e:	0016      	.short	0x0016
 8007810:	fff6001f 	.word	0xfff6001f
 8007814:	fff6fff6 	.word	0xfff6fff6
 8007818:	001ffff6 	.word	0x001ffff6
 800781c:	fff6fff6 	.word	0xfff6fff6
 8007820:	fff6fff6 	.word	0xfff6fff6
 8007824:	003600a3 	.word	0x003600a3
 8007828:	fff60083 	.word	0xfff60083
 800782c:	00b4fff6 	.word	0x00b4fff6
 8007830:	0036fff6 	.word	0x0036fff6
 8007834:	fff6fff6 	.word	0xfff6fff6
 8007838:	0087      	.short	0x0087
 800783a:	0026      	movs	r6, r4
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	3642      	adds	r6, #66	; 0x42
 8007840:	1d11      	adds	r1, r2, #4
 8007842:	6019      	str	r1, [r3, #0]
 8007844:	6813      	ldr	r3, [r2, #0]
 8007846:	7033      	strb	r3, [r6, #0]
 8007848:	2301      	movs	r3, #1
 800784a:	e0a2      	b.n	8007992 <_printf_i+0x1c6>
 800784c:	6818      	ldr	r0, [r3, #0]
 800784e:	6809      	ldr	r1, [r1, #0]
 8007850:	1d02      	adds	r2, r0, #4
 8007852:	060d      	lsls	r5, r1, #24
 8007854:	d50b      	bpl.n	800786e <_printf_i+0xa2>
 8007856:	6805      	ldr	r5, [r0, #0]
 8007858:	601a      	str	r2, [r3, #0]
 800785a:	2d00      	cmp	r5, #0
 800785c:	da03      	bge.n	8007866 <_printf_i+0x9a>
 800785e:	232d      	movs	r3, #45	; 0x2d
 8007860:	9a04      	ldr	r2, [sp, #16]
 8007862:	426d      	negs	r5, r5
 8007864:	7013      	strb	r3, [r2, #0]
 8007866:	4b5f      	ldr	r3, [pc, #380]	; (80079e4 <_printf_i+0x218>)
 8007868:	270a      	movs	r7, #10
 800786a:	9303      	str	r3, [sp, #12]
 800786c:	e01b      	b.n	80078a6 <_printf_i+0xda>
 800786e:	6805      	ldr	r5, [r0, #0]
 8007870:	601a      	str	r2, [r3, #0]
 8007872:	0649      	lsls	r1, r1, #25
 8007874:	d5f1      	bpl.n	800785a <_printf_i+0x8e>
 8007876:	b22d      	sxth	r5, r5
 8007878:	e7ef      	b.n	800785a <_printf_i+0x8e>
 800787a:	680d      	ldr	r5, [r1, #0]
 800787c:	6819      	ldr	r1, [r3, #0]
 800787e:	1d08      	adds	r0, r1, #4
 8007880:	6018      	str	r0, [r3, #0]
 8007882:	062e      	lsls	r6, r5, #24
 8007884:	d501      	bpl.n	800788a <_printf_i+0xbe>
 8007886:	680d      	ldr	r5, [r1, #0]
 8007888:	e003      	b.n	8007892 <_printf_i+0xc6>
 800788a:	066d      	lsls	r5, r5, #25
 800788c:	d5fb      	bpl.n	8007886 <_printf_i+0xba>
 800788e:	680d      	ldr	r5, [r1, #0]
 8007890:	b2ad      	uxth	r5, r5
 8007892:	4b54      	ldr	r3, [pc, #336]	; (80079e4 <_printf_i+0x218>)
 8007894:	2708      	movs	r7, #8
 8007896:	9303      	str	r3, [sp, #12]
 8007898:	2a6f      	cmp	r2, #111	; 0x6f
 800789a:	d000      	beq.n	800789e <_printf_i+0xd2>
 800789c:	3702      	adds	r7, #2
 800789e:	0023      	movs	r3, r4
 80078a0:	2200      	movs	r2, #0
 80078a2:	3343      	adds	r3, #67	; 0x43
 80078a4:	701a      	strb	r2, [r3, #0]
 80078a6:	6863      	ldr	r3, [r4, #4]
 80078a8:	60a3      	str	r3, [r4, #8]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	db03      	blt.n	80078b6 <_printf_i+0xea>
 80078ae:	2104      	movs	r1, #4
 80078b0:	6822      	ldr	r2, [r4, #0]
 80078b2:	438a      	bics	r2, r1
 80078b4:	6022      	str	r2, [r4, #0]
 80078b6:	2d00      	cmp	r5, #0
 80078b8:	d102      	bne.n	80078c0 <_printf_i+0xf4>
 80078ba:	9e04      	ldr	r6, [sp, #16]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00c      	beq.n	80078da <_printf_i+0x10e>
 80078c0:	9e04      	ldr	r6, [sp, #16]
 80078c2:	0028      	movs	r0, r5
 80078c4:	0039      	movs	r1, r7
 80078c6:	f7f8 fcb7 	bl	8000238 <__aeabi_uidivmod>
 80078ca:	9b03      	ldr	r3, [sp, #12]
 80078cc:	3e01      	subs	r6, #1
 80078ce:	5c5b      	ldrb	r3, [r3, r1]
 80078d0:	7033      	strb	r3, [r6, #0]
 80078d2:	002b      	movs	r3, r5
 80078d4:	0005      	movs	r5, r0
 80078d6:	429f      	cmp	r7, r3
 80078d8:	d9f3      	bls.n	80078c2 <_printf_i+0xf6>
 80078da:	2f08      	cmp	r7, #8
 80078dc:	d109      	bne.n	80078f2 <_printf_i+0x126>
 80078de:	6823      	ldr	r3, [r4, #0]
 80078e0:	07db      	lsls	r3, r3, #31
 80078e2:	d506      	bpl.n	80078f2 <_printf_i+0x126>
 80078e4:	6862      	ldr	r2, [r4, #4]
 80078e6:	6923      	ldr	r3, [r4, #16]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	dc02      	bgt.n	80078f2 <_printf_i+0x126>
 80078ec:	2330      	movs	r3, #48	; 0x30
 80078ee:	3e01      	subs	r6, #1
 80078f0:	7033      	strb	r3, [r6, #0]
 80078f2:	9b04      	ldr	r3, [sp, #16]
 80078f4:	1b9b      	subs	r3, r3, r6
 80078f6:	6123      	str	r3, [r4, #16]
 80078f8:	9b07      	ldr	r3, [sp, #28]
 80078fa:	0021      	movs	r1, r4
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	9805      	ldr	r0, [sp, #20]
 8007900:	9b06      	ldr	r3, [sp, #24]
 8007902:	aa09      	add	r2, sp, #36	; 0x24
 8007904:	f7ff fef2 	bl	80076ec <_printf_common>
 8007908:	3001      	adds	r0, #1
 800790a:	d147      	bne.n	800799c <_printf_i+0x1d0>
 800790c:	2001      	movs	r0, #1
 800790e:	4240      	negs	r0, r0
 8007910:	b00b      	add	sp, #44	; 0x2c
 8007912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007914:	2220      	movs	r2, #32
 8007916:	6809      	ldr	r1, [r1, #0]
 8007918:	430a      	orrs	r2, r1
 800791a:	6022      	str	r2, [r4, #0]
 800791c:	2278      	movs	r2, #120	; 0x78
 800791e:	4932      	ldr	r1, [pc, #200]	; (80079e8 <_printf_i+0x21c>)
 8007920:	9103      	str	r1, [sp, #12]
 8007922:	0021      	movs	r1, r4
 8007924:	3145      	adds	r1, #69	; 0x45
 8007926:	700a      	strb	r2, [r1, #0]
 8007928:	6819      	ldr	r1, [r3, #0]
 800792a:	6822      	ldr	r2, [r4, #0]
 800792c:	c920      	ldmia	r1!, {r5}
 800792e:	0610      	lsls	r0, r2, #24
 8007930:	d402      	bmi.n	8007938 <_printf_i+0x16c>
 8007932:	0650      	lsls	r0, r2, #25
 8007934:	d500      	bpl.n	8007938 <_printf_i+0x16c>
 8007936:	b2ad      	uxth	r5, r5
 8007938:	6019      	str	r1, [r3, #0]
 800793a:	07d3      	lsls	r3, r2, #31
 800793c:	d502      	bpl.n	8007944 <_printf_i+0x178>
 800793e:	2320      	movs	r3, #32
 8007940:	4313      	orrs	r3, r2
 8007942:	6023      	str	r3, [r4, #0]
 8007944:	2710      	movs	r7, #16
 8007946:	2d00      	cmp	r5, #0
 8007948:	d1a9      	bne.n	800789e <_printf_i+0xd2>
 800794a:	2220      	movs	r2, #32
 800794c:	6823      	ldr	r3, [r4, #0]
 800794e:	4393      	bics	r3, r2
 8007950:	6023      	str	r3, [r4, #0]
 8007952:	e7a4      	b.n	800789e <_printf_i+0xd2>
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	680d      	ldr	r5, [r1, #0]
 8007958:	1d10      	adds	r0, r2, #4
 800795a:	6949      	ldr	r1, [r1, #20]
 800795c:	6018      	str	r0, [r3, #0]
 800795e:	6813      	ldr	r3, [r2, #0]
 8007960:	062e      	lsls	r6, r5, #24
 8007962:	d501      	bpl.n	8007968 <_printf_i+0x19c>
 8007964:	6019      	str	r1, [r3, #0]
 8007966:	e002      	b.n	800796e <_printf_i+0x1a2>
 8007968:	066d      	lsls	r5, r5, #25
 800796a:	d5fb      	bpl.n	8007964 <_printf_i+0x198>
 800796c:	8019      	strh	r1, [r3, #0]
 800796e:	2300      	movs	r3, #0
 8007970:	9e04      	ldr	r6, [sp, #16]
 8007972:	6123      	str	r3, [r4, #16]
 8007974:	e7c0      	b.n	80078f8 <_printf_i+0x12c>
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	1d11      	adds	r1, r2, #4
 800797a:	6019      	str	r1, [r3, #0]
 800797c:	6816      	ldr	r6, [r2, #0]
 800797e:	2100      	movs	r1, #0
 8007980:	0030      	movs	r0, r6
 8007982:	6862      	ldr	r2, [r4, #4]
 8007984:	f000 f858 	bl	8007a38 <memchr>
 8007988:	2800      	cmp	r0, #0
 800798a:	d001      	beq.n	8007990 <_printf_i+0x1c4>
 800798c:	1b80      	subs	r0, r0, r6
 800798e:	6060      	str	r0, [r4, #4]
 8007990:	6863      	ldr	r3, [r4, #4]
 8007992:	6123      	str	r3, [r4, #16]
 8007994:	2300      	movs	r3, #0
 8007996:	9a04      	ldr	r2, [sp, #16]
 8007998:	7013      	strb	r3, [r2, #0]
 800799a:	e7ad      	b.n	80078f8 <_printf_i+0x12c>
 800799c:	0032      	movs	r2, r6
 800799e:	6923      	ldr	r3, [r4, #16]
 80079a0:	9906      	ldr	r1, [sp, #24]
 80079a2:	9805      	ldr	r0, [sp, #20]
 80079a4:	9d07      	ldr	r5, [sp, #28]
 80079a6:	47a8      	blx	r5
 80079a8:	3001      	adds	r0, #1
 80079aa:	d0af      	beq.n	800790c <_printf_i+0x140>
 80079ac:	6823      	ldr	r3, [r4, #0]
 80079ae:	079b      	lsls	r3, r3, #30
 80079b0:	d415      	bmi.n	80079de <_printf_i+0x212>
 80079b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079b4:	68e0      	ldr	r0, [r4, #12]
 80079b6:	4298      	cmp	r0, r3
 80079b8:	daaa      	bge.n	8007910 <_printf_i+0x144>
 80079ba:	0018      	movs	r0, r3
 80079bc:	e7a8      	b.n	8007910 <_printf_i+0x144>
 80079be:	0022      	movs	r2, r4
 80079c0:	2301      	movs	r3, #1
 80079c2:	9906      	ldr	r1, [sp, #24]
 80079c4:	9805      	ldr	r0, [sp, #20]
 80079c6:	9e07      	ldr	r6, [sp, #28]
 80079c8:	3219      	adds	r2, #25
 80079ca:	47b0      	blx	r6
 80079cc:	3001      	adds	r0, #1
 80079ce:	d09d      	beq.n	800790c <_printf_i+0x140>
 80079d0:	3501      	adds	r5, #1
 80079d2:	68e3      	ldr	r3, [r4, #12]
 80079d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079d6:	1a9b      	subs	r3, r3, r2
 80079d8:	42ab      	cmp	r3, r5
 80079da:	dcf0      	bgt.n	80079be <_printf_i+0x1f2>
 80079dc:	e7e9      	b.n	80079b2 <_printf_i+0x1e6>
 80079de:	2500      	movs	r5, #0
 80079e0:	e7f7      	b.n	80079d2 <_printf_i+0x206>
 80079e2:	46c0      	nop			; (mov r8, r8)
 80079e4:	080081c5 	.word	0x080081c5
 80079e8:	080081d6 	.word	0x080081d6

080079ec <memmove>:
 80079ec:	b510      	push	{r4, lr}
 80079ee:	4288      	cmp	r0, r1
 80079f0:	d902      	bls.n	80079f8 <memmove+0xc>
 80079f2:	188b      	adds	r3, r1, r2
 80079f4:	4298      	cmp	r0, r3
 80079f6:	d303      	bcc.n	8007a00 <memmove+0x14>
 80079f8:	2300      	movs	r3, #0
 80079fa:	e007      	b.n	8007a0c <memmove+0x20>
 80079fc:	5c8b      	ldrb	r3, [r1, r2]
 80079fe:	5483      	strb	r3, [r0, r2]
 8007a00:	3a01      	subs	r2, #1
 8007a02:	d2fb      	bcs.n	80079fc <memmove+0x10>
 8007a04:	bd10      	pop	{r4, pc}
 8007a06:	5ccc      	ldrb	r4, [r1, r3]
 8007a08:	54c4      	strb	r4, [r0, r3]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d1fa      	bne.n	8007a06 <memmove+0x1a>
 8007a10:	e7f8      	b.n	8007a04 <memmove+0x18>
	...

08007a14 <_sbrk_r>:
 8007a14:	2300      	movs	r3, #0
 8007a16:	b570      	push	{r4, r5, r6, lr}
 8007a18:	4d06      	ldr	r5, [pc, #24]	; (8007a34 <_sbrk_r+0x20>)
 8007a1a:	0004      	movs	r4, r0
 8007a1c:	0008      	movs	r0, r1
 8007a1e:	602b      	str	r3, [r5, #0]
 8007a20:	f7fb fb62 	bl	80030e8 <_sbrk>
 8007a24:	1c43      	adds	r3, r0, #1
 8007a26:	d103      	bne.n	8007a30 <_sbrk_r+0x1c>
 8007a28:	682b      	ldr	r3, [r5, #0]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d000      	beq.n	8007a30 <_sbrk_r+0x1c>
 8007a2e:	6023      	str	r3, [r4, #0]
 8007a30:	bd70      	pop	{r4, r5, r6, pc}
 8007a32:	46c0      	nop			; (mov r8, r8)
 8007a34:	20001560 	.word	0x20001560

08007a38 <memchr>:
 8007a38:	b2c9      	uxtb	r1, r1
 8007a3a:	1882      	adds	r2, r0, r2
 8007a3c:	4290      	cmp	r0, r2
 8007a3e:	d101      	bne.n	8007a44 <memchr+0xc>
 8007a40:	2000      	movs	r0, #0
 8007a42:	4770      	bx	lr
 8007a44:	7803      	ldrb	r3, [r0, #0]
 8007a46:	428b      	cmp	r3, r1
 8007a48:	d0fb      	beq.n	8007a42 <memchr+0xa>
 8007a4a:	3001      	adds	r0, #1
 8007a4c:	e7f6      	b.n	8007a3c <memchr+0x4>

08007a4e <_realloc_r>:
 8007a4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a50:	0007      	movs	r7, r0
 8007a52:	000e      	movs	r6, r1
 8007a54:	0014      	movs	r4, r2
 8007a56:	2900      	cmp	r1, #0
 8007a58:	d105      	bne.n	8007a66 <_realloc_r+0x18>
 8007a5a:	0011      	movs	r1, r2
 8007a5c:	f7ff fc52 	bl	8007304 <_malloc_r>
 8007a60:	0005      	movs	r5, r0
 8007a62:	0028      	movs	r0, r5
 8007a64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007a66:	2a00      	cmp	r2, #0
 8007a68:	d103      	bne.n	8007a72 <_realloc_r+0x24>
 8007a6a:	f7ff fbdf 	bl	800722c <_free_r>
 8007a6e:	0025      	movs	r5, r4
 8007a70:	e7f7      	b.n	8007a62 <_realloc_r+0x14>
 8007a72:	f000 f81b 	bl	8007aac <_malloc_usable_size_r>
 8007a76:	9001      	str	r0, [sp, #4]
 8007a78:	4284      	cmp	r4, r0
 8007a7a:	d803      	bhi.n	8007a84 <_realloc_r+0x36>
 8007a7c:	0035      	movs	r5, r6
 8007a7e:	0843      	lsrs	r3, r0, #1
 8007a80:	42a3      	cmp	r3, r4
 8007a82:	d3ee      	bcc.n	8007a62 <_realloc_r+0x14>
 8007a84:	0021      	movs	r1, r4
 8007a86:	0038      	movs	r0, r7
 8007a88:	f7ff fc3c 	bl	8007304 <_malloc_r>
 8007a8c:	1e05      	subs	r5, r0, #0
 8007a8e:	d0e8      	beq.n	8007a62 <_realloc_r+0x14>
 8007a90:	9b01      	ldr	r3, [sp, #4]
 8007a92:	0022      	movs	r2, r4
 8007a94:	429c      	cmp	r4, r3
 8007a96:	d900      	bls.n	8007a9a <_realloc_r+0x4c>
 8007a98:	001a      	movs	r2, r3
 8007a9a:	0031      	movs	r1, r6
 8007a9c:	0028      	movs	r0, r5
 8007a9e:	f7ff fbbb 	bl	8007218 <memcpy>
 8007aa2:	0031      	movs	r1, r6
 8007aa4:	0038      	movs	r0, r7
 8007aa6:	f7ff fbc1 	bl	800722c <_free_r>
 8007aaa:	e7da      	b.n	8007a62 <_realloc_r+0x14>

08007aac <_malloc_usable_size_r>:
 8007aac:	1f0b      	subs	r3, r1, #4
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	1f18      	subs	r0, r3, #4
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	da01      	bge.n	8007aba <_malloc_usable_size_r+0xe>
 8007ab6:	580b      	ldr	r3, [r1, r0]
 8007ab8:	18c0      	adds	r0, r0, r3
 8007aba:	4770      	bx	lr

08007abc <_init>:
 8007abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007abe:	46c0      	nop			; (mov r8, r8)
 8007ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ac2:	bc08      	pop	{r3}
 8007ac4:	469e      	mov	lr, r3
 8007ac6:	4770      	bx	lr

08007ac8 <_fini>:
 8007ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aca:	46c0      	nop			; (mov r8, r8)
 8007acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ace:	bc08      	pop	{r3}
 8007ad0:	469e      	mov	lr, r3
 8007ad2:	4770      	bx	lr
