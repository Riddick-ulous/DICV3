
DICV3Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006858  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b0  08006918  08006918  00016918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fc8  08006fc8  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08006fc8  08006fc8  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006fc8  08006fc8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fc8  08006fc8  00016fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fcc  08006fcc  00016fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001104  20000060  08007030  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001164  08007030  00021164  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010b9b  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f27  00000000  00000000  00030c66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001050  00000000  00000000  00033b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cb1  00000000  00000000  00034be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c04e  00000000  00000000  00035891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014acd  00000000  00000000  000518df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d62d  00000000  00000000  000663ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ec4  00000000  00000000  001039dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  001078a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006900 	.word	0x08006900

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08006900 	.word	0x08006900

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <ADC_Init>:
static uint8_t  fifo_head[ADC_CHANNEL_COUNT]  = {0};   // Schreibposition
static uint8_t  fifo_count[ADC_CHANNEL_COUNT] = {0};   // Anzahl gespeicherter Werte
static uint8_t  value_read[ADC_CHANNEL_COUNT] = {1};   // Wert seit letztem Update gelesen?

void ADC_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
    // wie für ~1ms-Mittelung nötig sind.
    if (ADC_DMA_BLOCK_SIZE < ADC_SHORT_AVG_SAMPLES) {
        Error_Register(ERROR_ADC_PARAM);
        // wir starten trotzdem, aber Update() wird dann 0..n behandeln
    } else {
        Error_Clear(ERROR_ADC_PARAM);
 800040c:	200a      	movs	r0, #10
 800040e:	f000 fbb3 	bl	8000b78 <Error_Clear>
    }

    if (HAL_ADC_Start_DMA(&hadc, (uint32_t*)adc_dma_buffer, TOTAL_DMA_SAMPLES) != HAL_OK) {
 8000412:	2380      	movs	r3, #128	; 0x80
 8000414:	005a      	lsls	r2, r3, #1
 8000416:	4908      	ldr	r1, [pc, #32]	; (8000438 <ADC_Init+0x30>)
 8000418:	4b08      	ldr	r3, [pc, #32]	; (800043c <ADC_Init+0x34>)
 800041a:	0018      	movs	r0, r3
 800041c:	f002 fa7c 	bl	8002918 <HAL_ADC_Start_DMA>
 8000420:	1e03      	subs	r3, r0, #0
 8000422:	d003      	beq.n	800042c <ADC_Init+0x24>
        Error_Register(ERROR_ADC_DMA_START_FAILED);
 8000424:	2005      	movs	r0, #5
 8000426:	f000 fb89 	bl	8000b3c <Error_Register>
        return;
 800042a:	e002      	b.n	8000432 <ADC_Init+0x2a>
    } else {
        Error_Clear(ERROR_ADC_DMA_START_FAILED);
 800042c:	2005      	movs	r0, #5
 800042e:	f000 fba3 	bl	8000b78 <Error_Clear>
        // Falls zuvor "keine Daten" gemeldet wurde, lassen wir das beim ersten Update löschen
    }
}
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	2000007c 	.word	0x2000007c
 800043c:	20000a38 	.word	0x20000a38

08000440 <HAL_ADC_ConvCpltCallback>:

// Voll-Callback
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc_)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
    if (hadc_->Instance != ADC1) return;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a04      	ldr	r2, [pc, #16]	; (8000460 <HAL_ADC_ConvCpltCallback+0x20>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d102      	bne.n	8000458 <HAL_ADC_ConvCpltCallback+0x18>
    ADC_Update();
 8000452:	f000 f82b 	bl	80004ac <ADC_Update>
 8000456:	e000      	b.n	800045a <HAL_ADC_ConvCpltCallback+0x1a>
    if (hadc_->Instance != ADC1) return;
 8000458:	46c0      	nop			; (mov r8, r8)
}
 800045a:	46bd      	mov	sp, r7
 800045c:	b002      	add	sp, #8
 800045e:	bd80      	pop	{r7, pc}
 8000460:	40012400 	.word	0x40012400

08000464 <HAL_ADC_ErrorCallback>:
//     // -> könntest du nutzen, wenn du 2x 1ms-Blöcke in einem DMA-Block löst
// }

// Fehler-Callback der HAL
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef* hadc_)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
    if (hadc_->Instance != ADC1) return;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a0d      	ldr	r2, [pc, #52]	; (80004a8 <HAL_ADC_ErrorCallback+0x44>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d114      	bne.n	80004a0 <HAL_ADC_ErrorCallback+0x3c>

    uint32_t err = HAL_ADC_GetError(hadc_);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	0018      	movs	r0, r3
 800047a:	f002 fc91 	bl	8002da0 <HAL_ADC_GetError>
 800047e:	0003      	movs	r3, r0
 8000480:	60fb      	str	r3, [r7, #12]
    if (err & HAL_ADC_ERROR_DMA) Error_Register(ERROR_ADC_DMA_ERROR);
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	2204      	movs	r2, #4
 8000486:	4013      	ands	r3, r2
 8000488:	d002      	beq.n	8000490 <HAL_ADC_ErrorCallback+0x2c>
 800048a:	2006      	movs	r0, #6
 800048c:	f000 fb56 	bl	8000b3c <Error_Register>
    if (err & HAL_ADC_ERROR_OVR) Error_Register(ERROR_ADC_OVERRUN);
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	2202      	movs	r2, #2
 8000494:	4013      	ands	r3, r2
 8000496:	d004      	beq.n	80004a2 <HAL_ADC_ErrorCallback+0x3e>
 8000498:	2007      	movs	r0, #7
 800049a:	f000 fb4f 	bl	8000b3c <Error_Register>
 800049e:	e000      	b.n	80004a2 <HAL_ADC_ErrorCallback+0x3e>
    if (hadc_->Instance != ADC1) return;
 80004a0:	46c0      	nop			; (mov r8, r8)

    // Weitere Fehlerarten (JQOVF etc.) hat F0 nicht, aber hier erweiterbar
}
 80004a2:	46bd      	mov	sp, r7
 80004a4:	b004      	add	sp, #16
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	40012400 	.word	0x40012400

080004ac <ADC_Update>:

// Rechnet 1ms-Mittelwert(e) und füllt Ringpuffer
void ADC_Update(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b088      	sub	sp, #32
 80004b0:	af00      	add	r7, sp, #0
    // Sobald Daten reinkommen, können wir "NO_DATA" ggf. löschen
    // (wir löschen erst NACH erfolgreichem FIFO-Schreiben unten)
    uint32_t temp_sum[ADC_CHANNEL_COUNT] = {0};
 80004b2:	003b      	movs	r3, r7
 80004b4:	0018      	movs	r0, r3
 80004b6:	2310      	movs	r3, #16
 80004b8:	001a      	movs	r2, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	f005 fd9a 	bl	8005ff4 <memset>
        Error_Register(ERROR_ADC_PARAM);
        return;
    }

    // 1-ms-Mittelwert pro Kanal aus Rohsamples berechnen
    for (int i = 0; i < ADC_SHORT_AVG_SAMPLES; i++) {
 80004c0:	2300      	movs	r3, #0
 80004c2:	61fb      	str	r3, [r7, #28]
 80004c4:	e01b      	b.n	80004fe <ADC_Update+0x52>
        for (int ch = 0; ch < ADC_CHANNEL_COUNT; ch++) {
 80004c6:	2300      	movs	r3, #0
 80004c8:	61bb      	str	r3, [r7, #24]
 80004ca:	e012      	b.n	80004f2 <ADC_Update+0x46>
            temp_sum[ch] += adc_dma_buffer[i * ADC_CHANNEL_COUNT + ch];
 80004cc:	003b      	movs	r3, r7
 80004ce:	69ba      	ldr	r2, [r7, #24]
 80004d0:	0092      	lsls	r2, r2, #2
 80004d2:	58d3      	ldr	r3, [r2, r3]
 80004d4:	69fa      	ldr	r2, [r7, #28]
 80004d6:	0091      	lsls	r1, r2, #2
 80004d8:	69ba      	ldr	r2, [r7, #24]
 80004da:	1889      	adds	r1, r1, r2
 80004dc:	4a3a      	ldr	r2, [pc, #232]	; (80005c8 <ADC_Update+0x11c>)
 80004de:	0049      	lsls	r1, r1, #1
 80004e0:	5a8a      	ldrh	r2, [r1, r2]
 80004e2:	1899      	adds	r1, r3, r2
 80004e4:	003b      	movs	r3, r7
 80004e6:	69ba      	ldr	r2, [r7, #24]
 80004e8:	0092      	lsls	r2, r2, #2
 80004ea:	50d1      	str	r1, [r2, r3]
        for (int ch = 0; ch < ADC_CHANNEL_COUNT; ch++) {
 80004ec:	69bb      	ldr	r3, [r7, #24]
 80004ee:	3301      	adds	r3, #1
 80004f0:	61bb      	str	r3, [r7, #24]
 80004f2:	69bb      	ldr	r3, [r7, #24]
 80004f4:	2b03      	cmp	r3, #3
 80004f6:	dde9      	ble.n	80004cc <ADC_Update+0x20>
    for (int i = 0; i < ADC_SHORT_AVG_SAMPLES; i++) {
 80004f8:	69fb      	ldr	r3, [r7, #28]
 80004fa:	3301      	adds	r3, #1
 80004fc:	61fb      	str	r3, [r7, #28]
 80004fe:	69fb      	ldr	r3, [r7, #28]
 8000500:	2b0b      	cmp	r3, #11
 8000502:	dde0      	ble.n	80004c6 <ADC_Update+0x1a>
        }
    }

    for (int ch = 0; ch < ADC_CHANNEL_COUNT; ch++) {
 8000504:	2300      	movs	r3, #0
 8000506:	617b      	str	r3, [r7, #20]
 8000508:	e054      	b.n	80005b4 <ADC_Update+0x108>
        uint16_t one_ms_avg = (uint16_t)(temp_sum[ch] / ADC_SHORT_AVG_SAMPLES);
 800050a:	003b      	movs	r3, r7
 800050c:	697a      	ldr	r2, [r7, #20]
 800050e:	0092      	lsls	r2, r2, #2
 8000510:	58d3      	ldr	r3, [r2, r3]
 8000512:	210c      	movs	r1, #12
 8000514:	0018      	movs	r0, r3
 8000516:	f7ff fe01 	bl	800011c <__udivsi3>
 800051a:	0003      	movs	r3, r0
 800051c:	001a      	movs	r2, r3
 800051e:	2312      	movs	r3, #18
 8000520:	18fb      	adds	r3, r7, r3
 8000522:	801a      	strh	r2, [r3, #0]

        if (value_read[ch]) {
 8000524:	4a29      	ldr	r2, [pc, #164]	; (80005cc <ADC_Update+0x120>)
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	18d3      	adds	r3, r2, r3
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d00e      	beq.n	800054e <ADC_Update+0xa2>
            // FIFO leeren, wenn seit letzter Abfrage gelesen wurde
            fifo_count[ch] = 0;
 8000530:	4a27      	ldr	r2, [pc, #156]	; (80005d0 <ADC_Update+0x124>)
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	18d3      	adds	r3, r2, r3
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]
            fifo_head[ch]  = 0;
 800053a:	4a26      	ldr	r2, [pc, #152]	; (80005d4 <ADC_Update+0x128>)
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	18d3      	adds	r3, r2, r3
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
            value_read[ch] = 0;
 8000544:	4a21      	ldr	r2, [pc, #132]	; (80005cc <ADC_Update+0x120>)
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	18d3      	adds	r3, r2, r3
 800054a:	2200      	movs	r2, #0
 800054c:	701a      	strb	r2, [r3, #0]
        }

        // Neuen 1ms-Wert in den Ringpuffer schreiben (zirkular)
        avg_fifo[ch][fifo_head[ch]] = one_ms_avg;
 800054e:	4a21      	ldr	r2, [pc, #132]	; (80005d4 <ADC_Update+0x128>)
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	18d3      	adds	r3, r2, r3
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	0018      	movs	r0, r3
 8000558:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <ADC_Update+0x12c>)
 800055a:	697a      	ldr	r2, [r7, #20]
 800055c:	2164      	movs	r1, #100	; 0x64
 800055e:	434a      	muls	r2, r1
 8000560:	1812      	adds	r2, r2, r0
 8000562:	0052      	lsls	r2, r2, #1
 8000564:	2112      	movs	r1, #18
 8000566:	1879      	adds	r1, r7, r1
 8000568:	8809      	ldrh	r1, [r1, #0]
 800056a:	52d1      	strh	r1, [r2, r3]
        fifo_head[ch] = (fifo_head[ch] + 1) % ADC_AGGREGATION_LIMIT;
 800056c:	4a19      	ldr	r2, [pc, #100]	; (80005d4 <ADC_Update+0x128>)
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	18d3      	adds	r3, r2, r3
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	3301      	adds	r3, #1
 8000576:	2164      	movs	r1, #100	; 0x64
 8000578:	0018      	movs	r0, r3
 800057a:	f7ff ff3f 	bl	80003fc <__aeabi_idivmod>
 800057e:	000b      	movs	r3, r1
 8000580:	b2d9      	uxtb	r1, r3
 8000582:	4a14      	ldr	r2, [pc, #80]	; (80005d4 <ADC_Update+0x128>)
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	18d3      	adds	r3, r2, r3
 8000588:	1c0a      	adds	r2, r1, #0
 800058a:	701a      	strb	r2, [r3, #0]

        if (fifo_count[ch] < ADC_AGGREGATION_LIMIT) {
 800058c:	4a10      	ldr	r2, [pc, #64]	; (80005d0 <ADC_Update+0x124>)
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	18d3      	adds	r3, r2, r3
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b63      	cmp	r3, #99	; 0x63
 8000596:	d80a      	bhi.n	80005ae <ADC_Update+0x102>
            fifo_count[ch]++;
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <ADC_Update+0x124>)
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	18d3      	adds	r3, r2, r3
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	3301      	adds	r3, #1
 80005a2:	b2d9      	uxtb	r1, r3
 80005a4:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <ADC_Update+0x124>)
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	18d3      	adds	r3, r2, r3
 80005aa:	1c0a      	adds	r2, r1, #0
 80005ac:	701a      	strb	r2, [r3, #0]
    for (int ch = 0; ch < ADC_CHANNEL_COUNT; ch++) {
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	3301      	adds	r3, #1
 80005b2:	617b      	str	r3, [r7, #20]
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	dda7      	ble.n	800050a <ADC_Update+0x5e>
        }
    }

    // Wenn wir hier waren, haben wir Daten -> NO_DATA zurücksetzen
    Error_Clear(ERROR_ADC_NO_DATA);
 80005ba:	2009      	movs	r0, #9
 80005bc:	f000 fadc 	bl	8000b78 <Error_Clear>
}
 80005c0:	46bd      	mov	sp, r7
 80005c2:	b008      	add	sp, #32
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	2000007c 	.word	0x2000007c
 80005cc:	20000000 	.word	0x20000000
 80005d0:	200005a0 	.word	0x200005a0
 80005d4:	2000059c 	.word	0x2000059c
 80005d8:	2000027c 	.word	0x2000027c

080005dc <ADC_GetAverage>:

uint16_t ADC_GetAverage(uint8_t channel)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	0002      	movs	r2, r0
 80005e4:	1dfb      	adds	r3, r7, #7
 80005e6:	701a      	strb	r2, [r3, #0]
    if (channel >= ADC_CHANNEL_COUNT) {
 80005e8:	1dfb      	adds	r3, r7, #7
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b03      	cmp	r3, #3
 80005ee:	d904      	bls.n	80005fa <ADC_GetAverage+0x1e>
        Error_Register(ERROR_ADC_INVALID_CHANNEL);
 80005f0:	2008      	movs	r0, #8
 80005f2:	f000 faa3 	bl	8000b3c <Error_Register>
        return 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	e039      	b.n	800066e <ADC_GetAverage+0x92>
    }

    if (fifo_count[channel] == 0) {
 80005fa:	1dfb      	adds	r3, r7, #7
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	4a1e      	ldr	r2, [pc, #120]	; (8000678 <ADC_GetAverage+0x9c>)
 8000600:	5cd3      	ldrb	r3, [r2, r3]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d104      	bne.n	8000610 <ADC_GetAverage+0x34>
        Error_Register(ERROR_ADC_NO_DATA);
 8000606:	2009      	movs	r0, #9
 8000608:	f000 fa98 	bl	8000b3c <Error_Register>
        return 0;
 800060c:	2300      	movs	r3, #0
 800060e:	e02e      	b.n	800066e <ADC_GetAverage+0x92>
    }

    // Summe bilden (O(n)); wenn du O(1) willst, sag Bescheid -> dann halten wir pro FIFO die laufende Summe mit.
    uint32_t sum = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	60fb      	str	r3, [r7, #12]
    // FIFO ist zirkular – aber wir mitteln über ALLE aktuell gespeicherten Werte,
    // Reihenfolge ist für den Durchschnitt egal, daher einfacher: linear über 0..fifo_count-1
    for (int i = 0; i < fifo_count[channel]; i++) {
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	e00f      	b.n	800063a <ADC_GetAverage+0x5e>
        sum += avg_fifo[channel][i];
 800061a:	1dfb      	adds	r3, r7, #7
 800061c:	781a      	ldrb	r2, [r3, #0]
 800061e:	4b17      	ldr	r3, [pc, #92]	; (800067c <ADC_GetAverage+0xa0>)
 8000620:	2164      	movs	r1, #100	; 0x64
 8000622:	4351      	muls	r1, r2
 8000624:	68ba      	ldr	r2, [r7, #8]
 8000626:	188a      	adds	r2, r1, r2
 8000628:	0052      	lsls	r2, r2, #1
 800062a:	5ad3      	ldrh	r3, [r2, r3]
 800062c:	001a      	movs	r2, r3
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	189b      	adds	r3, r3, r2
 8000632:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < fifo_count[channel]; i++) {
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	3301      	adds	r3, #1
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	1dfb      	adds	r3, r7, #7
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	4a0e      	ldr	r2, [pc, #56]	; (8000678 <ADC_GetAverage+0x9c>)
 8000640:	5cd3      	ldrb	r3, [r2, r3]
 8000642:	001a      	movs	r2, r3
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	4293      	cmp	r3, r2
 8000648:	dbe7      	blt.n	800061a <ADC_GetAverage+0x3e>
    }

    value_read[channel] = 1; // markiert, dass beim nächsten Update neu begonnen wird (FIFO wird geleert)
 800064a:	1dfb      	adds	r3, r7, #7
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <ADC_GetAverage+0xa4>)
 8000650:	2101      	movs	r1, #1
 8000652:	54d1      	strb	r1, [r2, r3]

    // wir haben erfolgreich geliefert -> offensichtliche Fehler löschen
    Error_Clear(ERROR_ADC_INVALID_CHANNEL);
 8000654:	2008      	movs	r0, #8
 8000656:	f000 fa8f 	bl	8000b78 <Error_Clear>
    // ERROR_ADC_NO_DATA wurde schon in Update() gelöscht, wenn Daten rein kamen

    return (uint16_t)(sum / fifo_count[channel]);
 800065a:	1dfb      	adds	r3, r7, #7
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	4a06      	ldr	r2, [pc, #24]	; (8000678 <ADC_GetAverage+0x9c>)
 8000660:	5cd3      	ldrb	r3, [r2, r3]
 8000662:	0019      	movs	r1, r3
 8000664:	68f8      	ldr	r0, [r7, #12]
 8000666:	f7ff fd59 	bl	800011c <__udivsi3>
 800066a:	0003      	movs	r3, r0
 800066c:	b29b      	uxth	r3, r3
}
 800066e:	0018      	movs	r0, r3
 8000670:	46bd      	mov	sp, r7
 8000672:	b004      	add	sp, #16
 8000674:	bd80      	pop	{r7, pc}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	200005a0 	.word	0x200005a0
 800067c:	2000027c 	.word	0x2000027c
 8000680:	20000000 	.word	0x20000000

08000684 <HAL_CAN_RxFifo0MsgPendingCallback>:
static volatile uint8_t TxQueueTail = 0;

// ---------- Empfang ----------

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000684:	b590      	push	{r4, r7, lr}
 8000686:	b08f      	sub	sp, #60	; 0x3c
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8];

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK) {
 800068c:	230c      	movs	r3, #12
 800068e:	18fb      	adds	r3, r7, r3
 8000690:	2214      	movs	r2, #20
 8000692:	18ba      	adds	r2, r7, r2
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	2100      	movs	r1, #0
 8000698:	f003 f86b 	bl	8003772 <HAL_CAN_GetRxMessage>
 800069c:	1e03      	subs	r3, r0, #0
 800069e:	d001      	beq.n	80006a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
        Error_Handler();
 80006a0:	f001 fa28 	bl	8001af4 <Error_Handler>
    }

    // Update bestehende Nachricht
    for (int i = 0; i < MAX_CAN_MESSAGES; i++) {
 80006a4:	2300      	movs	r3, #0
 80006a6:	637b      	str	r3, [r7, #52]	; 0x34
 80006a8:	e042      	b.n	8000730 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
        if (CAN_MessageDB[i].valid && CAN_MessageDB[i].id == rxHeader.StdId) {
 80006aa:	494d      	ldr	r1, [pc, #308]	; (80007e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 80006ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80006ae:	0013      	movs	r3, r2
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	189b      	adds	r3, r3, r2
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	18cb      	adds	r3, r1, r3
 80006b8:	3310      	adds	r3, #16
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d034      	beq.n	800072a <HAL_CAN_RxFifo0MsgPendingCallback+0xa6>
 80006c0:	4947      	ldr	r1, [pc, #284]	; (80007e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 80006c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80006c4:	0013      	movs	r3, r2
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	189b      	adds	r3, r3, r2
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	5a5b      	ldrh	r3, [r3, r1]
 80006ce:	001a      	movs	r2, r3
 80006d0:	2414      	movs	r4, #20
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d127      	bne.n	800072a <HAL_CAN_RxFifo0MsgPendingCallback+0xa6>
            CAN_MessageDB[i].dlc = rxHeader.DLC;
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	691b      	ldr	r3, [r3, #16]
 80006de:	b2d8      	uxtb	r0, r3
 80006e0:	493f      	ldr	r1, [pc, #252]	; (80007e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 80006e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80006e4:	0013      	movs	r3, r2
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	189b      	adds	r3, r3, r2
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	18cb      	adds	r3, r1, r3
 80006ee:	3302      	adds	r3, #2
 80006f0:	1c02      	adds	r2, r0, #0
 80006f2:	701a      	strb	r2, [r3, #0]
            memcpy(CAN_MessageDB[i].data, rxData, rxHeader.DLC);
 80006f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80006f6:	0013      	movs	r3, r2
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	189b      	adds	r3, r3, r2
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	4a38      	ldr	r2, [pc, #224]	; (80007e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 8000700:	189b      	adds	r3, r3, r2
 8000702:	1cd8      	adds	r0, r3, #3
 8000704:	193b      	adds	r3, r7, r4
 8000706:	691a      	ldr	r2, [r3, #16]
 8000708:	230c      	movs	r3, #12
 800070a:	18fb      	adds	r3, r7, r3
 800070c:	0019      	movs	r1, r3
 800070e:	f005 fca5 	bl	800605c <memcpy>
            CAN_MessageDB[i].timestamp = HAL_GetTick();
 8000712:	f001 ff93 	bl	800263c <HAL_GetTick>
 8000716:	4932      	ldr	r1, [pc, #200]	; (80007e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 8000718:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800071a:	0013      	movs	r3, r2
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	189b      	adds	r3, r3, r2
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	18cb      	adds	r3, r1, r3
 8000724:	330c      	adds	r3, #12
 8000726:	6018      	str	r0, [r3, #0]
            return;
 8000728:	e057      	b.n	80007da <HAL_CAN_RxFifo0MsgPendingCallback+0x156>
    for (int i = 0; i < MAX_CAN_MESSAGES; i++) {
 800072a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800072c:	3301      	adds	r3, #1
 800072e:	637b      	str	r3, [r7, #52]	; 0x34
 8000730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000732:	2b0f      	cmp	r3, #15
 8000734:	ddb9      	ble.n	80006aa <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
        }
    }

    // Neuen Slot belegen
    for (int i = 0; i < MAX_CAN_MESSAGES; i++) {
 8000736:	2300      	movs	r3, #0
 8000738:	633b      	str	r3, [r7, #48]	; 0x30
 800073a:	e04b      	b.n	80007d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>
        if (!CAN_MessageDB[i].valid) {
 800073c:	4928      	ldr	r1, [pc, #160]	; (80007e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 800073e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000740:	0013      	movs	r3, r2
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	189b      	adds	r3, r3, r2
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	18cb      	adds	r3, r1, r3
 800074a:	3310      	adds	r3, #16
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d13d      	bne.n	80007ce <HAL_CAN_RxFifo0MsgPendingCallback+0x14a>
            CAN_MessageDB[i].id = rxHeader.StdId;
 8000752:	2414      	movs	r4, #20
 8000754:	193b      	adds	r3, r7, r4
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	b298      	uxth	r0, r3
 800075a:	4921      	ldr	r1, [pc, #132]	; (80007e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 800075c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800075e:	0013      	movs	r3, r2
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	189b      	adds	r3, r3, r2
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	1c02      	adds	r2, r0, #0
 8000768:	525a      	strh	r2, [r3, r1]
            CAN_MessageDB[i].dlc = rxHeader.DLC;
 800076a:	193b      	adds	r3, r7, r4
 800076c:	691b      	ldr	r3, [r3, #16]
 800076e:	b2d8      	uxtb	r0, r3
 8000770:	491b      	ldr	r1, [pc, #108]	; (80007e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 8000772:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000774:	0013      	movs	r3, r2
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	189b      	adds	r3, r3, r2
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	18cb      	adds	r3, r1, r3
 800077e:	3302      	adds	r3, #2
 8000780:	1c02      	adds	r2, r0, #0
 8000782:	701a      	strb	r2, [r3, #0]
            memcpy(CAN_MessageDB[i].data, rxData, rxHeader.DLC);
 8000784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000786:	0013      	movs	r3, r2
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	189b      	adds	r3, r3, r2
 800078c:	009b      	lsls	r3, r3, #2
 800078e:	4a14      	ldr	r2, [pc, #80]	; (80007e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 8000790:	189b      	adds	r3, r3, r2
 8000792:	1cd8      	adds	r0, r3, #3
 8000794:	193b      	adds	r3, r7, r4
 8000796:	691a      	ldr	r2, [r3, #16]
 8000798:	230c      	movs	r3, #12
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	0019      	movs	r1, r3
 800079e:	f005 fc5d 	bl	800605c <memcpy>
            CAN_MessageDB[i].timestamp = HAL_GetTick();
 80007a2:	f001 ff4b 	bl	800263c <HAL_GetTick>
 80007a6:	490e      	ldr	r1, [pc, #56]	; (80007e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 80007a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007aa:	0013      	movs	r3, r2
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	189b      	adds	r3, r3, r2
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	18cb      	adds	r3, r1, r3
 80007b4:	330c      	adds	r3, #12
 80007b6:	6018      	str	r0, [r3, #0]
            CAN_MessageDB[i].valid = 1;
 80007b8:	4909      	ldr	r1, [pc, #36]	; (80007e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 80007ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007bc:	0013      	movs	r3, r2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	189b      	adds	r3, r3, r2
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	18cb      	adds	r3, r1, r3
 80007c6:	3310      	adds	r3, #16
 80007c8:	2201      	movs	r2, #1
 80007ca:	701a      	strb	r2, [r3, #0]
            return;
 80007cc:	e005      	b.n	80007da <HAL_CAN_RxFifo0MsgPendingCallback+0x156>
    for (int i = 0; i < MAX_CAN_MESSAGES; i++) {
 80007ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007d0:	3301      	adds	r3, #1
 80007d2:	633b      	str	r3, [r7, #48]	; 0x30
 80007d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007d6:	2b0f      	cmp	r3, #15
 80007d8:	ddb0      	ble.n	800073c <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>
        }
    }
}
 80007da:	46bd      	mov	sp, r7
 80007dc:	b00f      	add	sp, #60	; 0x3c
 80007de:	bd90      	pop	{r4, r7, pc}
 80007e0:	200005a4 	.word	0x200005a4

080007e4 <CAN_Init>:

// ---------- Initialisierung ----------

void CAN_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	; 0x28
 80007e8:	af00      	add	r7, sp, #0
    // Alle Filter durchlassen
    CAN_FilterTypeDef sFilterConfig;

    sFilterConfig.FilterBank = 0;
 80007ea:	003b      	movs	r3, r7
 80007ec:	2200      	movs	r2, #0
 80007ee:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80007f0:	003b      	movs	r3, r7
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80007f6:	003b      	movs	r3, r7
 80007f8:	2201      	movs	r2, #1
 80007fa:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdHigh = 0x0000;
 80007fc:	003b      	movs	r3, r7
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIdLow = 0x0000;
 8000802:	003b      	movs	r3, r7
 8000804:	2200      	movs	r2, #0
 8000806:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000808:	003b      	movs	r3, r7
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 800080e:	003b      	movs	r3, r7
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000814:	003b      	movs	r3, r7
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 800081a:	003b      	movs	r3, r7
 800081c:	2201      	movs	r2, #1
 800081e:	621a      	str	r2, [r3, #32]
    sFilterConfig.SlaveStartFilterBank = 14;
 8000820:	003b      	movs	r3, r7
 8000822:	220e      	movs	r2, #14
 8000824:	625a      	str	r2, [r3, #36]	; 0x24

    HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8000826:	003a      	movs	r2, r7
 8000828:	4b15      	ldr	r3, [pc, #84]	; (8000880 <CAN_Init+0x9c>)
 800082a:	0011      	movs	r1, r2
 800082c:	0018      	movs	r0, r3
 800082e:	f002 fd6f 	bl	8003310 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan);
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <CAN_Init+0x9c>)
 8000834:	0018      	movs	r0, r3
 8000836:	f002 fe5d 	bl	80034f4 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <CAN_Init+0x9c>)
 800083c:	2102      	movs	r1, #2
 800083e:	0018      	movs	r0, r3
 8000840:	f003 f8c2 	bl	80039c8 <HAL_CAN_ActivateNotification>
    HAL_CAN_ActivateNotification(&hcan, CAN_IT_TX_MAILBOX_EMPTY);  // wichtig
 8000844:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <CAN_Init+0x9c>)
 8000846:	2101      	movs	r1, #1
 8000848:	0018      	movs	r0, r3
 800084a:	f003 f8bd 	bl	80039c8 <HAL_CAN_ActivateNotification>

    memset(CAN_MessageDB, 0, sizeof(CAN_MessageDB));
 800084e:	23a0      	movs	r3, #160	; 0xa0
 8000850:	005a      	lsls	r2, r3, #1
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <CAN_Init+0xa0>)
 8000854:	2100      	movs	r1, #0
 8000856:	0018      	movs	r0, r3
 8000858:	f005 fbcc 	bl	8005ff4 <memset>
    memset(TxQueue, 0, sizeof(TxQueue));
 800085c:	23a0      	movs	r3, #160	; 0xa0
 800085e:	009a      	lsls	r2, r3, #2
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <CAN_Init+0xa4>)
 8000862:	2100      	movs	r1, #0
 8000864:	0018      	movs	r0, r3
 8000866:	f005 fbc5 	bl	8005ff4 <memset>
    TxQueueHead = TxQueueTail = 0;
 800086a:	2100      	movs	r1, #0
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <CAN_Init+0xa8>)
 800086e:	1c0a      	adds	r2, r1, #0
 8000870:	701a      	strb	r2, [r3, #0]
 8000872:	4b07      	ldr	r3, [pc, #28]	; (8000890 <CAN_Init+0xac>)
 8000874:	1c0a      	adds	r2, r1, #0
 8000876:	701a      	strb	r2, [r3, #0]
}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	b00a      	add	sp, #40	; 0x28
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000abc 	.word	0x20000abc
 8000884:	200005a4 	.word	0x200005a4
 8000888:	200006e4 	.word	0x200006e4
 800088c:	20000965 	.word	0x20000965
 8000890:	20000964 	.word	0x20000964

08000894 <TxQueue_IsFull>:

// ---------- Senden ----------

static uint8_t TxQueue_IsFull(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
    return ((TxQueueHead + 1) % CAN_TX_QUEUE_LENGTH) == TxQueueTail;
 8000898:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <TxQueue_IsFull+0x34>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	b2db      	uxtb	r3, r3
 800089e:	3301      	adds	r3, #1
 80008a0:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <TxQueue_IsFull+0x38>)
 80008a2:	4013      	ands	r3, r2
 80008a4:	d504      	bpl.n	80008b0 <TxQueue_IsFull+0x1c>
 80008a6:	3b01      	subs	r3, #1
 80008a8:	2220      	movs	r2, #32
 80008aa:	4252      	negs	r2, r2
 80008ac:	4313      	orrs	r3, r2
 80008ae:	3301      	adds	r3, #1
 80008b0:	001a      	movs	r2, r3
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <TxQueue_IsFull+0x3c>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	425a      	negs	r2, r3
 80008bc:	4153      	adcs	r3, r2
 80008be:	b2db      	uxtb	r3, r3
}
 80008c0:	0018      	movs	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	20000964 	.word	0x20000964
 80008cc:	8000001f 	.word	0x8000001f
 80008d0:	20000965 	.word	0x20000965

080008d4 <TxQueue_IsEmpty>:

static uint8_t TxQueue_IsEmpty(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
    return TxQueueHead == TxQueueTail;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <TxQueue_IsEmpty+0x20>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <TxQueue_IsEmpty+0x24>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	425a      	negs	r2, r3
 80008e8:	4153      	adcs	r3, r2
 80008ea:	b2db      	uxtb	r3, r3
}
 80008ec:	0018      	movs	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	20000964 	.word	0x20000964
 80008f8:	20000965 	.word	0x20000965

080008fc <TxQueue_Push>:

static void TxQueue_Push(const CAN_Message_t* msg)
{
 80008fc:	b590      	push	{r4, r7, lr}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
    TxQueue[TxQueueHead] = *msg;
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <TxQueue_Push+0x50>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	0019      	movs	r1, r3
 800090c:	4a10      	ldr	r2, [pc, #64]	; (8000950 <TxQueue_Push+0x54>)
 800090e:	000b      	movs	r3, r1
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	185b      	adds	r3, r3, r1
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	18d3      	adds	r3, r2, r3
 800091a:	000a      	movs	r2, r1
 800091c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800091e:	c313      	stmia	r3!, {r0, r1, r4}
 8000920:	ca03      	ldmia	r2!, {r0, r1}
 8000922:	c303      	stmia	r3!, {r0, r1}
    TxQueueHead = (TxQueueHead + 1) % CAN_TX_QUEUE_LENGTH;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <TxQueue_Push+0x50>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	b2db      	uxtb	r3, r3
 800092a:	3301      	adds	r3, #1
 800092c:	4a09      	ldr	r2, [pc, #36]	; (8000954 <TxQueue_Push+0x58>)
 800092e:	4013      	ands	r3, r2
 8000930:	d504      	bpl.n	800093c <TxQueue_Push+0x40>
 8000932:	3b01      	subs	r3, #1
 8000934:	2220      	movs	r2, #32
 8000936:	4252      	negs	r2, r2
 8000938:	4313      	orrs	r3, r2
 800093a:	3301      	adds	r3, #1
 800093c:	b2da      	uxtb	r2, r3
 800093e:	4b03      	ldr	r3, [pc, #12]	; (800094c <TxQueue_Push+0x50>)
 8000940:	701a      	strb	r2, [r3, #0]
}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	46bd      	mov	sp, r7
 8000946:	b003      	add	sp, #12
 8000948:	bd90      	pop	{r4, r7, pc}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	20000964 	.word	0x20000964
 8000950:	200006e4 	.word	0x200006e4
 8000954:	8000001f 	.word	0x8000001f

08000958 <TxQueue_Peek>:

static CAN_Message_t* TxQueue_Peek(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
    if (TxQueue_IsEmpty()) return NULL;
 800095c:	f7ff ffba 	bl	80008d4 <TxQueue_IsEmpty>
 8000960:	1e03      	subs	r3, r0, #0
 8000962:	d001      	beq.n	8000968 <TxQueue_Peek+0x10>
 8000964:	2300      	movs	r3, #0
 8000966:	e009      	b.n	800097c <TxQueue_Peek+0x24>
    return &TxQueue[TxQueueTail];
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <TxQueue_Peek+0x2c>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	b2db      	uxtb	r3, r3
 800096e:	001a      	movs	r2, r3
 8000970:	0013      	movs	r3, r2
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	189b      	adds	r3, r3, r2
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	4a03      	ldr	r2, [pc, #12]	; (8000988 <TxQueue_Peek+0x30>)
 800097a:	189b      	adds	r3, r3, r2
}
 800097c:	0018      	movs	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	20000965 	.word	0x20000965
 8000988:	200006e4 	.word	0x200006e4

0800098c <TxQueue_Pop>:

static void TxQueue_Pop(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
    if (!TxQueue_IsEmpty()) {
 8000990:	f7ff ffa0 	bl	80008d4 <TxQueue_IsEmpty>
 8000994:	1e03      	subs	r3, r0, #0
 8000996:	d10e      	bne.n	80009b6 <TxQueue_Pop+0x2a>
        TxQueueTail = (TxQueueTail + 1) % CAN_TX_QUEUE_LENGTH;
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <TxQueue_Pop+0x30>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	3301      	adds	r3, #1
 80009a0:	4a07      	ldr	r2, [pc, #28]	; (80009c0 <TxQueue_Pop+0x34>)
 80009a2:	4013      	ands	r3, r2
 80009a4:	d504      	bpl.n	80009b0 <TxQueue_Pop+0x24>
 80009a6:	3b01      	subs	r3, #1
 80009a8:	2220      	movs	r2, #32
 80009aa:	4252      	negs	r2, r2
 80009ac:	4313      	orrs	r3, r2
 80009ae:	3301      	adds	r3, #1
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4b02      	ldr	r3, [pc, #8]	; (80009bc <TxQueue_Pop+0x30>)
 80009b4:	701a      	strb	r2, [r3, #0]
    }
}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000965 	.word	0x20000965
 80009c0:	8000001f 	.word	0x8000001f

080009c4 <CAN_ProcessTxQueue>:

// Diese Funktion prüft freie Mailboxen und sendet aus Queue
static void CAN_ProcessTxQueue(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	; 0x28
 80009c8:	af00      	add	r7, sp, #0
    if (TxQueue_IsEmpty()) return;
 80009ca:	f7ff ff83 	bl	80008d4 <TxQueue_IsEmpty>
 80009ce:	1e03      	subs	r3, r0, #0
 80009d0:	d142      	bne.n	8000a58 <CAN_ProcessTxQueue+0x94>

    for (int mbox = 0; mbox < 3; mbox++) {
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
 80009d6:	e03b      	b.n	8000a50 <CAN_ProcessTxQueue+0x8c>
        uint32_t mailbox = (mbox == 0) ? CAN_TX_MAILBOX0 :
 80009d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d006      	beq.n	80009ec <CAN_ProcessTxQueue+0x28>
 80009de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d101      	bne.n	80009e8 <CAN_ProcessTxQueue+0x24>
 80009e4:	2302      	movs	r3, #2
 80009e6:	e002      	b.n	80009ee <CAN_ProcessTxQueue+0x2a>
 80009e8:	2304      	movs	r3, #4
 80009ea:	e000      	b.n	80009ee <CAN_ProcessTxQueue+0x2a>
 80009ec:	2301      	movs	r3, #1
 80009ee:	623b      	str	r3, [r7, #32]
                           (mbox == 1) ? CAN_TX_MAILBOX1 :
                                         CAN_TX_MAILBOX2;

        if (!HAL_CAN_IsTxMessagePending(&hcan, mailbox)) {
 80009f0:	6a3a      	ldr	r2, [r7, #32]
 80009f2:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <CAN_ProcessTxQueue+0xa4>)
 80009f4:	0011      	movs	r1, r2
 80009f6:	0018      	movs	r0, r3
 80009f8:	f002 fe94 	bl	8003724 <HAL_CAN_IsTxMessagePending>
 80009fc:	1e03      	subs	r3, r0, #0
 80009fe:	d124      	bne.n	8000a4a <CAN_ProcessTxQueue+0x86>
            CAN_Message_t* msg = TxQueue_Peek();
 8000a00:	f7ff ffaa 	bl	8000958 <TxQueue_Peek>
 8000a04:	0003      	movs	r3, r0
 8000a06:	61fb      	str	r3, [r7, #28]
            if (msg == NULL) return;
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d026      	beq.n	8000a5c <CAN_ProcessTxQueue+0x98>

            CAN_TxHeaderTypeDef txHeader;
            uint32_t txMailbox;

            txHeader.StdId = msg->id;
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	001a      	movs	r2, r3
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	601a      	str	r2, [r3, #0]
            txHeader.IDE = CAN_ID_STD;
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
            txHeader.RTR = CAN_RTR_DATA;
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
            txHeader.DLC = msg->dlc;
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	789b      	ldrb	r3, [r3, #2]
 8000a28:	001a      	movs	r2, r3
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	611a      	str	r2, [r3, #16]
            txHeader.TransmitGlobalTime = DISABLE;
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2200      	movs	r2, #0
 8000a32:	751a      	strb	r2, [r3, #20]

            if (HAL_CAN_AddTxMessage(&hcan, &txHeader, msg->data, &txMailbox) == HAL_OK) {
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	1cda      	adds	r2, r3, #3
 8000a38:	003b      	movs	r3, r7
 8000a3a:	1d39      	adds	r1, r7, #4
 8000a3c:	480a      	ldr	r0, [pc, #40]	; (8000a68 <CAN_ProcessTxQueue+0xa4>)
 8000a3e:	f002 fd9f 	bl	8003580 <HAL_CAN_AddTxMessage>
 8000a42:	1e03      	subs	r3, r0, #0
 8000a44:	d10c      	bne.n	8000a60 <CAN_ProcessTxQueue+0x9c>
                TxQueue_Pop();
 8000a46:	f7ff ffa1 	bl	800098c <TxQueue_Pop>
    for (int mbox = 0; mbox < 3; mbox++) {
 8000a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8000a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	ddc0      	ble.n	80009d8 <CAN_ProcessTxQueue+0x14>
 8000a56:	e004      	b.n	8000a62 <CAN_ProcessTxQueue+0x9e>
    if (TxQueue_IsEmpty()) return;
 8000a58:	46c0      	nop			; (mov r8, r8)
 8000a5a:	e002      	b.n	8000a62 <CAN_ProcessTxQueue+0x9e>
            if (msg == NULL) return;
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	e000      	b.n	8000a62 <CAN_ProcessTxQueue+0x9e>
            } else {
                return; // Busy, abbrechen
 8000a60:	46c0      	nop			; (mov r8, r8)
            }
        }
    }
}
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b00a      	add	sp, #40	; 0x28
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000abc 	.word	0x20000abc

08000a6c <HAL_CAN_TxMailbox0CompleteCallback>:

// Wird bei Mailbox-Übertragung abgeschlossen aufgerufen
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) { CAN_ProcessTxQueue(); }
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	f7ff ffa6 	bl	80009c4 <CAN_ProcessTxQueue>
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	b002      	add	sp, #8
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) { CAN_ProcessTxQueue(); }
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	f7ff ff9c 	bl	80009c4 <CAN_ProcessTxQueue>
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b002      	add	sp, #8
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) { CAN_ProcessTxQueue(); }
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	f7ff ff92 	bl	80009c4 <CAN_ProcessTxQueue>
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b002      	add	sp, #8
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <CAN_QueueMessage>:

HAL_StatusTypeDef CAN_QueueMessage(const CAN_Message_t* msg)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
    if (TxQueue_IsFull()) {
 8000ab0:	f7ff fef0 	bl	8000894 <TxQueue_IsFull>
 8000ab4:	1e03      	subs	r3, r0, #0
 8000ab6:	d001      	beq.n	8000abc <CAN_QueueMessage+0x14>
        return HAL_ERROR;  // Queue voll
 8000ab8:	2301      	movs	r3, #1
 8000aba:	e006      	b.n	8000aca <CAN_QueueMessage+0x22>
    }

    TxQueue_Push(msg);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f7ff ff1c 	bl	80008fc <TxQueue_Push>
    CAN_ProcessTxQueue();  // direkt versuchen zu senden
 8000ac4:	f7ff ff7e 	bl	80009c4 <CAN_ProcessTxQueue>
    return HAL_OK;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	0018      	movs	r0, r3
 8000acc:	46bd      	mov	sp, r7
 8000ace:	b002      	add	sp, #8
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <CAN_GetMessage>:

// ---------- Lesen empfangener Daten ----------

CAN_Message_t* CAN_GetMessage(uint16_t id)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	0002      	movs	r2, r0
 8000adc:	1dbb      	adds	r3, r7, #6
 8000ade:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < MAX_CAN_MESSAGES; i++) {
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	e020      	b.n	8000b28 <CAN_GetMessage+0x54>
        if (CAN_MessageDB[i].valid && CAN_MessageDB[i].id == id) {
 8000ae6:	4914      	ldr	r1, [pc, #80]	; (8000b38 <CAN_GetMessage+0x64>)
 8000ae8:	68fa      	ldr	r2, [r7, #12]
 8000aea:	0013      	movs	r3, r2
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	189b      	adds	r3, r3, r2
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	18cb      	adds	r3, r1, r3
 8000af4:	3310      	adds	r3, #16
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d012      	beq.n	8000b22 <CAN_GetMessage+0x4e>
 8000afc:	490e      	ldr	r1, [pc, #56]	; (8000b38 <CAN_GetMessage+0x64>)
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	0013      	movs	r3, r2
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	189b      	adds	r3, r3, r2
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	5a5b      	ldrh	r3, [r3, r1]
 8000b0a:	1dba      	adds	r2, r7, #6
 8000b0c:	8812      	ldrh	r2, [r2, #0]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d107      	bne.n	8000b22 <CAN_GetMessage+0x4e>
            return &CAN_MessageDB[i];
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	0013      	movs	r3, r2
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	189b      	adds	r3, r3, r2
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	4a06      	ldr	r2, [pc, #24]	; (8000b38 <CAN_GetMessage+0x64>)
 8000b1e:	189b      	adds	r3, r3, r2
 8000b20:	e006      	b.n	8000b30 <CAN_GetMessage+0x5c>
    for (int i = 0; i < MAX_CAN_MESSAGES; i++) {
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	3301      	adds	r3, #1
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	2b0f      	cmp	r3, #15
 8000b2c:	dddb      	ble.n	8000ae6 <CAN_GetMessage+0x12>
        }
    }
    return NULL;
 8000b2e:	2300      	movs	r3, #0
}
 8000b30:	0018      	movs	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	b004      	add	sp, #16
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	200005a4 	.word	0x200005a4

08000b3c <Error_Register>:
#include "ssd1306_fonts.h"

static volatile uint32_t errorFlags = 0;

void Error_Register(ErrorCode_t code)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	0002      	movs	r2, r0
 8000b44:	1dfb      	adds	r3, r7, #7
 8000b46:	701a      	strb	r2, [r3, #0]
    if (code > 0 && code < 32) {
 8000b48:	1dfb      	adds	r3, r7, #7
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d00c      	beq.n	8000b6a <Error_Register+0x2e>
 8000b50:	1dfb      	adds	r3, r7, #7
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b1f      	cmp	r3, #31
 8000b56:	d808      	bhi.n	8000b6a <Error_Register+0x2e>
        errorFlags |= (1U << code);
 8000b58:	1dfb      	adds	r3, r7, #7
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	409a      	lsls	r2, r3
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <Error_Register+0x38>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	431a      	orrs	r2, r3
 8000b66:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <Error_Register+0x38>)
 8000b68:	601a      	str	r2, [r3, #0]
        //printf("Error registered: %u\r\n", code);  // optional
    }
}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b002      	add	sp, #8
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	20000968 	.word	0x20000968

08000b78 <Error_Clear>:

void Error_Clear(ErrorCode_t code)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	0002      	movs	r2, r0
 8000b80:	1dfb      	adds	r3, r7, #7
 8000b82:	701a      	strb	r2, [r3, #0]
    if (code > 0 && code < 32) {
 8000b84:	1dfb      	adds	r3, r7, #7
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d00e      	beq.n	8000baa <Error_Clear+0x32>
 8000b8c:	1dfb      	adds	r3, r7, #7
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b1f      	cmp	r3, #31
 8000b92:	d80a      	bhi.n	8000baa <Error_Clear+0x32>
        errorFlags &= ~(1U << code);
 8000b94:	1dfb      	adds	r3, r7, #7
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2201      	movs	r2, #1
 8000b9a:	409a      	lsls	r2, r3
 8000b9c:	0013      	movs	r3, r2
 8000b9e:	43da      	mvns	r2, r3
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <Error_Clear+0x3c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	401a      	ands	r2, r3
 8000ba6:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <Error_Clear+0x3c>)
 8000ba8:	601a      	str	r2, [r3, #0]
    }
}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b002      	add	sp, #8
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	20000968 	.word	0x20000968

08000bb8 <Error_GetAll>:

uint32_t Error_GetAll(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
    return errorFlags;
 8000bbc:	4b02      	ldr	r3, [pc, #8]	; (8000bc8 <Error_GetAll+0x10>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	20000968 	.word	0x20000968

08000bcc <Display_ErrorStatus>:
   printf("Aktive Fehler: 0x%08lX\r\n", errorFlags);
}


void Display_ErrorStatus(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af02      	add	r7, sp, #8
    uint32_t errors = Error_GetAll();
 8000bd2:	f7ff fff1 	bl	8000bb8 <Error_GetAll>
 8000bd6:	0003      	movs	r3, r0
 8000bd8:	617b      	str	r3, [r7, #20]

    ssd1306_SetCursor(0, 20);
 8000bda:	2114      	movs	r1, #20
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f001 fc7b 	bl	80024d8 <ssd1306_SetCursor>

    if (errors == 0) {
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d109      	bne.n	8000bfc <Display_ErrorStatus+0x30>
        ssd1306_WriteString("Status: OK", Font_6x8, White);
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <Display_ErrorStatus+0x5c>)
 8000bea:	4810      	ldr	r0, [pc, #64]	; (8000c2c <Display_ErrorStatus+0x60>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	9200      	str	r2, [sp, #0]
 8000bf0:	6819      	ldr	r1, [r3, #0]
 8000bf2:	685a      	ldr	r2, [r3, #4]
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	f001 fc43 	bl	8002480 <ssd1306_WriteString>
 8000bfa:	e00e      	b.n	8000c1a <Display_ErrorStatus+0x4e>
    } else {
        char buffer[20];
        snprintf(buffer, sizeof(buffer), "Err: 0x%08lX", errors);
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	4a0c      	ldr	r2, [pc, #48]	; (8000c30 <Display_ErrorStatus+0x64>)
 8000c00:	0038      	movs	r0, r7
 8000c02:	2114      	movs	r1, #20
 8000c04:	f005 f9c2 	bl	8005f8c <sniprintf>
        ssd1306_WriteString(buffer, Font_6x8, White);
 8000c08:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <Display_ErrorStatus+0x5c>)
 8000c0a:	0038      	movs	r0, r7
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	9200      	str	r2, [sp, #0]
 8000c10:	6819      	ldr	r1, [r3, #0]
 8000c12:	685a      	ldr	r2, [r3, #4]
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	f001 fc33 	bl	8002480 <ssd1306_WriteString>
    }

    ssd1306_UpdateScreen();
 8000c1a:	f001 faf7 	bl	800220c <ssd1306_UpdateScreen>
}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b006      	add	sp, #24
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	08006f68 	.word	0x08006f68
 8000c2c:	08006934 	.word	0x08006934
 8000c30:	08006940 	.word	0x08006940

08000c34 <RGBLED_Init>:

RGBLED_t leds[RGBLED_COUNT];
static uint8_t txBuffer[(RGBLED_COUNT * 4) + 6]; // Start + LEDs + End

void RGBLED_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < RGBLED_COUNT; i++) {
 8000c3a:	1dfb      	adds	r3, r7, #7
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
 8000c40:	e022      	b.n	8000c88 <RGBLED_Init+0x54>
        leds[i].r = 0;
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	781a      	ldrb	r2, [r3, #0]
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <RGBLED_Init+0x68>)
 8000c48:	0092      	lsls	r2, r2, #2
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	54d1      	strb	r1, [r2, r3]
        leds[i].g = 0;
 8000c4e:	1dfb      	adds	r3, r7, #7
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	4a12      	ldr	r2, [pc, #72]	; (8000c9c <RGBLED_Init+0x68>)
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	18d3      	adds	r3, r2, r3
 8000c58:	3301      	adds	r3, #1
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
        leds[i].b = 0;
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	4a0e      	ldr	r2, [pc, #56]	; (8000c9c <RGBLED_Init+0x68>)
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	18d3      	adds	r3, r2, r3
 8000c68:	3302      	adds	r3, #2
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
        leds[i].brightness = 1; // min
 8000c6e:	1dfb      	adds	r3, r7, #7
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <RGBLED_Init+0x68>)
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	18d3      	adds	r3, r2, r3
 8000c78:	3303      	adds	r3, #3
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < RGBLED_COUNT; i++) {
 8000c7e:	1dfb      	adds	r3, r7, #7
 8000c80:	781a      	ldrb	r2, [r3, #0]
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	3201      	adds	r2, #1
 8000c86:	701a      	strb	r2, [r3, #0]
 8000c88:	1dfb      	adds	r3, r7, #7
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b17      	cmp	r3, #23
 8000c8e:	d9d8      	bls.n	8000c42 <RGBLED_Init+0xe>
    }
}
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b002      	add	sp, #8
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	2000096c 	.word	0x2000096c

08000ca0 <RGBLED_Set>:

void RGBLED_Set(uint8_t index, uint8_t r, uint8_t g, uint8_t b, uint8_t brightness)
{
 8000ca0:	b5b0      	push	{r4, r5, r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	0005      	movs	r5, r0
 8000ca8:	000c      	movs	r4, r1
 8000caa:	0010      	movs	r0, r2
 8000cac:	0019      	movs	r1, r3
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	1c2a      	adds	r2, r5, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
 8000cb4:	1dbb      	adds	r3, r7, #6
 8000cb6:	1c22      	adds	r2, r4, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
 8000cba:	1d7b      	adds	r3, r7, #5
 8000cbc:	1c02      	adds	r2, r0, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	1c0a      	adds	r2, r1, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
    if (index >= RGBLED_COUNT) return;
 8000cc6:	1dfb      	adds	r3, r7, #7
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b17      	cmp	r3, #23
 8000ccc:	d829      	bhi.n	8000d22 <RGBLED_Set+0x82>
    leds[index].r = r;
 8000cce:	1dfb      	adds	r3, r7, #7
 8000cd0:	781a      	ldrb	r2, [r3, #0]
 8000cd2:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <RGBLED_Set+0x8c>)
 8000cd4:	0092      	lsls	r2, r2, #2
 8000cd6:	1db9      	adds	r1, r7, #6
 8000cd8:	7809      	ldrb	r1, [r1, #0]
 8000cda:	54d1      	strb	r1, [r2, r3]
    leds[index].g = g;
 8000cdc:	1dfb      	adds	r3, r7, #7
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <RGBLED_Set+0x8c>)
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	18d3      	adds	r3, r2, r3
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	1d7a      	adds	r2, r7, #5
 8000cea:	7812      	ldrb	r2, [r2, #0]
 8000cec:	701a      	strb	r2, [r3, #0]
    leds[index].b = b;
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	4a0e      	ldr	r2, [pc, #56]	; (8000d2c <RGBLED_Set+0x8c>)
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	18d3      	adds	r3, r2, r3
 8000cf8:	3302      	adds	r3, #2
 8000cfa:	1d3a      	adds	r2, r7, #4
 8000cfc:	7812      	ldrb	r2, [r2, #0]
 8000cfe:	701a      	strb	r2, [r3, #0]
    leds[index].brightness = (brightness > 31) ? 31 : brightness;
 8000d00:	1dfb      	adds	r3, r7, #7
 8000d02:	7819      	ldrb	r1, [r3, #0]
 8000d04:	2318      	movs	r3, #24
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	2a1f      	cmp	r2, #31
 8000d0e:	d900      	bls.n	8000d12 <RGBLED_Set+0x72>
 8000d10:	231f      	movs	r3, #31
 8000d12:	b2d8      	uxtb	r0, r3
 8000d14:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <RGBLED_Set+0x8c>)
 8000d16:	008b      	lsls	r3, r1, #2
 8000d18:	18d3      	adds	r3, r2, r3
 8000d1a:	3303      	adds	r3, #3
 8000d1c:	1c02      	adds	r2, r0, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
 8000d20:	e000      	b.n	8000d24 <RGBLED_Set+0x84>
    if (index >= RGBLED_COUNT) return;
 8000d22:	46c0      	nop			; (mov r8, r8)
}
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b002      	add	sp, #8
 8000d28:	bdb0      	pop	{r4, r5, r7, pc}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	2000096c 	.word	0x2000096c

08000d30 <RGBLED_Update>:

void RGBLED_Update(SPI_HandleTypeDef *hspi)
{
 8000d30:	b5b0      	push	{r4, r5, r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
    uint16_t bufIndex = 0;
 8000d38:	230e      	movs	r3, #14
 8000d3a:	18fb      	adds	r3, r7, r3
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	801a      	strh	r2, [r3, #0]

    // Startframe (4x 0x00)
    for (uint8_t i = 0; i < 4; i++) {
 8000d40:	230d      	movs	r3, #13
 8000d42:	18fb      	adds	r3, r7, r3
 8000d44:	2200      	movs	r2, #0
 8000d46:	701a      	strb	r2, [r3, #0]
 8000d48:	e00f      	b.n	8000d6a <RGBLED_Update+0x3a>
        txBuffer[bufIndex++] = 0x00;
 8000d4a:	220e      	movs	r2, #14
 8000d4c:	18bb      	adds	r3, r7, r2
 8000d4e:	881b      	ldrh	r3, [r3, #0]
 8000d50:	18ba      	adds	r2, r7, r2
 8000d52:	1c59      	adds	r1, r3, #1
 8000d54:	8011      	strh	r1, [r2, #0]
 8000d56:	001a      	movs	r2, r3
 8000d58:	4b3e      	ldr	r3, [pc, #248]	; (8000e54 <RGBLED_Update+0x124>)
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	5499      	strb	r1, [r3, r2]
    for (uint8_t i = 0; i < 4; i++) {
 8000d5e:	210d      	movs	r1, #13
 8000d60:	187b      	adds	r3, r7, r1
 8000d62:	781a      	ldrb	r2, [r3, #0]
 8000d64:	187b      	adds	r3, r7, r1
 8000d66:	3201      	adds	r2, #1
 8000d68:	701a      	strb	r2, [r3, #0]
 8000d6a:	230d      	movs	r3, #13
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b03      	cmp	r3, #3
 8000d72:	d9ea      	bls.n	8000d4a <RGBLED_Update+0x1a>
    }

    // LED-Daten
    for (uint8_t i = 0; i < RGBLED_COUNT; i++) {
 8000d74:	230c      	movs	r3, #12
 8000d76:	18fb      	adds	r3, r7, r3
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]
 8000d7c:	e044      	b.n	8000e08 <RGBLED_Update+0xd8>
        txBuffer[bufIndex++] = 0b11100000 | (leds[i].brightness & 0x1F); // Helligkeit + Header
 8000d7e:	250c      	movs	r5, #12
 8000d80:	197b      	adds	r3, r7, r5
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4a34      	ldr	r2, [pc, #208]	; (8000e58 <RGBLED_Update+0x128>)
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	18d3      	adds	r3, r2, r3
 8000d8a:	3303      	adds	r3, #3
 8000d8c:	781a      	ldrb	r2, [r3, #0]
 8000d8e:	240e      	movs	r4, #14
 8000d90:	193b      	adds	r3, r7, r4
 8000d92:	881b      	ldrh	r3, [r3, #0]
 8000d94:	1939      	adds	r1, r7, r4
 8000d96:	1c58      	adds	r0, r3, #1
 8000d98:	8008      	strh	r0, [r1, #0]
 8000d9a:	0019      	movs	r1, r3
 8000d9c:	2320      	movs	r3, #32
 8000d9e:	425b      	negs	r3, r3
 8000da0:	4313      	orrs	r3, r2
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	4b2b      	ldr	r3, [pc, #172]	; (8000e54 <RGBLED_Update+0x124>)
 8000da6:	545a      	strb	r2, [r3, r1]
        txBuffer[bufIndex++] = leds[i].b;
 8000da8:	197b      	adds	r3, r7, r5
 8000daa:	7819      	ldrb	r1, [r3, #0]
 8000dac:	193b      	adds	r3, r7, r4
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	193a      	adds	r2, r7, r4
 8000db2:	1c58      	adds	r0, r3, #1
 8000db4:	8010      	strh	r0, [r2, #0]
 8000db6:	0018      	movs	r0, r3
 8000db8:	4a27      	ldr	r2, [pc, #156]	; (8000e58 <RGBLED_Update+0x128>)
 8000dba:	008b      	lsls	r3, r1, #2
 8000dbc:	18d3      	adds	r3, r2, r3
 8000dbe:	3302      	adds	r3, #2
 8000dc0:	781a      	ldrb	r2, [r3, #0]
 8000dc2:	4b24      	ldr	r3, [pc, #144]	; (8000e54 <RGBLED_Update+0x124>)
 8000dc4:	541a      	strb	r2, [r3, r0]
        txBuffer[bufIndex++] = leds[i].g;
 8000dc6:	197b      	adds	r3, r7, r5
 8000dc8:	7819      	ldrb	r1, [r3, #0]
 8000dca:	193b      	adds	r3, r7, r4
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	193a      	adds	r2, r7, r4
 8000dd0:	1c58      	adds	r0, r3, #1
 8000dd2:	8010      	strh	r0, [r2, #0]
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	4a20      	ldr	r2, [pc, #128]	; (8000e58 <RGBLED_Update+0x128>)
 8000dd8:	008b      	lsls	r3, r1, #2
 8000dda:	18d3      	adds	r3, r2, r3
 8000ddc:	3301      	adds	r3, #1
 8000dde:	781a      	ldrb	r2, [r3, #0]
 8000de0:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <RGBLED_Update+0x124>)
 8000de2:	541a      	strb	r2, [r3, r0]
        txBuffer[bufIndex++] = leds[i].r;
 8000de4:	197b      	adds	r3, r7, r5
 8000de6:	781a      	ldrb	r2, [r3, #0]
 8000de8:	193b      	adds	r3, r7, r4
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	1939      	adds	r1, r7, r4
 8000dee:	1c58      	adds	r0, r3, #1
 8000df0:	8008      	strh	r0, [r1, #0]
 8000df2:	0019      	movs	r1, r3
 8000df4:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <RGBLED_Update+0x128>)
 8000df6:	0092      	lsls	r2, r2, #2
 8000df8:	5cd2      	ldrb	r2, [r2, r3]
 8000dfa:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <RGBLED_Update+0x124>)
 8000dfc:	545a      	strb	r2, [r3, r1]
    for (uint8_t i = 0; i < RGBLED_COUNT; i++) {
 8000dfe:	197b      	adds	r3, r7, r5
 8000e00:	781a      	ldrb	r2, [r3, #0]
 8000e02:	197b      	adds	r3, r7, r5
 8000e04:	3201      	adds	r2, #1
 8000e06:	701a      	strb	r2, [r3, #0]
 8000e08:	230c      	movs	r3, #12
 8000e0a:	18fb      	adds	r3, r7, r3
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b17      	cmp	r3, #23
 8000e10:	d9b5      	bls.n	8000d7e <RGBLED_Update+0x4e>
    }

    // Endframe: mindestens (N/2) Bits, hier sicherheitshalber 2 Bytes
    txBuffer[bufIndex++] = 0xFF;
 8000e12:	200e      	movs	r0, #14
 8000e14:	183b      	adds	r3, r7, r0
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	183a      	adds	r2, r7, r0
 8000e1a:	1c59      	adds	r1, r3, #1
 8000e1c:	8011      	strh	r1, [r2, #0]
 8000e1e:	001a      	movs	r2, r3
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <RGBLED_Update+0x124>)
 8000e22:	21ff      	movs	r1, #255	; 0xff
 8000e24:	5499      	strb	r1, [r3, r2]
    txBuffer[bufIndex++] = 0xFF;
 8000e26:	183b      	adds	r3, r7, r0
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	183a      	adds	r2, r7, r0
 8000e2c:	1c59      	adds	r1, r3, #1
 8000e2e:	8011      	strh	r1, [r2, #0]
 8000e30:	001a      	movs	r2, r3
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <RGBLED_Update+0x124>)
 8000e34:	21ff      	movs	r1, #255	; 0xff
 8000e36:	5499      	strb	r1, [r3, r2]

    HAL_SPI_Transmit(hspi, txBuffer, bufIndex, HAL_MAX_DELAY);
 8000e38:	2301      	movs	r3, #1
 8000e3a:	425c      	negs	r4, r3
 8000e3c:	183b      	adds	r3, r7, r0
 8000e3e:	881a      	ldrh	r2, [r3, #0]
 8000e40:	4904      	ldr	r1, [pc, #16]	; (8000e54 <RGBLED_Update+0x124>)
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	0023      	movs	r3, r4
 8000e46:	f004 f9dd 	bl	8005204 <HAL_SPI_Transmit>
}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b004      	add	sp, #16
 8000e50:	bdb0      	pop	{r4, r5, r7, pc}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	200009cc 	.word	0x200009cc
 8000e58:	2000096c 	.word	0x2000096c

08000e5c <RGBLED_TestPattern>:

void RGBLED_TestPattern(void)
{
 8000e5c:	b590      	push	{r4, r7, lr}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af02      	add	r7, sp, #8
    static uint8_t R = 0;
    static uint8_t G = 0;
    static uint8_t B = 0;

    R += 10;
 8000e62:	4b22      	ldr	r3, [pc, #136]	; (8000eec <RGBLED_TestPattern+0x90>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	330a      	adds	r3, #10
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4b20      	ldr	r3, [pc, #128]	; (8000eec <RGBLED_TestPattern+0x90>)
 8000e6c:	701a      	strb	r2, [r3, #0]
    G += 20;
 8000e6e:	4b20      	ldr	r3, [pc, #128]	; (8000ef0 <RGBLED_TestPattern+0x94>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	3314      	adds	r3, #20
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4b1e      	ldr	r3, [pc, #120]	; (8000ef0 <RGBLED_TestPattern+0x94>)
 8000e78:	701a      	strb	r2, [r3, #0]
    B += 30;
 8000e7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <RGBLED_TestPattern+0x98>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	331e      	adds	r3, #30
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <RGBLED_TestPattern+0x98>)
 8000e84:	701a      	strb	r2, [r3, #0]

    for (uint8_t i = 0; i < RGBLED_COUNT; i++) {
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
 8000e8c:	e011      	b.n	8000eb2 <RGBLED_TestPattern+0x56>
        RGBLED_Set(i, R, G, B, 1);
 8000e8e:	4b17      	ldr	r3, [pc, #92]	; (8000eec <RGBLED_TestPattern+0x90>)
 8000e90:	7819      	ldrb	r1, [r3, #0]
 8000e92:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <RGBLED_TestPattern+0x94>)
 8000e94:	781a      	ldrb	r2, [r3, #0]
 8000e96:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <RGBLED_TestPattern+0x98>)
 8000e98:	781c      	ldrb	r4, [r3, #0]
 8000e9a:	1dfb      	adds	r3, r7, #7
 8000e9c:	7818      	ldrb	r0, [r3, #0]
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	9300      	str	r3, [sp, #0]
 8000ea2:	0023      	movs	r3, r4
 8000ea4:	f7ff fefc 	bl	8000ca0 <RGBLED_Set>
    for (uint8_t i = 0; i < RGBLED_COUNT; i++) {
 8000ea8:	1dfb      	adds	r3, r7, #7
 8000eaa:	781a      	ldrb	r2, [r3, #0]
 8000eac:	1dfb      	adds	r3, r7, #7
 8000eae:	3201      	adds	r2, #1
 8000eb0:	701a      	strb	r2, [r3, #0]
 8000eb2:	1dfb      	adds	r3, r7, #7
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b17      	cmp	r3, #23
 8000eb8:	d9e9      	bls.n	8000e8e <RGBLED_TestPattern+0x32>
    }

    if (R >= 100) R = 0;
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <RGBLED_TestPattern+0x90>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b63      	cmp	r3, #99	; 0x63
 8000ec0:	d902      	bls.n	8000ec8 <RGBLED_TestPattern+0x6c>
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <RGBLED_TestPattern+0x90>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
    if (G >= 150) G = 0;
 8000ec8:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <RGBLED_TestPattern+0x94>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b95      	cmp	r3, #149	; 0x95
 8000ece:	d902      	bls.n	8000ed6 <RGBLED_TestPattern+0x7a>
 8000ed0:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <RGBLED_TestPattern+0x94>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
    if (B >= 200) B = 0;
 8000ed6:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <RGBLED_TestPattern+0x98>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2bc7      	cmp	r3, #199	; 0xc7
 8000edc:	d902      	bls.n	8000ee4 <RGBLED_TestPattern+0x88>
 8000ede:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <RGBLED_TestPattern+0x98>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
}
 8000ee4:	46c0      	nop			; (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b003      	add	sp, #12
 8000eea:	bd90      	pop	{r4, r7, pc}
 8000eec:	20000a32 	.word	0x20000a32
 8000ef0:	20000a33 	.word	0x20000a33
 8000ef4:	20000a34 	.word	0x20000a34

08000ef8 <loop_init>:
#else
  #define LOOP_INLINE static inline
#endif

LOOP_INLINE void loop_init(loop_timer_t *lt, uint32_t period_ms, loop_timer_t *parent)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
    lt->period_ms      = period_ms;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	601a      	str	r2, [r3, #0]
    lt->last_tick_ms   = 0;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	605a      	str	r2, [r3, #4]
    lt->start_us       = 0;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
    lt->exec_time_us   = 0;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	60da      	str	r2, [r3, #12]
    lt->usage_x10      = 0;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	821a      	strh	r2, [r3, #16]
    lt->max_curr_x10   = 0;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2200      	movs	r2, #0
 8000f26:	825a      	strh	r2, [r3, #18]
    lt->max_prev_x10   = 0;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	829a      	strh	r2, [r3, #20]
    lt->parent         = parent;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	619a      	str	r2, [r3, #24]
}
 8000f34:	46c0      	nop			; (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b004      	add	sp, #16
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <loop_due>:

// fällig? (mit Parent-Kaskade)
LOOP_INLINE uint8_t loop_due(loop_timer_t *lt, uint32_t systime_ms)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
    if (lt->period_ms == 0) return 0; // nicht init
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d101      	bne.n	8000f52 <loop_due+0x16>
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e016      	b.n	8000f80 <loop_due+0x44>
    // Parent muss in dieser while-Iteration bereits gelaufen sein
    if (lt->parent && lt->parent->last_tick_ms == lt->last_tick_ms) return 0;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d008      	beq.n	8000f6c <loop_due+0x30>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d101      	bne.n	8000f6c <loop_due+0x30>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e009      	b.n	8000f80 <loop_due+0x44>
    return (systime_ms - lt->last_tick_ms) >= lt->period_ms;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	683a      	ldr	r2, [r7, #0]
 8000f72:	1ad1      	subs	r1, r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	2300      	movs	r3, #0
 8000f7a:	4291      	cmp	r1, r2
 8000f7c:	415b      	adcs	r3, r3
 8000f7e:	b2db      	uxtb	r3, r3
}
 8000f80:	0018      	movs	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b002      	add	sp, #8
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <loop_start>:

// neue Periode starten: ROLLOVER des Max-Werts
LOOP_INLINE void loop_start(loop_timer_t *lt, uint32_t systime_ms)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
    // Rollover: abgeschlossene Periode → prev, aktuellen Puffer leeren
    lt->max_prev_x10 = lt->max_curr_x10;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	8a5a      	ldrh	r2, [r3, #18]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	829a      	strh	r2, [r3, #20]
    lt->max_curr_x10 = 0;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	825a      	strh	r2, [r3, #18]

    lt->last_tick_ms = systime_ms;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	683a      	ldr	r2, [r7, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
    lt->start_us     = MICROS();
 8000fa6:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <loop_start+0x30>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	609a      	str	r2, [r3, #8]
}
 8000fb0:	46c0      	nop			; (mov r8, r8)
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b002      	add	sp, #8
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000bac 	.word	0x20000bac

08000fbc <loop_end>:

// Periode beenden, Usage & Max der laufenden Periode aktualisieren
LOOP_INLINE void loop_end(loop_timer_t *lt, ErrorCode_t overrun_code)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	000a      	movs	r2, r1
 8000fc6:	1cfb      	adds	r3, r7, #3
 8000fc8:	701a      	strb	r2, [r3, #0]
    uint32_t now_us = MICROS();
 8000fca:	4b1c      	ldr	r3, [pc, #112]	; (800103c <loop_end+0x80>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd0:	60fb      	str	r3, [r7, #12]
    lt->exec_time_us = (now_us >= lt->start_us)
                     ? (now_us - lt->start_us)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	1ad2      	subs	r2, r2, r3
    lt->exec_time_us = (now_us >= lt->start_us)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	60da      	str	r2, [r3, #12]
                     : ((0xFFFFFFFFu - lt->start_us) + now_us + 1u);

    // 0.1%-Skala, „round to nearest“
    lt->usage_x10 = (uint16_t)((lt->exec_time_us + (lt->period_ms/2u)) / lt->period_ms);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	68da      	ldr	r2, [r3, #12]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	085b      	lsrs	r3, r3, #1
 8000fe8:	18d2      	adds	r2, r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	0019      	movs	r1, r3
 8000ff0:	0010      	movs	r0, r2
 8000ff2:	f7ff f893 	bl	800011c <__udivsi3>
 8000ff6:	0003      	movs	r3, r0
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	821a      	strh	r2, [r3, #16]
    if (lt->usage_x10 > lt->max_curr_x10) lt->max_curr_x10 = lt->usage_x10;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	8a1a      	ldrh	r2, [r3, #16]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	8a5b      	ldrh	r3, [r3, #18]
 8001006:	429a      	cmp	r2, r3
 8001008:	d903      	bls.n	8001012 <loop_end+0x56>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	8a1a      	ldrh	r2, [r3, #16]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	825a      	strh	r2, [r3, #18]

    // Overrun?
    if (lt->exec_time_us > (lt->period_ms * 1000u)) {
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	68d9      	ldr	r1, [r3, #12]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	0013      	movs	r3, r2
 800101c:	015b      	lsls	r3, r3, #5
 800101e:	1a9b      	subs	r3, r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	189b      	adds	r3, r3, r2
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	4299      	cmp	r1, r3
 8001028:	d904      	bls.n	8001034 <loop_end+0x78>
        Error_Register(overrun_code);
 800102a:	1cfb      	adds	r3, r7, #3
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	0018      	movs	r0, r3
 8001030:	f7ff fd84 	bl	8000b3c <Error_Register>
    }
}
 8001034:	46c0      	nop			; (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	b004      	add	sp, #16
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000bac 	.word	0x20000bac

08001040 <init_loops.0>:
  loop_timer_t loop_10ms  = {0};
  loop_timer_t loop_100ms = {0};
  loop_timer_t loop_200ms = {0};

  void init_loops(void)
  {
 8001040:	b590      	push	{r4, r7, lr}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4664      	mov	r4, ip
 8001048:	4663      	mov	r3, ip
 800104a:	607b      	str	r3, [r7, #4]
      loop_init(&loop_1ms,   1,   NULL);
 800104c:	0023      	movs	r3, r4
 800104e:	3354      	adds	r3, #84	; 0x54
 8001050:	2200      	movs	r2, #0
 8001052:	2101      	movs	r1, #1
 8001054:	0018      	movs	r0, r3
 8001056:	f7ff ff4f 	bl	8000ef8 <loop_init>
      loop_init(&loop_10ms,  10,  &loop_1ms);
 800105a:	0023      	movs	r3, r4
 800105c:	3338      	adds	r3, #56	; 0x38
 800105e:	0022      	movs	r2, r4
 8001060:	3254      	adds	r2, #84	; 0x54
 8001062:	210a      	movs	r1, #10
 8001064:	0018      	movs	r0, r3
 8001066:	f7ff ff47 	bl	8000ef8 <loop_init>
      loop_init(&loop_100ms, 100, &loop_10ms);
 800106a:	0023      	movs	r3, r4
 800106c:	331c      	adds	r3, #28
 800106e:	0022      	movs	r2, r4
 8001070:	3238      	adds	r2, #56	; 0x38
 8001072:	2164      	movs	r1, #100	; 0x64
 8001074:	0018      	movs	r0, r3
 8001076:	f7ff ff3f 	bl	8000ef8 <loop_init>
      loop_init(&loop_200ms, 200, &loop_100ms);
 800107a:	0020      	movs	r0, r4
 800107c:	0023      	movs	r3, r4
 800107e:	331c      	adds	r3, #28
 8001080:	001a      	movs	r2, r3
 8001082:	21c8      	movs	r1, #200	; 0xc8
 8001084:	f7ff ff38 	bl	8000ef8 <loop_init>
  }
 8001088:	46c0      	nop			; (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	b003      	add	sp, #12
 800108e:	bd90      	pop	{r4, r7, pc}

08001090 <main>:
{
 8001090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001092:	b0af      	sub	sp, #188	; 0xbc
 8001094:	af02      	add	r7, sp, #8
int main(void)
 8001096:	23c0      	movs	r3, #192	; 0xc0
 8001098:	2208      	movs	r2, #8
 800109a:	189b      	adds	r3, r3, r2
 800109c:	19da      	adds	r2, r3, r7
 800109e:	2428      	movs	r4, #40	; 0x28
 80010a0:	193b      	adds	r3, r7, r4
 80010a2:	671a      	str	r2, [r3, #112]	; 0x70
  HAL_Init();
 80010a4:	f001 fa70 	bl	8002588 <HAL_Init>
  SystemClock_Config();
 80010a8:	f000 fa18 	bl	80014dc <SystemClock_Config>
  MX_GPIO_Init();
 80010ac:	f000 fc08 	bl	80018c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80010b0:	f000 fbe8 	bl	8001884 <MX_DMA_Init>
  MX_CAN_Init();
 80010b4:	f000 fadc 	bl	8001670 <MX_CAN_Init>
  MX_SPI1_Init();
 80010b8:	f000 fb14 	bl	80016e4 <MX_SPI1_Init>
  MX_ADC_Init();
 80010bc:	f000 fa56 	bl	800156c <MX_ADC_Init>
  MX_SPI2_Init();
 80010c0:	f000 fb4e 	bl	8001760 <MX_SPI2_Init>
  MX_TIM2_Init();
 80010c4:	f000 fb8a 	bl	80017dc <MX_TIM2_Init>
  HAL_ADCEx_Calibration_Start(&hadc);
 80010c8:	4bd8      	ldr	r3, [pc, #864]	; (800142c <main+0x39c>)
 80010ca:	0018      	movs	r0, r3
 80010cc:	f001 ff7a 	bl	8002fc4 <HAL_ADCEx_Calibration_Start>
  HAL_TIM_Base_Start(&htim2);
 80010d0:	4bd7      	ldr	r3, [pc, #860]	; (8001430 <main+0x3a0>)
 80010d2:	0018      	movs	r0, r3
 80010d4:	f004 fcc4 	bl	8005a60 <HAL_TIM_Base_Start>
  RGBLED_Init();
 80010d8:	f7ff fdac 	bl	8000c34 <RGBLED_Init>
  ADC_Init();
 80010dc:	f7ff f994 	bl	8000408 <ADC_Init>
  ssd1306_Init();
 80010e0:	f001 f80e 	bl	8002100 <ssd1306_Init>
  ssd1306_Fill(White);
 80010e4:	2001      	movs	r0, #1
 80010e6:	f001 f877 	bl	80021d8 <ssd1306_Fill>
  ssd1306_DrawPixel(2, 2, Black);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2102      	movs	r1, #2
 80010ee:	2002      	movs	r0, #2
 80010f0:	f001 f8ba 	bl	8002268 <ssd1306_DrawPixel>
  ssd1306_DrawPixel(1, 1, Black);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2101      	movs	r1, #1
 80010f8:	2001      	movs	r0, #1
 80010fa:	f001 f8b5 	bl	8002268 <ssd1306_DrawPixel>
  ssd1306_DrawPixel(0, 0, Black);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	2000      	movs	r0, #0
 8001104:	f001 f8b0 	bl	8002268 <ssd1306_DrawPixel>
  ssd1306_UpdateScreen();
 8001108:	f001 f880 	bl	800220c <ssd1306_UpdateScreen>
  ssd1306_Fill(Black);
 800110c:	2000      	movs	r0, #0
 800110e:	f001 f863 	bl	80021d8 <ssd1306_Fill>
  ssd1306_SetCursor(0, 0);
 8001112:	2100      	movs	r1, #0
 8001114:	2000      	movs	r0, #0
 8001116:	f001 f9df 	bl	80024d8 <ssd1306_SetCursor>
  ssd1306_WriteString("Hello World", Font_6x8, White);
 800111a:	4bc6      	ldr	r3, [pc, #792]	; (8001434 <main+0x3a4>)
 800111c:	48c6      	ldr	r0, [pc, #792]	; (8001438 <main+0x3a8>)
 800111e:	2201      	movs	r2, #1
 8001120:	9200      	str	r2, [sp, #0]
 8001122:	6819      	ldr	r1, [r3, #0]
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f001 f9aa 	bl	8002480 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 800112c:	f001 f86e 	bl	800220c <ssd1306_UpdateScreen>
  HAL_GPIO_WritePin(GPIO1_12VOut_GPIO_Port,GPIO1_12VOut_Pin, GPIO_PIN_RESET);
 8001130:	2380      	movs	r3, #128	; 0x80
 8001132:	00d9      	lsls	r1, r3, #3
 8001134:	2390      	movs	r3, #144	; 0x90
 8001136:	05db      	lsls	r3, r3, #23
 8001138:	2200      	movs	r2, #0
 800113a:	0018      	movs	r0, r3
 800113c:	f003 fa9e 	bl	800467c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIO1_5VOut_GPIO_Port,GPIO1_5VOut_Pin, GPIO_PIN_RESET);
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	0099      	lsls	r1, r3, #2
 8001144:	2390      	movs	r3, #144	; 0x90
 8001146:	05db      	lsls	r3, r3, #23
 8001148:	2200      	movs	r2, #0
 800114a:	0018      	movs	r0, r3
 800114c:	f003 fa96 	bl	800467c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADC1_CTRL_GPIO_Port,ADC1_CTRL_Pin, GPIO_PIN_SET);
 8001150:	2380      	movs	r3, #128	; 0x80
 8001152:	011b      	lsls	r3, r3, #4
 8001154:	48b9      	ldr	r0, [pc, #740]	; (800143c <main+0x3ac>)
 8001156:	2201      	movs	r2, #1
 8001158:	0019      	movs	r1, r3
 800115a:	f003 fa8f 	bl	800467c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADC1_NTC_CTRL_GPIO_Port,ADC1_NTC_CTRL_Pin, GPIO_PIN_RESET);
 800115e:	4bb7      	ldr	r3, [pc, #732]	; (800143c <main+0x3ac>)
 8001160:	2200      	movs	r2, #0
 8001162:	2102      	movs	r1, #2
 8001164:	0018      	movs	r0, r3
 8001166:	f003 fa89 	bl	800467c <HAL_GPIO_WritePin>
  loop_timer_t loop_1ms   = {0};
 800116a:	193b      	adds	r3, r7, r4
 800116c:	3354      	adds	r3, #84	; 0x54
 800116e:	221c      	movs	r2, #28
 8001170:	2100      	movs	r1, #0
 8001172:	0018      	movs	r0, r3
 8001174:	f004 ff3e 	bl	8005ff4 <memset>
  loop_timer_t loop_10ms  = {0};
 8001178:	193b      	adds	r3, r7, r4
 800117a:	3338      	adds	r3, #56	; 0x38
 800117c:	221c      	movs	r2, #28
 800117e:	2100      	movs	r1, #0
 8001180:	0018      	movs	r0, r3
 8001182:	f004 ff37 	bl	8005ff4 <memset>
  loop_timer_t loop_100ms = {0};
 8001186:	193b      	adds	r3, r7, r4
 8001188:	331c      	adds	r3, #28
 800118a:	221c      	movs	r2, #28
 800118c:	2100      	movs	r1, #0
 800118e:	0018      	movs	r0, r3
 8001190:	f004 ff30 	bl	8005ff4 <memset>
  loop_timer_t loop_200ms = {0};
 8001194:	193b      	adds	r3, r7, r4
 8001196:	0018      	movs	r0, r3
 8001198:	231c      	movs	r3, #28
 800119a:	001a      	movs	r2, r3
 800119c:	2100      	movs	r1, #0
 800119e:	f004 ff29 	bl	8005ff4 <memset>

  init_loops();
 80011a2:	193b      	adds	r3, r7, r4
 80011a4:	469c      	mov	ip, r3
 80011a6:	f7ff ff4b 	bl	8001040 <init_loops.0>

  while (1)
  {

	    uint32_t systime = HAL_GetTick();
 80011aa:	f001 fa47 	bl	800263c <HAL_GetTick>
 80011ae:	0003      	movs	r3, r0
 80011b0:	24a8      	movs	r4, #168	; 0xa8
 80011b2:	193a      	adds	r2, r7, r4
 80011b4:	6013      	str	r3, [r2, #0]

	  	  // --- 1 ms Loop ---
	  	  if (loop_due(&loop_1ms, systime)) {
 80011b6:	193b      	adds	r3, r7, r4
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	2528      	movs	r5, #40	; 0x28
 80011bc:	197b      	adds	r3, r7, r5
 80011be:	3354      	adds	r3, #84	; 0x54
 80011c0:	0011      	movs	r1, r2
 80011c2:	0018      	movs	r0, r3
 80011c4:	f7ff feba 	bl	8000f3c <loop_due>
 80011c8:	1e03      	subs	r3, r0, #0
 80011ca:	d00d      	beq.n	80011e8 <main+0x158>
	  		  loop_start(&loop_1ms, systime);
 80011cc:	193b      	adds	r3, r7, r4
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	197b      	adds	r3, r7, r5
 80011d2:	3354      	adds	r3, #84	; 0x54
 80011d4:	0011      	movs	r1, r2
 80011d6:	0018      	movs	r0, r3
 80011d8:	f7ff fed6 	bl	8000f88 <loop_start>
	  		  // 1ms-Tasks hier
	  		  loop_end(&loop_1ms, ERROR_LOOP_OVERRUN_1MS);
 80011dc:	197b      	adds	r3, r7, r5
 80011de:	3354      	adds	r3, #84	; 0x54
 80011e0:	210b      	movs	r1, #11
 80011e2:	0018      	movs	r0, r3
 80011e4:	f7ff feea 	bl	8000fbc <loop_end>
	  	  }

	  	// --- 10 ms Loop ---
	  	    if (loop_due(&loop_10ms, systime)) {
 80011e8:	25a8      	movs	r5, #168	; 0xa8
 80011ea:	197b      	adds	r3, r7, r5
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	2428      	movs	r4, #40	; 0x28
 80011f0:	193b      	adds	r3, r7, r4
 80011f2:	3338      	adds	r3, #56	; 0x38
 80011f4:	0011      	movs	r1, r2
 80011f6:	0018      	movs	r0, r3
 80011f8:	f7ff fea0 	bl	8000f3c <loop_due>
 80011fc:	1e03      	subs	r3, r0, #0
 80011fe:	d100      	bne.n	8001202 <main+0x172>
 8001200:	e0b1      	b.n	8001366 <main+0x2d6>
	  	        loop_start(&loop_10ms, systime);
 8001202:	197b      	adds	r3, r7, r5
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	193b      	adds	r3, r7, r4
 8001208:	3338      	adds	r3, #56	; 0x38
 800120a:	0011      	movs	r1, r2
 800120c:	0018      	movs	r0, r3
 800120e:	f7ff febb 	bl	8000f88 <loop_start>


				// Senden der Loop usages
				// Nachricht vorbereiten
				CANmsg.id = 0x100;
 8001212:	4b8b      	ldr	r3, [pc, #556]	; (8001440 <main+0x3b0>)
 8001214:	2280      	movs	r2, #128	; 0x80
 8001216:	0052      	lsls	r2, r2, #1
 8001218:	801a      	strh	r2, [r3, #0]
				CANmsg.dlc = 8;
 800121a:	4b89      	ldr	r3, [pc, #548]	; (8001440 <main+0x3b0>)
 800121c:	2208      	movs	r2, #8
 800121e:	709a      	strb	r2, [r3, #2]
				CANmsg.data[0] = loop_1ms.max_prev_x10  & 0xFF; CANmsg.data[1] = loop_1ms.max_prev_x10  >> 8;
 8001220:	193b      	adds	r3, r7, r4
 8001222:	2268      	movs	r2, #104	; 0x68
 8001224:	5a9b      	ldrh	r3, [r3, r2]
 8001226:	b2da      	uxtb	r2, r3
 8001228:	4b85      	ldr	r3, [pc, #532]	; (8001440 <main+0x3b0>)
 800122a:	70da      	strb	r2, [r3, #3]
 800122c:	193b      	adds	r3, r7, r4
 800122e:	2268      	movs	r2, #104	; 0x68
 8001230:	5a9b      	ldrh	r3, [r3, r2]
 8001232:	0a1b      	lsrs	r3, r3, #8
 8001234:	b29b      	uxth	r3, r3
 8001236:	b2da      	uxtb	r2, r3
 8001238:	4b81      	ldr	r3, [pc, #516]	; (8001440 <main+0x3b0>)
 800123a:	711a      	strb	r2, [r3, #4]
				CANmsg.data[2] = loop_10ms.max_prev_x10 & 0xFF; CANmsg.data[3] = loop_10ms.max_prev_x10 >> 8;
 800123c:	0021      	movs	r1, r4
 800123e:	187b      	adds	r3, r7, r1
 8001240:	224c      	movs	r2, #76	; 0x4c
 8001242:	5a9b      	ldrh	r3, [r3, r2]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b7e      	ldr	r3, [pc, #504]	; (8001440 <main+0x3b0>)
 8001248:	715a      	strb	r2, [r3, #5]
 800124a:	187b      	adds	r3, r7, r1
 800124c:	224c      	movs	r2, #76	; 0x4c
 800124e:	5a9b      	ldrh	r3, [r3, r2]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	b29b      	uxth	r3, r3
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4b7a      	ldr	r3, [pc, #488]	; (8001440 <main+0x3b0>)
 8001258:	719a      	strb	r2, [r3, #6]
				CANmsg.data[4] = loop_100ms.max_prev_x10& 0xFF; CANmsg.data[5] = loop_100ms.max_prev_x10>> 8;
 800125a:	187b      	adds	r3, r7, r1
 800125c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800125e:	b2da      	uxtb	r2, r3
 8001260:	4b77      	ldr	r3, [pc, #476]	; (8001440 <main+0x3b0>)
 8001262:	71da      	strb	r2, [r3, #7]
 8001264:	187b      	adds	r3, r7, r1
 8001266:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001268:	0a1b      	lsrs	r3, r3, #8
 800126a:	b29b      	uxth	r3, r3
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4b74      	ldr	r3, [pc, #464]	; (8001440 <main+0x3b0>)
 8001270:	721a      	strb	r2, [r3, #8]
				CANmsg.data[6] = loop_200ms.max_prev_x10& 0xFF; CANmsg.data[7] = loop_200ms.max_prev_x10>> 8;
 8001272:	187b      	adds	r3, r7, r1
 8001274:	8a9b      	ldrh	r3, [r3, #20]
 8001276:	b2da      	uxtb	r2, r3
 8001278:	4b71      	ldr	r3, [pc, #452]	; (8001440 <main+0x3b0>)
 800127a:	725a      	strb	r2, [r3, #9]
 800127c:	187b      	adds	r3, r7, r1
 800127e:	8a9b      	ldrh	r3, [r3, #20]
 8001280:	0a1b      	lsrs	r3, r3, #8
 8001282:	b29b      	uxth	r3, r3
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4b6e      	ldr	r3, [pc, #440]	; (8001440 <main+0x3b0>)
 8001288:	729a      	strb	r2, [r3, #10]

				if (CAN_QueueMessage(&CANmsg) != HAL_OK)
 800128a:	4b6d      	ldr	r3, [pc, #436]	; (8001440 <main+0x3b0>)
 800128c:	0018      	movs	r0, r3
 800128e:	f7ff fc0b 	bl	8000aa8 <CAN_QueueMessage>
 8001292:	1e03      	subs	r3, r0, #0
 8001294:	d002      	beq.n	800129c <main+0x20c>
				{
				   Error_Register(ERROR_CAN_QUEUE_FULL);
 8001296:	2001      	movs	r0, #1
 8001298:	f7ff fc50 	bl	8000b3c <Error_Register>
				}

	  	        // ADC-Werte holen (gemittelt)
				uint16_t ch0 = ADC_GetAverage(0);
 800129c:	25a6      	movs	r5, #166	; 0xa6
 800129e:	197c      	adds	r4, r7, r5
 80012a0:	2000      	movs	r0, #0
 80012a2:	f7ff f99b 	bl	80005dc <ADC_GetAverage>
 80012a6:	0003      	movs	r3, r0
 80012a8:	8023      	strh	r3, [r4, #0]
				uint16_t ch1 = ADC_GetAverage(1);
 80012aa:	26a4      	movs	r6, #164	; 0xa4
 80012ac:	19bc      	adds	r4, r7, r6
 80012ae:	2001      	movs	r0, #1
 80012b0:	f7ff f994 	bl	80005dc <ADC_GetAverage>
 80012b4:	0003      	movs	r3, r0
 80012b6:	8023      	strh	r3, [r4, #0]
				uint16_t ch2 = ADC_GetAverage(2);
 80012b8:	21a2      	movs	r1, #162	; 0xa2
 80012ba:	187c      	adds	r4, r7, r1
 80012bc:	2002      	movs	r0, #2
 80012be:	f7ff f98d 	bl	80005dc <ADC_GetAverage>
 80012c2:	0003      	movs	r3, r0
 80012c4:	8023      	strh	r3, [r4, #0]
				uint16_t ch3 = ADC_GetAverage(3);
 80012c6:	23a0      	movs	r3, #160	; 0xa0
 80012c8:	18fc      	adds	r4, r7, r3
 80012ca:	2003      	movs	r0, #3
 80012cc:	f7ff f986 	bl	80005dc <ADC_GetAverage>
 80012d0:	0003      	movs	r3, r0
 80012d2:	8023      	strh	r3, [r4, #0]

				// CAN-Nachricht vorbereiten
				CANmsg.id  = 0x101;   // frei wählen
 80012d4:	4b5a      	ldr	r3, [pc, #360]	; (8001440 <main+0x3b0>)
 80012d6:	2202      	movs	r2, #2
 80012d8:	32ff      	adds	r2, #255	; 0xff
 80012da:	801a      	strh	r2, [r3, #0]
				CANmsg.dlc = 8;
 80012dc:	4b58      	ldr	r3, [pc, #352]	; (8001440 <main+0x3b0>)
 80012de:	2208      	movs	r2, #8
 80012e0:	709a      	strb	r2, [r3, #2]
				CANmsg.data[0] = ch0 & 0xFF;
 80012e2:	197b      	adds	r3, r7, r5
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	4b55      	ldr	r3, [pc, #340]	; (8001440 <main+0x3b0>)
 80012ea:	70da      	strb	r2, [r3, #3]
				CANmsg.data[1] = ch0 >> 8;
 80012ec:	197b      	adds	r3, r7, r5
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	0a1b      	lsrs	r3, r3, #8
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4b52      	ldr	r3, [pc, #328]	; (8001440 <main+0x3b0>)
 80012f8:	711a      	strb	r2, [r3, #4]
				CANmsg.data[2] = ch1 & 0xFF;
 80012fa:	19bb      	adds	r3, r7, r6
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	4b4f      	ldr	r3, [pc, #316]	; (8001440 <main+0x3b0>)
 8001302:	715a      	strb	r2, [r3, #5]
				CANmsg.data[3] = ch1 >> 8;
 8001304:	19bb      	adds	r3, r7, r6
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	0a1b      	lsrs	r3, r3, #8
 800130a:	b29b      	uxth	r3, r3
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4b4c      	ldr	r3, [pc, #304]	; (8001440 <main+0x3b0>)
 8001310:	719a      	strb	r2, [r3, #6]
				CANmsg.data[4] = ch2 & 0xFF;
 8001312:	21a2      	movs	r1, #162	; 0xa2
 8001314:	187b      	adds	r3, r7, r1
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4b49      	ldr	r3, [pc, #292]	; (8001440 <main+0x3b0>)
 800131c:	71da      	strb	r2, [r3, #7]
				CANmsg.data[5] = ch2 >> 8;
 800131e:	187b      	adds	r3, r7, r1
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	0a1b      	lsrs	r3, r3, #8
 8001324:	b29b      	uxth	r3, r3
 8001326:	b2da      	uxtb	r2, r3
 8001328:	4b45      	ldr	r3, [pc, #276]	; (8001440 <main+0x3b0>)
 800132a:	721a      	strb	r2, [r3, #8]
				CANmsg.data[6] = ch3 & 0xFF;
 800132c:	21a0      	movs	r1, #160	; 0xa0
 800132e:	187b      	adds	r3, r7, r1
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	b2da      	uxtb	r2, r3
 8001334:	4b42      	ldr	r3, [pc, #264]	; (8001440 <main+0x3b0>)
 8001336:	725a      	strb	r2, [r3, #9]
				CANmsg.data[7] = ch3 >> 8;
 8001338:	187b      	adds	r3, r7, r1
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	0a1b      	lsrs	r3, r3, #8
 800133e:	b29b      	uxth	r3, r3
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4b3f      	ldr	r3, [pc, #252]	; (8001440 <main+0x3b0>)
 8001344:	729a      	strb	r2, [r3, #10]

				if (CAN_QueueMessage(&CANmsg) != HAL_OK)
 8001346:	4b3e      	ldr	r3, [pc, #248]	; (8001440 <main+0x3b0>)
 8001348:	0018      	movs	r0, r3
 800134a:	f7ff fbad 	bl	8000aa8 <CAN_QueueMessage>
 800134e:	1e03      	subs	r3, r0, #0
 8001350:	d002      	beq.n	8001358 <main+0x2c8>
				{
				   Error_Register(ERROR_CAN_QUEUE_FULL);
 8001352:	2001      	movs	r0, #1
 8001354:	f7ff fbf2 	bl	8000b3c <Error_Register>
				}

	  	      loop_end(&loop_10ms, ERROR_LOOP_OVERRUN_10MS);
 8001358:	2328      	movs	r3, #40	; 0x28
 800135a:	18fb      	adds	r3, r7, r3
 800135c:	3338      	adds	r3, #56	; 0x38
 800135e:	210c      	movs	r1, #12
 8001360:	0018      	movs	r0, r3
 8001362:	f7ff fe2b 	bl	8000fbc <loop_end>
	  	    }

	  	    // --- 100 ms Loop ---
	  	    if (loop_due(&loop_100ms, systime)) {
 8001366:	24a8      	movs	r4, #168	; 0xa8
 8001368:	193b      	adds	r3, r7, r4
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	2528      	movs	r5, #40	; 0x28
 800136e:	197b      	adds	r3, r7, r5
 8001370:	331c      	adds	r3, #28
 8001372:	0011      	movs	r1, r2
 8001374:	0018      	movs	r0, r3
 8001376:	f7ff fde1 	bl	8000f3c <loop_due>
 800137a:	1e03      	subs	r3, r0, #0
 800137c:	d100      	bne.n	8001380 <main+0x2f0>
 800137e:	e088      	b.n	8001492 <main+0x402>
	  	        loop_start(&loop_100ms, systime);
 8001380:	193b      	adds	r3, r7, r4
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	197b      	adds	r3, r7, r5
 8001386:	331c      	adds	r3, #28
 8001388:	0011      	movs	r1, r2
 800138a:	0018      	movs	r0, r3
 800138c:	f7ff fdfc 	bl	8000f88 <loop_start>

			  ssd1306_SetCursor(0, 0);
 8001390:	2100      	movs	r1, #0
 8001392:	2000      	movs	r0, #0
 8001394:	f001 f8a0 	bl	80024d8 <ssd1306_SetCursor>
			  ssd1306_WriteString("Hello World", Font_6x8, White);
 8001398:	4b26      	ldr	r3, [pc, #152]	; (8001434 <main+0x3a4>)
 800139a:	4827      	ldr	r0, [pc, #156]	; (8001438 <main+0x3a8>)
 800139c:	2201      	movs	r2, #1
 800139e:	9200      	str	r2, [sp, #0]
 80013a0:	6819      	ldr	r1, [r3, #0]
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f001 f86b 	bl	8002480 <ssd1306_WriteString>

			  RGBLED_TestPattern();
 80013aa:	f7ff fd57 	bl	8000e5c <RGBLED_TestPattern>
			  RGBLED_Update(&hspi2);
 80013ae:	4b25      	ldr	r3, [pc, #148]	; (8001444 <main+0x3b4>)
 80013b0:	0018      	movs	r0, r3
 80013b2:	f7ff fcbd 	bl	8000d30 <RGBLED_Update>

			  CAN_Message_t CANmsg;
			  CANmsg.id = 0x123;
 80013b6:	2114      	movs	r1, #20
 80013b8:	187b      	adds	r3, r7, r1
 80013ba:	2224      	movs	r2, #36	; 0x24
 80013bc:	32ff      	adds	r2, #255	; 0xff
 80013be:	801a      	strh	r2, [r3, #0]
			  CANmsg.dlc = 2;
 80013c0:	187b      	adds	r3, r7, r1
 80013c2:	2202      	movs	r2, #2
 80013c4:	709a      	strb	r2, [r3, #2]
			  CANmsg.data[0] = 0xAB;
 80013c6:	187b      	adds	r3, r7, r1
 80013c8:	22ab      	movs	r2, #171	; 0xab
 80013ca:	70da      	strb	r2, [r3, #3]
			  CANmsg.data[1] = 0xCD;
 80013cc:	187b      	adds	r3, r7, r1
 80013ce:	22cd      	movs	r2, #205	; 0xcd
 80013d0:	711a      	strb	r2, [r3, #4]

			  if (CAN_QueueMessage(&CANmsg) != HAL_OK)
 80013d2:	187b      	adds	r3, r7, r1
 80013d4:	0018      	movs	r0, r3
 80013d6:	f7ff fb67 	bl	8000aa8 <CAN_QueueMessage>
 80013da:	1e03      	subs	r3, r0, #0
 80013dc:	d002      	beq.n	80013e4 <main+0x354>
			  {
				   Error_Register(ERROR_CAN_QUEUE_FULL);
 80013de:	2001      	movs	r0, #1
 80013e0:	f7ff fbac 	bl	8000b3c <Error_Register>
				   // Programm läuft regulär weiter
			  }

			  CAN_Message_t* received = CAN_GetMessage(0x321);
 80013e4:	4b18      	ldr	r3, [pc, #96]	; (8001448 <main+0x3b8>)
 80013e6:	0018      	movs	r0, r3
 80013e8:	f7ff fb74 	bl	8000ad4 <CAN_GetMessage>
 80013ec:	0003      	movs	r3, r0
 80013ee:	219c      	movs	r1, #156	; 0x9c
 80013f0:	187a      	adds	r2, r7, r1
 80013f2:	6013      	str	r3, [r2, #0]
			  uint16_t value = 0;
 80013f4:	20ae      	movs	r0, #174	; 0xae
 80013f6:	183b      	adds	r3, r7, r0
 80013f8:	2200      	movs	r2, #0
 80013fa:	801a      	strh	r2, [r3, #0]

			  if (received && received->dlc >= 2) {
 80013fc:	187b      	adds	r3, r7, r1
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d023      	beq.n	800144c <main+0x3bc>
 8001404:	187b      	adds	r3, r7, r1
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	789b      	ldrb	r3, [r3, #2]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d91e      	bls.n	800144c <main+0x3bc>
			      value = (uint16_t)received->data[0] | ((uint16_t)received->data[1] << 8);
 800140e:	187b      	adds	r3, r7, r1
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	78db      	ldrb	r3, [r3, #3]
 8001414:	b21a      	sxth	r2, r3
 8001416:	187b      	adds	r3, r7, r1
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	791b      	ldrb	r3, [r3, #4]
 800141c:	021b      	lsls	r3, r3, #8
 800141e:	b21b      	sxth	r3, r3
 8001420:	4313      	orrs	r3, r2
 8001422:	b21a      	sxth	r2, r3
 8001424:	183b      	adds	r3, r7, r0
 8001426:	801a      	strh	r2, [r3, #0]
 8001428:	e013      	b.n	8001452 <main+0x3c2>
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	20000a38 	.word	0x20000a38
 8001430:	20000bac 	.word	0x20000bac
 8001434:	08006f68 	.word	0x08006f68
 8001438:	08006950 	.word	0x08006950
 800143c:	48000400 	.word	0x48000400
 8001440:	20000bf4 	.word	0x20000bf4
 8001444:	20000b48 	.word	0x20000b48
 8001448:	00000321 	.word	0x00000321
			  } else {
			      Error_Register(ERROR_CAN_RX_EMPTY);
 800144c:	200f      	movs	r0, #15
 800144e:	f7ff fb75 	bl	8000b3c <Error_Register>
			  }

			  char buffer[16];
			  snprintf(buffer, sizeof(buffer), "Wert: %u", value);
 8001452:	23ae      	movs	r3, #174	; 0xae
 8001454:	18fb      	adds	r3, r7, r3
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	4a1d      	ldr	r2, [pc, #116]	; (80014d0 <main+0x440>)
 800145a:	1d38      	adds	r0, r7, #4
 800145c:	2110      	movs	r1, #16
 800145e:	f004 fd95 	bl	8005f8c <sniprintf>

			  ssd1306_SetCursor(0, 10);
 8001462:	210a      	movs	r1, #10
 8001464:	2000      	movs	r0, #0
 8001466:	f001 f837 	bl	80024d8 <ssd1306_SetCursor>
			  ssd1306_WriteString(buffer, Font_6x8, White);
 800146a:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <main+0x444>)
 800146c:	1d38      	adds	r0, r7, #4
 800146e:	2201      	movs	r2, #1
 8001470:	9200      	str	r2, [sp, #0]
 8001472:	6819      	ldr	r1, [r3, #0]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f001 f802 	bl	8002480 <ssd1306_WriteString>

			  Display_ErrorStatus();
 800147c:	f7ff fba6 	bl	8000bcc <Display_ErrorStatus>

			  ssd1306_UpdateScreen();
 8001480:	f000 fec4 	bl	800220c <ssd1306_UpdateScreen>

			  loop_end(&loop_100ms, ERROR_LOOP_OVERRUN_100MS);
 8001484:	2328      	movs	r3, #40	; 0x28
 8001486:	18fb      	adds	r3, r7, r3
 8001488:	331c      	adds	r3, #28
 800148a:	210d      	movs	r1, #13
 800148c:	0018      	movs	r0, r3
 800148e:	f7ff fd95 	bl	8000fbc <loop_end>
		}

			// --- 200 ms Loop ---
			if (loop_due(&loop_200ms, systime)) {
 8001492:	25a8      	movs	r5, #168	; 0xa8
 8001494:	197b      	adds	r3, r7, r5
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	2428      	movs	r4, #40	; 0x28
 800149a:	193b      	adds	r3, r7, r4
 800149c:	0011      	movs	r1, r2
 800149e:	0018      	movs	r0, r3
 80014a0:	f7ff fd4c 	bl	8000f3c <loop_due>
 80014a4:	1e03      	subs	r3, r0, #0
 80014a6:	d100      	bne.n	80014aa <main+0x41a>
 80014a8:	e67f      	b.n	80011aa <main+0x11a>
				loop_start(&loop_200ms, systime);
 80014aa:	197b      	adds	r3, r7, r5
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	193b      	adds	r3, r7, r4
 80014b0:	0011      	movs	r1, r2
 80014b2:	0018      	movs	r0, r3
 80014b4:	f7ff fd68 	bl	8000f88 <loop_start>

	  		  HAL_GPIO_TogglePin(Heart_GPIO_Port,Heart_Pin);
 80014b8:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <main+0x448>)
 80014ba:	2101      	movs	r1, #1
 80014bc:	0018      	movs	r0, r3
 80014be:	f003 f8fa 	bl	80046b6 <HAL_GPIO_TogglePin>
	  		  //HAL_GPIO_TogglePin(Error_GPIO_Port,Error_Pin);

	  		loop_end(&loop_200ms, ERROR_LOOP_OVERRUN_200MS);
 80014c2:	193b      	adds	r3, r7, r4
 80014c4:	210e      	movs	r1, #14
 80014c6:	0018      	movs	r0, r3
 80014c8:	f7ff fd78 	bl	8000fbc <loop_end>
  {
 80014cc:	e66d      	b.n	80011aa <main+0x11a>
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	0800695c 	.word	0x0800695c
 80014d4:	08006f68 	.word	0x08006f68
 80014d8:	48000800 	.word	0x48000800

080014dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014dc:	b590      	push	{r4, r7, lr}
 80014de:	b093      	sub	sp, #76	; 0x4c
 80014e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e2:	2414      	movs	r4, #20
 80014e4:	193b      	adds	r3, r7, r4
 80014e6:	0018      	movs	r0, r3
 80014e8:	2334      	movs	r3, #52	; 0x34
 80014ea:	001a      	movs	r2, r3
 80014ec:	2100      	movs	r1, #0
 80014ee:	f004 fd81 	bl	8005ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	0018      	movs	r0, r3
 80014f6:	2310      	movs	r3, #16
 80014f8:	001a      	movs	r2, r3
 80014fa:	2100      	movs	r1, #0
 80014fc:	f004 fd7a 	bl	8005ff4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001500:	0021      	movs	r1, r4
 8001502:	187b      	adds	r3, r7, r1
 8001504:	2201      	movs	r2, #1
 8001506:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001508:	187b      	adds	r3, r7, r1
 800150a:	2201      	movs	r2, #1
 800150c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150e:	187b      	adds	r3, r7, r1
 8001510:	2202      	movs	r2, #2
 8001512:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001514:	187b      	adds	r3, r7, r1
 8001516:	2280      	movs	r2, #128	; 0x80
 8001518:	0252      	lsls	r2, r2, #9
 800151a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 800151c:	187b      	adds	r3, r7, r1
 800151e:	2280      	movs	r2, #128	; 0x80
 8001520:	02d2      	lsls	r2, r2, #11
 8001522:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001524:	187b      	adds	r3, r7, r1
 8001526:	2200      	movs	r2, #0
 8001528:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800152a:	187b      	adds	r3, r7, r1
 800152c:	0018      	movs	r0, r3
 800152e:	f003 f8dd 	bl	80046ec <HAL_RCC_OscConfig>
 8001532:	1e03      	subs	r3, r0, #0
 8001534:	d001      	beq.n	800153a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001536:	f000 fadd 	bl	8001af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	2207      	movs	r2, #7
 800153e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	2202      	movs	r2, #2
 8001544:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	2101      	movs	r1, #1
 8001556:	0018      	movs	r0, r3
 8001558:	f003 fc4e 	bl	8004df8 <HAL_RCC_ClockConfig>
 800155c:	1e03      	subs	r3, r0, #0
 800155e:	d001      	beq.n	8001564 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001560:	f000 fac8 	bl	8001af4 <Error_Handler>
  }
}
 8001564:	46c0      	nop			; (mov r8, r8)
 8001566:	46bd      	mov	sp, r7
 8001568:	b013      	add	sp, #76	; 0x4c
 800156a:	bd90      	pop	{r4, r7, pc}

0800156c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	0018      	movs	r0, r3
 8001576:	230c      	movs	r3, #12
 8001578:	001a      	movs	r2, r3
 800157a:	2100      	movs	r1, #0
 800157c:	f004 fd3a 	bl	8005ff4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001580:	4b39      	ldr	r3, [pc, #228]	; (8001668 <MX_ADC_Init+0xfc>)
 8001582:	4a3a      	ldr	r2, [pc, #232]	; (800166c <MX_ADC_Init+0x100>)
 8001584:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001586:	4b38      	ldr	r3, [pc, #224]	; (8001668 <MX_ADC_Init+0xfc>)
 8001588:	2280      	movs	r2, #128	; 0x80
 800158a:	0612      	lsls	r2, r2, #24
 800158c:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800158e:	4b36      	ldr	r3, [pc, #216]	; (8001668 <MX_ADC_Init+0xfc>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001594:	4b34      	ldr	r3, [pc, #208]	; (8001668 <MX_ADC_Init+0xfc>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800159a:	4b33      	ldr	r3, [pc, #204]	; (8001668 <MX_ADC_Init+0xfc>)
 800159c:	2201      	movs	r2, #1
 800159e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015a0:	4b31      	ldr	r3, [pc, #196]	; (8001668 <MX_ADC_Init+0xfc>)
 80015a2:	2204      	movs	r2, #4
 80015a4:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80015a6:	4b30      	ldr	r3, [pc, #192]	; (8001668 <MX_ADC_Init+0xfc>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80015ac:	4b2e      	ldr	r3, [pc, #184]	; (8001668 <MX_ADC_Init+0xfc>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80015b2:	4b2d      	ldr	r3, [pc, #180]	; (8001668 <MX_ADC_Init+0xfc>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80015b8:	4b2b      	ldr	r3, [pc, #172]	; (8001668 <MX_ADC_Init+0xfc>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015be:	4b2a      	ldr	r3, [pc, #168]	; (8001668 <MX_ADC_Init+0xfc>)
 80015c0:	22c2      	movs	r2, #194	; 0xc2
 80015c2:	32ff      	adds	r2, #255	; 0xff
 80015c4:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015c6:	4b28      	ldr	r3, [pc, #160]	; (8001668 <MX_ADC_Init+0xfc>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80015cc:	4b26      	ldr	r3, [pc, #152]	; (8001668 <MX_ADC_Init+0xfc>)
 80015ce:	2224      	movs	r2, #36	; 0x24
 80015d0:	2101      	movs	r1, #1
 80015d2:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015d4:	4b24      	ldr	r3, [pc, #144]	; (8001668 <MX_ADC_Init+0xfc>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80015da:	4b23      	ldr	r3, [pc, #140]	; (8001668 <MX_ADC_Init+0xfc>)
 80015dc:	0018      	movs	r0, r3
 80015de:	f001 f85b 	bl	8002698 <HAL_ADC_Init>
 80015e2:	1e03      	subs	r3, r0, #0
 80015e4:	d001      	beq.n	80015ea <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 80015e6:	f000 fa85 	bl	8001af4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	2280      	movs	r2, #128	; 0x80
 80015f4:	0152      	lsls	r2, r2, #5
 80015f6:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	2207      	movs	r2, #7
 80015fc:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015fe:	1d3a      	adds	r2, r7, #4
 8001600:	4b19      	ldr	r3, [pc, #100]	; (8001668 <MX_ADC_Init+0xfc>)
 8001602:	0011      	movs	r1, r2
 8001604:	0018      	movs	r0, r3
 8001606:	f001 fabd 	bl	8002b84 <HAL_ADC_ConfigChannel>
 800160a:	1e03      	subs	r3, r0, #0
 800160c:	d001      	beq.n	8001612 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800160e:	f000 fa71 	bl	8001af4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	2201      	movs	r2, #1
 8001616:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001618:	1d3a      	adds	r2, r7, #4
 800161a:	4b13      	ldr	r3, [pc, #76]	; (8001668 <MX_ADC_Init+0xfc>)
 800161c:	0011      	movs	r1, r2
 800161e:	0018      	movs	r0, r3
 8001620:	f001 fab0 	bl	8002b84 <HAL_ADC_ConfigChannel>
 8001624:	1e03      	subs	r3, r0, #0
 8001626:	d001      	beq.n	800162c <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8001628:	f000 fa64 	bl	8001af4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	2202      	movs	r2, #2
 8001630:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001632:	1d3a      	adds	r2, r7, #4
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <MX_ADC_Init+0xfc>)
 8001636:	0011      	movs	r1, r2
 8001638:	0018      	movs	r0, r3
 800163a:	f001 faa3 	bl	8002b84 <HAL_ADC_ConfigChannel>
 800163e:	1e03      	subs	r3, r0, #0
 8001640:	d001      	beq.n	8001646 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8001642:	f000 fa57 	bl	8001af4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	2203      	movs	r2, #3
 800164a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800164c:	1d3a      	adds	r2, r7, #4
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <MX_ADC_Init+0xfc>)
 8001650:	0011      	movs	r1, r2
 8001652:	0018      	movs	r0, r3
 8001654:	f001 fa96 	bl	8002b84 <HAL_ADC_ConfigChannel>
 8001658:	1e03      	subs	r3, r0, #0
 800165a:	d001      	beq.n	8001660 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 800165c:	f000 fa4a 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001660:	46c0      	nop			; (mov r8, r8)
 8001662:	46bd      	mov	sp, r7
 8001664:	b004      	add	sp, #16
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000a38 	.word	0x20000a38
 800166c:	40012400 	.word	0x40012400

08001670 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001674:	4b19      	ldr	r3, [pc, #100]	; (80016dc <MX_CAN_Init+0x6c>)
 8001676:	4a1a      	ldr	r2, [pc, #104]	; (80016e0 <MX_CAN_Init+0x70>)
 8001678:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800167a:	4b18      	ldr	r3, [pc, #96]	; (80016dc <MX_CAN_Init+0x6c>)
 800167c:	2204      	movs	r2, #4
 800167e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001680:	4b16      	ldr	r3, [pc, #88]	; (80016dc <MX_CAN_Init+0x6c>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <MX_CAN_Init+0x6c>)
 8001688:	2200      	movs	r2, #0
 800168a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <MX_CAN_Init+0x6c>)
 800168e:	22a0      	movs	r2, #160	; 0xa0
 8001690:	02d2      	lsls	r2, r2, #11
 8001692:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <MX_CAN_Init+0x6c>)
 8001696:	2280      	movs	r2, #128	; 0x80
 8001698:	03d2      	lsls	r2, r2, #15
 800169a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800169c:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <MX_CAN_Init+0x6c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <MX_CAN_Init+0x6c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <MX_CAN_Init+0x6c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <MX_CAN_Init+0x6c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <MX_CAN_Init+0x6c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <MX_CAN_Init+0x6c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <MX_CAN_Init+0x6c>)
 80016c2:	0018      	movs	r0, r3
 80016c4:	f001 fd26 	bl	8003114 <HAL_CAN_Init>
 80016c8:	1e03      	subs	r3, r0, #0
 80016ca:	d001      	beq.n	80016d0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80016cc:	f000 fa12 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_Init();
 80016d0:	f7ff f888 	bl	80007e4 <CAN_Init>
  /* USER CODE END CAN_Init 2 */

}
 80016d4:	46c0      	nop			; (mov r8, r8)
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	20000abc 	.word	0x20000abc
 80016e0:	40006400 	.word	0x40006400

080016e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016e8:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <MX_SPI1_Init+0x74>)
 80016ea:	4a1c      	ldr	r2, [pc, #112]	; (800175c <MX_SPI1_Init+0x78>)
 80016ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016ee:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <MX_SPI1_Init+0x74>)
 80016f0:	2282      	movs	r2, #130	; 0x82
 80016f2:	0052      	lsls	r2, r2, #1
 80016f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016f6:	4b18      	ldr	r3, [pc, #96]	; (8001758 <MX_SPI1_Init+0x74>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016fc:	4b16      	ldr	r3, [pc, #88]	; (8001758 <MX_SPI1_Init+0x74>)
 80016fe:	22e0      	movs	r2, #224	; 0xe0
 8001700:	00d2      	lsls	r2, r2, #3
 8001702:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001704:	4b14      	ldr	r3, [pc, #80]	; (8001758 <MX_SPI1_Init+0x74>)
 8001706:	2202      	movs	r2, #2
 8001708:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <MX_SPI1_Init+0x74>)
 800170c:	2201      	movs	r2, #1
 800170e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_SPI1_Init+0x74>)
 8001712:	2280      	movs	r2, #128	; 0x80
 8001714:	0092      	lsls	r2, r2, #2
 8001716:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001718:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <MX_SPI1_Init+0x74>)
 800171a:	2218      	movs	r2, #24
 800171c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MX_SPI1_Init+0x74>)
 8001720:	2200      	movs	r2, #0
 8001722:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_SPI1_Init+0x74>)
 8001726:	2200      	movs	r2, #0
 8001728:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <MX_SPI1_Init+0x74>)
 800172c:	2200      	movs	r2, #0
 800172e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_SPI1_Init+0x74>)
 8001732:	2207      	movs	r2, #7
 8001734:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <MX_SPI1_Init+0x74>)
 8001738:	2200      	movs	r2, #0
 800173a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_SPI1_Init+0x74>)
 800173e:	2200      	movs	r2, #0
 8001740:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001742:	4b05      	ldr	r3, [pc, #20]	; (8001758 <MX_SPI1_Init+0x74>)
 8001744:	0018      	movs	r0, r3
 8001746:	f003 fca5 	bl	8005094 <HAL_SPI_Init>
 800174a:	1e03      	subs	r3, r0, #0
 800174c:	d001      	beq.n	8001752 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800174e:	f000 f9d1 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000ae4 	.word	0x20000ae4
 800175c:	40013000 	.word	0x40013000

08001760 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001764:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <MX_SPI2_Init+0x74>)
 8001766:	4a1c      	ldr	r2, [pc, #112]	; (80017d8 <MX_SPI2_Init+0x78>)
 8001768:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800176a:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <MX_SPI2_Init+0x74>)
 800176c:	2282      	movs	r2, #130	; 0x82
 800176e:	0052      	lsls	r2, r2, #1
 8001770:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001772:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <MX_SPI2_Init+0x74>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001778:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <MX_SPI2_Init+0x74>)
 800177a:	22e0      	movs	r2, #224	; 0xe0
 800177c:	00d2      	lsls	r2, r2, #3
 800177e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <MX_SPI2_Init+0x74>)
 8001782:	2200      	movs	r2, #0
 8001784:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001786:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <MX_SPI2_Init+0x74>)
 8001788:	2200      	movs	r2, #0
 800178a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <MX_SPI2_Init+0x74>)
 800178e:	2280      	movs	r2, #128	; 0x80
 8001790:	0092      	lsls	r2, r2, #2
 8001792:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <MX_SPI2_Init+0x74>)
 8001796:	2210      	movs	r2, #16
 8001798:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <MX_SPI2_Init+0x74>)
 800179c:	2200      	movs	r2, #0
 800179e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <MX_SPI2_Init+0x74>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <MX_SPI2_Init+0x74>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <MX_SPI2_Init+0x74>)
 80017ae:	2207      	movs	r2, #7
 80017b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <MX_SPI2_Init+0x74>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <MX_SPI2_Init+0x74>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017be:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <MX_SPI2_Init+0x74>)
 80017c0:	0018      	movs	r0, r3
 80017c2:	f003 fc67 	bl	8005094 <HAL_SPI_Init>
 80017c6:	1e03      	subs	r3, r0, #0
 80017c8:	d001      	beq.n	80017ce <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80017ca:	f000 f993 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000b48 	.word	0x20000b48
 80017d8:	40003800 	.word	0x40003800

080017dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017e2:	2308      	movs	r3, #8
 80017e4:	18fb      	adds	r3, r7, r3
 80017e6:	0018      	movs	r0, r3
 80017e8:	2310      	movs	r3, #16
 80017ea:	001a      	movs	r2, r3
 80017ec:	2100      	movs	r1, #0
 80017ee:	f004 fc01 	bl	8005ff4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f2:	003b      	movs	r3, r7
 80017f4:	0018      	movs	r0, r3
 80017f6:	2308      	movs	r3, #8
 80017f8:	001a      	movs	r2, r3
 80017fa:	2100      	movs	r1, #0
 80017fc:	f004 fbfa 	bl	8005ff4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001800:	4b1f      	ldr	r3, [pc, #124]	; (8001880 <MX_TIM2_Init+0xa4>)
 8001802:	2280      	movs	r2, #128	; 0x80
 8001804:	05d2      	lsls	r2, r2, #23
 8001806:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8001808:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <MX_TIM2_Init+0xa4>)
 800180a:	222f      	movs	r2, #47	; 0x2f
 800180c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180e:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <MX_TIM2_Init+0xa4>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001814:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <MX_TIM2_Init+0xa4>)
 8001816:	2201      	movs	r2, #1
 8001818:	4252      	negs	r2, r2
 800181a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800181c:	4b18      	ldr	r3, [pc, #96]	; (8001880 <MX_TIM2_Init+0xa4>)
 800181e:	2200      	movs	r2, #0
 8001820:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001822:	4b17      	ldr	r3, [pc, #92]	; (8001880 <MX_TIM2_Init+0xa4>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001828:	4b15      	ldr	r3, [pc, #84]	; (8001880 <MX_TIM2_Init+0xa4>)
 800182a:	0018      	movs	r0, r3
 800182c:	f004 f8c8 	bl	80059c0 <HAL_TIM_Base_Init>
 8001830:	1e03      	subs	r3, r0, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001834:	f000 f95e 	bl	8001af4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001838:	2108      	movs	r1, #8
 800183a:	187b      	adds	r3, r7, r1
 800183c:	2280      	movs	r2, #128	; 0x80
 800183e:	0152      	lsls	r2, r2, #5
 8001840:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001842:	187a      	adds	r2, r7, r1
 8001844:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <MX_TIM2_Init+0xa4>)
 8001846:	0011      	movs	r1, r2
 8001848:	0018      	movs	r0, r3
 800184a:	f004 f953 	bl	8005af4 <HAL_TIM_ConfigClockSource>
 800184e:	1e03      	subs	r3, r0, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001852:	f000 f94f 	bl	8001af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001856:	003b      	movs	r3, r7
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800185c:	003b      	movs	r3, r7
 800185e:	2200      	movs	r2, #0
 8001860:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001862:	003a      	movs	r2, r7
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <MX_TIM2_Init+0xa4>)
 8001866:	0011      	movs	r1, r2
 8001868:	0018      	movs	r0, r3
 800186a:	f004 fb31 	bl	8005ed0 <HAL_TIMEx_MasterConfigSynchronization>
 800186e:	1e03      	subs	r3, r0, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001872:	f000 f93f 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	46bd      	mov	sp, r7
 800187a:	b006      	add	sp, #24
 800187c:	bd80      	pop	{r7, pc}
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	20000bac 	.word	0x20000bac

08001884 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800188a:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <MX_DMA_Init+0x38>)
 800188c:	695a      	ldr	r2, [r3, #20]
 800188e:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <MX_DMA_Init+0x38>)
 8001890:	2101      	movs	r1, #1
 8001892:	430a      	orrs	r2, r1
 8001894:	615a      	str	r2, [r3, #20]
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <MX_DMA_Init+0x38>)
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	2201      	movs	r2, #1
 800189c:	4013      	ands	r3, r2
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	2009      	movs	r0, #9
 80018a8:	f002 fb60 	bl	8003f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018ac:	2009      	movs	r0, #9
 80018ae:	f002 fb72 	bl	8003f96 <HAL_NVIC_EnableIRQ>

}
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	46bd      	mov	sp, r7
 80018b6:	b002      	add	sp, #8
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	40021000 	.word	0x40021000

080018c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018c0:	b590      	push	{r4, r7, lr}
 80018c2:	b08b      	sub	sp, #44	; 0x2c
 80018c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c6:	2414      	movs	r4, #20
 80018c8:	193b      	adds	r3, r7, r4
 80018ca:	0018      	movs	r0, r3
 80018cc:	2314      	movs	r3, #20
 80018ce:	001a      	movs	r2, r3
 80018d0:	2100      	movs	r1, #0
 80018d2:	f004 fb8f 	bl	8005ff4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018d6:	4b7f      	ldr	r3, [pc, #508]	; (8001ad4 <MX_GPIO_Init+0x214>)
 80018d8:	695a      	ldr	r2, [r3, #20]
 80018da:	4b7e      	ldr	r3, [pc, #504]	; (8001ad4 <MX_GPIO_Init+0x214>)
 80018dc:	2180      	movs	r1, #128	; 0x80
 80018de:	03c9      	lsls	r1, r1, #15
 80018e0:	430a      	orrs	r2, r1
 80018e2:	615a      	str	r2, [r3, #20]
 80018e4:	4b7b      	ldr	r3, [pc, #492]	; (8001ad4 <MX_GPIO_Init+0x214>)
 80018e6:	695a      	ldr	r2, [r3, #20]
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	03db      	lsls	r3, r3, #15
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
 80018f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f2:	4b78      	ldr	r3, [pc, #480]	; (8001ad4 <MX_GPIO_Init+0x214>)
 80018f4:	695a      	ldr	r2, [r3, #20]
 80018f6:	4b77      	ldr	r3, [pc, #476]	; (8001ad4 <MX_GPIO_Init+0x214>)
 80018f8:	2180      	movs	r1, #128	; 0x80
 80018fa:	0309      	lsls	r1, r1, #12
 80018fc:	430a      	orrs	r2, r1
 80018fe:	615a      	str	r2, [r3, #20]
 8001900:	4b74      	ldr	r3, [pc, #464]	; (8001ad4 <MX_GPIO_Init+0x214>)
 8001902:	695a      	ldr	r2, [r3, #20]
 8001904:	2380      	movs	r3, #128	; 0x80
 8001906:	031b      	lsls	r3, r3, #12
 8001908:	4013      	ands	r3, r2
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800190e:	4b71      	ldr	r3, [pc, #452]	; (8001ad4 <MX_GPIO_Init+0x214>)
 8001910:	695a      	ldr	r2, [r3, #20]
 8001912:	4b70      	ldr	r3, [pc, #448]	; (8001ad4 <MX_GPIO_Init+0x214>)
 8001914:	2180      	movs	r1, #128	; 0x80
 8001916:	0289      	lsls	r1, r1, #10
 8001918:	430a      	orrs	r2, r1
 800191a:	615a      	str	r2, [r3, #20]
 800191c:	4b6d      	ldr	r3, [pc, #436]	; (8001ad4 <MX_GPIO_Init+0x214>)
 800191e:	695a      	ldr	r2, [r3, #20]
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	029b      	lsls	r3, r3, #10
 8001924:	4013      	ands	r3, r2
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800192a:	4b6a      	ldr	r3, [pc, #424]	; (8001ad4 <MX_GPIO_Init+0x214>)
 800192c:	695a      	ldr	r2, [r3, #20]
 800192e:	4b69      	ldr	r3, [pc, #420]	; (8001ad4 <MX_GPIO_Init+0x214>)
 8001930:	2180      	movs	r1, #128	; 0x80
 8001932:	02c9      	lsls	r1, r1, #11
 8001934:	430a      	orrs	r2, r1
 8001936:	615a      	str	r2, [r3, #20]
 8001938:	4b66      	ldr	r3, [pc, #408]	; (8001ad4 <MX_GPIO_Init+0x214>)
 800193a:	695a      	ldr	r2, [r3, #20]
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	02db      	lsls	r3, r3, #11
 8001940:	4013      	ands	r3, r2
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001946:	4b63      	ldr	r3, [pc, #396]	; (8001ad4 <MX_GPIO_Init+0x214>)
 8001948:	695a      	ldr	r2, [r3, #20]
 800194a:	4b62      	ldr	r3, [pc, #392]	; (8001ad4 <MX_GPIO_Init+0x214>)
 800194c:	2180      	movs	r1, #128	; 0x80
 800194e:	0349      	lsls	r1, r1, #13
 8001950:	430a      	orrs	r2, r1
 8001952:	615a      	str	r2, [r3, #20]
 8001954:	4b5f      	ldr	r3, [pc, #380]	; (8001ad4 <MX_GPIO_Init+0x214>)
 8001956:	695a      	ldr	r2, [r3, #20]
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	035b      	lsls	r3, r3, #13
 800195c:	4013      	ands	r3, r2
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Heart_Pin|Error_Pin|nRES_Display_Pin|GPIO3_12VOut_Pin
 8001962:	495d      	ldr	r1, [pc, #372]	; (8001ad8 <MX_GPIO_Init+0x218>)
 8001964:	4b5d      	ldr	r3, [pc, #372]	; (8001adc <MX_GPIO_Init+0x21c>)
 8001966:	2200      	movs	r2, #0
 8001968:	0018      	movs	r0, r3
 800196a:	f002 fe87 	bl	800467c <HAL_GPIO_WritePin>
                          |GPIO2_5VOut_Pin|GPIO2_12VOut_Pin|GPIO6_5VOut_Pin|GPIO6_12VOut_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nCS_Display_Pin|D_nC_Display_Pin|GPIO1_5VOut_Pin|GPIO1_12VOut_Pin, GPIO_PIN_RESET);
 800196e:	23ca      	movs	r3, #202	; 0xca
 8001970:	00d9      	lsls	r1, r3, #3
 8001972:	2390      	movs	r3, #144	; 0x90
 8001974:	05db      	lsls	r3, r3, #23
 8001976:	2200      	movs	r2, #0
 8001978:	0018      	movs	r0, r3
 800197a:	f002 fe7f 	bl	800467c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ADC2_NTC_CTRL_Pin|ADC1_NTC_CTRL_Pin|ADC0_NTC_CTRL_Pin|ADC1_CTRL_Pin
 800197e:	4958      	ldr	r1, [pc, #352]	; (8001ae0 <MX_GPIO_Init+0x220>)
 8001980:	4b58      	ldr	r3, [pc, #352]	; (8001ae4 <MX_GPIO_Init+0x224>)
 8001982:	2200      	movs	r2, #0
 8001984:	0018      	movs	r0, r3
 8001986:	f002 fe79 	bl	800467c <HAL_GPIO_WritePin>
                          |GPIO5_12VOut_Pin|GPIO4_5VOut_Pin|GPIO4_12VOut_Pin|ADC3_NTC_CTRL_Pin
                          |ADC0_CTRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Heart_Pin Error_Pin GPIO3_12VOut_Pin GPIO2_5VOut_Pin
                           GPIO2_12VOut_Pin GPIO6_5VOut_Pin GPIO6_12VOut_Pin */
  GPIO_InitStruct.Pin = Heart_Pin|Error_Pin|GPIO3_12VOut_Pin|GPIO2_5VOut_Pin
 800198a:	193b      	adds	r3, r7, r4
 800198c:	4a56      	ldr	r2, [pc, #344]	; (8001ae8 <MX_GPIO_Init+0x228>)
 800198e:	601a      	str	r2, [r3, #0]
                          |GPIO2_12VOut_Pin|GPIO6_5VOut_Pin|GPIO6_12VOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001990:	193b      	adds	r3, r7, r4
 8001992:	2201      	movs	r2, #1
 8001994:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	193b      	adds	r3, r7, r4
 8001998:	2200      	movs	r2, #0
 800199a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199c:	193b      	adds	r3, r7, r4
 800199e:	2200      	movs	r2, #0
 80019a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a2:	193b      	adds	r3, r7, r4
 80019a4:	4a4d      	ldr	r2, [pc, #308]	; (8001adc <MX_GPIO_Init+0x21c>)
 80019a6:	0019      	movs	r1, r3
 80019a8:	0010      	movs	r0, r2
 80019aa:	f002 fcef 	bl	800438c <HAL_GPIO_Init>

  /*Configure GPIO pins : nCS_Display_Pin D_nC_Display_Pin */
  GPIO_InitStruct.Pin = nCS_Display_Pin|D_nC_Display_Pin;
 80019ae:	193b      	adds	r3, r7, r4
 80019b0:	2250      	movs	r2, #80	; 0x50
 80019b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b4:	193b      	adds	r3, r7, r4
 80019b6:	2201      	movs	r2, #1
 80019b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	193b      	adds	r3, r7, r4
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019c0:	193b      	adds	r3, r7, r4
 80019c2:	2203      	movs	r2, #3
 80019c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c6:	193a      	adds	r2, r7, r4
 80019c8:	2390      	movs	r3, #144	; 0x90
 80019ca:	05db      	lsls	r3, r3, #23
 80019cc:	0011      	movs	r1, r2
 80019ce:	0018      	movs	r0, r3
 80019d0:	f002 fcdc 	bl	800438c <HAL_GPIO_Init>

  /*Configure GPIO pin : nRES_Display_Pin */
  GPIO_InitStruct.Pin = nRES_Display_Pin;
 80019d4:	193b      	adds	r3, r7, r4
 80019d6:	2210      	movs	r2, #16
 80019d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019da:	193b      	adds	r3, r7, r4
 80019dc:	2201      	movs	r2, #1
 80019de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	193b      	adds	r3, r7, r4
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e6:	193b      	adds	r3, r7, r4
 80019e8:	2203      	movs	r2, #3
 80019ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(nRES_Display_GPIO_Port, &GPIO_InitStruct);
 80019ec:	193b      	adds	r3, r7, r4
 80019ee:	4a3b      	ldr	r2, [pc, #236]	; (8001adc <MX_GPIO_Init+0x21c>)
 80019f0:	0019      	movs	r1, r3
 80019f2:	0010      	movs	r0, r2
 80019f4:	f002 fcca 	bl	800438c <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC2_NTC_CTRL_Pin ADC1_NTC_CTRL_Pin ADC0_NTC_CTRL_Pin ADC1_CTRL_Pin
                           ADC2_CTRL_Pin ADC3_CTRL_Pin GPIO3_5VOut_Pin GPIO5_5VOut_Pin
                           GPIO5_12VOut_Pin GPIO4_5VOut_Pin GPIO4_12VOut_Pin ADC3_NTC_CTRL_Pin
                           ADC0_CTRL_Pin */
  GPIO_InitStruct.Pin = ADC2_NTC_CTRL_Pin|ADC1_NTC_CTRL_Pin|ADC0_NTC_CTRL_Pin|ADC1_CTRL_Pin
 80019f8:	193b      	adds	r3, r7, r4
 80019fa:	4a39      	ldr	r2, [pc, #228]	; (8001ae0 <MX_GPIO_Init+0x220>)
 80019fc:	601a      	str	r2, [r3, #0]
                          |ADC2_CTRL_Pin|ADC3_CTRL_Pin|GPIO3_5VOut_Pin|GPIO5_5VOut_Pin
                          |GPIO5_12VOut_Pin|GPIO4_5VOut_Pin|GPIO4_12VOut_Pin|ADC3_NTC_CTRL_Pin
                          |ADC0_CTRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fe:	193b      	adds	r3, r7, r4
 8001a00:	2201      	movs	r2, #1
 8001a02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	193b      	adds	r3, r7, r4
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	193b      	adds	r3, r7, r4
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a10:	193b      	adds	r3, r7, r4
 8001a12:	4a34      	ldr	r2, [pc, #208]	; (8001ae4 <MX_GPIO_Init+0x224>)
 8001a14:	0019      	movs	r1, r3
 8001a16:	0010      	movs	r0, r2
 8001a18:	f002 fcb8 	bl	800438c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO3_In_Pin GPIO4_In_Pin */
  GPIO_InitStruct.Pin = GPIO3_In_Pin|GPIO4_In_Pin;
 8001a1c:	193b      	adds	r3, r7, r4
 8001a1e:	4a33      	ldr	r2, [pc, #204]	; (8001aec <MX_GPIO_Init+0x22c>)
 8001a20:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a22:	193b      	adds	r3, r7, r4
 8001a24:	2200      	movs	r2, #0
 8001a26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	193b      	adds	r3, r7, r4
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2e:	193b      	adds	r3, r7, r4
 8001a30:	4a2c      	ldr	r2, [pc, #176]	; (8001ae4 <MX_GPIO_Init+0x224>)
 8001a32:	0019      	movs	r1, r3
 8001a34:	0010      	movs	r0, r2
 8001a36:	f002 fca9 	bl	800438c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO2_In_Pin GPIO6_In_Pin */
  GPIO_InitStruct.Pin = GPIO2_In_Pin|GPIO6_In_Pin;
 8001a3a:	0021      	movs	r1, r4
 8001a3c:	187b      	adds	r3, r7, r1
 8001a3e:	2290      	movs	r2, #144	; 0x90
 8001a40:	00d2      	lsls	r2, r2, #3
 8001a42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a44:	000c      	movs	r4, r1
 8001a46:	193b      	adds	r3, r7, r4
 8001a48:	2200      	movs	r2, #0
 8001a4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	193b      	adds	r3, r7, r4
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a52:	193b      	adds	r3, r7, r4
 8001a54:	4a21      	ldr	r2, [pc, #132]	; (8001adc <MX_GPIO_Init+0x21c>)
 8001a56:	0019      	movs	r1, r3
 8001a58:	0010      	movs	r0, r2
 8001a5a:	f002 fc97 	bl	800438c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO1_In_Pin */
  GPIO_InitStruct.Pin = GPIO1_In_Pin;
 8001a5e:	193b      	adds	r3, r7, r4
 8001a60:	2280      	movs	r2, #128	; 0x80
 8001a62:	0052      	lsls	r2, r2, #1
 8001a64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a66:	193b      	adds	r3, r7, r4
 8001a68:	2200      	movs	r2, #0
 8001a6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	193b      	adds	r3, r7, r4
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO1_In_GPIO_Port, &GPIO_InitStruct);
 8001a72:	193a      	adds	r2, r7, r4
 8001a74:	2390      	movs	r3, #144	; 0x90
 8001a76:	05db      	lsls	r3, r3, #23
 8001a78:	0011      	movs	r1, r2
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f002 fc86 	bl	800438c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO1_5VOut_Pin GPIO1_12VOut_Pin */
  GPIO_InitStruct.Pin = GPIO1_5VOut_Pin|GPIO1_12VOut_Pin;
 8001a80:	0021      	movs	r1, r4
 8001a82:	187b      	adds	r3, r7, r1
 8001a84:	22c0      	movs	r2, #192	; 0xc0
 8001a86:	00d2      	lsls	r2, r2, #3
 8001a88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8a:	000c      	movs	r4, r1
 8001a8c:	193b      	adds	r3, r7, r4
 8001a8e:	2201      	movs	r2, #1
 8001a90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	193b      	adds	r3, r7, r4
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a98:	193b      	adds	r3, r7, r4
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9e:	193a      	adds	r2, r7, r4
 8001aa0:	2390      	movs	r3, #144	; 0x90
 8001aa2:	05db      	lsls	r3, r3, #23
 8001aa4:	0011      	movs	r1, r2
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f002 fc70 	bl	800438c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO5_In_Pin */
  GPIO_InitStruct.Pin = GPIO5_In_Pin;
 8001aac:	193b      	adds	r3, r7, r4
 8001aae:	2204      	movs	r2, #4
 8001ab0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab2:	193b      	adds	r3, r7, r4
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	193b      	adds	r3, r7, r4
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO5_In_GPIO_Port, &GPIO_InitStruct);
 8001abe:	193b      	adds	r3, r7, r4
 8001ac0:	4a0b      	ldr	r2, [pc, #44]	; (8001af0 <MX_GPIO_Init+0x230>)
 8001ac2:	0019      	movs	r1, r3
 8001ac4:	0010      	movs	r0, r2
 8001ac6:	f002 fc61 	bl	800438c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	46bd      	mov	sp, r7
 8001ace:	b00b      	add	sp, #44	; 0x2c
 8001ad0:	bd90      	pop	{r4, r7, pc}
 8001ad2:	46c0      	nop			; (mov r8, r8)
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	00001b53 	.word	0x00001b53
 8001adc:	48000800 	.word	0x48000800
 8001ae0:	0000bbdf 	.word	0x0000bbdf
 8001ae4:	48000400 	.word	0x48000400
 8001ae8:	00001b43 	.word	0x00001b43
 8001aec:	00004020 	.word	0x00004020
 8001af0:	48000c00 	.word	0x48000c00

08001af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af8:	b672      	cpsid	i
}
 8001afa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001afc:	e7fe      	b.n	8001afc <Error_Handler+0x8>
	...

08001b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b06:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <HAL_MspInit+0x44>)
 8001b08:	699a      	ldr	r2, [r3, #24]
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <HAL_MspInit+0x44>)
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	619a      	str	r2, [r3, #24]
 8001b12:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <HAL_MspInit+0x44>)
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	2201      	movs	r2, #1
 8001b18:	4013      	ands	r3, r2
 8001b1a:	607b      	str	r3, [r7, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <HAL_MspInit+0x44>)
 8001b20:	69da      	ldr	r2, [r3, #28]
 8001b22:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <HAL_MspInit+0x44>)
 8001b24:	2180      	movs	r1, #128	; 0x80
 8001b26:	0549      	lsls	r1, r1, #21
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	61da      	str	r2, [r3, #28]
 8001b2c:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_MspInit+0x44>)
 8001b2e:	69da      	ldr	r2, [r3, #28]
 8001b30:	2380      	movs	r3, #128	; 0x80
 8001b32:	055b      	lsls	r3, r3, #21
 8001b34:	4013      	ands	r3, r2
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	b002      	add	sp, #8
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	46c0      	nop			; (mov r8, r8)
 8001b44:	40021000 	.word	0x40021000

08001b48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b08b      	sub	sp, #44	; 0x2c
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	2414      	movs	r4, #20
 8001b52:	193b      	adds	r3, r7, r4
 8001b54:	0018      	movs	r0, r3
 8001b56:	2314      	movs	r3, #20
 8001b58:	001a      	movs	r2, r3
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	f004 fa4a 	bl	8005ff4 <memset>
  if(hadc->Instance==ADC1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a31      	ldr	r2, [pc, #196]	; (8001c2c <HAL_ADC_MspInit+0xe4>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d15b      	bne.n	8001c22 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b6a:	4b31      	ldr	r3, [pc, #196]	; (8001c30 <HAL_ADC_MspInit+0xe8>)
 8001b6c:	699a      	ldr	r2, [r3, #24]
 8001b6e:	4b30      	ldr	r3, [pc, #192]	; (8001c30 <HAL_ADC_MspInit+0xe8>)
 8001b70:	2180      	movs	r1, #128	; 0x80
 8001b72:	0089      	lsls	r1, r1, #2
 8001b74:	430a      	orrs	r2, r1
 8001b76:	619a      	str	r2, [r3, #24]
 8001b78:	4b2d      	ldr	r3, [pc, #180]	; (8001c30 <HAL_ADC_MspInit+0xe8>)
 8001b7a:	699a      	ldr	r2, [r3, #24]
 8001b7c:	2380      	movs	r3, #128	; 0x80
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b86:	4b2a      	ldr	r3, [pc, #168]	; (8001c30 <HAL_ADC_MspInit+0xe8>)
 8001b88:	695a      	ldr	r2, [r3, #20]
 8001b8a:	4b29      	ldr	r3, [pc, #164]	; (8001c30 <HAL_ADC_MspInit+0xe8>)
 8001b8c:	2180      	movs	r1, #128	; 0x80
 8001b8e:	0289      	lsls	r1, r1, #10
 8001b90:	430a      	orrs	r2, r1
 8001b92:	615a      	str	r2, [r3, #20]
 8001b94:	4b26      	ldr	r3, [pc, #152]	; (8001c30 <HAL_ADC_MspInit+0xe8>)
 8001b96:	695a      	ldr	r2, [r3, #20]
 8001b98:	2380      	movs	r3, #128	; 0x80
 8001b9a:	029b      	lsls	r3, r3, #10
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001ba2:	193b      	adds	r3, r7, r4
 8001ba4:	220f      	movs	r2, #15
 8001ba6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ba8:	193b      	adds	r3, r7, r4
 8001baa:	2203      	movs	r2, #3
 8001bac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	193b      	adds	r3, r7, r4
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb4:	193a      	adds	r2, r7, r4
 8001bb6:	2390      	movs	r3, #144	; 0x90
 8001bb8:	05db      	lsls	r3, r3, #23
 8001bba:	0011      	movs	r1, r2
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f002 fbe5 	bl	800438c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001bc2:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <HAL_ADC_MspInit+0xec>)
 8001bc4:	4a1c      	ldr	r2, [pc, #112]	; (8001c38 <HAL_ADC_MspInit+0xf0>)
 8001bc6:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bc8:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <HAL_ADC_MspInit+0xec>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bce:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <HAL_ADC_MspInit+0xec>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001bd4:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <HAL_ADC_MspInit+0xec>)
 8001bd6:	2280      	movs	r2, #128	; 0x80
 8001bd8:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bda:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <HAL_ADC_MspInit+0xec>)
 8001bdc:	2280      	movs	r2, #128	; 0x80
 8001bde:	0052      	lsls	r2, r2, #1
 8001be0:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001be2:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <HAL_ADC_MspInit+0xec>)
 8001be4:	2280      	movs	r2, #128	; 0x80
 8001be6:	00d2      	lsls	r2, r2, #3
 8001be8:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001bea:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_ADC_MspInit+0xec>)
 8001bec:	2220      	movs	r2, #32
 8001bee:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001bf0:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <HAL_ADC_MspInit+0xec>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001bf6:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <HAL_ADC_MspInit+0xec>)
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f002 f9e9 	bl	8003fd0 <HAL_DMA_Init>
 8001bfe:	1e03      	subs	r3, r0, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8001c02:	f7ff ff77 	bl	8001af4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a0a      	ldr	r2, [pc, #40]	; (8001c34 <HAL_ADC_MspInit+0xec>)
 8001c0a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c0c:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_ADC_MspInit+0xec>)
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	625a      	str	r2, [r3, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2100      	movs	r1, #0
 8001c16:	200c      	movs	r0, #12
 8001c18:	f002 f9a8 	bl	8003f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8001c1c:	200c      	movs	r0, #12
 8001c1e:	f002 f9ba 	bl	8003f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	46bd      	mov	sp, r7
 8001c26:	b00b      	add	sp, #44	; 0x2c
 8001c28:	bd90      	pop	{r4, r7, pc}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	40012400 	.word	0x40012400
 8001c30:	40021000 	.word	0x40021000
 8001c34:	20000a78 	.word	0x20000a78
 8001c38:	40020008 	.word	0x40020008

08001c3c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b08b      	sub	sp, #44	; 0x2c
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	2414      	movs	r4, #20
 8001c46:	193b      	adds	r3, r7, r4
 8001c48:	0018      	movs	r0, r3
 8001c4a:	2314      	movs	r3, #20
 8001c4c:	001a      	movs	r2, r3
 8001c4e:	2100      	movs	r1, #0
 8001c50:	f004 f9d0 	bl	8005ff4 <memset>
  if(hcan->Instance==CAN)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a21      	ldr	r2, [pc, #132]	; (8001ce0 <HAL_CAN_MspInit+0xa4>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d13b      	bne.n	8001cd6 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c5e:	4b21      	ldr	r3, [pc, #132]	; (8001ce4 <HAL_CAN_MspInit+0xa8>)
 8001c60:	69da      	ldr	r2, [r3, #28]
 8001c62:	4b20      	ldr	r3, [pc, #128]	; (8001ce4 <HAL_CAN_MspInit+0xa8>)
 8001c64:	2180      	movs	r1, #128	; 0x80
 8001c66:	0489      	lsls	r1, r1, #18
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	61da      	str	r2, [r3, #28]
 8001c6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <HAL_CAN_MspInit+0xa8>)
 8001c6e:	69da      	ldr	r2, [r3, #28]
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	049b      	lsls	r3, r3, #18
 8001c74:	4013      	ands	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <HAL_CAN_MspInit+0xa8>)
 8001c7c:	695a      	ldr	r2, [r3, #20]
 8001c7e:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <HAL_CAN_MspInit+0xa8>)
 8001c80:	2180      	movs	r1, #128	; 0x80
 8001c82:	0289      	lsls	r1, r1, #10
 8001c84:	430a      	orrs	r2, r1
 8001c86:	615a      	str	r2, [r3, #20]
 8001c88:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <HAL_CAN_MspInit+0xa8>)
 8001c8a:	695a      	ldr	r2, [r3, #20]
 8001c8c:	2380      	movs	r3, #128	; 0x80
 8001c8e:	029b      	lsls	r3, r3, #10
 8001c90:	4013      	ands	r3, r2
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c96:	193b      	adds	r3, r7, r4
 8001c98:	22c0      	movs	r2, #192	; 0xc0
 8001c9a:	0152      	lsls	r2, r2, #5
 8001c9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	0021      	movs	r1, r4
 8001ca0:	187b      	adds	r3, r7, r1
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	187b      	adds	r3, r7, r1
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cac:	187b      	adds	r3, r7, r1
 8001cae:	2203      	movs	r2, #3
 8001cb0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8001cb2:	187b      	adds	r3, r7, r1
 8001cb4:	2204      	movs	r2, #4
 8001cb6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb8:	187a      	adds	r2, r7, r1
 8001cba:	2390      	movs	r3, #144	; 0x90
 8001cbc:	05db      	lsls	r3, r3, #23
 8001cbe:	0011      	movs	r1, r2
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	f002 fb63 	bl	800438c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2100      	movs	r1, #0
 8001cca:	201e      	movs	r0, #30
 8001ccc:	f002 f94e 	bl	8003f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8001cd0:	201e      	movs	r0, #30
 8001cd2:	f002 f960 	bl	8003f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	b00b      	add	sp, #44	; 0x2c
 8001cdc:	bd90      	pop	{r4, r7, pc}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	40006400 	.word	0x40006400
 8001ce4:	40021000 	.word	0x40021000

08001ce8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ce8:	b590      	push	{r4, r7, lr}
 8001cea:	b08d      	sub	sp, #52	; 0x34
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	241c      	movs	r4, #28
 8001cf2:	193b      	adds	r3, r7, r4
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	2314      	movs	r3, #20
 8001cf8:	001a      	movs	r2, r3
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	f004 f97a 	bl	8005ff4 <memset>
  if(hspi->Instance==SPI1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a53      	ldr	r2, [pc, #332]	; (8001e54 <HAL_SPI_MspInit+0x16c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d13b      	bne.n	8001d82 <HAL_SPI_MspInit+0x9a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d0a:	4b53      	ldr	r3, [pc, #332]	; (8001e58 <HAL_SPI_MspInit+0x170>)
 8001d0c:	699a      	ldr	r2, [r3, #24]
 8001d0e:	4b52      	ldr	r3, [pc, #328]	; (8001e58 <HAL_SPI_MspInit+0x170>)
 8001d10:	2180      	movs	r1, #128	; 0x80
 8001d12:	0149      	lsls	r1, r1, #5
 8001d14:	430a      	orrs	r2, r1
 8001d16:	619a      	str	r2, [r3, #24]
 8001d18:	4b4f      	ldr	r3, [pc, #316]	; (8001e58 <HAL_SPI_MspInit+0x170>)
 8001d1a:	699a      	ldr	r2, [r3, #24]
 8001d1c:	2380      	movs	r3, #128	; 0x80
 8001d1e:	015b      	lsls	r3, r3, #5
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
 8001d24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d26:	4b4c      	ldr	r3, [pc, #304]	; (8001e58 <HAL_SPI_MspInit+0x170>)
 8001d28:	695a      	ldr	r2, [r3, #20]
 8001d2a:	4b4b      	ldr	r3, [pc, #300]	; (8001e58 <HAL_SPI_MspInit+0x170>)
 8001d2c:	2180      	movs	r1, #128	; 0x80
 8001d2e:	0289      	lsls	r1, r1, #10
 8001d30:	430a      	orrs	r2, r1
 8001d32:	615a      	str	r2, [r3, #20]
 8001d34:	4b48      	ldr	r3, [pc, #288]	; (8001e58 <HAL_SPI_MspInit+0x170>)
 8001d36:	695a      	ldr	r2, [r3, #20]
 8001d38:	2380      	movs	r3, #128	; 0x80
 8001d3a:	029b      	lsls	r3, r3, #10
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Display_Pin|SPI1_MOSI_Display_Pin;
 8001d42:	0021      	movs	r1, r4
 8001d44:	187b      	adds	r3, r7, r1
 8001d46:	22a0      	movs	r2, #160	; 0xa0
 8001d48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	187b      	adds	r3, r7, r1
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	187b      	adds	r3, r7, r1
 8001d52:	2200      	movs	r2, #0
 8001d54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d56:	187b      	adds	r3, r7, r1
 8001d58:	2203      	movs	r2, #3
 8001d5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001d5c:	187b      	adds	r3, r7, r1
 8001d5e:	2200      	movs	r2, #0
 8001d60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d62:	187a      	adds	r2, r7, r1
 8001d64:	2390      	movs	r3, #144	; 0x90
 8001d66:	05db      	lsls	r3, r3, #23
 8001d68:	0011      	movs	r1, r2
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	f002 fb0e 	bl	800438c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001d70:	2200      	movs	r2, #0
 8001d72:	2100      	movs	r1, #0
 8001d74:	2019      	movs	r0, #25
 8001d76:	f002 f8f9 	bl	8003f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001d7a:	2019      	movs	r0, #25
 8001d7c:	f002 f90b 	bl	8003f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d80:	e063      	b.n	8001e4a <HAL_SPI_MspInit+0x162>
  else if(hspi->Instance==SPI2)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a35      	ldr	r2, [pc, #212]	; (8001e5c <HAL_SPI_MspInit+0x174>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d15e      	bne.n	8001e4a <HAL_SPI_MspInit+0x162>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d8c:	4b32      	ldr	r3, [pc, #200]	; (8001e58 <HAL_SPI_MspInit+0x170>)
 8001d8e:	69da      	ldr	r2, [r3, #28]
 8001d90:	4b31      	ldr	r3, [pc, #196]	; (8001e58 <HAL_SPI_MspInit+0x170>)
 8001d92:	2180      	movs	r1, #128	; 0x80
 8001d94:	01c9      	lsls	r1, r1, #7
 8001d96:	430a      	orrs	r2, r1
 8001d98:	61da      	str	r2, [r3, #28]
 8001d9a:	4b2f      	ldr	r3, [pc, #188]	; (8001e58 <HAL_SPI_MspInit+0x170>)
 8001d9c:	69da      	ldr	r2, [r3, #28]
 8001d9e:	2380      	movs	r3, #128	; 0x80
 8001da0:	01db      	lsls	r3, r3, #7
 8001da2:	4013      	ands	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da8:	4b2b      	ldr	r3, [pc, #172]	; (8001e58 <HAL_SPI_MspInit+0x170>)
 8001daa:	695a      	ldr	r2, [r3, #20]
 8001dac:	4b2a      	ldr	r3, [pc, #168]	; (8001e58 <HAL_SPI_MspInit+0x170>)
 8001dae:	2180      	movs	r1, #128	; 0x80
 8001db0:	0309      	lsls	r1, r1, #12
 8001db2:	430a      	orrs	r2, r1
 8001db4:	615a      	str	r2, [r3, #20]
 8001db6:	4b28      	ldr	r3, [pc, #160]	; (8001e58 <HAL_SPI_MspInit+0x170>)
 8001db8:	695a      	ldr	r2, [r3, #20]
 8001dba:	2380      	movs	r3, #128	; 0x80
 8001dbc:	031b      	lsls	r3, r3, #12
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc4:	4b24      	ldr	r3, [pc, #144]	; (8001e58 <HAL_SPI_MspInit+0x170>)
 8001dc6:	695a      	ldr	r2, [r3, #20]
 8001dc8:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <HAL_SPI_MspInit+0x170>)
 8001dca:	2180      	movs	r1, #128	; 0x80
 8001dcc:	02c9      	lsls	r1, r1, #11
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	615a      	str	r2, [r3, #20]
 8001dd2:	4b21      	ldr	r3, [pc, #132]	; (8001e58 <HAL_SPI_MspInit+0x170>)
 8001dd4:	695a      	ldr	r2, [r3, #20]
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	02db      	lsls	r3, r3, #11
 8001dda:	4013      	ands	r3, r2
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI2_MOSI_RGBLED_Pin;
 8001de0:	241c      	movs	r4, #28
 8001de2:	193b      	adds	r3, r7, r4
 8001de4:	2208      	movs	r2, #8
 8001de6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	193b      	adds	r3, r7, r4
 8001dea:	2202      	movs	r2, #2
 8001dec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	193b      	adds	r3, r7, r4
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	193b      	adds	r3, r7, r4
 8001df6:	2200      	movs	r2, #0
 8001df8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8001dfa:	193b      	adds	r3, r7, r4
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SPI2_MOSI_RGBLED_GPIO_Port, &GPIO_InitStruct);
 8001e00:	193b      	adds	r3, r7, r4
 8001e02:	4a17      	ldr	r2, [pc, #92]	; (8001e60 <HAL_SPI_MspInit+0x178>)
 8001e04:	0019      	movs	r1, r3
 8001e06:	0010      	movs	r0, r2
 8001e08:	f002 fac0 	bl	800438c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_SCK_RGBLED_Pin;
 8001e0c:	0021      	movs	r1, r4
 8001e0e:	187b      	adds	r3, r7, r1
 8001e10:	2280      	movs	r2, #128	; 0x80
 8001e12:	00d2      	lsls	r2, r2, #3
 8001e14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e16:	187b      	adds	r3, r7, r1
 8001e18:	2202      	movs	r2, #2
 8001e1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	187b      	adds	r3, r7, r1
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e22:	187b      	adds	r3, r7, r1
 8001e24:	2200      	movs	r2, #0
 8001e26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e28:	187b      	adds	r3, r7, r1
 8001e2a:	2205      	movs	r2, #5
 8001e2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SPI2_SCK_RGBLED_GPIO_Port, &GPIO_InitStruct);
 8001e2e:	187b      	adds	r3, r7, r1
 8001e30:	4a0c      	ldr	r2, [pc, #48]	; (8001e64 <HAL_SPI_MspInit+0x17c>)
 8001e32:	0019      	movs	r1, r3
 8001e34:	0010      	movs	r0, r2
 8001e36:	f002 faa9 	bl	800438c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	201a      	movs	r0, #26
 8001e40:	f002 f894 	bl	8003f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001e44:	201a      	movs	r0, #26
 8001e46:	f002 f8a6 	bl	8003f96 <HAL_NVIC_EnableIRQ>
}
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	b00d      	add	sp, #52	; 0x34
 8001e50:	bd90      	pop	{r4, r7, pc}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	40013000 	.word	0x40013000
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40003800 	.word	0x40003800
 8001e60:	48000800 	.word	0x48000800
 8001e64:	48000400 	.word	0x48000400

08001e68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	05db      	lsls	r3, r3, #23
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d10b      	bne.n	8001e94 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e7c:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <HAL_TIM_Base_MspInit+0x34>)
 8001e7e:	69da      	ldr	r2, [r3, #28]
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_TIM_Base_MspInit+0x34>)
 8001e82:	2101      	movs	r1, #1
 8001e84:	430a      	orrs	r2, r1
 8001e86:	61da      	str	r2, [r3, #28]
 8001e88:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <HAL_TIM_Base_MspInit+0x34>)
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	4013      	ands	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e94:	46c0      	nop			; (mov r8, r8)
 8001e96:	46bd      	mov	sp, r7
 8001e98:	b004      	add	sp, #16
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40021000 	.word	0x40021000

08001ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ea4:	e7fe      	b.n	8001ea4 <NMI_Handler+0x4>

08001ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eaa:	e7fe      	b.n	8001eaa <HardFault_Handler+0x4>

08001eac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001eb0:	46c0      	nop			; (mov r8, r8)
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ec4:	f000 fba8 	bl	8002618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  systime = HAL_GetTick();
 8001ec8:	f000 fbb8 	bl	800263c <HAL_GetTick>
 8001ecc:	0002      	movs	r2, r0
 8001ece:	4b02      	ldr	r3, [pc, #8]	; (8001ed8 <SysTick_Handler+0x18>)
 8001ed0:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000c08 	.word	0x20000c08

08001edc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001ee0:	4b03      	ldr	r3, [pc, #12]	; (8001ef0 <DMA1_Channel1_IRQHandler+0x14>)
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f002 f967 	bl	80041b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ee8:	46c0      	nop			; (mov r8, r8)
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	46c0      	nop			; (mov r8, r8)
 8001ef0:	20000a78 	.word	0x20000a78

08001ef4 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001ef8:	4b03      	ldr	r3, [pc, #12]	; (8001f08 <ADC1_COMP_IRQHandler+0x14>)
 8001efa:	0018      	movs	r0, r3
 8001efc:	f000 fd8e 	bl	8002a1c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8001f00:	46c0      	nop			; (mov r8, r8)
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	46c0      	nop			; (mov r8, r8)
 8001f08:	20000a38 	.word	0x20000a38

08001f0c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001f10:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <SPI1_IRQHandler+0x14>)
 8001f12:	0018      	movs	r0, r3
 8001f14:	f003 fad6 	bl	80054c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001f18:	46c0      	nop			; (mov r8, r8)
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	20000ae4 	.word	0x20000ae4

08001f24 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001f28:	4b03      	ldr	r3, [pc, #12]	; (8001f38 <SPI2_IRQHandler+0x14>)
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	f003 faca 	bl	80054c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001f30:	46c0      	nop			; (mov r8, r8)
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	20000b48 	.word	0x20000b48

08001f3c <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001f40:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <CEC_CAN_IRQHandler+0x14>)
 8001f42:	0018      	movs	r0, r3
 8001f44:	f001 fd6a 	bl	8003a1c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8001f48:	46c0      	nop			; (mov r8, r8)
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	20000abc 	.word	0x20000abc

08001f54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f5c:	4a14      	ldr	r2, [pc, #80]	; (8001fb0 <_sbrk+0x5c>)
 8001f5e:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <_sbrk+0x60>)
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f68:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <_sbrk+0x64>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d102      	bne.n	8001f76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f70:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <_sbrk+0x64>)
 8001f72:	4a12      	ldr	r2, [pc, #72]	; (8001fbc <_sbrk+0x68>)
 8001f74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <_sbrk+0x64>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	18d3      	adds	r3, r2, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d207      	bcs.n	8001f94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f84:	f004 f83e 	bl	8006004 <__errno>
 8001f88:	0003      	movs	r3, r0
 8001f8a:	220c      	movs	r2, #12
 8001f8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	425b      	negs	r3, r3
 8001f92:	e009      	b.n	8001fa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f94:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <_sbrk+0x64>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f9a:	4b07      	ldr	r3, [pc, #28]	; (8001fb8 <_sbrk+0x64>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	18d2      	adds	r2, r2, r3
 8001fa2:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <_sbrk+0x64>)
 8001fa4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
}
 8001fa8:	0018      	movs	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	b006      	add	sp, #24
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20004000 	.word	0x20004000
 8001fb4:	00000400 	.word	0x00000400
 8001fb8:	20000c0c 	.word	0x20000c0c
 8001fbc:	20001168 	.word	0x20001168

08001fc0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001fc4:	46c0      	nop			; (mov r8, r8)
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fcc:	480d      	ldr	r0, [pc, #52]	; (8002004 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fce:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fd0:	f7ff fff6 	bl	8001fc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fd4:	480c      	ldr	r0, [pc, #48]	; (8002008 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fd6:	490d      	ldr	r1, [pc, #52]	; (800200c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fd8:	4a0d      	ldr	r2, [pc, #52]	; (8002010 <LoopForever+0xe>)
  movs r3, #0
 8001fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fdc:	e002      	b.n	8001fe4 <LoopCopyDataInit>

08001fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fe2:	3304      	adds	r3, #4

08001fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe8:	d3f9      	bcc.n	8001fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fea:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fec:	4c0a      	ldr	r4, [pc, #40]	; (8002018 <LoopForever+0x16>)
  movs r3, #0
 8001fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff0:	e001      	b.n	8001ff6 <LoopFillZerobss>

08001ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff4:	3204      	adds	r2, #4

08001ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff8:	d3fb      	bcc.n	8001ff2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ffa:	f004 f809 	bl	8006010 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ffe:	f7ff f847 	bl	8001090 <main>

08002002 <LoopForever>:

LoopForever:
    b LoopForever
 8002002:	e7fe      	b.n	8002002 <LoopForever>
  ldr   r0, =_estack
 8002004:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800200c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002010:	08006fd0 	.word	0x08006fd0
  ldr r2, =_sbss
 8002014:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002018:	20001164 	.word	0x20001164

0800201c <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800201c:	e7fe      	b.n	800201c <DMA1_Channel2_3_IRQHandler>
	...

08002020 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8002024:	2390      	movs	r3, #144	; 0x90
 8002026:	05db      	lsls	r3, r3, #23
 8002028:	2201      	movs	r2, #1
 800202a:	2110      	movs	r1, #16
 800202c:	0018      	movs	r0, r3
 800202e:	f002 fb25 	bl	800467c <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 8002032:	4b0a      	ldr	r3, [pc, #40]	; (800205c <ssd1306_Reset+0x3c>)
 8002034:	2200      	movs	r2, #0
 8002036:	2110      	movs	r1, #16
 8002038:	0018      	movs	r0, r3
 800203a:	f002 fb1f 	bl	800467c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800203e:	200a      	movs	r0, #10
 8002040:	f000 fb06 	bl	8002650 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <ssd1306_Reset+0x3c>)
 8002046:	2201      	movs	r2, #1
 8002048:	2110      	movs	r1, #16
 800204a:	0018      	movs	r0, r3
 800204c:	f002 fb16 	bl	800467c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8002050:	200a      	movs	r0, #10
 8002052:	f000 fafd 	bl	8002650 <HAL_Delay>
}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	48000800 	.word	0x48000800

08002060 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	0002      	movs	r2, r0
 8002068:	1dfb      	adds	r3, r7, #7
 800206a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 800206c:	2390      	movs	r3, #144	; 0x90
 800206e:	05db      	lsls	r3, r3, #23
 8002070:	2200      	movs	r2, #0
 8002072:	2110      	movs	r1, #16
 8002074:	0018      	movs	r0, r3
 8002076:	f002 fb01 	bl	800467c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 800207a:	2390      	movs	r3, #144	; 0x90
 800207c:	05db      	lsls	r3, r3, #23
 800207e:	2200      	movs	r2, #0
 8002080:	2140      	movs	r1, #64	; 0x40
 8002082:	0018      	movs	r0, r3
 8002084:	f002 fafa 	bl	800467c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 8002088:	2301      	movs	r3, #1
 800208a:	425b      	negs	r3, r3
 800208c:	1df9      	adds	r1, r7, #7
 800208e:	4807      	ldr	r0, [pc, #28]	; (80020ac <ssd1306_WriteCommand+0x4c>)
 8002090:	2201      	movs	r2, #1
 8002092:	f003 f8b7 	bl	8005204 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8002096:	2390      	movs	r3, #144	; 0x90
 8002098:	05db      	lsls	r3, r3, #23
 800209a:	2201      	movs	r2, #1
 800209c:	2110      	movs	r1, #16
 800209e:	0018      	movs	r0, r3
 80020a0:	f002 faec 	bl	800467c <HAL_GPIO_WritePin>
}
 80020a4:	46c0      	nop			; (mov r8, r8)
 80020a6:	46bd      	mov	sp, r7
 80020a8:	b002      	add	sp, #8
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	20000ae4 	.word	0x20000ae4

080020b0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 80020ba:	2390      	movs	r3, #144	; 0x90
 80020bc:	05db      	lsls	r3, r3, #23
 80020be:	2200      	movs	r2, #0
 80020c0:	2110      	movs	r1, #16
 80020c2:	0018      	movs	r0, r3
 80020c4:	f002 fada 	bl	800467c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 80020c8:	2390      	movs	r3, #144	; 0x90
 80020ca:	05db      	lsls	r3, r3, #23
 80020cc:	2201      	movs	r2, #1
 80020ce:	2140      	movs	r1, #64	; 0x40
 80020d0:	0018      	movs	r0, r3
 80020d2:	f002 fad3 	bl	800467c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	b29a      	uxth	r2, r3
 80020da:	2301      	movs	r3, #1
 80020dc:	425b      	negs	r3, r3
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	4806      	ldr	r0, [pc, #24]	; (80020fc <ssd1306_WriteData+0x4c>)
 80020e2:	f003 f88f 	bl	8005204 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 80020e6:	2390      	movs	r3, #144	; 0x90
 80020e8:	05db      	lsls	r3, r3, #23
 80020ea:	2201      	movs	r2, #1
 80020ec:	2110      	movs	r1, #16
 80020ee:	0018      	movs	r0, r3
 80020f0:	f002 fac4 	bl	800467c <HAL_GPIO_WritePin>
}
 80020f4:	46c0      	nop			; (mov r8, r8)
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b002      	add	sp, #8
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000ae4 	.word	0x20000ae4

08002100 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002104:	f7ff ff8c 	bl	8002020 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002108:	2064      	movs	r0, #100	; 0x64
 800210a:	f000 faa1 	bl	8002650 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800210e:	2000      	movs	r0, #0
 8002110:	f000 fa14 	bl	800253c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002114:	2020      	movs	r0, #32
 8002116:	f7ff ffa3 	bl	8002060 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800211a:	2000      	movs	r0, #0
 800211c:	f7ff ffa0 	bl	8002060 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002120:	20b0      	movs	r0, #176	; 0xb0
 8002122:	f7ff ff9d 	bl	8002060 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 8002126:	20c0      	movs	r0, #192	; 0xc0
 8002128:	f7ff ff9a 	bl	8002060 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800212c:	2000      	movs	r0, #0
 800212e:	f7ff ff97 	bl	8002060 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002132:	2010      	movs	r0, #16
 8002134:	f7ff ff94 	bl	8002060 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002138:	2040      	movs	r0, #64	; 0x40
 800213a:	f7ff ff91 	bl	8002060 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800213e:	20ff      	movs	r0, #255	; 0xff
 8002140:	f000 f9e4 	bl	800250c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 8002144:	20a0      	movs	r0, #160	; 0xa0
 8002146:	f7ff ff8b 	bl	8002060 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800214a:	20a6      	movs	r0, #166	; 0xa6
 800214c:	f7ff ff88 	bl	8002060 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002150:	20a8      	movs	r0, #168	; 0xa8
 8002152:	f7ff ff85 	bl	8002060 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002156:	203f      	movs	r0, #63	; 0x3f
 8002158:	f7ff ff82 	bl	8002060 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800215c:	20a4      	movs	r0, #164	; 0xa4
 800215e:	f7ff ff7f 	bl	8002060 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002162:	20d3      	movs	r0, #211	; 0xd3
 8002164:	f7ff ff7c 	bl	8002060 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002168:	2000      	movs	r0, #0
 800216a:	f7ff ff79 	bl	8002060 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800216e:	20d5      	movs	r0, #213	; 0xd5
 8002170:	f7ff ff76 	bl	8002060 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set divide ratio ajusted for EA OLED 128-6
 8002174:	2040      	movs	r0, #64	; 0x40
 8002176:	f7ff ff73 	bl	8002060 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800217a:	20d9      	movs	r0, #217	; 0xd9
 800217c:	f7ff ff70 	bl	8002060 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x44); // ajusted for EA OLED 128-6
 8002180:	2044      	movs	r0, #68	; 0x44
 8002182:	f7ff ff6d 	bl	8002060 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002186:	20da      	movs	r0, #218	; 0xda
 8002188:	f7ff ff6a 	bl	8002060 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800218c:	2012      	movs	r0, #18
 800218e:	f7ff ff67 	bl	8002060 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002192:	20db      	movs	r0, #219	; 0xdb
 8002194:	f7ff ff64 	bl	8002060 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002198:	2020      	movs	r0, #32
 800219a:	f7ff ff61 	bl	8002060 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800219e:	208d      	movs	r0, #141	; 0x8d
 80021a0:	f7ff ff5e 	bl	8002060 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80021a4:	2014      	movs	r0, #20
 80021a6:	f7ff ff5b 	bl	8002060 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80021aa:	2001      	movs	r0, #1
 80021ac:	f000 f9c6 	bl	800253c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80021b0:	2000      	movs	r0, #0
 80021b2:	f000 f811 	bl	80021d8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80021b6:	f000 f829 	bl	800220c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80021ba:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <ssd1306_Init+0xd4>)
 80021bc:	2200      	movs	r2, #0
 80021be:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80021c0:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <ssd1306_Init+0xd4>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80021c6:	4b03      	ldr	r3, [pc, #12]	; (80021d4 <ssd1306_Init+0xd4>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	711a      	strb	r2, [r3, #4]
}
 80021cc:	46c0      	nop			; (mov r8, r8)
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	20001010 	.word	0x20001010

080021d8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	0002      	movs	r2, r0
 80021e0:	1dfb      	adds	r3, r7, #7
 80021e2:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80021e4:	1dfb      	adds	r3, r7, #7
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <ssd1306_Fill+0x18>
 80021ec:	2300      	movs	r3, #0
 80021ee:	e000      	b.n	80021f2 <ssd1306_Fill+0x1a>
 80021f0:	23ff      	movs	r3, #255	; 0xff
 80021f2:	2280      	movs	r2, #128	; 0x80
 80021f4:	00d2      	lsls	r2, r2, #3
 80021f6:	4804      	ldr	r0, [pc, #16]	; (8002208 <ssd1306_Fill+0x30>)
 80021f8:	0019      	movs	r1, r3
 80021fa:	f003 fefb 	bl	8005ff4 <memset>
}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	46bd      	mov	sp, r7
 8002202:	b002      	add	sp, #8
 8002204:	bd80      	pop	{r7, pc}
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	20000c10 	.word	0x20000c10

0800220c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002212:	1dfb      	adds	r3, r7, #7
 8002214:	2200      	movs	r2, #0
 8002216:	701a      	strb	r2, [r3, #0]
 8002218:	e01a      	b.n	8002250 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800221a:	1dfb      	adds	r3, r7, #7
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	3b50      	subs	r3, #80	; 0x50
 8002220:	b2db      	uxtb	r3, r3
 8002222:	0018      	movs	r0, r3
 8002224:	f7ff ff1c 	bl	8002060 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002228:	2000      	movs	r0, #0
 800222a:	f7ff ff19 	bl	8002060 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800222e:	2010      	movs	r0, #16
 8002230:	f7ff ff16 	bl	8002060 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002234:	1dfb      	adds	r3, r7, #7
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	01da      	lsls	r2, r3, #7
 800223a:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <ssd1306_UpdateScreen+0x58>)
 800223c:	18d3      	adds	r3, r2, r3
 800223e:	2180      	movs	r1, #128	; 0x80
 8002240:	0018      	movs	r0, r3
 8002242:	f7ff ff35 	bl	80020b0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002246:	1dfb      	adds	r3, r7, #7
 8002248:	781a      	ldrb	r2, [r3, #0]
 800224a:	1dfb      	adds	r3, r7, #7
 800224c:	3201      	adds	r2, #1
 800224e:	701a      	strb	r2, [r3, #0]
 8002250:	1dfb      	adds	r3, r7, #7
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b07      	cmp	r3, #7
 8002256:	d9e0      	bls.n	800221a <ssd1306_UpdateScreen+0xe>
    }
}
 8002258:	46c0      	nop			; (mov r8, r8)
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	46bd      	mov	sp, r7
 800225e:	b002      	add	sp, #8
 8002260:	bd80      	pop	{r7, pc}
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	20000c10 	.word	0x20000c10

08002268 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002268:	b590      	push	{r4, r7, lr}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	0004      	movs	r4, r0
 8002270:	0008      	movs	r0, r1
 8002272:	0011      	movs	r1, r2
 8002274:	1dfb      	adds	r3, r7, #7
 8002276:	1c22      	adds	r2, r4, #0
 8002278:	701a      	strb	r2, [r3, #0]
 800227a:	1dbb      	adds	r3, r7, #6
 800227c:	1c02      	adds	r2, r0, #0
 800227e:	701a      	strb	r2, [r3, #0]
 8002280:	1d7b      	adds	r3, r7, #5
 8002282:	1c0a      	adds	r2, r1, #0
 8002284:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002286:	1dfb      	adds	r3, r7, #7
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	b25b      	sxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	db47      	blt.n	8002320 <ssd1306_DrawPixel+0xb8>
 8002290:	1dbb      	adds	r3, r7, #6
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b3f      	cmp	r3, #63	; 0x3f
 8002296:	d843      	bhi.n	8002320 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002298:	1d7b      	adds	r3, r7, #5
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d11e      	bne.n	80022de <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80022a0:	1dfb      	adds	r3, r7, #7
 80022a2:	781a      	ldrb	r2, [r3, #0]
 80022a4:	1dbb      	adds	r3, r7, #6
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	08db      	lsrs	r3, r3, #3
 80022aa:	b2d8      	uxtb	r0, r3
 80022ac:	0003      	movs	r3, r0
 80022ae:	01db      	lsls	r3, r3, #7
 80022b0:	18d3      	adds	r3, r2, r3
 80022b2:	4a1d      	ldr	r2, [pc, #116]	; (8002328 <ssd1306_DrawPixel+0xc0>)
 80022b4:	5cd3      	ldrb	r3, [r2, r3]
 80022b6:	b25a      	sxtb	r2, r3
 80022b8:	1dbb      	adds	r3, r7, #6
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2107      	movs	r1, #7
 80022be:	400b      	ands	r3, r1
 80022c0:	2101      	movs	r1, #1
 80022c2:	4099      	lsls	r1, r3
 80022c4:	000b      	movs	r3, r1
 80022c6:	b25b      	sxtb	r3, r3
 80022c8:	4313      	orrs	r3, r2
 80022ca:	b259      	sxtb	r1, r3
 80022cc:	1dfb      	adds	r3, r7, #7
 80022ce:	781a      	ldrb	r2, [r3, #0]
 80022d0:	0003      	movs	r3, r0
 80022d2:	01db      	lsls	r3, r3, #7
 80022d4:	18d3      	adds	r3, r2, r3
 80022d6:	b2c9      	uxtb	r1, r1
 80022d8:	4a13      	ldr	r2, [pc, #76]	; (8002328 <ssd1306_DrawPixel+0xc0>)
 80022da:	54d1      	strb	r1, [r2, r3]
 80022dc:	e021      	b.n	8002322 <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80022de:	1dfb      	adds	r3, r7, #7
 80022e0:	781a      	ldrb	r2, [r3, #0]
 80022e2:	1dbb      	adds	r3, r7, #6
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	08db      	lsrs	r3, r3, #3
 80022e8:	b2d8      	uxtb	r0, r3
 80022ea:	0003      	movs	r3, r0
 80022ec:	01db      	lsls	r3, r3, #7
 80022ee:	18d3      	adds	r3, r2, r3
 80022f0:	4a0d      	ldr	r2, [pc, #52]	; (8002328 <ssd1306_DrawPixel+0xc0>)
 80022f2:	5cd3      	ldrb	r3, [r2, r3]
 80022f4:	b25b      	sxtb	r3, r3
 80022f6:	1dba      	adds	r2, r7, #6
 80022f8:	7812      	ldrb	r2, [r2, #0]
 80022fa:	2107      	movs	r1, #7
 80022fc:	400a      	ands	r2, r1
 80022fe:	2101      	movs	r1, #1
 8002300:	4091      	lsls	r1, r2
 8002302:	000a      	movs	r2, r1
 8002304:	b252      	sxtb	r2, r2
 8002306:	43d2      	mvns	r2, r2
 8002308:	b252      	sxtb	r2, r2
 800230a:	4013      	ands	r3, r2
 800230c:	b259      	sxtb	r1, r3
 800230e:	1dfb      	adds	r3, r7, #7
 8002310:	781a      	ldrb	r2, [r3, #0]
 8002312:	0003      	movs	r3, r0
 8002314:	01db      	lsls	r3, r3, #7
 8002316:	18d3      	adds	r3, r2, r3
 8002318:	b2c9      	uxtb	r1, r1
 800231a:	4a03      	ldr	r2, [pc, #12]	; (8002328 <ssd1306_DrawPixel+0xc0>)
 800231c:	54d1      	strb	r1, [r2, r3]
 800231e:	e000      	b.n	8002322 <ssd1306_DrawPixel+0xba>
        return;
 8002320:	46c0      	nop			; (mov r8, r8)
    }
}
 8002322:	46bd      	mov	sp, r7
 8002324:	b003      	add	sp, #12
 8002326:	bd90      	pop	{r4, r7, pc}
 8002328:	20000c10 	.word	0x20000c10

0800232c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800232c:	b590      	push	{r4, r7, lr}
 800232e:	b089      	sub	sp, #36	; 0x24
 8002330:	af00      	add	r7, sp, #0
 8002332:	0004      	movs	r4, r0
 8002334:	0038      	movs	r0, r7
 8002336:	6001      	str	r1, [r0, #0]
 8002338:	6042      	str	r2, [r0, #4]
 800233a:	6083      	str	r3, [r0, #8]
 800233c:	210f      	movs	r1, #15
 800233e:	187b      	adds	r3, r7, r1
 8002340:	1c22      	adds	r2, r4, #0
 8002342:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002344:	000a      	movs	r2, r1
 8002346:	18bb      	adds	r3, r7, r2
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b1f      	cmp	r3, #31
 800234c:	d903      	bls.n	8002356 <ssd1306_WriteChar+0x2a>
 800234e:	18bb      	adds	r3, r7, r2
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b7e      	cmp	r3, #126	; 0x7e
 8002354:	d901      	bls.n	800235a <ssd1306_WriteChar+0x2e>
        return 0;
 8002356:	2300      	movs	r3, #0
 8002358:	e08b      	b.n	8002472 <ssd1306_WriteChar+0x146>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 800235a:	003b      	movs	r3, r7
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d008      	beq.n	8002374 <ssd1306_WriteChar+0x48>
 8002362:	003b      	movs	r3, r7
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	230f      	movs	r3, #15
 8002368:	18fb      	adds	r3, r7, r3
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	3b20      	subs	r3, #32
 800236e:	18d3      	adds	r3, r2, r3
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	e001      	b.n	8002378 <ssd1306_WriteChar+0x4c>
 8002374:	003b      	movs	r3, r7
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2117      	movs	r1, #23
 800237a:	187a      	adds	r2, r7, r1
 800237c:	7013      	strb	r3, [r2, #0]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 800237e:	4b3f      	ldr	r3, [pc, #252]	; (800247c <ssd1306_WriteChar+0x150>)
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	001a      	movs	r2, r3
 8002384:	187b      	adds	r3, r7, r1
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	18d3      	adds	r3, r2, r3
 800238a:	2b80      	cmp	r3, #128	; 0x80
 800238c:	dc07      	bgt.n	800239e <ssd1306_WriteChar+0x72>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800238e:	4b3b      	ldr	r3, [pc, #236]	; (800247c <ssd1306_WriteChar+0x150>)
 8002390:	885b      	ldrh	r3, [r3, #2]
 8002392:	001a      	movs	r2, r3
 8002394:	003b      	movs	r3, r7
 8002396:	785b      	ldrb	r3, [r3, #1]
 8002398:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 800239a:	2b40      	cmp	r3, #64	; 0x40
 800239c:	dd01      	ble.n	80023a2 <ssd1306_WriteChar+0x76>
    {
        // Not enough space on current line
        return 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	e067      	b.n	8002472 <ssd1306_WriteChar+0x146>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
 80023a6:	e051      	b.n	800244c <ssd1306_WriteChar+0x120>
        b = Font.data[(ch - 32) * Font.height + i];
 80023a8:	003b      	movs	r3, r7
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	230f      	movs	r3, #15
 80023ae:	18fb      	adds	r3, r7, r3
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	3b20      	subs	r3, #32
 80023b4:	0039      	movs	r1, r7
 80023b6:	7849      	ldrb	r1, [r1, #1]
 80023b8:	434b      	muls	r3, r1
 80023ba:	0019      	movs	r1, r3
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	18cb      	adds	r3, r1, r3
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	18d3      	adds	r3, r2, r3
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 80023c8:	2300      	movs	r3, #0
 80023ca:	61bb      	str	r3, [r7, #24]
 80023cc:	e035      	b.n	800243a <ssd1306_WriteChar+0x10e>
            if((b << j) & 0x8000)  {
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	409a      	lsls	r2, r3
 80023d4:	2380      	movs	r3, #128	; 0x80
 80023d6:	021b      	lsls	r3, r3, #8
 80023d8:	4013      	ands	r3, r2
 80023da:	d014      	beq.n	8002406 <ssd1306_WriteChar+0xda>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80023dc:	4b27      	ldr	r3, [pc, #156]	; (800247c <ssd1306_WriteChar+0x150>)
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	18d3      	adds	r3, r2, r3
 80023e8:	b2d8      	uxtb	r0, r3
 80023ea:	4b24      	ldr	r3, [pc, #144]	; (800247c <ssd1306_WriteChar+0x150>)
 80023ec:	885b      	ldrh	r3, [r3, #2]
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	18d3      	adds	r3, r2, r3
 80023f6:	b2d9      	uxtb	r1, r3
 80023f8:	2330      	movs	r3, #48	; 0x30
 80023fa:	18fb      	adds	r3, r7, r3
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	001a      	movs	r2, r3
 8002400:	f7ff ff32 	bl	8002268 <ssd1306_DrawPixel>
 8002404:	e016      	b.n	8002434 <ssd1306_WriteChar+0x108>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002406:	4b1d      	ldr	r3, [pc, #116]	; (800247c <ssd1306_WriteChar+0x150>)
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	b2da      	uxtb	r2, r3
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	b2db      	uxtb	r3, r3
 8002410:	18d3      	adds	r3, r2, r3
 8002412:	b2d8      	uxtb	r0, r3
 8002414:	4b19      	ldr	r3, [pc, #100]	; (800247c <ssd1306_WriteChar+0x150>)
 8002416:	885b      	ldrh	r3, [r3, #2]
 8002418:	b2da      	uxtb	r2, r3
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	18d3      	adds	r3, r2, r3
 8002420:	b2d9      	uxtb	r1, r3
 8002422:	2330      	movs	r3, #48	; 0x30
 8002424:	18fb      	adds	r3, r7, r3
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	425a      	negs	r2, r3
 800242a:	4153      	adcs	r3, r2
 800242c:	b2db      	uxtb	r3, r3
 800242e:	001a      	movs	r2, r3
 8002430:	f7ff ff1a 	bl	8002268 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	3301      	adds	r3, #1
 8002438:	61bb      	str	r3, [r7, #24]
 800243a:	2317      	movs	r3, #23
 800243c:	18fb      	adds	r3, r7, r3
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	429a      	cmp	r2, r3
 8002444:	d3c3      	bcc.n	80023ce <ssd1306_WriteChar+0xa2>
    for(i = 0; i < Font.height; i++) {
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3301      	adds	r3, #1
 800244a:	61fb      	str	r3, [r7, #28]
 800244c:	003b      	movs	r3, r7
 800244e:	785b      	ldrb	r3, [r3, #1]
 8002450:	001a      	movs	r2, r3
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	4293      	cmp	r3, r2
 8002456:	d3a7      	bcc.n	80023a8 <ssd1306_WriteChar+0x7c>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8002458:	4b08      	ldr	r3, [pc, #32]	; (800247c <ssd1306_WriteChar+0x150>)
 800245a:	881a      	ldrh	r2, [r3, #0]
 800245c:	2317      	movs	r3, #23
 800245e:	18fb      	adds	r3, r7, r3
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	b29b      	uxth	r3, r3
 8002464:	18d3      	adds	r3, r2, r3
 8002466:	b29a      	uxth	r2, r3
 8002468:	4b04      	ldr	r3, [pc, #16]	; (800247c <ssd1306_WriteChar+0x150>)
 800246a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800246c:	230f      	movs	r3, #15
 800246e:	18fb      	adds	r3, r7, r3
 8002470:	781b      	ldrb	r3, [r3, #0]
}
 8002472:	0018      	movs	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	b009      	add	sp, #36	; 0x24
 8002478:	bd90      	pop	{r4, r7, pc}
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	20001010 	.word	0x20001010

08002480 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af02      	add	r7, sp, #8
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	0038      	movs	r0, r7
 800248a:	6001      	str	r1, [r0, #0]
 800248c:	6042      	str	r2, [r0, #4]
 800248e:	6083      	str	r3, [r0, #8]
    while (*str) {
 8002490:	e017      	b.n	80024c2 <ssd1306_WriteString+0x42>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	7818      	ldrb	r0, [r3, #0]
 8002496:	003b      	movs	r3, r7
 8002498:	2218      	movs	r2, #24
 800249a:	18ba      	adds	r2, r7, r2
 800249c:	7812      	ldrb	r2, [r2, #0]
 800249e:	9200      	str	r2, [sp, #0]
 80024a0:	6819      	ldr	r1, [r3, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f7ff ff41 	bl	800232c <ssd1306_WriteChar>
 80024aa:	0003      	movs	r3, r0
 80024ac:	001a      	movs	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d002      	beq.n	80024bc <ssd1306_WriteString+0x3c>
            // Char could not be written
            return *str;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	e008      	b.n	80024ce <ssd1306_WriteString+0x4e>
        }
        str++;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	3301      	adds	r3, #1
 80024c0:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1e3      	bne.n	8002492 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	781b      	ldrb	r3, [r3, #0]
}
 80024ce:	0018      	movs	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	b004      	add	sp, #16
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	0002      	movs	r2, r0
 80024e0:	1dfb      	adds	r3, r7, #7
 80024e2:	701a      	strb	r2, [r3, #0]
 80024e4:	1dbb      	adds	r3, r7, #6
 80024e6:	1c0a      	adds	r2, r1, #0
 80024e8:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 80024ea:	1dfb      	adds	r3, r7, #7
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	4b05      	ldr	r3, [pc, #20]	; (8002508 <ssd1306_SetCursor+0x30>)
 80024f2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80024f4:	1dbb      	adds	r3, r7, #6
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	4b03      	ldr	r3, [pc, #12]	; (8002508 <ssd1306_SetCursor+0x30>)
 80024fc:	805a      	strh	r2, [r3, #2]
}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	46bd      	mov	sp, r7
 8002502:	b002      	add	sp, #8
 8002504:	bd80      	pop	{r7, pc}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	20001010 	.word	0x20001010

0800250c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	0002      	movs	r2, r0
 8002514:	1dfb      	adds	r3, r7, #7
 8002516:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002518:	210f      	movs	r1, #15
 800251a:	187b      	adds	r3, r7, r1
 800251c:	2281      	movs	r2, #129	; 0x81
 800251e:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002520:	187b      	adds	r3, r7, r1
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	0018      	movs	r0, r3
 8002526:	f7ff fd9b 	bl	8002060 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800252a:	1dfb      	adds	r3, r7, #7
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	0018      	movs	r0, r3
 8002530:	f7ff fd96 	bl	8002060 <ssd1306_WriteCommand>
}
 8002534:	46c0      	nop			; (mov r8, r8)
 8002536:	46bd      	mov	sp, r7
 8002538:	b004      	add	sp, #16
 800253a:	bd80      	pop	{r7, pc}

0800253c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	0002      	movs	r2, r0
 8002544:	1dfb      	adds	r3, r7, #7
 8002546:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8002548:	1dfb      	adds	r3, r7, #7
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d007      	beq.n	8002560 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8002550:	230f      	movs	r3, #15
 8002552:	18fb      	adds	r3, r7, r3
 8002554:	22af      	movs	r2, #175	; 0xaf
 8002556:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8002558:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <ssd1306_SetDisplayOn+0x48>)
 800255a:	2201      	movs	r2, #1
 800255c:	715a      	strb	r2, [r3, #5]
 800255e:	e006      	b.n	800256e <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8002560:	230f      	movs	r3, #15
 8002562:	18fb      	adds	r3, r7, r3
 8002564:	22ae      	movs	r2, #174	; 0xae
 8002566:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <ssd1306_SetDisplayOn+0x48>)
 800256a:	2200      	movs	r2, #0
 800256c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800256e:	230f      	movs	r3, #15
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	0018      	movs	r0, r3
 8002576:	f7ff fd73 	bl	8002060 <ssd1306_WriteCommand>
}
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	46bd      	mov	sp, r7
 800257e:	b004      	add	sp, #16
 8002580:	bd80      	pop	{r7, pc}
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	20001010 	.word	0x20001010

08002588 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800258c:	4b07      	ldr	r3, [pc, #28]	; (80025ac <HAL_Init+0x24>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_Init+0x24>)
 8002592:	2110      	movs	r1, #16
 8002594:	430a      	orrs	r2, r1
 8002596:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002598:	2003      	movs	r0, #3
 800259a:	f000 f809 	bl	80025b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800259e:	f7ff faaf 	bl	8001b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	0018      	movs	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	40022000 	.word	0x40022000

080025b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025b0:	b590      	push	{r4, r7, lr}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025b8:	4b14      	ldr	r3, [pc, #80]	; (800260c <HAL_InitTick+0x5c>)
 80025ba:	681c      	ldr	r4, [r3, #0]
 80025bc:	4b14      	ldr	r3, [pc, #80]	; (8002610 <HAL_InitTick+0x60>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	0019      	movs	r1, r3
 80025c2:	23fa      	movs	r3, #250	; 0xfa
 80025c4:	0098      	lsls	r0, r3, #2
 80025c6:	f7fd fda9 	bl	800011c <__udivsi3>
 80025ca:	0003      	movs	r3, r0
 80025cc:	0019      	movs	r1, r3
 80025ce:	0020      	movs	r0, r4
 80025d0:	f7fd fda4 	bl	800011c <__udivsi3>
 80025d4:	0003      	movs	r3, r0
 80025d6:	0018      	movs	r0, r3
 80025d8:	f001 fced 	bl	8003fb6 <HAL_SYSTICK_Config>
 80025dc:	1e03      	subs	r3, r0, #0
 80025de:	d001      	beq.n	80025e4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e00f      	b.n	8002604 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d80b      	bhi.n	8002602 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	2301      	movs	r3, #1
 80025ee:	425b      	negs	r3, r3
 80025f0:	2200      	movs	r2, #0
 80025f2:	0018      	movs	r0, r3
 80025f4:	f001 fcba 	bl	8003f6c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025f8:	4b06      	ldr	r3, [pc, #24]	; (8002614 <HAL_InitTick+0x64>)
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	e000      	b.n	8002604 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
}
 8002604:	0018      	movs	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	b003      	add	sp, #12
 800260a:	bd90      	pop	{r4, r7, pc}
 800260c:	20000004 	.word	0x20000004
 8002610:	2000000c 	.word	0x2000000c
 8002614:	20000008 	.word	0x20000008

08002618 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800261c:	4b05      	ldr	r3, [pc, #20]	; (8002634 <HAL_IncTick+0x1c>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	001a      	movs	r2, r3
 8002622:	4b05      	ldr	r3, [pc, #20]	; (8002638 <HAL_IncTick+0x20>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	18d2      	adds	r2, r2, r3
 8002628:	4b03      	ldr	r3, [pc, #12]	; (8002638 <HAL_IncTick+0x20>)
 800262a:	601a      	str	r2, [r3, #0]
}
 800262c:	46c0      	nop			; (mov r8, r8)
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	2000000c 	.word	0x2000000c
 8002638:	20001018 	.word	0x20001018

0800263c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  return uwTick;
 8002640:	4b02      	ldr	r3, [pc, #8]	; (800264c <HAL_GetTick+0x10>)
 8002642:	681b      	ldr	r3, [r3, #0]
}
 8002644:	0018      	movs	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	20001018 	.word	0x20001018

08002650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002658:	f7ff fff0 	bl	800263c <HAL_GetTick>
 800265c:	0003      	movs	r3, r0
 800265e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	3301      	adds	r3, #1
 8002668:	d005      	beq.n	8002676 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800266a:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <HAL_Delay+0x44>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	001a      	movs	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	189b      	adds	r3, r3, r2
 8002674:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002676:	46c0      	nop			; (mov r8, r8)
 8002678:	f7ff ffe0 	bl	800263c <HAL_GetTick>
 800267c:	0002      	movs	r2, r0
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	429a      	cmp	r2, r3
 8002686:	d8f7      	bhi.n	8002678 <HAL_Delay+0x28>
  {
  }
}
 8002688:	46c0      	nop			; (mov r8, r8)
 800268a:	46c0      	nop			; (mov r8, r8)
 800268c:	46bd      	mov	sp, r7
 800268e:	b004      	add	sp, #16
 8002690:	bd80      	pop	{r7, pc}
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	2000000c 	.word	0x2000000c

08002698 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026a0:	230f      	movs	r3, #15
 80026a2:	18fb      	adds	r3, r7, r3
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e125      	b.n	8002902 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10a      	bne.n	80026d4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2234      	movs	r2, #52	; 0x34
 80026c8:	2100      	movs	r1, #0
 80026ca:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	0018      	movs	r0, r3
 80026d0:	f7ff fa3a 	bl	8001b48 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d8:	2210      	movs	r2, #16
 80026da:	4013      	ands	r3, r2
 80026dc:	d000      	beq.n	80026e0 <HAL_ADC_Init+0x48>
 80026de:	e103      	b.n	80028e8 <HAL_ADC_Init+0x250>
 80026e0:	230f      	movs	r3, #15
 80026e2:	18fb      	adds	r3, r7, r3
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d000      	beq.n	80026ec <HAL_ADC_Init+0x54>
 80026ea:	e0fd      	b.n	80028e8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	2204      	movs	r2, #4
 80026f4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80026f6:	d000      	beq.n	80026fa <HAL_ADC_Init+0x62>
 80026f8:	e0f6      	b.n	80028e8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fe:	4a83      	ldr	r2, [pc, #524]	; (800290c <HAL_ADC_Init+0x274>)
 8002700:	4013      	ands	r3, r2
 8002702:	2202      	movs	r2, #2
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	2203      	movs	r2, #3
 8002712:	4013      	ands	r3, r2
 8002714:	2b01      	cmp	r3, #1
 8002716:	d112      	bne.n	800273e <HAL_ADC_Init+0xa6>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2201      	movs	r2, #1
 8002720:	4013      	ands	r3, r2
 8002722:	2b01      	cmp	r3, #1
 8002724:	d009      	beq.n	800273a <HAL_ADC_Init+0xa2>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	2380      	movs	r3, #128	; 0x80
 800272e:	021b      	lsls	r3, r3, #8
 8002730:	401a      	ands	r2, r3
 8002732:	2380      	movs	r3, #128	; 0x80
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	429a      	cmp	r2, r3
 8002738:	d101      	bne.n	800273e <HAL_ADC_Init+0xa6>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <HAL_ADC_Init+0xa8>
 800273e:	2300      	movs	r3, #0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d116      	bne.n	8002772 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	2218      	movs	r2, #24
 800274c:	4393      	bics	r3, r2
 800274e:	0019      	movs	r1, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	0899      	lsrs	r1, r3, #2
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4964      	ldr	r1, [pc, #400]	; (8002910 <HAL_ADC_Init+0x278>)
 800277e:	400a      	ands	r2, r1
 8002780:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	7e1b      	ldrb	r3, [r3, #24]
 8002786:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	7e5b      	ldrb	r3, [r3, #25]
 800278c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800278e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	7e9b      	ldrb	r3, [r3, #26]
 8002794:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002796:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279c:	2b01      	cmp	r3, #1
 800279e:	d002      	beq.n	80027a6 <HAL_ADC_Init+0x10e>
 80027a0:	2380      	movs	r3, #128	; 0x80
 80027a2:	015b      	lsls	r3, r3, #5
 80027a4:	e000      	b.n	80027a8 <HAL_ADC_Init+0x110>
 80027a6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80027a8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80027ae:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d101      	bne.n	80027bc <HAL_ADC_Init+0x124>
 80027b8:	2304      	movs	r3, #4
 80027ba:	e000      	b.n	80027be <HAL_ADC_Init+0x126>
 80027bc:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80027be:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2124      	movs	r1, #36	; 0x24
 80027c4:	5c5b      	ldrb	r3, [r3, r1]
 80027c6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80027c8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	7edb      	ldrb	r3, [r3, #27]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d115      	bne.n	8002804 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	7e9b      	ldrb	r3, [r3, #26]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d105      	bne.n	80027ec <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2280      	movs	r2, #128	; 0x80
 80027e4:	0252      	lsls	r2, r2, #9
 80027e6:	4313      	orrs	r3, r2
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	e00b      	b.n	8002804 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f0:	2220      	movs	r2, #32
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fc:	2201      	movs	r2, #1
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69da      	ldr	r2, [r3, #28]
 8002808:	23c2      	movs	r3, #194	; 0xc2
 800280a:	33ff      	adds	r3, #255	; 0xff
 800280c:	429a      	cmp	r2, r3
 800280e:	d007      	beq.n	8002820 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002818:	4313      	orrs	r3, r2
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	4313      	orrs	r3, r2
 800281e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68d9      	ldr	r1, [r3, #12]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	430a      	orrs	r2, r1
 800282e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002834:	2380      	movs	r3, #128	; 0x80
 8002836:	055b      	lsls	r3, r3, #21
 8002838:	429a      	cmp	r2, r3
 800283a:	d01b      	beq.n	8002874 <HAL_ADC_Init+0x1dc>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002840:	2b01      	cmp	r3, #1
 8002842:	d017      	beq.n	8002874 <HAL_ADC_Init+0x1dc>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	2b02      	cmp	r3, #2
 800284a:	d013      	beq.n	8002874 <HAL_ADC_Init+0x1dc>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002850:	2b03      	cmp	r3, #3
 8002852:	d00f      	beq.n	8002874 <HAL_ADC_Init+0x1dc>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002858:	2b04      	cmp	r3, #4
 800285a:	d00b      	beq.n	8002874 <HAL_ADC_Init+0x1dc>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002860:	2b05      	cmp	r3, #5
 8002862:	d007      	beq.n	8002874 <HAL_ADC_Init+0x1dc>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002868:	2b06      	cmp	r3, #6
 800286a:	d003      	beq.n	8002874 <HAL_ADC_Init+0x1dc>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002870:	2b07      	cmp	r3, #7
 8002872:	d112      	bne.n	800289a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695a      	ldr	r2, [r3, #20]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2107      	movs	r1, #7
 8002880:	438a      	bics	r2, r1
 8002882:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6959      	ldr	r1, [r3, #20]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288e:	2207      	movs	r2, #7
 8002890:	401a      	ands	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	4a1c      	ldr	r2, [pc, #112]	; (8002914 <HAL_ADC_Init+0x27c>)
 80028a2:	4013      	ands	r3, r2
 80028a4:	68ba      	ldr	r2, [r7, #8]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d10b      	bne.n	80028c2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b4:	2203      	movs	r2, #3
 80028b6:	4393      	bics	r3, r2
 80028b8:	2201      	movs	r2, #1
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80028c0:	e01c      	b.n	80028fc <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c6:	2212      	movs	r2, #18
 80028c8:	4393      	bics	r3, r2
 80028ca:	2210      	movs	r2, #16
 80028cc:	431a      	orrs	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d6:	2201      	movs	r2, #1
 80028d8:	431a      	orrs	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80028de:	230f      	movs	r3, #15
 80028e0:	18fb      	adds	r3, r7, r3
 80028e2:	2201      	movs	r2, #1
 80028e4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80028e6:	e009      	b.n	80028fc <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ec:	2210      	movs	r2, #16
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80028f4:	230f      	movs	r3, #15
 80028f6:	18fb      	adds	r3, r7, r3
 80028f8:	2201      	movs	r2, #1
 80028fa:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80028fc:	230f      	movs	r3, #15
 80028fe:	18fb      	adds	r3, r7, r3
 8002900:	781b      	ldrb	r3, [r3, #0]
}
 8002902:	0018      	movs	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	b004      	add	sp, #16
 8002908:	bd80      	pop	{r7, pc}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	fffffefd 	.word	0xfffffefd
 8002910:	fffe0219 	.word	0xfffe0219
 8002914:	833fffe7 	.word	0x833fffe7

08002918 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002918:	b590      	push	{r4, r7, lr}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002924:	2317      	movs	r3, #23
 8002926:	18fb      	adds	r3, r7, r3
 8002928:	2200      	movs	r2, #0
 800292a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2204      	movs	r2, #4
 8002934:	4013      	ands	r3, r2
 8002936:	d15e      	bne.n	80029f6 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2234      	movs	r2, #52	; 0x34
 800293c:	5c9b      	ldrb	r3, [r3, r2]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d101      	bne.n	8002946 <HAL_ADC_Start_DMA+0x2e>
 8002942:	2302      	movs	r3, #2
 8002944:	e05e      	b.n	8002a04 <HAL_ADC_Start_DMA+0xec>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2234      	movs	r2, #52	; 0x34
 800294a:	2101      	movs	r1, #1
 800294c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	7e5b      	ldrb	r3, [r3, #25]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d007      	beq.n	8002966 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002956:	2317      	movs	r3, #23
 8002958:	18fc      	adds	r4, r7, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	0018      	movs	r0, r3
 800295e:	f000 fa29 	bl	8002db4 <ADC_Enable>
 8002962:	0003      	movs	r3, r0
 8002964:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002966:	2317      	movs	r3, #23
 8002968:	18fb      	adds	r3, r7, r3
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d146      	bne.n	80029fe <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002974:	4a25      	ldr	r2, [pc, #148]	; (8002a0c <HAL_ADC_Start_DMA+0xf4>)
 8002976:	4013      	ands	r3, r2
 8002978:	2280      	movs	r2, #128	; 0x80
 800297a:	0052      	lsls	r2, r2, #1
 800297c:	431a      	orrs	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2234      	movs	r2, #52	; 0x34
 800298c:	2100      	movs	r1, #0
 800298e:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002994:	4a1e      	ldr	r2, [pc, #120]	; (8002a10 <HAL_ADC_Start_DMA+0xf8>)
 8002996:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299c:	4a1d      	ldr	r2, [pc, #116]	; (8002a14 <HAL_ADC_Start_DMA+0xfc>)
 800299e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	4a1c      	ldr	r2, [pc, #112]	; (8002a18 <HAL_ADC_Start_DMA+0x100>)
 80029a6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	221c      	movs	r2, #28
 80029ae:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2110      	movs	r1, #16
 80029bc:	430a      	orrs	r2, r1
 80029be:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2101      	movs	r1, #1
 80029cc:	430a      	orrs	r2, r1
 80029ce:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	3340      	adds	r3, #64	; 0x40
 80029da:	0019      	movs	r1, r3
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f001 fb3e 	bl	8004060 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2104      	movs	r1, #4
 80029f0:	430a      	orrs	r2, r1
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	e003      	b.n	80029fe <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029f6:	2317      	movs	r3, #23
 80029f8:	18fb      	adds	r3, r7, r3
 80029fa:	2202      	movs	r2, #2
 80029fc:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80029fe:	2317      	movs	r3, #23
 8002a00:	18fb      	adds	r3, r7, r3
 8002a02:	781b      	ldrb	r3, [r3, #0]
}
 8002a04:	0018      	movs	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	b007      	add	sp, #28
 8002a0a:	bd90      	pop	{r4, r7, pc}
 8002a0c:	fffff0fe 	.word	0xfffff0fe
 8002a10:	08002ebd 	.word	0x08002ebd
 8002a14:	08002f71 	.word	0x08002f71
 8002a18:	08002f8f 	.word	0x08002f8f

08002a1c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2204      	movs	r2, #4
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d003      	beq.n	8002a44 <HAL_ADC_IRQHandler+0x28>
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2204      	movs	r2, #4
 8002a40:	4013      	ands	r3, r2
 8002a42:	d107      	bne.n	8002a54 <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2208      	movs	r2, #8
 8002a48:	4013      	ands	r3, r2
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a4a:	d049      	beq.n	8002ae0 <HAL_ADC_IRQHandler+0xc4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2208      	movs	r2, #8
 8002a50:	4013      	ands	r3, r2
 8002a52:	d045      	beq.n	8002ae0 <HAL_ADC_IRQHandler+0xc4>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a58:	2210      	movs	r2, #16
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d106      	bne.n	8002a6c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a62:	2280      	movs	r2, #128	; 0x80
 8002a64:	0092      	lsls	r2, r2, #2
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68da      	ldr	r2, [r3, #12]
 8002a72:	23c0      	movs	r3, #192	; 0xc0
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	4013      	ands	r3, r2
 8002a78:	d12a      	bne.n	8002ad0 <HAL_ADC_IRQHandler+0xb4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d126      	bne.n	8002ad0 <HAL_ADC_IRQHandler+0xb4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2208      	movs	r2, #8
 8002a86:	4013      	ands	r3, r2
 8002a88:	d022      	beq.n	8002ad0 <HAL_ADC_IRQHandler+0xb4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2204      	movs	r2, #4
 8002a92:	4013      	ands	r3, r2
 8002a94:	d110      	bne.n	8002ab8 <HAL_ADC_IRQHandler+0x9c>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	210c      	movs	r1, #12
 8002aa2:	438a      	bics	r2, r1
 8002aa4:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aaa:	4a2d      	ldr	r2, [pc, #180]	; (8002b60 <HAL_ADC_IRQHandler+0x144>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	2201      	movs	r2, #1
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	639a      	str	r2, [r3, #56]	; 0x38
 8002ab6:	e00b      	b.n	8002ad0 <HAL_ADC_IRQHandler+0xb4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abc:	2220      	movs	r2, #32
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac8:	2201      	movs	r2, #1
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f7fd fcb4 	bl	8000440 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	220c      	movs	r2, #12
 8002ade:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2280      	movs	r2, #128	; 0x80
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d012      	beq.n	8002b0e <HAL_ADC_IRQHandler+0xf2>
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2280      	movs	r2, #128	; 0x80
 8002aec:	4013      	ands	r3, r2
 8002aee:	d00e      	beq.n	8002b0e <HAL_ADC_IRQHandler+0xf2>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af4:	2280      	movs	r2, #128	; 0x80
 8002af6:	0252      	lsls	r2, r2, #9
 8002af8:	431a      	orrs	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	0018      	movs	r0, r3
 8002b02:	f000 f837 	bl	8002b74 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2280      	movs	r2, #128	; 0x80
 8002b0c:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2210      	movs	r2, #16
 8002b12:	4013      	ands	r3, r2
 8002b14:	d020      	beq.n	8002b58 <HAL_ADC_IRQHandler+0x13c>
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2210      	movs	r2, #16
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d01c      	beq.n	8002b58 <HAL_ADC_IRQHandler+0x13c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d006      	beq.n	8002b34 <HAL_ADC_IRQHandler+0x118>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d10d      	bne.n	8002b50 <HAL_ADC_IRQHandler+0x134>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b38:	2202      	movs	r2, #2
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2210      	movs	r2, #16
 8002b46:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f7fd fc8a 	bl	8000464 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2210      	movs	r2, #16
 8002b56:	601a      	str	r2, [r3, #0]
  }

}
 8002b58:	46c0      	nop			; (mov r8, r8)
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	b004      	add	sp, #16
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	fffffefe 	.word	0xfffffefe

08002b64 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002b6c:	46c0      	nop			; (mov r8, r8)
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	b002      	add	sp, #8
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002b7c:	46c0      	nop			; (mov r8, r8)
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	b002      	add	sp, #8
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b8e:	230f      	movs	r3, #15
 8002b90:	18fb      	adds	r3, r7, r3
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b9e:	2380      	movs	r3, #128	; 0x80
 8002ba0:	055b      	lsls	r3, r3, #21
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d011      	beq.n	8002bca <HAL_ADC_ConfigChannel+0x46>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d00d      	beq.n	8002bca <HAL_ADC_ConfigChannel+0x46>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d009      	beq.n	8002bca <HAL_ADC_ConfigChannel+0x46>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d005      	beq.n	8002bca <HAL_ADC_ConfigChannel+0x46>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d001      	beq.n	8002bca <HAL_ADC_ConfigChannel+0x46>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2234      	movs	r2, #52	; 0x34
 8002bce:	5c9b      	ldrb	r3, [r3, r2]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x54>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e0d0      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x1f6>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2234      	movs	r2, #52	; 0x34
 8002bdc:	2101      	movs	r1, #1
 8002bde:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	2204      	movs	r2, #4
 8002be8:	4013      	ands	r3, r2
 8002bea:	d000      	beq.n	8002bee <HAL_ADC_ConfigChannel+0x6a>
 8002bec:	e0b4      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	4a64      	ldr	r2, [pc, #400]	; (8002d84 <HAL_ADC_ConfigChannel+0x200>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d100      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x76>
 8002bf8:	e082      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2201      	movs	r2, #1
 8002c06:	409a      	lsls	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c14:	2380      	movs	r3, #128	; 0x80
 8002c16:	055b      	lsls	r3, r3, #21
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d037      	beq.n	8002c8c <HAL_ADC_ConfigChannel+0x108>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d033      	beq.n	8002c8c <HAL_ADC_ConfigChannel+0x108>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d02f      	beq.n	8002c8c <HAL_ADC_ConfigChannel+0x108>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d02b      	beq.n	8002c8c <HAL_ADC_ConfigChannel+0x108>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d027      	beq.n	8002c8c <HAL_ADC_ConfigChannel+0x108>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c40:	2b05      	cmp	r3, #5
 8002c42:	d023      	beq.n	8002c8c <HAL_ADC_ConfigChannel+0x108>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	2b06      	cmp	r3, #6
 8002c4a:	d01f      	beq.n	8002c8c <HAL_ADC_ConfigChannel+0x108>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	2b07      	cmp	r3, #7
 8002c52:	d01b      	beq.n	8002c8c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	2107      	movs	r1, #7
 8002c60:	400b      	ands	r3, r1
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d012      	beq.n	8002c8c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695a      	ldr	r2, [r3, #20]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2107      	movs	r1, #7
 8002c72:	438a      	bics	r2, r1
 8002c74:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6959      	ldr	r1, [r3, #20]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2207      	movs	r2, #7
 8002c82:	401a      	ands	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b10      	cmp	r3, #16
 8002c92:	d007      	beq.n	8002ca4 <HAL_ADC_ConfigChannel+0x120>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2b11      	cmp	r3, #17
 8002c9a:	d003      	beq.n	8002ca4 <HAL_ADC_ConfigChannel+0x120>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b12      	cmp	r3, #18
 8002ca2:	d163      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002ca4:	4b38      	ldr	r3, [pc, #224]	; (8002d88 <HAL_ADC_ConfigChannel+0x204>)
 8002ca6:	6819      	ldr	r1, [r3, #0]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b10      	cmp	r3, #16
 8002cae:	d009      	beq.n	8002cc4 <HAL_ADC_ConfigChannel+0x140>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b11      	cmp	r3, #17
 8002cb6:	d102      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x13a>
 8002cb8:	2380      	movs	r3, #128	; 0x80
 8002cba:	03db      	lsls	r3, r3, #15
 8002cbc:	e004      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x144>
 8002cbe:	2380      	movs	r3, #128	; 0x80
 8002cc0:	045b      	lsls	r3, r3, #17
 8002cc2:	e001      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x144>
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	041b      	lsls	r3, r3, #16
 8002cc8:	4a2f      	ldr	r2, [pc, #188]	; (8002d88 <HAL_ADC_ConfigChannel+0x204>)
 8002cca:	430b      	orrs	r3, r1
 8002ccc:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2b10      	cmp	r3, #16
 8002cd4:	d14a      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cd6:	4b2d      	ldr	r3, [pc, #180]	; (8002d8c <HAL_ADC_ConfigChannel+0x208>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	492d      	ldr	r1, [pc, #180]	; (8002d90 <HAL_ADC_ConfigChannel+0x20c>)
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f7fd fa1d 	bl	800011c <__udivsi3>
 8002ce2:	0003      	movs	r3, r0
 8002ce4:	001a      	movs	r2, r3
 8002ce6:	0013      	movs	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	189b      	adds	r3, r3, r2
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002cf0:	e002      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f9      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x16e>
 8002cfe:	e035      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	4099      	lsls	r1, r3
 8002d0e:	000b      	movs	r3, r1
 8002d10:	43d9      	mvns	r1, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	400a      	ands	r2, r1
 8002d18:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b10      	cmp	r3, #16
 8002d20:	d007      	beq.n	8002d32 <HAL_ADC_ConfigChannel+0x1ae>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b11      	cmp	r3, #17
 8002d28:	d003      	beq.n	8002d32 <HAL_ADC_ConfigChannel+0x1ae>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b12      	cmp	r3, #18
 8002d30:	d11c      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002d32:	4b15      	ldr	r3, [pc, #84]	; (8002d88 <HAL_ADC_ConfigChannel+0x204>)
 8002d34:	6819      	ldr	r1, [r3, #0]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b10      	cmp	r3, #16
 8002d3c:	d007      	beq.n	8002d4e <HAL_ADC_ConfigChannel+0x1ca>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b11      	cmp	r3, #17
 8002d44:	d101      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x1c6>
 8002d46:	4b13      	ldr	r3, [pc, #76]	; (8002d94 <HAL_ADC_ConfigChannel+0x210>)
 8002d48:	e002      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x1cc>
 8002d4a:	4b13      	ldr	r3, [pc, #76]	; (8002d98 <HAL_ADC_ConfigChannel+0x214>)
 8002d4c:	e000      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x1cc>
 8002d4e:	4b13      	ldr	r3, [pc, #76]	; (8002d9c <HAL_ADC_ConfigChannel+0x218>)
 8002d50:	4a0d      	ldr	r2, [pc, #52]	; (8002d88 <HAL_ADC_ConfigChannel+0x204>)
 8002d52:	400b      	ands	r3, r1
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	e009      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002d64:	230f      	movs	r3, #15
 8002d66:	18fb      	adds	r3, r7, r3
 8002d68:	2201      	movs	r2, #1
 8002d6a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2234      	movs	r2, #52	; 0x34
 8002d70:	2100      	movs	r1, #0
 8002d72:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002d74:	230f      	movs	r3, #15
 8002d76:	18fb      	adds	r3, r7, r3
 8002d78:	781b      	ldrb	r3, [r3, #0]
}
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	b004      	add	sp, #16
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	00001001 	.word	0x00001001
 8002d88:	40012708 	.word	0x40012708
 8002d8c:	20000004 	.word	0x20000004
 8002d90:	000f4240 	.word	0x000f4240
 8002d94:	ffbfffff 	.word	0xffbfffff
 8002d98:	feffffff 	.word	0xfeffffff
 8002d9c:	ff7fffff 	.word	0xff7fffff

08002da0 <HAL_ADC_GetError>:
  * @brief  Return the ADC error code
  * @param  hadc ADC handle
  * @retval ADC Error Code
  */
uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  return hadc->ErrorCode;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8002dac:	0018      	movs	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b002      	add	sp, #8
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2203      	movs	r2, #3
 8002dcc:	4013      	ands	r3, r2
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d112      	bne.n	8002df8 <ADC_Enable+0x44>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d009      	beq.n	8002df4 <ADC_Enable+0x40>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	2380      	movs	r3, #128	; 0x80
 8002de8:	021b      	lsls	r3, r3, #8
 8002dea:	401a      	ands	r2, r3
 8002dec:	2380      	movs	r3, #128	; 0x80
 8002dee:	021b      	lsls	r3, r3, #8
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d101      	bne.n	8002df8 <ADC_Enable+0x44>
 8002df4:	2301      	movs	r3, #1
 8002df6:	e000      	b.n	8002dfa <ADC_Enable+0x46>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d152      	bne.n	8002ea4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	4a2a      	ldr	r2, [pc, #168]	; (8002eb0 <ADC_Enable+0xfc>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	d00d      	beq.n	8002e26 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0e:	2210      	movs	r2, #16
 8002e10:	431a      	orrs	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e03f      	b.n	8002ea6 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2101      	movs	r1, #1
 8002e32:	430a      	orrs	r2, r1
 8002e34:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e36:	4b1f      	ldr	r3, [pc, #124]	; (8002eb4 <ADC_Enable+0x100>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	491f      	ldr	r1, [pc, #124]	; (8002eb8 <ADC_Enable+0x104>)
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f7fd f96d 	bl	800011c <__udivsi3>
 8002e42:	0003      	movs	r3, r0
 8002e44:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002e46:	e002      	b.n	8002e4e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1f9      	bne.n	8002e48 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e54:	f7ff fbf2 	bl	800263c <HAL_GetTick>
 8002e58:	0003      	movs	r3, r0
 8002e5a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e5c:	e01b      	b.n	8002e96 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e5e:	f7ff fbed 	bl	800263c <HAL_GetTick>
 8002e62:	0002      	movs	r2, r0
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d914      	bls.n	8002e96 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2201      	movs	r2, #1
 8002e74:	4013      	ands	r3, r2
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d00d      	beq.n	8002e96 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7e:	2210      	movs	r2, #16
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e007      	b.n	8002ea6 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d1dc      	bne.n	8002e5e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	b004      	add	sp, #16
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	80000017 	.word	0x80000017
 8002eb4:	20000004 	.word	0x20000004
 8002eb8:	000f4240 	.word	0x000f4240

08002ebc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ece:	2250      	movs	r2, #80	; 0x50
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d140      	bne.n	8002f56 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed8:	2280      	movs	r2, #128	; 0x80
 8002eda:	0092      	lsls	r2, r2, #2
 8002edc:	431a      	orrs	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	23c0      	movs	r3, #192	; 0xc0
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	4013      	ands	r3, r2
 8002eee:	d12d      	bne.n	8002f4c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d129      	bne.n	8002f4c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2208      	movs	r2, #8
 8002f00:	4013      	ands	r3, r2
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d122      	bne.n	8002f4c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2204      	movs	r2, #4
 8002f0e:	4013      	ands	r3, r2
 8002f10:	d110      	bne.n	8002f34 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	210c      	movs	r1, #12
 8002f1e:	438a      	bics	r2, r1
 8002f20:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f26:	4a11      	ldr	r2, [pc, #68]	; (8002f6c <ADC_DMAConvCplt+0xb0>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	639a      	str	r2, [r3, #56]	; 0x38
 8002f32:	e00b      	b.n	8002f4c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	2220      	movs	r2, #32
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f44:	2201      	movs	r2, #1
 8002f46:	431a      	orrs	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f7fd fa76 	bl	8000440 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002f54:	e005      	b.n	8002f62 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	0010      	movs	r0, r2
 8002f60:	4798      	blx	r3
}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	46bd      	mov	sp, r7
 8002f66:	b004      	add	sp, #16
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	fffffefe 	.word	0xfffffefe

08002f70 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	0018      	movs	r0, r3
 8002f82:	f7ff fdef 	bl	8002b64 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	b004      	add	sp, #16
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b084      	sub	sp, #16
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa0:	2240      	movs	r2, #64	; 0x40
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fac:	2204      	movs	r2, #4
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f7fd fa54 	bl	8000464 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fbc:	46c0      	nop			; (mov r8, r8)
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	b004      	add	sp, #16
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fcc:	2317      	movs	r3, #23
 8002fce:	18fb      	adds	r3, r7, r3
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2234      	movs	r2, #52	; 0x34
 8002fe0:	5c9b      	ldrb	r3, [r3, r2]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d101      	bne.n	8002fea <HAL_ADCEx_Calibration_Start+0x26>
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	e08d      	b.n	8003106 <HAL_ADCEx_Calibration_Start+0x142>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2234      	movs	r2, #52	; 0x34
 8002fee:	2101      	movs	r1, #1
 8002ff0:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2203      	movs	r2, #3
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d112      	bne.n	8003026 <HAL_ADCEx_Calibration_Start+0x62>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2201      	movs	r2, #1
 8003008:	4013      	ands	r3, r2
 800300a:	2b01      	cmp	r3, #1
 800300c:	d009      	beq.n	8003022 <HAL_ADCEx_Calibration_Start+0x5e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	2380      	movs	r3, #128	; 0x80
 8003016:	021b      	lsls	r3, r3, #8
 8003018:	401a      	ands	r2, r3
 800301a:	2380      	movs	r3, #128	; 0x80
 800301c:	021b      	lsls	r3, r3, #8
 800301e:	429a      	cmp	r2, r3
 8003020:	d101      	bne.n	8003026 <HAL_ADCEx_Calibration_Start+0x62>
 8003022:	2301      	movs	r3, #1
 8003024:	e000      	b.n	8003028 <HAL_ADCEx_Calibration_Start+0x64>
 8003026:	2300      	movs	r3, #0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d15b      	bne.n	80030e4 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003030:	4a37      	ldr	r2, [pc, #220]	; (8003110 <HAL_ADCEx_Calibration_Start+0x14c>)
 8003032:	4013      	ands	r3, r2
 8003034:	2202      	movs	r2, #2
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	2203      	movs	r2, #3
 8003044:	4013      	ands	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2103      	movs	r1, #3
 8003054:	438a      	bics	r2, r1
 8003056:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2180      	movs	r1, #128	; 0x80
 8003064:	0609      	lsls	r1, r1, #24
 8003066:	430a      	orrs	r2, r1
 8003068:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800306a:	f7ff fae7 	bl	800263c <HAL_GetTick>
 800306e:	0003      	movs	r3, r0
 8003070:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003072:	e01d      	b.n	80030b0 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003074:	f7ff fae2 	bl	800263c <HAL_GetTick>
 8003078:	0002      	movs	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d916      	bls.n	80030b0 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	0fdb      	lsrs	r3, r3, #31
 800308a:	07da      	lsls	r2, r3, #31
 800308c:	2380      	movs	r3, #128	; 0x80
 800308e:	061b      	lsls	r3, r3, #24
 8003090:	429a      	cmp	r2, r3
 8003092:	d10d      	bne.n	80030b0 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003098:	2212      	movs	r2, #18
 800309a:	4393      	bics	r3, r2
 800309c:	2210      	movs	r2, #16
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2234      	movs	r2, #52	; 0x34
 80030a8:	2100      	movs	r1, #0
 80030aa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e02a      	b.n	8003106 <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	0fdb      	lsrs	r3, r3, #31
 80030b8:	07da      	lsls	r2, r3, #31
 80030ba:	2380      	movs	r3, #128	; 0x80
 80030bc:	061b      	lsls	r3, r3, #24
 80030be:	429a      	cmp	r2, r3
 80030c0:	d0d8      	beq.n	8003074 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68d9      	ldr	r1, [r3, #12]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d6:	2203      	movs	r2, #3
 80030d8:	4393      	bics	r3, r2
 80030da:	2201      	movs	r2, #1
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	639a      	str	r2, [r3, #56]	; 0x38
 80030e2:	e009      	b.n	80030f8 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e8:	2220      	movs	r2, #32
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80030f0:	2317      	movs	r3, #23
 80030f2:	18fb      	adds	r3, r7, r3
 80030f4:	2201      	movs	r2, #1
 80030f6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2234      	movs	r2, #52	; 0x34
 80030fc:	2100      	movs	r1, #0
 80030fe:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003100:	2317      	movs	r3, #23
 8003102:	18fb      	adds	r3, r7, r3
 8003104:	781b      	ldrb	r3, [r3, #0]
}
 8003106:	0018      	movs	r0, r3
 8003108:	46bd      	mov	sp, r7
 800310a:	b006      	add	sp, #24
 800310c:	bd80      	pop	{r7, pc}
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	fffffefd 	.word	0xfffffefd

08003114 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e0f0      	b.n	8003308 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2220      	movs	r2, #32
 800312a:	5c9b      	ldrb	r3, [r3, r2]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d103      	bne.n	800313a <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	0018      	movs	r0, r3
 8003136:	f7fe fd81 	bl	8001c3c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2101      	movs	r1, #1
 8003146:	430a      	orrs	r2, r1
 8003148:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800314a:	f7ff fa77 	bl	800263c <HAL_GetTick>
 800314e:	0003      	movs	r3, r0
 8003150:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003152:	e013      	b.n	800317c <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003154:	f7ff fa72 	bl	800263c <HAL_GetTick>
 8003158:	0002      	movs	r2, r0
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b0a      	cmp	r3, #10
 8003160:	d90c      	bls.n	800317c <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	2280      	movs	r2, #128	; 0x80
 8003168:	0292      	lsls	r2, r2, #10
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2220      	movs	r2, #32
 8003174:	2105      	movs	r1, #5
 8003176:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e0c5      	b.n	8003308 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	4013      	ands	r3, r2
 8003186:	d0e5      	beq.n	8003154 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2102      	movs	r1, #2
 8003194:	438a      	bics	r2, r1
 8003196:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003198:	f7ff fa50 	bl	800263c <HAL_GetTick>
 800319c:	0003      	movs	r3, r0
 800319e:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031a0:	e013      	b.n	80031ca <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031a2:	f7ff fa4b 	bl	800263c <HAL_GetTick>
 80031a6:	0002      	movs	r2, r0
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b0a      	cmp	r3, #10
 80031ae:	d90c      	bls.n	80031ca <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	2280      	movs	r2, #128	; 0x80
 80031b6:	0292      	lsls	r2, r2, #10
 80031b8:	431a      	orrs	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2220      	movs	r2, #32
 80031c2:	2105      	movs	r1, #5
 80031c4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e09e      	b.n	8003308 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2202      	movs	r2, #2
 80031d2:	4013      	ands	r3, r2
 80031d4:	d1e5      	bne.n	80031a2 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	7e1b      	ldrb	r3, [r3, #24]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d108      	bne.n	80031f0 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2180      	movs	r1, #128	; 0x80
 80031ea:	430a      	orrs	r2, r1
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	e007      	b.n	8003200 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2180      	movs	r1, #128	; 0x80
 80031fc:	438a      	bics	r2, r1
 80031fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	7e5b      	ldrb	r3, [r3, #25]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d108      	bne.n	800321a <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2140      	movs	r1, #64	; 0x40
 8003214:	430a      	orrs	r2, r1
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	e007      	b.n	800322a <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2140      	movs	r1, #64	; 0x40
 8003226:	438a      	bics	r2, r1
 8003228:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	7e9b      	ldrb	r3, [r3, #26]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d108      	bne.n	8003244 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2120      	movs	r1, #32
 800323e:	430a      	orrs	r2, r1
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	e007      	b.n	8003254 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2120      	movs	r1, #32
 8003250:	438a      	bics	r2, r1
 8003252:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	7edb      	ldrb	r3, [r3, #27]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d108      	bne.n	800326e <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2110      	movs	r1, #16
 8003268:	438a      	bics	r2, r1
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	e007      	b.n	800327e <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2110      	movs	r1, #16
 800327a:	430a      	orrs	r2, r1
 800327c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	7f1b      	ldrb	r3, [r3, #28]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d108      	bne.n	8003298 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2108      	movs	r1, #8
 8003292:	430a      	orrs	r2, r1
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	e007      	b.n	80032a8 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2108      	movs	r1, #8
 80032a4:	438a      	bics	r2, r1
 80032a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	7f5b      	ldrb	r3, [r3, #29]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d108      	bne.n	80032c2 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2104      	movs	r1, #4
 80032bc:	430a      	orrs	r2, r1
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	e007      	b.n	80032d2 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2104      	movs	r1, #4
 80032ce:	438a      	bics	r2, r1
 80032d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	431a      	orrs	r2, r3
 80032e8:	0011      	movs	r1, r2
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	1e5a      	subs	r2, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2220      	movs	r2, #32
 8003302:	2101      	movs	r1, #1
 8003304:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	0018      	movs	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	b004      	add	sp, #16
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003320:	2013      	movs	r0, #19
 8003322:	183b      	adds	r3, r7, r0
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	2120      	movs	r1, #32
 8003328:	5c52      	ldrb	r2, [r2, r1]
 800332a:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 800332c:	0002      	movs	r2, r0
 800332e:	18bb      	adds	r3, r7, r2
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d004      	beq.n	8003340 <HAL_CAN_ConfigFilter+0x30>
 8003336:	18bb      	adds	r3, r7, r2
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d000      	beq.n	8003340 <HAL_CAN_ConfigFilter+0x30>
 800333e:	e0cd      	b.n	80034dc <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	2380      	movs	r3, #128	; 0x80
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	58d3      	ldr	r3, [r2, r3]
 8003348:	2201      	movs	r2, #1
 800334a:	431a      	orrs	r2, r3
 800334c:	0011      	movs	r1, r2
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	2380      	movs	r3, #128	; 0x80
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	221f      	movs	r2, #31
 800335c:	4013      	ands	r3, r2
 800335e:	2201      	movs	r2, #1
 8003360:	409a      	lsls	r2, r3
 8003362:	0013      	movs	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	2387      	movs	r3, #135	; 0x87
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	58d3      	ldr	r3, [r2, r3]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	43d2      	mvns	r2, r2
 8003372:	401a      	ands	r2, r3
 8003374:	0011      	movs	r1, r2
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	2387      	movs	r3, #135	; 0x87
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d129      	bne.n	80033da <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	2383      	movs	r3, #131	; 0x83
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	58d3      	ldr	r3, [r2, r3]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	43d2      	mvns	r2, r2
 8003392:	401a      	ands	r2, r3
 8003394:	0011      	movs	r1, r2
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	2383      	movs	r3, #131	; 0x83
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	041b      	lsls	r3, r3, #16
 80033aa:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80033b0:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	3248      	adds	r2, #72	; 0x48
 80033b6:	00d2      	lsls	r2, r2, #3
 80033b8:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	041b      	lsls	r3, r3, #16
 80033c6:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033cc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033ce:	6979      	ldr	r1, [r7, #20]
 80033d0:	3348      	adds	r3, #72	; 0x48
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	18cb      	adds	r3, r1, r3
 80033d6:	3304      	adds	r3, #4
 80033d8:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d128      	bne.n	8003434 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	2383      	movs	r3, #131	; 0x83
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	58d2      	ldr	r2, [r2, r3]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	431a      	orrs	r2, r3
 80033ee:	0011      	movs	r1, r2
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	2383      	movs	r3, #131	; 0x83
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	041b      	lsls	r3, r3, #16
 8003404:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800340a:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	3248      	adds	r2, #72	; 0x48
 8003410:	00d2      	lsls	r2, r2, #3
 8003412:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	041b      	lsls	r3, r3, #16
 8003420:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003426:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003428:	6979      	ldr	r1, [r7, #20]
 800342a:	3348      	adds	r3, #72	; 0x48
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	18cb      	adds	r3, r1, r3
 8003430:	3304      	adds	r3, #4
 8003432:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10c      	bne.n	8003456 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	2381      	movs	r3, #129	; 0x81
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	58d3      	ldr	r3, [r2, r3]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	43d2      	mvns	r2, r2
 8003448:	401a      	ands	r2, r3
 800344a:	0011      	movs	r1, r2
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	2381      	movs	r3, #129	; 0x81
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	50d1      	str	r1, [r2, r3]
 8003454:	e00a      	b.n	800346c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	2381      	movs	r3, #129	; 0x81
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	58d2      	ldr	r2, [r2, r3]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	431a      	orrs	r2, r3
 8003462:	0011      	movs	r1, r2
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	2381      	movs	r3, #129	; 0x81
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10c      	bne.n	800348e <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	2385      	movs	r3, #133	; 0x85
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	58d3      	ldr	r3, [r2, r3]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	43d2      	mvns	r2, r2
 8003480:	401a      	ands	r2, r3
 8003482:	0011      	movs	r1, r2
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	2385      	movs	r3, #133	; 0x85
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	50d1      	str	r1, [r2, r3]
 800348c:	e00a      	b.n	80034a4 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	2385      	movs	r3, #133	; 0x85
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	58d2      	ldr	r2, [r2, r3]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	431a      	orrs	r2, r3
 800349a:	0011      	movs	r1, r2
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	2385      	movs	r3, #133	; 0x85
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d10a      	bne.n	80034c2 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	2387      	movs	r3, #135	; 0x87
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	58d2      	ldr	r2, [r2, r3]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	0011      	movs	r1, r2
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	2387      	movs	r3, #135	; 0x87
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	2380      	movs	r3, #128	; 0x80
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	58d3      	ldr	r3, [r2, r3]
 80034ca:	2201      	movs	r2, #1
 80034cc:	4393      	bics	r3, r2
 80034ce:	0019      	movs	r1, r3
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	2380      	movs	r3, #128	; 0x80
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	e007      	b.n	80034ec <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	2280      	movs	r2, #128	; 0x80
 80034e2:	02d2      	lsls	r2, r2, #11
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
  }
}
 80034ec:	0018      	movs	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	b006      	add	sp, #24
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2220      	movs	r2, #32
 8003500:	5c9b      	ldrb	r3, [r3, r2]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b01      	cmp	r3, #1
 8003506:	d12f      	bne.n	8003568 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2220      	movs	r2, #32
 800350c:	2102      	movs	r1, #2
 800350e:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2101      	movs	r1, #1
 800351c:	438a      	bics	r2, r1
 800351e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003520:	f7ff f88c 	bl	800263c <HAL_GetTick>
 8003524:	0003      	movs	r3, r0
 8003526:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003528:	e013      	b.n	8003552 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800352a:	f7ff f887 	bl	800263c <HAL_GetTick>
 800352e:	0002      	movs	r2, r0
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b0a      	cmp	r3, #10
 8003536:	d90c      	bls.n	8003552 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	2280      	movs	r2, #128	; 0x80
 800353e:	0292      	lsls	r2, r2, #10
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2220      	movs	r2, #32
 800354a:	2105      	movs	r1, #5
 800354c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e012      	b.n	8003578 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	4013      	ands	r3, r2
 800355c:	d1e5      	bne.n	800352a <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	e007      	b.n	8003578 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	2280      	movs	r2, #128	; 0x80
 800356e:	0312      	lsls	r2, r2, #12
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
  }
}
 8003578:	0018      	movs	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	b004      	add	sp, #16
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800358e:	201f      	movs	r0, #31
 8003590:	183b      	adds	r3, r7, r0
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	2120      	movs	r1, #32
 8003596:	5c52      	ldrb	r2, [r2, r1]
 8003598:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80035a2:	183b      	adds	r3, r7, r0
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d004      	beq.n	80035b4 <HAL_CAN_AddTxMessage+0x34>
 80035aa:	183b      	adds	r3, r7, r0
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d000      	beq.n	80035b4 <HAL_CAN_AddTxMessage+0x34>
 80035b2:	e0ab      	b.n	800370c <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	2380      	movs	r3, #128	; 0x80
 80035b8:	04db      	lsls	r3, r3, #19
 80035ba:	4013      	ands	r3, r2
 80035bc:	d10a      	bne.n	80035d4 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	2380      	movs	r3, #128	; 0x80
 80035c2:	051b      	lsls	r3, r3, #20
 80035c4:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80035c6:	d105      	bne.n	80035d4 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	2380      	movs	r3, #128	; 0x80
 80035cc:	055b      	lsls	r3, r3, #21
 80035ce:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80035d0:	d100      	bne.n	80035d4 <HAL_CAN_AddTxMessage+0x54>
 80035d2:	e092      	b.n	80036fa <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	0e1b      	lsrs	r3, r3, #24
 80035d8:	2203      	movs	r2, #3
 80035da:	4013      	ands	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80035de:	2201      	movs	r2, #1
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	409a      	lsls	r2, r3
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10c      	bne.n	800360a <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4311      	orrs	r1, r2
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	3218      	adds	r2, #24
 8003604:	0112      	lsls	r2, r2, #4
 8003606:	50d1      	str	r1, [r2, r3]
 8003608:	e00f      	b.n	800362a <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003614:	431a      	orrs	r2, r3
 8003616:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8003620:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	3218      	adds	r2, #24
 8003626:	0112      	lsls	r2, r2, #4
 8003628:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6819      	ldr	r1, [r3, #0]
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	691a      	ldr	r2, [r3, #16]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	3318      	adds	r3, #24
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	18cb      	adds	r3, r1, r3
 800363a:	3304      	adds	r3, #4
 800363c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	7d1b      	ldrb	r3, [r3, #20]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d112      	bne.n	800366c <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	3318      	adds	r3, #24
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	18d3      	adds	r3, r2, r3
 8003652:	3304      	adds	r3, #4
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6819      	ldr	r1, [r3, #0]
 800365a:	2380      	movs	r3, #128	; 0x80
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	431a      	orrs	r2, r3
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	3318      	adds	r3, #24
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	18cb      	adds	r3, r1, r3
 8003668:	3304      	adds	r3, #4
 800366a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3307      	adds	r3, #7
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	061a      	lsls	r2, r3, #24
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3306      	adds	r3, #6
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	041b      	lsls	r3, r3, #16
 800367c:	431a      	orrs	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3305      	adds	r3, #5
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	021b      	lsls	r3, r3, #8
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3304      	adds	r3, #4
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	0019      	movs	r1, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6818      	ldr	r0, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	6979      	ldr	r1, [r7, #20]
 8003698:	23c6      	movs	r3, #198	; 0xc6
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	0109      	lsls	r1, r1, #4
 800369e:	1841      	adds	r1, r0, r1
 80036a0:	18cb      	adds	r3, r1, r3
 80036a2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3303      	adds	r3, #3
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	061a      	lsls	r2, r3, #24
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3302      	adds	r3, #2
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	041b      	lsls	r3, r3, #16
 80036b4:	431a      	orrs	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3301      	adds	r3, #1
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	021b      	lsls	r3, r3, #8
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	0019      	movs	r1, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6818      	ldr	r0, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	6979      	ldr	r1, [r7, #20]
 80036ce:	23c4      	movs	r3, #196	; 0xc4
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	0109      	lsls	r1, r1, #4
 80036d4:	1841      	adds	r1, r0, r1
 80036d6:	18cb      	adds	r3, r1, r3
 80036d8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	3218      	adds	r2, #24
 80036e2:	0112      	lsls	r2, r2, #4
 80036e4:	58d2      	ldr	r2, [r2, r3]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2101      	movs	r1, #1
 80036ec:	4311      	orrs	r1, r2
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	3218      	adds	r2, #24
 80036f2:	0112      	lsls	r2, r2, #4
 80036f4:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	e010      	b.n	800371c <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	2280      	movs	r2, #128	; 0x80
 8003700:	0392      	lsls	r2, r2, #14
 8003702:	431a      	orrs	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e007      	b.n	800371c <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	2280      	movs	r2, #128	; 0x80
 8003712:	02d2      	lsls	r2, r2, #11
 8003714:	431a      	orrs	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
  }
}
 800371c:	0018      	movs	r0, r3
 800371e:	46bd      	mov	sp, r7
 8003720:	b008      	add	sp, #32
 8003722:	bd80      	pop	{r7, pc}

08003724 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003732:	200b      	movs	r0, #11
 8003734:	183b      	adds	r3, r7, r0
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	2120      	movs	r1, #32
 800373a:	5c52      	ldrb	r2, [r2, r1]
 800373c:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800373e:	0002      	movs	r2, r0
 8003740:	18bb      	adds	r3, r7, r2
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d003      	beq.n	8003750 <HAL_CAN_IsTxMessagePending+0x2c>
 8003748:	18bb      	adds	r3, r7, r2
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b02      	cmp	r3, #2
 800374e:	d10b      	bne.n	8003768 <HAL_CAN_IsTxMessagePending+0x44>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	0692      	lsls	r2, r2, #26
 800375a:	401a      	ands	r2, r3
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	069b      	lsls	r3, r3, #26
 8003760:	429a      	cmp	r2, r3
 8003762:	d001      	beq.n	8003768 <HAL_CAN_IsTxMessagePending+0x44>
    {
      status = 1U;
 8003764:	2301      	movs	r3, #1
 8003766:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8003768:	68fb      	ldr	r3, [r7, #12]
}
 800376a:	0018      	movs	r0, r3
 800376c:	46bd      	mov	sp, r7
 800376e:	b004      	add	sp, #16
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b086      	sub	sp, #24
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	607a      	str	r2, [r7, #4]
 800377e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003780:	2017      	movs	r0, #23
 8003782:	183b      	adds	r3, r7, r0
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	2120      	movs	r1, #32
 8003788:	5c52      	ldrb	r2, [r2, r1]
 800378a:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800378c:	0002      	movs	r2, r0
 800378e:	18bb      	adds	r3, r7, r2
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d004      	beq.n	80037a0 <HAL_CAN_GetRxMessage+0x2e>
 8003796:	18bb      	adds	r3, r7, r2
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	2b02      	cmp	r3, #2
 800379c:	d000      	beq.n	80037a0 <HAL_CAN_GetRxMessage+0x2e>
 800379e:	e107      	b.n	80039b0 <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10e      	bne.n	80037c4 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	2203      	movs	r2, #3
 80037ae:	4013      	ands	r3, r2
 80037b0:	d117      	bne.n	80037e2 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	2280      	movs	r2, #128	; 0x80
 80037b8:	0392      	lsls	r2, r2, #14
 80037ba:	431a      	orrs	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e0fd      	b.n	80039c0 <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	2203      	movs	r2, #3
 80037cc:	4013      	ands	r3, r2
 80037ce:	d108      	bne.n	80037e2 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	2280      	movs	r2, #128	; 0x80
 80037d6:	0392      	lsls	r2, r2, #14
 80037d8:	431a      	orrs	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e0ee      	b.n	80039c0 <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	321b      	adds	r2, #27
 80037ea:	0112      	lsls	r2, r2, #4
 80037ec:	58d3      	ldr	r3, [r2, r3]
 80037ee:	2204      	movs	r2, #4
 80037f0:	401a      	ands	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10b      	bne.n	8003816 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	321b      	adds	r2, #27
 8003806:	0112      	lsls	r2, r2, #4
 8003808:	58d3      	ldr	r3, [r2, r3]
 800380a:	0d5b      	lsrs	r3, r3, #21
 800380c:	055b      	lsls	r3, r3, #21
 800380e:	0d5a      	lsrs	r2, r3, #21
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	e00a      	b.n	800382c <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	321b      	adds	r2, #27
 800381e:	0112      	lsls	r2, r2, #4
 8003820:	58d3      	ldr	r3, [r2, r3]
 8003822:	08db      	lsrs	r3, r3, #3
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	321b      	adds	r2, #27
 8003834:	0112      	lsls	r2, r2, #4
 8003836:	58d3      	ldr	r3, [r2, r3]
 8003838:	2202      	movs	r2, #2
 800383a:	401a      	ands	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	331b      	adds	r3, #27
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	18d3      	adds	r3, r2, r3
 800384c:	3304      	adds	r3, #4
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2208      	movs	r2, #8
 8003852:	4013      	ands	r3, r2
 8003854:	d003      	beq.n	800385e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2208      	movs	r2, #8
 800385a:	611a      	str	r2, [r3, #16]
 800385c:	e00b      	b.n	8003876 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	331b      	adds	r3, #27
 8003866:	011b      	lsls	r3, r3, #4
 8003868:	18d3      	adds	r3, r2, r3
 800386a:	3304      	adds	r3, #4
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	220f      	movs	r2, #15
 8003870:	401a      	ands	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	331b      	adds	r3, #27
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	18d3      	adds	r3, r2, r3
 8003882:	3304      	adds	r3, #4
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	0a1b      	lsrs	r3, r3, #8
 8003888:	22ff      	movs	r2, #255	; 0xff
 800388a:	401a      	ands	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	331b      	adds	r3, #27
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	18d3      	adds	r3, r2, r3
 800389c:	3304      	adds	r3, #4
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	0c1b      	lsrs	r3, r3, #16
 80038a2:	041b      	lsls	r3, r3, #16
 80038a4:	0c1a      	lsrs	r2, r3, #16
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6819      	ldr	r1, [r3, #0]
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	23dc      	movs	r3, #220	; 0xdc
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	0112      	lsls	r2, r2, #4
 80038b6:	188a      	adds	r2, r1, r2
 80038b8:	18d3      	adds	r3, r2, r3
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6819      	ldr	r1, [r3, #0]
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	23dc      	movs	r3, #220	; 0xdc
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	0112      	lsls	r2, r2, #4
 80038ce:	188a      	adds	r2, r1, r2
 80038d0:	18d3      	adds	r3, r2, r3
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	0a1a      	lsrs	r2, r3, #8
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	3301      	adds	r3, #1
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6819      	ldr	r1, [r3, #0]
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	23dc      	movs	r3, #220	; 0xdc
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	0112      	lsls	r2, r2, #4
 80038ea:	188a      	adds	r2, r1, r2
 80038ec:	18d3      	adds	r3, r2, r3
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	0c1a      	lsrs	r2, r3, #16
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	3302      	adds	r3, #2
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6819      	ldr	r1, [r3, #0]
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	23dc      	movs	r3, #220	; 0xdc
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	0112      	lsls	r2, r2, #4
 8003906:	188a      	adds	r2, r1, r2
 8003908:	18d3      	adds	r3, r2, r3
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	0e1a      	lsrs	r2, r3, #24
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	3303      	adds	r3, #3
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6819      	ldr	r1, [r3, #0]
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	23de      	movs	r3, #222	; 0xde
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	0112      	lsls	r2, r2, #4
 8003922:	188a      	adds	r2, r1, r2
 8003924:	18d3      	adds	r3, r2, r3
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	3304      	adds	r3, #4
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6819      	ldr	r1, [r3, #0]
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	23de      	movs	r3, #222	; 0xde
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	0112      	lsls	r2, r2, #4
 800393c:	188a      	adds	r2, r1, r2
 800393e:	18d3      	adds	r3, r2, r3
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	0a1a      	lsrs	r2, r3, #8
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	3305      	adds	r3, #5
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6819      	ldr	r1, [r3, #0]
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	23de      	movs	r3, #222	; 0xde
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	0112      	lsls	r2, r2, #4
 8003958:	188a      	adds	r2, r1, r2
 800395a:	18d3      	adds	r3, r2, r3
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	0c1a      	lsrs	r2, r3, #16
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	3306      	adds	r3, #6
 8003964:	b2d2      	uxtb	r2, r2
 8003966:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6819      	ldr	r1, [r3, #0]
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	23de      	movs	r3, #222	; 0xde
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	0112      	lsls	r2, r2, #4
 8003974:	188a      	adds	r2, r1, r2
 8003976:	18d3      	adds	r3, r2, r3
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	0e1a      	lsrs	r2, r3, #24
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	3307      	adds	r3, #7
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d108      	bne.n	800399c <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68da      	ldr	r2, [r3, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2120      	movs	r1, #32
 8003996:	430a      	orrs	r2, r1
 8003998:	60da      	str	r2, [r3, #12]
 800399a:	e007      	b.n	80039ac <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	691a      	ldr	r2, [r3, #16]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2120      	movs	r1, #32
 80039a8:	430a      	orrs	r2, r1
 80039aa:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80039ac:	2300      	movs	r3, #0
 80039ae:	e007      	b.n	80039c0 <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	2280      	movs	r2, #128	; 0x80
 80039b6:	02d2      	lsls	r2, r2, #11
 80039b8:	431a      	orrs	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
  }
}
 80039c0:	0018      	movs	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b006      	add	sp, #24
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80039d2:	200f      	movs	r0, #15
 80039d4:	183b      	adds	r3, r7, r0
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	2120      	movs	r1, #32
 80039da:	5c52      	ldrb	r2, [r2, r1]
 80039dc:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80039de:	0002      	movs	r2, r0
 80039e0:	18bb      	adds	r3, r7, r2
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d003      	beq.n	80039f0 <HAL_CAN_ActivateNotification+0x28>
 80039e8:	18bb      	adds	r3, r7, r2
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d109      	bne.n	8003a04 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6959      	ldr	r1, [r3, #20]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	e007      	b.n	8003a14 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	2280      	movs	r2, #128	; 0x80
 8003a0a:	02d2      	lsls	r2, r2, #11
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
  }
}
 8003a14:	0018      	movs	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	b004      	add	sp, #16
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08a      	sub	sp, #40	; 0x28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003a24:	2300      	movs	r3, #0
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d100      	bne.n	8003a62 <HAL_CAN_IRQHandler+0x46>
 8003a60:	e084      	b.n	8003b6c <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	2201      	movs	r2, #1
 8003a66:	4013      	ands	r3, r2
 8003a68:	d024      	beq.n	8003ab4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	2202      	movs	r2, #2
 8003a76:	4013      	ands	r3, r2
 8003a78:	d004      	beq.n	8003a84 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	f7fc fff5 	bl	8000a6c <HAL_CAN_TxMailbox0CompleteCallback>
 8003a82:	e017      	b.n	8003ab4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	2204      	movs	r2, #4
 8003a88:	4013      	ands	r3, r2
 8003a8a:	d005      	beq.n	8003a98 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	2280      	movs	r2, #128	; 0x80
 8003a90:	0112      	lsls	r2, r2, #4
 8003a92:	4313      	orrs	r3, r2
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
 8003a96:	e00d      	b.n	8003ab4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	2208      	movs	r2, #8
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	d005      	beq.n	8003aac <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	2280      	movs	r2, #128	; 0x80
 8003aa4:	0152      	lsls	r2, r2, #5
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aaa:	e003      	b.n	8003ab4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	0018      	movs	r0, r3
 8003ab0:	f000 f968 	bl	8003d84 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	2380      	movs	r3, #128	; 0x80
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	4013      	ands	r3, r2
 8003abc:	d028      	beq.n	8003b10 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2280      	movs	r2, #128	; 0x80
 8003ac4:	0052      	lsls	r2, r2, #1
 8003ac6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	2380      	movs	r3, #128	; 0x80
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d004      	beq.n	8003adc <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f7fc ffd3 	bl	8000a80 <HAL_CAN_TxMailbox1CompleteCallback>
 8003ada:	e019      	b.n	8003b10 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	2380      	movs	r3, #128	; 0x80
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d005      	beq.n	8003af2 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	2280      	movs	r2, #128	; 0x80
 8003aea:	0192      	lsls	r2, r2, #6
 8003aec:	4313      	orrs	r3, r2
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
 8003af0:	e00e      	b.n	8003b10 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	2380      	movs	r3, #128	; 0x80
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	4013      	ands	r3, r2
 8003afa:	d005      	beq.n	8003b08 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	2280      	movs	r2, #128	; 0x80
 8003b00:	01d2      	lsls	r2, r2, #7
 8003b02:	4313      	orrs	r3, r2
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
 8003b06:	e003      	b.n	8003b10 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	f000 f942 	bl	8003d94 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	2380      	movs	r3, #128	; 0x80
 8003b14:	025b      	lsls	r3, r3, #9
 8003b16:	4013      	ands	r3, r2
 8003b18:	d028      	beq.n	8003b6c <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2280      	movs	r2, #128	; 0x80
 8003b20:	0252      	lsls	r2, r2, #9
 8003b22:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	2380      	movs	r3, #128	; 0x80
 8003b28:	029b      	lsls	r3, r3, #10
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	d004      	beq.n	8003b38 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	0018      	movs	r0, r3
 8003b32:	f7fc ffaf 	bl	8000a94 <HAL_CAN_TxMailbox2CompleteCallback>
 8003b36:	e019      	b.n	8003b6c <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	2380      	movs	r3, #128	; 0x80
 8003b3c:	02db      	lsls	r3, r3, #11
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d005      	beq.n	8003b4e <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	2280      	movs	r2, #128	; 0x80
 8003b46:	0212      	lsls	r2, r2, #8
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b4c:	e00e      	b.n	8003b6c <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	2380      	movs	r3, #128	; 0x80
 8003b52:	031b      	lsls	r3, r3, #12
 8003b54:	4013      	ands	r3, r2
 8003b56:	d005      	beq.n	8003b64 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	2280      	movs	r2, #128	; 0x80
 8003b5c:	0252      	lsls	r2, r2, #9
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
 8003b62:	e003      	b.n	8003b6c <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	0018      	movs	r0, r3
 8003b68:	f000 f91c 	bl	8003da4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	2208      	movs	r2, #8
 8003b70:	4013      	ands	r3, r2
 8003b72:	d00c      	beq.n	8003b8e <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2210      	movs	r2, #16
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d008      	beq.n	8003b8e <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	2280      	movs	r2, #128	; 0x80
 8003b80:	0092      	lsls	r2, r2, #2
 8003b82:	4313      	orrs	r3, r2
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2210      	movs	r2, #16
 8003b8c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	2204      	movs	r2, #4
 8003b92:	4013      	ands	r3, r2
 8003b94:	d00b      	beq.n	8003bae <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2208      	movs	r2, #8
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d007      	beq.n	8003bae <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2208      	movs	r2, #8
 8003ba4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	0018      	movs	r0, r3
 8003baa:	f000 f903 	bl	8003db4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	d009      	beq.n	8003bca <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	2203      	movs	r2, #3
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d003      	beq.n	8003bca <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	f7fc fd5d 	bl	8000684 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	2240      	movs	r2, #64	; 0x40
 8003bce:	4013      	ands	r3, r2
 8003bd0:	d00c      	beq.n	8003bec <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	2210      	movs	r2, #16
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	d008      	beq.n	8003bec <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	2280      	movs	r2, #128	; 0x80
 8003bde:	00d2      	lsls	r2, r2, #3
 8003be0:	4313      	orrs	r3, r2
 8003be2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2210      	movs	r2, #16
 8003bea:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	d00b      	beq.n	8003c0c <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	2208      	movs	r2, #8
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	d007      	beq.n	8003c0c <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2208      	movs	r2, #8
 8003c02:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	0018      	movs	r0, r3
 8003c08:	f000 f8e4 	bl	8003dd4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003c0c:	6a3b      	ldr	r3, [r7, #32]
 8003c0e:	2210      	movs	r2, #16
 8003c10:	4013      	ands	r3, r2
 8003c12:	d009      	beq.n	8003c28 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	2203      	movs	r2, #3
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	d003      	beq.n	8003c28 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	0018      	movs	r0, r3
 8003c24:	f000 f8ce 	bl	8003dc4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003c28:	6a3a      	ldr	r2, [r7, #32]
 8003c2a:	2380      	movs	r3, #128	; 0x80
 8003c2c:	029b      	lsls	r3, r3, #10
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d00b      	beq.n	8003c4a <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	2210      	movs	r2, #16
 8003c36:	4013      	ands	r3, r2
 8003c38:	d007      	beq.n	8003c4a <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2210      	movs	r2, #16
 8003c40:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	0018      	movs	r0, r3
 8003c46:	f000 f8cd 	bl	8003de4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003c4a:	6a3a      	ldr	r2, [r7, #32]
 8003c4c:	2380      	movs	r3, #128	; 0x80
 8003c4e:	025b      	lsls	r3, r3, #9
 8003c50:	4013      	ands	r3, r2
 8003c52:	d00b      	beq.n	8003c6c <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	2208      	movs	r2, #8
 8003c58:	4013      	ands	r3, r2
 8003c5a:	d007      	beq.n	8003c6c <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2208      	movs	r2, #8
 8003c62:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	0018      	movs	r0, r3
 8003c68:	f000 f8c4 	bl	8003df4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003c6c:	6a3a      	ldr	r2, [r7, #32]
 8003c6e:	2380      	movs	r3, #128	; 0x80
 8003c70:	021b      	lsls	r3, r3, #8
 8003c72:	4013      	ands	r3, r2
 8003c74:	d100      	bne.n	8003c78 <HAL_CAN_IRQHandler+0x25c>
 8003c76:	e074      	b.n	8003d62 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	2204      	movs	r2, #4
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	d100      	bne.n	8003c82 <HAL_CAN_IRQHandler+0x266>
 8003c80:	e06b      	b.n	8003d5a <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003c82:	6a3a      	ldr	r2, [r7, #32]
 8003c84:	2380      	movs	r3, #128	; 0x80
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	4013      	ands	r3, r2
 8003c8a:	d007      	beq.n	8003c9c <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003c92:	d003      	beq.n	8003c9c <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c96:	2201      	movs	r2, #1
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003c9c:	6a3a      	ldr	r2, [r7, #32]
 8003c9e:	2380      	movs	r3, #128	; 0x80
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d007      	beq.n	8003cb6 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2202      	movs	r2, #2
 8003caa:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003cac:	d003      	beq.n	8003cb6 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003cb6:	6a3a      	ldr	r2, [r7, #32]
 8003cb8:	2380      	movs	r3, #128	; 0x80
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	d007      	beq.n	8003cd0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2204      	movs	r2, #4
 8003cc4:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003cc6:	d003      	beq.n	8003cd0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	2204      	movs	r2, #4
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003cd0:	6a3a      	ldr	r2, [r7, #32]
 8003cd2:	2380      	movs	r3, #128	; 0x80
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	d03f      	beq.n	8003d5a <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2270      	movs	r2, #112	; 0x70
 8003cde:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003ce0:	d03b      	beq.n	8003d5a <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2270      	movs	r2, #112	; 0x70
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	2b60      	cmp	r3, #96	; 0x60
 8003cea:	d027      	beq.n	8003d3c <HAL_CAN_IRQHandler+0x320>
 8003cec:	d82c      	bhi.n	8003d48 <HAL_CAN_IRQHandler+0x32c>
 8003cee:	2b50      	cmp	r3, #80	; 0x50
 8003cf0:	d01f      	beq.n	8003d32 <HAL_CAN_IRQHandler+0x316>
 8003cf2:	d829      	bhi.n	8003d48 <HAL_CAN_IRQHandler+0x32c>
 8003cf4:	2b40      	cmp	r3, #64	; 0x40
 8003cf6:	d017      	beq.n	8003d28 <HAL_CAN_IRQHandler+0x30c>
 8003cf8:	d826      	bhi.n	8003d48 <HAL_CAN_IRQHandler+0x32c>
 8003cfa:	2b30      	cmp	r3, #48	; 0x30
 8003cfc:	d00f      	beq.n	8003d1e <HAL_CAN_IRQHandler+0x302>
 8003cfe:	d823      	bhi.n	8003d48 <HAL_CAN_IRQHandler+0x32c>
 8003d00:	2b10      	cmp	r3, #16
 8003d02:	d002      	beq.n	8003d0a <HAL_CAN_IRQHandler+0x2ee>
 8003d04:	2b20      	cmp	r3, #32
 8003d06:	d005      	beq.n	8003d14 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003d08:	e01e      	b.n	8003d48 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	2208      	movs	r2, #8
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d12:	e01a      	b.n	8003d4a <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	2210      	movs	r2, #16
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d1c:	e015      	b.n	8003d4a <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	2220      	movs	r2, #32
 8003d22:	4313      	orrs	r3, r2
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d26:	e010      	b.n	8003d4a <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	2240      	movs	r2, #64	; 0x40
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d30:	e00b      	b.n	8003d4a <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	2280      	movs	r2, #128	; 0x80
 8003d36:	4313      	orrs	r3, r2
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d3a:	e006      	b.n	8003d4a <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	2280      	movs	r2, #128	; 0x80
 8003d40:	0052      	lsls	r2, r2, #1
 8003d42:	4313      	orrs	r3, r2
 8003d44:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d46:	e000      	b.n	8003d4a <HAL_CAN_IRQHandler+0x32e>
            break;
 8003d48:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	699a      	ldr	r2, [r3, #24]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2170      	movs	r1, #112	; 0x70
 8003d56:	438a      	bics	r2, r1
 8003d58:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2204      	movs	r2, #4
 8003d60:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d009      	beq.n	8003d7c <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	0018      	movs	r0, r3
 8003d78:	f000 f844 	bl	8003e04 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003d7c:	46c0      	nop			; (mov r8, r8)
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	b00a      	add	sp, #40	; 0x28
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003d8c:	46c0      	nop			; (mov r8, r8)
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	b002      	add	sp, #8
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003d9c:	46c0      	nop			; (mov r8, r8)
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	b002      	add	sp, #8
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003dac:	46c0      	nop			; (mov r8, r8)
 8003dae:	46bd      	mov	sp, r7
 8003db0:	b002      	add	sp, #8
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003dbc:	46c0      	nop			; (mov r8, r8)
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	b002      	add	sp, #8
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003dcc:	46c0      	nop			; (mov r8, r8)
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	b002      	add	sp, #8
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003ddc:	46c0      	nop			; (mov r8, r8)
 8003dde:	46bd      	mov	sp, r7
 8003de0:	b002      	add	sp, #8
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003dec:	46c0      	nop			; (mov r8, r8)
 8003dee:	46bd      	mov	sp, r7
 8003df0:	b002      	add	sp, #8
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003dfc:	46c0      	nop			; (mov r8, r8)
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	b002      	add	sp, #8
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003e0c:	46c0      	nop			; (mov r8, r8)
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	b002      	add	sp, #8
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	0002      	movs	r2, r0
 8003e1c:	1dfb      	adds	r3, r7, #7
 8003e1e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003e20:	1dfb      	adds	r3, r7, #7
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	2b7f      	cmp	r3, #127	; 0x7f
 8003e26:	d809      	bhi.n	8003e3c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e28:	1dfb      	adds	r3, r7, #7
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	001a      	movs	r2, r3
 8003e2e:	231f      	movs	r3, #31
 8003e30:	401a      	ands	r2, r3
 8003e32:	4b04      	ldr	r3, [pc, #16]	; (8003e44 <__NVIC_EnableIRQ+0x30>)
 8003e34:	2101      	movs	r1, #1
 8003e36:	4091      	lsls	r1, r2
 8003e38:	000a      	movs	r2, r1
 8003e3a:	601a      	str	r2, [r3, #0]
  }
}
 8003e3c:	46c0      	nop			; (mov r8, r8)
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	b002      	add	sp, #8
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	e000e100 	.word	0xe000e100

08003e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e48:	b590      	push	{r4, r7, lr}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	0002      	movs	r2, r0
 8003e50:	6039      	str	r1, [r7, #0]
 8003e52:	1dfb      	adds	r3, r7, #7
 8003e54:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003e56:	1dfb      	adds	r3, r7, #7
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	2b7f      	cmp	r3, #127	; 0x7f
 8003e5c:	d828      	bhi.n	8003eb0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e5e:	4a2f      	ldr	r2, [pc, #188]	; (8003f1c <__NVIC_SetPriority+0xd4>)
 8003e60:	1dfb      	adds	r3, r7, #7
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	b25b      	sxtb	r3, r3
 8003e66:	089b      	lsrs	r3, r3, #2
 8003e68:	33c0      	adds	r3, #192	; 0xc0
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	589b      	ldr	r3, [r3, r2]
 8003e6e:	1dfa      	adds	r2, r7, #7
 8003e70:	7812      	ldrb	r2, [r2, #0]
 8003e72:	0011      	movs	r1, r2
 8003e74:	2203      	movs	r2, #3
 8003e76:	400a      	ands	r2, r1
 8003e78:	00d2      	lsls	r2, r2, #3
 8003e7a:	21ff      	movs	r1, #255	; 0xff
 8003e7c:	4091      	lsls	r1, r2
 8003e7e:	000a      	movs	r2, r1
 8003e80:	43d2      	mvns	r2, r2
 8003e82:	401a      	ands	r2, r3
 8003e84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	019b      	lsls	r3, r3, #6
 8003e8a:	22ff      	movs	r2, #255	; 0xff
 8003e8c:	401a      	ands	r2, r3
 8003e8e:	1dfb      	adds	r3, r7, #7
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	0018      	movs	r0, r3
 8003e94:	2303      	movs	r3, #3
 8003e96:	4003      	ands	r3, r0
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e9c:	481f      	ldr	r0, [pc, #124]	; (8003f1c <__NVIC_SetPriority+0xd4>)
 8003e9e:	1dfb      	adds	r3, r7, #7
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	b25b      	sxtb	r3, r3
 8003ea4:	089b      	lsrs	r3, r3, #2
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	33c0      	adds	r3, #192	; 0xc0
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003eae:	e031      	b.n	8003f14 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003eb0:	4a1b      	ldr	r2, [pc, #108]	; (8003f20 <__NVIC_SetPriority+0xd8>)
 8003eb2:	1dfb      	adds	r3, r7, #7
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	0019      	movs	r1, r3
 8003eb8:	230f      	movs	r3, #15
 8003eba:	400b      	ands	r3, r1
 8003ebc:	3b08      	subs	r3, #8
 8003ebe:	089b      	lsrs	r3, r3, #2
 8003ec0:	3306      	adds	r3, #6
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	18d3      	adds	r3, r2, r3
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	1dfa      	adds	r2, r7, #7
 8003ecc:	7812      	ldrb	r2, [r2, #0]
 8003ece:	0011      	movs	r1, r2
 8003ed0:	2203      	movs	r2, #3
 8003ed2:	400a      	ands	r2, r1
 8003ed4:	00d2      	lsls	r2, r2, #3
 8003ed6:	21ff      	movs	r1, #255	; 0xff
 8003ed8:	4091      	lsls	r1, r2
 8003eda:	000a      	movs	r2, r1
 8003edc:	43d2      	mvns	r2, r2
 8003ede:	401a      	ands	r2, r3
 8003ee0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	019b      	lsls	r3, r3, #6
 8003ee6:	22ff      	movs	r2, #255	; 0xff
 8003ee8:	401a      	ands	r2, r3
 8003eea:	1dfb      	adds	r3, r7, #7
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	0018      	movs	r0, r3
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	4003      	ands	r3, r0
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ef8:	4809      	ldr	r0, [pc, #36]	; (8003f20 <__NVIC_SetPriority+0xd8>)
 8003efa:	1dfb      	adds	r3, r7, #7
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	001c      	movs	r4, r3
 8003f00:	230f      	movs	r3, #15
 8003f02:	4023      	ands	r3, r4
 8003f04:	3b08      	subs	r3, #8
 8003f06:	089b      	lsrs	r3, r3, #2
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	3306      	adds	r3, #6
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	18c3      	adds	r3, r0, r3
 8003f10:	3304      	adds	r3, #4
 8003f12:	601a      	str	r2, [r3, #0]
}
 8003f14:	46c0      	nop			; (mov r8, r8)
 8003f16:	46bd      	mov	sp, r7
 8003f18:	b003      	add	sp, #12
 8003f1a:	bd90      	pop	{r4, r7, pc}
 8003f1c:	e000e100 	.word	0xe000e100
 8003f20:	e000ed00 	.word	0xe000ed00

08003f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	1e5a      	subs	r2, r3, #1
 8003f30:	2380      	movs	r3, #128	; 0x80
 8003f32:	045b      	lsls	r3, r3, #17
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d301      	bcc.n	8003f3c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e010      	b.n	8003f5e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	; (8003f68 <SysTick_Config+0x44>)
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	3a01      	subs	r2, #1
 8003f42:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f44:	2301      	movs	r3, #1
 8003f46:	425b      	negs	r3, r3
 8003f48:	2103      	movs	r1, #3
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f7ff ff7c 	bl	8003e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f50:	4b05      	ldr	r3, [pc, #20]	; (8003f68 <SysTick_Config+0x44>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f56:	4b04      	ldr	r3, [pc, #16]	; (8003f68 <SysTick_Config+0x44>)
 8003f58:	2207      	movs	r2, #7
 8003f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	0018      	movs	r0, r3
 8003f60:	46bd      	mov	sp, r7
 8003f62:	b002      	add	sp, #8
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	46c0      	nop			; (mov r8, r8)
 8003f68:	e000e010 	.word	0xe000e010

08003f6c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	607a      	str	r2, [r7, #4]
 8003f76:	210f      	movs	r1, #15
 8003f78:	187b      	adds	r3, r7, r1
 8003f7a:	1c02      	adds	r2, r0, #0
 8003f7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	187b      	adds	r3, r7, r1
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	b25b      	sxtb	r3, r3
 8003f86:	0011      	movs	r1, r2
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f7ff ff5d 	bl	8003e48 <__NVIC_SetPriority>
}
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	46bd      	mov	sp, r7
 8003f92:	b004      	add	sp, #16
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b082      	sub	sp, #8
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	0002      	movs	r2, r0
 8003f9e:	1dfb      	adds	r3, r7, #7
 8003fa0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fa2:	1dfb      	adds	r3, r7, #7
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	b25b      	sxtb	r3, r3
 8003fa8:	0018      	movs	r0, r3
 8003faa:	f7ff ff33 	bl	8003e14 <__NVIC_EnableIRQ>
}
 8003fae:	46c0      	nop			; (mov r8, r8)
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	b002      	add	sp, #8
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b082      	sub	sp, #8
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	f7ff ffaf 	bl	8003f24 <SysTick_Config>
 8003fc6:	0003      	movs	r3, r0
}
 8003fc8:	0018      	movs	r0, r3
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	b002      	add	sp, #8
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e036      	b.n	8004054 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2221      	movs	r2, #33	; 0x21
 8003fea:	2102      	movs	r1, #2
 8003fec:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	4a18      	ldr	r2, [pc, #96]	; (800405c <HAL_DMA_Init+0x8c>)
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004006:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004012:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800401e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	69db      	ldr	r3, [r3, #28]
 8004024:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	4313      	orrs	r3, r2
 800402a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	0018      	movs	r0, r3
 8004038:	f000 f98c 	bl	8004354 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2221      	movs	r2, #33	; 0x21
 8004046:	2101      	movs	r1, #1
 8004048:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2220      	movs	r2, #32
 800404e:	2100      	movs	r1, #0
 8004050:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	0018      	movs	r0, r3
 8004056:	46bd      	mov	sp, r7
 8004058:	b004      	add	sp, #16
 800405a:	bd80      	pop	{r7, pc}
 800405c:	ffffc00f 	.word	0xffffc00f

08004060 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
 800406c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800406e:	2317      	movs	r3, #23
 8004070:	18fb      	adds	r3, r7, r3
 8004072:	2200      	movs	r2, #0
 8004074:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2220      	movs	r2, #32
 800407a:	5c9b      	ldrb	r3, [r3, r2]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <HAL_DMA_Start_IT+0x24>
 8004080:	2302      	movs	r3, #2
 8004082:	e04f      	b.n	8004124 <HAL_DMA_Start_IT+0xc4>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2220      	movs	r2, #32
 8004088:	2101      	movs	r1, #1
 800408a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2221      	movs	r2, #33	; 0x21
 8004090:	5c9b      	ldrb	r3, [r3, r2]
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b01      	cmp	r3, #1
 8004096:	d13a      	bne.n	800410e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2221      	movs	r2, #33	; 0x21
 800409c:	2102      	movs	r1, #2
 800409e:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2101      	movs	r1, #1
 80040b2:	438a      	bics	r2, r1
 80040b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	68b9      	ldr	r1, [r7, #8]
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 f91c 	bl	80042fa <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d008      	beq.n	80040dc <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	210e      	movs	r1, #14
 80040d6:	430a      	orrs	r2, r1
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	e00f      	b.n	80040fc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	210a      	movs	r1, #10
 80040e8:	430a      	orrs	r2, r1
 80040ea:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2104      	movs	r1, #4
 80040f8:	438a      	bics	r2, r1
 80040fa:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2101      	movs	r1, #1
 8004108:	430a      	orrs	r2, r1
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	e007      	b.n	800411e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2220      	movs	r2, #32
 8004112:	2100      	movs	r1, #0
 8004114:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004116:	2317      	movs	r3, #23
 8004118:	18fb      	adds	r3, r7, r3
 800411a:	2202      	movs	r2, #2
 800411c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800411e:	2317      	movs	r3, #23
 8004120:	18fb      	adds	r3, r7, r3
 8004122:	781b      	ldrb	r3, [r3, #0]
}
 8004124:	0018      	movs	r0, r3
 8004126:	46bd      	mov	sp, r7
 8004128:	b006      	add	sp, #24
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004134:	210f      	movs	r1, #15
 8004136:	187b      	adds	r3, r7, r1
 8004138:	2200      	movs	r2, #0
 800413a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2221      	movs	r2, #33	; 0x21
 8004140:	5c9b      	ldrb	r3, [r3, r2]
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d006      	beq.n	8004156 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2204      	movs	r2, #4
 800414c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800414e:	187b      	adds	r3, r7, r1
 8004150:	2201      	movs	r2, #1
 8004152:	701a      	strb	r2, [r3, #0]
 8004154:	e028      	b.n	80041a8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	210e      	movs	r1, #14
 8004162:	438a      	bics	r2, r1
 8004164:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2101      	movs	r1, #1
 8004172:	438a      	bics	r2, r1
 8004174:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417e:	2101      	movs	r1, #1
 8004180:	4091      	lsls	r1, r2
 8004182:	000a      	movs	r2, r1
 8004184:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2221      	movs	r2, #33	; 0x21
 800418a:	2101      	movs	r1, #1
 800418c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2220      	movs	r2, #32
 8004192:	2100      	movs	r1, #0
 8004194:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800419a:	2b00      	cmp	r3, #0
 800419c:	d004      	beq.n	80041a8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	0010      	movs	r0, r2
 80041a6:	4798      	blx	r3
    }
  }
  return status;
 80041a8:	230f      	movs	r3, #15
 80041aa:	18fb      	adds	r3, r7, r3
 80041ac:	781b      	ldrb	r3, [r3, #0]
}
 80041ae:	0018      	movs	r0, r3
 80041b0:	46bd      	mov	sp, r7
 80041b2:	b004      	add	sp, #16
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b084      	sub	sp, #16
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	2204      	movs	r2, #4
 80041d4:	409a      	lsls	r2, r3
 80041d6:	0013      	movs	r3, r2
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	4013      	ands	r3, r2
 80041dc:	d024      	beq.n	8004228 <HAL_DMA_IRQHandler+0x72>
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	2204      	movs	r2, #4
 80041e2:	4013      	ands	r3, r2
 80041e4:	d020      	beq.n	8004228 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2220      	movs	r2, #32
 80041ee:	4013      	ands	r3, r2
 80041f0:	d107      	bne.n	8004202 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2104      	movs	r1, #4
 80041fe:	438a      	bics	r2, r1
 8004200:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420a:	2104      	movs	r1, #4
 800420c:	4091      	lsls	r1, r2
 800420e:	000a      	movs	r2, r1
 8004210:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004216:	2b00      	cmp	r3, #0
 8004218:	d100      	bne.n	800421c <HAL_DMA_IRQHandler+0x66>
 800421a:	e06a      	b.n	80042f2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	0010      	movs	r0, r2
 8004224:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004226:	e064      	b.n	80042f2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	2202      	movs	r2, #2
 800422e:	409a      	lsls	r2, r3
 8004230:	0013      	movs	r3, r2
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	4013      	ands	r3, r2
 8004236:	d02b      	beq.n	8004290 <HAL_DMA_IRQHandler+0xda>
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2202      	movs	r2, #2
 800423c:	4013      	ands	r3, r2
 800423e:	d027      	beq.n	8004290 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2220      	movs	r2, #32
 8004248:	4013      	ands	r3, r2
 800424a:	d10b      	bne.n	8004264 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	210a      	movs	r1, #10
 8004258:	438a      	bics	r2, r1
 800425a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2221      	movs	r2, #33	; 0x21
 8004260:	2101      	movs	r1, #1
 8004262:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426c:	2102      	movs	r1, #2
 800426e:	4091      	lsls	r1, r2
 8004270:	000a      	movs	r2, r1
 8004272:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2220      	movs	r2, #32
 8004278:	2100      	movs	r1, #0
 800427a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	2b00      	cmp	r3, #0
 8004282:	d036      	beq.n	80042f2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	0010      	movs	r0, r2
 800428c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800428e:	e030      	b.n	80042f2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004294:	2208      	movs	r2, #8
 8004296:	409a      	lsls	r2, r3
 8004298:	0013      	movs	r3, r2
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	4013      	ands	r3, r2
 800429e:	d028      	beq.n	80042f2 <HAL_DMA_IRQHandler+0x13c>
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2208      	movs	r2, #8
 80042a4:	4013      	ands	r3, r2
 80042a6:	d024      	beq.n	80042f2 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	210e      	movs	r1, #14
 80042b4:	438a      	bics	r2, r1
 80042b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c0:	2101      	movs	r1, #1
 80042c2:	4091      	lsls	r1, r2
 80042c4:	000a      	movs	r2, r1
 80042c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2221      	movs	r2, #33	; 0x21
 80042d2:	2101      	movs	r1, #1
 80042d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2220      	movs	r2, #32
 80042da:	2100      	movs	r1, #0
 80042dc:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d005      	beq.n	80042f2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	0010      	movs	r0, r2
 80042ee:	4798      	blx	r3
    }
  }
}
 80042f0:	e7ff      	b.n	80042f2 <HAL_DMA_IRQHandler+0x13c>
 80042f2:	46c0      	nop			; (mov r8, r8)
 80042f4:	46bd      	mov	sp, r7
 80042f6:	b004      	add	sp, #16
 80042f8:	bd80      	pop	{r7, pc}

080042fa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b084      	sub	sp, #16
 80042fe:	af00      	add	r7, sp, #0
 8004300:	60f8      	str	r0, [r7, #12]
 8004302:	60b9      	str	r1, [r7, #8]
 8004304:	607a      	str	r2, [r7, #4]
 8004306:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004310:	2101      	movs	r1, #1
 8004312:	4091      	lsls	r1, r2
 8004314:	000a      	movs	r2, r1
 8004316:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2b10      	cmp	r3, #16
 8004326:	d108      	bne.n	800433a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004338:	e007      	b.n	800434a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	60da      	str	r2, [r3, #12]
}
 800434a:	46c0      	nop			; (mov r8, r8)
 800434c:	46bd      	mov	sp, r7
 800434e:	b004      	add	sp, #16
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a08      	ldr	r2, [pc, #32]	; (8004384 <DMA_CalcBaseAndBitshift+0x30>)
 8004362:	4694      	mov	ip, r2
 8004364:	4463      	add	r3, ip
 8004366:	2114      	movs	r1, #20
 8004368:	0018      	movs	r0, r3
 800436a:	f7fb fed7 	bl	800011c <__udivsi3>
 800436e:	0003      	movs	r3, r0
 8004370:	009a      	lsls	r2, r3, #2
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a03      	ldr	r2, [pc, #12]	; (8004388 <DMA_CalcBaseAndBitshift+0x34>)
 800437a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800437c:	46c0      	nop			; (mov r8, r8)
 800437e:	46bd      	mov	sp, r7
 8004380:	b002      	add	sp, #8
 8004382:	bd80      	pop	{r7, pc}
 8004384:	bffdfff8 	.word	0xbffdfff8
 8004388:	40020000 	.word	0x40020000

0800438c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004396:	2300      	movs	r3, #0
 8004398:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800439a:	e155      	b.n	8004648 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2101      	movs	r1, #1
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	4091      	lsls	r1, r2
 80043a6:	000a      	movs	r2, r1
 80043a8:	4013      	ands	r3, r2
 80043aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d100      	bne.n	80043b4 <HAL_GPIO_Init+0x28>
 80043b2:	e146      	b.n	8004642 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	2203      	movs	r2, #3
 80043ba:	4013      	ands	r3, r2
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d005      	beq.n	80043cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2203      	movs	r2, #3
 80043c6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d130      	bne.n	800442e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	2203      	movs	r2, #3
 80043d8:	409a      	lsls	r2, r3
 80043da:	0013      	movs	r3, r2
 80043dc:	43da      	mvns	r2, r3
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	4013      	ands	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	409a      	lsls	r2, r3
 80043ee:	0013      	movs	r3, r2
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004402:	2201      	movs	r2, #1
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	409a      	lsls	r2, r3
 8004408:	0013      	movs	r3, r2
 800440a:	43da      	mvns	r2, r3
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	4013      	ands	r3, r2
 8004410:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	091b      	lsrs	r3, r3, #4
 8004418:	2201      	movs	r2, #1
 800441a:	401a      	ands	r2, r3
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	409a      	lsls	r2, r3
 8004420:	0013      	movs	r3, r2
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	4313      	orrs	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2203      	movs	r2, #3
 8004434:	4013      	ands	r3, r2
 8004436:	2b03      	cmp	r3, #3
 8004438:	d017      	beq.n	800446a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	2203      	movs	r2, #3
 8004446:	409a      	lsls	r2, r3
 8004448:	0013      	movs	r3, r2
 800444a:	43da      	mvns	r2, r3
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	4013      	ands	r3, r2
 8004450:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	409a      	lsls	r2, r3
 800445c:	0013      	movs	r3, r2
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	4313      	orrs	r3, r2
 8004462:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	2203      	movs	r2, #3
 8004470:	4013      	ands	r3, r2
 8004472:	2b02      	cmp	r3, #2
 8004474:	d123      	bne.n	80044be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	08da      	lsrs	r2, r3, #3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	3208      	adds	r2, #8
 800447e:	0092      	lsls	r2, r2, #2
 8004480:	58d3      	ldr	r3, [r2, r3]
 8004482:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	2207      	movs	r2, #7
 8004488:	4013      	ands	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	220f      	movs	r2, #15
 800448e:	409a      	lsls	r2, r3
 8004490:	0013      	movs	r3, r2
 8004492:	43da      	mvns	r2, r3
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	4013      	ands	r3, r2
 8004498:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	691a      	ldr	r2, [r3, #16]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2107      	movs	r1, #7
 80044a2:	400b      	ands	r3, r1
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	409a      	lsls	r2, r3
 80044a8:	0013      	movs	r3, r2
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	08da      	lsrs	r2, r3, #3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3208      	adds	r2, #8
 80044b8:	0092      	lsls	r2, r2, #2
 80044ba:	6939      	ldr	r1, [r7, #16]
 80044bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	2203      	movs	r2, #3
 80044ca:	409a      	lsls	r2, r3
 80044cc:	0013      	movs	r3, r2
 80044ce:	43da      	mvns	r2, r3
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	4013      	ands	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2203      	movs	r2, #3
 80044dc:	401a      	ands	r2, r3
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	409a      	lsls	r2, r3
 80044e4:	0013      	movs	r3, r2
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	23c0      	movs	r3, #192	; 0xc0
 80044f8:	029b      	lsls	r3, r3, #10
 80044fa:	4013      	ands	r3, r2
 80044fc:	d100      	bne.n	8004500 <HAL_GPIO_Init+0x174>
 80044fe:	e0a0      	b.n	8004642 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004500:	4b57      	ldr	r3, [pc, #348]	; (8004660 <HAL_GPIO_Init+0x2d4>)
 8004502:	699a      	ldr	r2, [r3, #24]
 8004504:	4b56      	ldr	r3, [pc, #344]	; (8004660 <HAL_GPIO_Init+0x2d4>)
 8004506:	2101      	movs	r1, #1
 8004508:	430a      	orrs	r2, r1
 800450a:	619a      	str	r2, [r3, #24]
 800450c:	4b54      	ldr	r3, [pc, #336]	; (8004660 <HAL_GPIO_Init+0x2d4>)
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	2201      	movs	r2, #1
 8004512:	4013      	ands	r3, r2
 8004514:	60bb      	str	r3, [r7, #8]
 8004516:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004518:	4a52      	ldr	r2, [pc, #328]	; (8004664 <HAL_GPIO_Init+0x2d8>)
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	089b      	lsrs	r3, r3, #2
 800451e:	3302      	adds	r3, #2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	589b      	ldr	r3, [r3, r2]
 8004524:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	2203      	movs	r2, #3
 800452a:	4013      	ands	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	220f      	movs	r2, #15
 8004530:	409a      	lsls	r2, r3
 8004532:	0013      	movs	r3, r2
 8004534:	43da      	mvns	r2, r3
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	4013      	ands	r3, r2
 800453a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	2390      	movs	r3, #144	; 0x90
 8004540:	05db      	lsls	r3, r3, #23
 8004542:	429a      	cmp	r2, r3
 8004544:	d019      	beq.n	800457a <HAL_GPIO_Init+0x1ee>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a47      	ldr	r2, [pc, #284]	; (8004668 <HAL_GPIO_Init+0x2dc>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d013      	beq.n	8004576 <HAL_GPIO_Init+0x1ea>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a46      	ldr	r2, [pc, #280]	; (800466c <HAL_GPIO_Init+0x2e0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00d      	beq.n	8004572 <HAL_GPIO_Init+0x1e6>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a45      	ldr	r2, [pc, #276]	; (8004670 <HAL_GPIO_Init+0x2e4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d007      	beq.n	800456e <HAL_GPIO_Init+0x1e2>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a44      	ldr	r2, [pc, #272]	; (8004674 <HAL_GPIO_Init+0x2e8>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d101      	bne.n	800456a <HAL_GPIO_Init+0x1de>
 8004566:	2304      	movs	r3, #4
 8004568:	e008      	b.n	800457c <HAL_GPIO_Init+0x1f0>
 800456a:	2305      	movs	r3, #5
 800456c:	e006      	b.n	800457c <HAL_GPIO_Init+0x1f0>
 800456e:	2303      	movs	r3, #3
 8004570:	e004      	b.n	800457c <HAL_GPIO_Init+0x1f0>
 8004572:	2302      	movs	r3, #2
 8004574:	e002      	b.n	800457c <HAL_GPIO_Init+0x1f0>
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <HAL_GPIO_Init+0x1f0>
 800457a:	2300      	movs	r3, #0
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	2103      	movs	r1, #3
 8004580:	400a      	ands	r2, r1
 8004582:	0092      	lsls	r2, r2, #2
 8004584:	4093      	lsls	r3, r2
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	4313      	orrs	r3, r2
 800458a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800458c:	4935      	ldr	r1, [pc, #212]	; (8004664 <HAL_GPIO_Init+0x2d8>)
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	089b      	lsrs	r3, r3, #2
 8004592:	3302      	adds	r3, #2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800459a:	4b37      	ldr	r3, [pc, #220]	; (8004678 <HAL_GPIO_Init+0x2ec>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	43da      	mvns	r2, r3
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	4013      	ands	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	2380      	movs	r3, #128	; 0x80
 80045b0:	035b      	lsls	r3, r3, #13
 80045b2:	4013      	ands	r3, r2
 80045b4:	d003      	beq.n	80045be <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80045be:	4b2e      	ldr	r3, [pc, #184]	; (8004678 <HAL_GPIO_Init+0x2ec>)
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80045c4:	4b2c      	ldr	r3, [pc, #176]	; (8004678 <HAL_GPIO_Init+0x2ec>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	43da      	mvns	r2, r3
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	4013      	ands	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	2380      	movs	r3, #128	; 0x80
 80045da:	039b      	lsls	r3, r3, #14
 80045dc:	4013      	ands	r3, r2
 80045de:	d003      	beq.n	80045e8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80045e8:	4b23      	ldr	r3, [pc, #140]	; (8004678 <HAL_GPIO_Init+0x2ec>)
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80045ee:	4b22      	ldr	r3, [pc, #136]	; (8004678 <HAL_GPIO_Init+0x2ec>)
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	43da      	mvns	r2, r3
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	4013      	ands	r3, r2
 80045fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	2380      	movs	r3, #128	; 0x80
 8004604:	029b      	lsls	r3, r3, #10
 8004606:	4013      	ands	r3, r2
 8004608:	d003      	beq.n	8004612 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4313      	orrs	r3, r2
 8004610:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004612:	4b19      	ldr	r3, [pc, #100]	; (8004678 <HAL_GPIO_Init+0x2ec>)
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8004618:	4b17      	ldr	r3, [pc, #92]	; (8004678 <HAL_GPIO_Init+0x2ec>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	43da      	mvns	r2, r3
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	4013      	ands	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	2380      	movs	r3, #128	; 0x80
 800462e:	025b      	lsls	r3, r3, #9
 8004630:	4013      	ands	r3, r2
 8004632:	d003      	beq.n	800463c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	4313      	orrs	r3, r2
 800463a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800463c:	4b0e      	ldr	r3, [pc, #56]	; (8004678 <HAL_GPIO_Init+0x2ec>)
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	3301      	adds	r3, #1
 8004646:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	40da      	lsrs	r2, r3
 8004650:	1e13      	subs	r3, r2, #0
 8004652:	d000      	beq.n	8004656 <HAL_GPIO_Init+0x2ca>
 8004654:	e6a2      	b.n	800439c <HAL_GPIO_Init+0x10>
  } 
}
 8004656:	46c0      	nop			; (mov r8, r8)
 8004658:	46c0      	nop			; (mov r8, r8)
 800465a:	46bd      	mov	sp, r7
 800465c:	b006      	add	sp, #24
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40021000 	.word	0x40021000
 8004664:	40010000 	.word	0x40010000
 8004668:	48000400 	.word	0x48000400
 800466c:	48000800 	.word	0x48000800
 8004670:	48000c00 	.word	0x48000c00
 8004674:	48001000 	.word	0x48001000
 8004678:	40010400 	.word	0x40010400

0800467c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	0008      	movs	r0, r1
 8004686:	0011      	movs	r1, r2
 8004688:	1cbb      	adds	r3, r7, #2
 800468a:	1c02      	adds	r2, r0, #0
 800468c:	801a      	strh	r2, [r3, #0]
 800468e:	1c7b      	adds	r3, r7, #1
 8004690:	1c0a      	adds	r2, r1, #0
 8004692:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004694:	1c7b      	adds	r3, r7, #1
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d004      	beq.n	80046a6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800469c:	1cbb      	adds	r3, r7, #2
 800469e:	881a      	ldrh	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046a4:	e003      	b.n	80046ae <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046a6:	1cbb      	adds	r3, r7, #2
 80046a8:	881a      	ldrh	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046ae:	46c0      	nop			; (mov r8, r8)
 80046b0:	46bd      	mov	sp, r7
 80046b2:	b002      	add	sp, #8
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b084      	sub	sp, #16
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	000a      	movs	r2, r1
 80046c0:	1cbb      	adds	r3, r7, #2
 80046c2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	695b      	ldr	r3, [r3, #20]
 80046c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80046ca:	1cbb      	adds	r3, r7, #2
 80046cc:	881b      	ldrh	r3, [r3, #0]
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	4013      	ands	r3, r2
 80046d2:	041a      	lsls	r2, r3, #16
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	43db      	mvns	r3, r3
 80046d8:	1cb9      	adds	r1, r7, #2
 80046da:	8809      	ldrh	r1, [r1, #0]
 80046dc:	400b      	ands	r3, r1
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	619a      	str	r2, [r3, #24]
}
 80046e4:	46c0      	nop			; (mov r8, r8)
 80046e6:	46bd      	mov	sp, r7
 80046e8:	b004      	add	sp, #16
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b088      	sub	sp, #32
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d102      	bne.n	8004700 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	f000 fb76 	bl	8004dec <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2201      	movs	r2, #1
 8004706:	4013      	ands	r3, r2
 8004708:	d100      	bne.n	800470c <HAL_RCC_OscConfig+0x20>
 800470a:	e08e      	b.n	800482a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800470c:	4bc5      	ldr	r3, [pc, #788]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	220c      	movs	r2, #12
 8004712:	4013      	ands	r3, r2
 8004714:	2b04      	cmp	r3, #4
 8004716:	d00e      	beq.n	8004736 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004718:	4bc2      	ldr	r3, [pc, #776]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	220c      	movs	r2, #12
 800471e:	4013      	ands	r3, r2
 8004720:	2b08      	cmp	r3, #8
 8004722:	d117      	bne.n	8004754 <HAL_RCC_OscConfig+0x68>
 8004724:	4bbf      	ldr	r3, [pc, #764]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	23c0      	movs	r3, #192	; 0xc0
 800472a:	025b      	lsls	r3, r3, #9
 800472c:	401a      	ands	r2, r3
 800472e:	2380      	movs	r3, #128	; 0x80
 8004730:	025b      	lsls	r3, r3, #9
 8004732:	429a      	cmp	r2, r3
 8004734:	d10e      	bne.n	8004754 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004736:	4bbb      	ldr	r3, [pc, #748]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	2380      	movs	r3, #128	; 0x80
 800473c:	029b      	lsls	r3, r3, #10
 800473e:	4013      	ands	r3, r2
 8004740:	d100      	bne.n	8004744 <HAL_RCC_OscConfig+0x58>
 8004742:	e071      	b.n	8004828 <HAL_RCC_OscConfig+0x13c>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d000      	beq.n	800474e <HAL_RCC_OscConfig+0x62>
 800474c:	e06c      	b.n	8004828 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	f000 fb4c 	bl	8004dec <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d107      	bne.n	800476c <HAL_RCC_OscConfig+0x80>
 800475c:	4bb1      	ldr	r3, [pc, #708]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	4bb0      	ldr	r3, [pc, #704]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 8004762:	2180      	movs	r1, #128	; 0x80
 8004764:	0249      	lsls	r1, r1, #9
 8004766:	430a      	orrs	r2, r1
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	e02f      	b.n	80047cc <HAL_RCC_OscConfig+0xe0>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10c      	bne.n	800478e <HAL_RCC_OscConfig+0xa2>
 8004774:	4bab      	ldr	r3, [pc, #684]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	4baa      	ldr	r3, [pc, #680]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 800477a:	49ab      	ldr	r1, [pc, #684]	; (8004a28 <HAL_RCC_OscConfig+0x33c>)
 800477c:	400a      	ands	r2, r1
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	4ba8      	ldr	r3, [pc, #672]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	4ba7      	ldr	r3, [pc, #668]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 8004786:	49a9      	ldr	r1, [pc, #676]	; (8004a2c <HAL_RCC_OscConfig+0x340>)
 8004788:	400a      	ands	r2, r1
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	e01e      	b.n	80047cc <HAL_RCC_OscConfig+0xe0>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2b05      	cmp	r3, #5
 8004794:	d10e      	bne.n	80047b4 <HAL_RCC_OscConfig+0xc8>
 8004796:	4ba3      	ldr	r3, [pc, #652]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	4ba2      	ldr	r3, [pc, #648]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 800479c:	2180      	movs	r1, #128	; 0x80
 800479e:	02c9      	lsls	r1, r1, #11
 80047a0:	430a      	orrs	r2, r1
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	4b9f      	ldr	r3, [pc, #636]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	4b9e      	ldr	r3, [pc, #632]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 80047aa:	2180      	movs	r1, #128	; 0x80
 80047ac:	0249      	lsls	r1, r1, #9
 80047ae:	430a      	orrs	r2, r1
 80047b0:	601a      	str	r2, [r3, #0]
 80047b2:	e00b      	b.n	80047cc <HAL_RCC_OscConfig+0xe0>
 80047b4:	4b9b      	ldr	r3, [pc, #620]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	4b9a      	ldr	r3, [pc, #616]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 80047ba:	499b      	ldr	r1, [pc, #620]	; (8004a28 <HAL_RCC_OscConfig+0x33c>)
 80047bc:	400a      	ands	r2, r1
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	4b98      	ldr	r3, [pc, #608]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	4b97      	ldr	r3, [pc, #604]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 80047c6:	4999      	ldr	r1, [pc, #612]	; (8004a2c <HAL_RCC_OscConfig+0x340>)
 80047c8:	400a      	ands	r2, r1
 80047ca:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d014      	beq.n	80047fe <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d4:	f7fd ff32 	bl	800263c <HAL_GetTick>
 80047d8:	0003      	movs	r3, r0
 80047da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047dc:	e008      	b.n	80047f0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047de:	f7fd ff2d 	bl	800263c <HAL_GetTick>
 80047e2:	0002      	movs	r2, r0
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b64      	cmp	r3, #100	; 0x64
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e2fd      	b.n	8004dec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f0:	4b8c      	ldr	r3, [pc, #560]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	2380      	movs	r3, #128	; 0x80
 80047f6:	029b      	lsls	r3, r3, #10
 80047f8:	4013      	ands	r3, r2
 80047fa:	d0f0      	beq.n	80047de <HAL_RCC_OscConfig+0xf2>
 80047fc:	e015      	b.n	800482a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047fe:	f7fd ff1d 	bl	800263c <HAL_GetTick>
 8004802:	0003      	movs	r3, r0
 8004804:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004808:	f7fd ff18 	bl	800263c <HAL_GetTick>
 800480c:	0002      	movs	r2, r0
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b64      	cmp	r3, #100	; 0x64
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e2e8      	b.n	8004dec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800481a:	4b82      	ldr	r3, [pc, #520]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	2380      	movs	r3, #128	; 0x80
 8004820:	029b      	lsls	r3, r3, #10
 8004822:	4013      	ands	r3, r2
 8004824:	d1f0      	bne.n	8004808 <HAL_RCC_OscConfig+0x11c>
 8004826:	e000      	b.n	800482a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004828:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2202      	movs	r2, #2
 8004830:	4013      	ands	r3, r2
 8004832:	d100      	bne.n	8004836 <HAL_RCC_OscConfig+0x14a>
 8004834:	e06c      	b.n	8004910 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004836:	4b7b      	ldr	r3, [pc, #492]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	220c      	movs	r2, #12
 800483c:	4013      	ands	r3, r2
 800483e:	d00e      	beq.n	800485e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004840:	4b78      	ldr	r3, [pc, #480]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	220c      	movs	r2, #12
 8004846:	4013      	ands	r3, r2
 8004848:	2b08      	cmp	r3, #8
 800484a:	d11f      	bne.n	800488c <HAL_RCC_OscConfig+0x1a0>
 800484c:	4b75      	ldr	r3, [pc, #468]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	23c0      	movs	r3, #192	; 0xc0
 8004852:	025b      	lsls	r3, r3, #9
 8004854:	401a      	ands	r2, r3
 8004856:	2380      	movs	r3, #128	; 0x80
 8004858:	021b      	lsls	r3, r3, #8
 800485a:	429a      	cmp	r2, r3
 800485c:	d116      	bne.n	800488c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800485e:	4b71      	ldr	r3, [pc, #452]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2202      	movs	r2, #2
 8004864:	4013      	ands	r3, r2
 8004866:	d005      	beq.n	8004874 <HAL_RCC_OscConfig+0x188>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d001      	beq.n	8004874 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e2bb      	b.n	8004dec <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004874:	4b6b      	ldr	r3, [pc, #428]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	22f8      	movs	r2, #248	; 0xf8
 800487a:	4393      	bics	r3, r2
 800487c:	0019      	movs	r1, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	00da      	lsls	r2, r3, #3
 8004884:	4b67      	ldr	r3, [pc, #412]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 8004886:	430a      	orrs	r2, r1
 8004888:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800488a:	e041      	b.n	8004910 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d024      	beq.n	80048de <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004894:	4b63      	ldr	r3, [pc, #396]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	4b62      	ldr	r3, [pc, #392]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 800489a:	2101      	movs	r1, #1
 800489c:	430a      	orrs	r2, r1
 800489e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a0:	f7fd fecc 	bl	800263c <HAL_GetTick>
 80048a4:	0003      	movs	r3, r0
 80048a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a8:	e008      	b.n	80048bc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048aa:	f7fd fec7 	bl	800263c <HAL_GetTick>
 80048ae:	0002      	movs	r2, r0
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d901      	bls.n	80048bc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e297      	b.n	8004dec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048bc:	4b59      	ldr	r3, [pc, #356]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2202      	movs	r2, #2
 80048c2:	4013      	ands	r3, r2
 80048c4:	d0f1      	beq.n	80048aa <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c6:	4b57      	ldr	r3, [pc, #348]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	22f8      	movs	r2, #248	; 0xf8
 80048cc:	4393      	bics	r3, r2
 80048ce:	0019      	movs	r1, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	00da      	lsls	r2, r3, #3
 80048d6:	4b53      	ldr	r3, [pc, #332]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 80048d8:	430a      	orrs	r2, r1
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	e018      	b.n	8004910 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048de:	4b51      	ldr	r3, [pc, #324]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	4b50      	ldr	r3, [pc, #320]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 80048e4:	2101      	movs	r1, #1
 80048e6:	438a      	bics	r2, r1
 80048e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ea:	f7fd fea7 	bl	800263c <HAL_GetTick>
 80048ee:	0003      	movs	r3, r0
 80048f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048f4:	f7fd fea2 	bl	800263c <HAL_GetTick>
 80048f8:	0002      	movs	r2, r0
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e272      	b.n	8004dec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004906:	4b47      	ldr	r3, [pc, #284]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2202      	movs	r2, #2
 800490c:	4013      	ands	r3, r2
 800490e:	d1f1      	bne.n	80048f4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2208      	movs	r2, #8
 8004916:	4013      	ands	r3, r2
 8004918:	d036      	beq.n	8004988 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d019      	beq.n	8004956 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004922:	4b40      	ldr	r3, [pc, #256]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 8004924:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004926:	4b3f      	ldr	r3, [pc, #252]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 8004928:	2101      	movs	r1, #1
 800492a:	430a      	orrs	r2, r1
 800492c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800492e:	f7fd fe85 	bl	800263c <HAL_GetTick>
 8004932:	0003      	movs	r3, r0
 8004934:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004938:	f7fd fe80 	bl	800263c <HAL_GetTick>
 800493c:	0002      	movs	r2, r0
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e250      	b.n	8004dec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800494a:	4b36      	ldr	r3, [pc, #216]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	2202      	movs	r2, #2
 8004950:	4013      	ands	r3, r2
 8004952:	d0f1      	beq.n	8004938 <HAL_RCC_OscConfig+0x24c>
 8004954:	e018      	b.n	8004988 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004956:	4b33      	ldr	r3, [pc, #204]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 8004958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800495a:	4b32      	ldr	r3, [pc, #200]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 800495c:	2101      	movs	r1, #1
 800495e:	438a      	bics	r2, r1
 8004960:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004962:	f7fd fe6b 	bl	800263c <HAL_GetTick>
 8004966:	0003      	movs	r3, r0
 8004968:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800496a:	e008      	b.n	800497e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800496c:	f7fd fe66 	bl	800263c <HAL_GetTick>
 8004970:	0002      	movs	r2, r0
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e236      	b.n	8004dec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800497e:	4b29      	ldr	r3, [pc, #164]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	2202      	movs	r2, #2
 8004984:	4013      	ands	r3, r2
 8004986:	d1f1      	bne.n	800496c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2204      	movs	r2, #4
 800498e:	4013      	ands	r3, r2
 8004990:	d100      	bne.n	8004994 <HAL_RCC_OscConfig+0x2a8>
 8004992:	e0b5      	b.n	8004b00 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004994:	201f      	movs	r0, #31
 8004996:	183b      	adds	r3, r7, r0
 8004998:	2200      	movs	r2, #0
 800499a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800499c:	4b21      	ldr	r3, [pc, #132]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 800499e:	69da      	ldr	r2, [r3, #28]
 80049a0:	2380      	movs	r3, #128	; 0x80
 80049a2:	055b      	lsls	r3, r3, #21
 80049a4:	4013      	ands	r3, r2
 80049a6:	d110      	bne.n	80049ca <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049a8:	4b1e      	ldr	r3, [pc, #120]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 80049aa:	69da      	ldr	r2, [r3, #28]
 80049ac:	4b1d      	ldr	r3, [pc, #116]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 80049ae:	2180      	movs	r1, #128	; 0x80
 80049b0:	0549      	lsls	r1, r1, #21
 80049b2:	430a      	orrs	r2, r1
 80049b4:	61da      	str	r2, [r3, #28]
 80049b6:	4b1b      	ldr	r3, [pc, #108]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 80049b8:	69da      	ldr	r2, [r3, #28]
 80049ba:	2380      	movs	r3, #128	; 0x80
 80049bc:	055b      	lsls	r3, r3, #21
 80049be:	4013      	ands	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]
 80049c2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80049c4:	183b      	adds	r3, r7, r0
 80049c6:	2201      	movs	r2, #1
 80049c8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ca:	4b19      	ldr	r3, [pc, #100]	; (8004a30 <HAL_RCC_OscConfig+0x344>)
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	2380      	movs	r3, #128	; 0x80
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	4013      	ands	r3, r2
 80049d4:	d11a      	bne.n	8004a0c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049d6:	4b16      	ldr	r3, [pc, #88]	; (8004a30 <HAL_RCC_OscConfig+0x344>)
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	4b15      	ldr	r3, [pc, #84]	; (8004a30 <HAL_RCC_OscConfig+0x344>)
 80049dc:	2180      	movs	r1, #128	; 0x80
 80049de:	0049      	lsls	r1, r1, #1
 80049e0:	430a      	orrs	r2, r1
 80049e2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049e4:	f7fd fe2a 	bl	800263c <HAL_GetTick>
 80049e8:	0003      	movs	r3, r0
 80049ea:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ec:	e008      	b.n	8004a00 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ee:	f7fd fe25 	bl	800263c <HAL_GetTick>
 80049f2:	0002      	movs	r2, r0
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b64      	cmp	r3, #100	; 0x64
 80049fa:	d901      	bls.n	8004a00 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e1f5      	b.n	8004dec <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a00:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <HAL_RCC_OscConfig+0x344>)
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	2380      	movs	r3, #128	; 0x80
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	4013      	ands	r3, r2
 8004a0a:	d0f0      	beq.n	80049ee <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d10f      	bne.n	8004a34 <HAL_RCC_OscConfig+0x348>
 8004a14:	4b03      	ldr	r3, [pc, #12]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 8004a16:	6a1a      	ldr	r2, [r3, #32]
 8004a18:	4b02      	ldr	r3, [pc, #8]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	621a      	str	r2, [r3, #32]
 8004a20:	e036      	b.n	8004a90 <HAL_RCC_OscConfig+0x3a4>
 8004a22:	46c0      	nop			; (mov r8, r8)
 8004a24:	40021000 	.word	0x40021000
 8004a28:	fffeffff 	.word	0xfffeffff
 8004a2c:	fffbffff 	.word	0xfffbffff
 8004a30:	40007000 	.word	0x40007000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10c      	bne.n	8004a56 <HAL_RCC_OscConfig+0x36a>
 8004a3c:	4bca      	ldr	r3, [pc, #808]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004a3e:	6a1a      	ldr	r2, [r3, #32]
 8004a40:	4bc9      	ldr	r3, [pc, #804]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004a42:	2101      	movs	r1, #1
 8004a44:	438a      	bics	r2, r1
 8004a46:	621a      	str	r2, [r3, #32]
 8004a48:	4bc7      	ldr	r3, [pc, #796]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004a4a:	6a1a      	ldr	r2, [r3, #32]
 8004a4c:	4bc6      	ldr	r3, [pc, #792]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004a4e:	2104      	movs	r1, #4
 8004a50:	438a      	bics	r2, r1
 8004a52:	621a      	str	r2, [r3, #32]
 8004a54:	e01c      	b.n	8004a90 <HAL_RCC_OscConfig+0x3a4>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	2b05      	cmp	r3, #5
 8004a5c:	d10c      	bne.n	8004a78 <HAL_RCC_OscConfig+0x38c>
 8004a5e:	4bc2      	ldr	r3, [pc, #776]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004a60:	6a1a      	ldr	r2, [r3, #32]
 8004a62:	4bc1      	ldr	r3, [pc, #772]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004a64:	2104      	movs	r1, #4
 8004a66:	430a      	orrs	r2, r1
 8004a68:	621a      	str	r2, [r3, #32]
 8004a6a:	4bbf      	ldr	r3, [pc, #764]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004a6c:	6a1a      	ldr	r2, [r3, #32]
 8004a6e:	4bbe      	ldr	r3, [pc, #760]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004a70:	2101      	movs	r1, #1
 8004a72:	430a      	orrs	r2, r1
 8004a74:	621a      	str	r2, [r3, #32]
 8004a76:	e00b      	b.n	8004a90 <HAL_RCC_OscConfig+0x3a4>
 8004a78:	4bbb      	ldr	r3, [pc, #748]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004a7a:	6a1a      	ldr	r2, [r3, #32]
 8004a7c:	4bba      	ldr	r3, [pc, #744]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004a7e:	2101      	movs	r1, #1
 8004a80:	438a      	bics	r2, r1
 8004a82:	621a      	str	r2, [r3, #32]
 8004a84:	4bb8      	ldr	r3, [pc, #736]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004a86:	6a1a      	ldr	r2, [r3, #32]
 8004a88:	4bb7      	ldr	r3, [pc, #732]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004a8a:	2104      	movs	r1, #4
 8004a8c:	438a      	bics	r2, r1
 8004a8e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d014      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a98:	f7fd fdd0 	bl	800263c <HAL_GetTick>
 8004a9c:	0003      	movs	r3, r0
 8004a9e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aa0:	e009      	b.n	8004ab6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aa2:	f7fd fdcb 	bl	800263c <HAL_GetTick>
 8004aa6:	0002      	movs	r2, r0
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	4aaf      	ldr	r2, [pc, #700]	; (8004d6c <HAL_RCC_OscConfig+0x680>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e19a      	b.n	8004dec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab6:	4bac      	ldr	r3, [pc, #688]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	2202      	movs	r2, #2
 8004abc:	4013      	ands	r3, r2
 8004abe:	d0f0      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x3b6>
 8004ac0:	e013      	b.n	8004aea <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ac2:	f7fd fdbb 	bl	800263c <HAL_GetTick>
 8004ac6:	0003      	movs	r3, r0
 8004ac8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aca:	e009      	b.n	8004ae0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004acc:	f7fd fdb6 	bl	800263c <HAL_GetTick>
 8004ad0:	0002      	movs	r2, r0
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	4aa5      	ldr	r2, [pc, #660]	; (8004d6c <HAL_RCC_OscConfig+0x680>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e185      	b.n	8004dec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ae0:	4ba1      	ldr	r3, [pc, #644]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	d1f0      	bne.n	8004acc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004aea:	231f      	movs	r3, #31
 8004aec:	18fb      	adds	r3, r7, r3
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d105      	bne.n	8004b00 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004af4:	4b9c      	ldr	r3, [pc, #624]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004af6:	69da      	ldr	r2, [r3, #28]
 8004af8:	4b9b      	ldr	r3, [pc, #620]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004afa:	499d      	ldr	r1, [pc, #628]	; (8004d70 <HAL_RCC_OscConfig+0x684>)
 8004afc:	400a      	ands	r2, r1
 8004afe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2210      	movs	r2, #16
 8004b06:	4013      	ands	r3, r2
 8004b08:	d063      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d12a      	bne.n	8004b68 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004b12:	4b95      	ldr	r3, [pc, #596]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004b14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b16:	4b94      	ldr	r3, [pc, #592]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004b18:	2104      	movs	r1, #4
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004b1e:	4b92      	ldr	r3, [pc, #584]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004b20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b22:	4b91      	ldr	r3, [pc, #580]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004b24:	2101      	movs	r1, #1
 8004b26:	430a      	orrs	r2, r1
 8004b28:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b2a:	f7fd fd87 	bl	800263c <HAL_GetTick>
 8004b2e:	0003      	movs	r3, r0
 8004b30:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004b34:	f7fd fd82 	bl	800263c <HAL_GetTick>
 8004b38:	0002      	movs	r2, r0
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e152      	b.n	8004dec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004b46:	4b88      	ldr	r3, [pc, #544]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	d0f1      	beq.n	8004b34 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004b50:	4b85      	ldr	r3, [pc, #532]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b54:	22f8      	movs	r2, #248	; 0xf8
 8004b56:	4393      	bics	r3, r2
 8004b58:	0019      	movs	r1, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	00da      	lsls	r2, r3, #3
 8004b60:	4b81      	ldr	r3, [pc, #516]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004b62:	430a      	orrs	r2, r1
 8004b64:	635a      	str	r2, [r3, #52]	; 0x34
 8004b66:	e034      	b.n	8004bd2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	3305      	adds	r3, #5
 8004b6e:	d111      	bne.n	8004b94 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004b70:	4b7d      	ldr	r3, [pc, #500]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004b72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b74:	4b7c      	ldr	r3, [pc, #496]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004b76:	2104      	movs	r1, #4
 8004b78:	438a      	bics	r2, r1
 8004b7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004b7c:	4b7a      	ldr	r3, [pc, #488]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b80:	22f8      	movs	r2, #248	; 0xf8
 8004b82:	4393      	bics	r3, r2
 8004b84:	0019      	movs	r1, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	00da      	lsls	r2, r3, #3
 8004b8c:	4b76      	ldr	r3, [pc, #472]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	635a      	str	r2, [r3, #52]	; 0x34
 8004b92:	e01e      	b.n	8004bd2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004b94:	4b74      	ldr	r3, [pc, #464]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004b96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b98:	4b73      	ldr	r3, [pc, #460]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004b9a:	2104      	movs	r1, #4
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004ba0:	4b71      	ldr	r3, [pc, #452]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ba4:	4b70      	ldr	r3, [pc, #448]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	438a      	bics	r2, r1
 8004baa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bac:	f7fd fd46 	bl	800263c <HAL_GetTick>
 8004bb0:	0003      	movs	r3, r0
 8004bb2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004bb4:	e008      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004bb6:	f7fd fd41 	bl	800263c <HAL_GetTick>
 8004bba:	0002      	movs	r2, r0
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e111      	b.n	8004dec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004bc8:	4b67      	ldr	r3, [pc, #412]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bcc:	2202      	movs	r2, #2
 8004bce:	4013      	ands	r3, r2
 8004bd0:	d1f1      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	4013      	ands	r3, r2
 8004bda:	d05c      	beq.n	8004c96 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004bdc:	4b62      	ldr	r3, [pc, #392]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	220c      	movs	r2, #12
 8004be2:	4013      	ands	r3, r2
 8004be4:	2b0c      	cmp	r3, #12
 8004be6:	d00e      	beq.n	8004c06 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004be8:	4b5f      	ldr	r3, [pc, #380]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	220c      	movs	r2, #12
 8004bee:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d114      	bne.n	8004c1e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004bf4:	4b5c      	ldr	r3, [pc, #368]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	23c0      	movs	r3, #192	; 0xc0
 8004bfa:	025b      	lsls	r3, r3, #9
 8004bfc:	401a      	ands	r2, r3
 8004bfe:	23c0      	movs	r3, #192	; 0xc0
 8004c00:	025b      	lsls	r3, r3, #9
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d10b      	bne.n	8004c1e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004c06:	4b58      	ldr	r3, [pc, #352]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004c08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c0a:	2380      	movs	r3, #128	; 0x80
 8004c0c:	029b      	lsls	r3, r3, #10
 8004c0e:	4013      	ands	r3, r2
 8004c10:	d040      	beq.n	8004c94 <HAL_RCC_OscConfig+0x5a8>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d03c      	beq.n	8004c94 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e0e6      	b.n	8004dec <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d01b      	beq.n	8004c5e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004c26:	4b50      	ldr	r3, [pc, #320]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c2a:	4b4f      	ldr	r3, [pc, #316]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004c2c:	2180      	movs	r1, #128	; 0x80
 8004c2e:	0249      	lsls	r1, r1, #9
 8004c30:	430a      	orrs	r2, r1
 8004c32:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c34:	f7fd fd02 	bl	800263c <HAL_GetTick>
 8004c38:	0003      	movs	r3, r0
 8004c3a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004c3c:	e008      	b.n	8004c50 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c3e:	f7fd fcfd 	bl	800263c <HAL_GetTick>
 8004c42:	0002      	movs	r2, r0
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e0cd      	b.n	8004dec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004c50:	4b45      	ldr	r3, [pc, #276]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004c52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c54:	2380      	movs	r3, #128	; 0x80
 8004c56:	029b      	lsls	r3, r3, #10
 8004c58:	4013      	ands	r3, r2
 8004c5a:	d0f0      	beq.n	8004c3e <HAL_RCC_OscConfig+0x552>
 8004c5c:	e01b      	b.n	8004c96 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004c5e:	4b42      	ldr	r3, [pc, #264]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004c60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c62:	4b41      	ldr	r3, [pc, #260]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004c64:	4943      	ldr	r1, [pc, #268]	; (8004d74 <HAL_RCC_OscConfig+0x688>)
 8004c66:	400a      	ands	r2, r1
 8004c68:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c6a:	f7fd fce7 	bl	800263c <HAL_GetTick>
 8004c6e:	0003      	movs	r3, r0
 8004c70:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004c72:	e008      	b.n	8004c86 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c74:	f7fd fce2 	bl	800263c <HAL_GetTick>
 8004c78:	0002      	movs	r2, r0
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e0b2      	b.n	8004dec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004c86:	4b38      	ldr	r3, [pc, #224]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c8a:	2380      	movs	r3, #128	; 0x80
 8004c8c:	029b      	lsls	r3, r3, #10
 8004c8e:	4013      	ands	r3, r2
 8004c90:	d1f0      	bne.n	8004c74 <HAL_RCC_OscConfig+0x588>
 8004c92:	e000      	b.n	8004c96 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004c94:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d100      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x5b4>
 8004c9e:	e0a4      	b.n	8004dea <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ca0:	4b31      	ldr	r3, [pc, #196]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	220c      	movs	r2, #12
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d100      	bne.n	8004cae <HAL_RCC_OscConfig+0x5c2>
 8004cac:	e078      	b.n	8004da0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d14c      	bne.n	8004d50 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cb6:	4b2c      	ldr	r3, [pc, #176]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	4b2b      	ldr	r3, [pc, #172]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004cbc:	492e      	ldr	r1, [pc, #184]	; (8004d78 <HAL_RCC_OscConfig+0x68c>)
 8004cbe:	400a      	ands	r2, r1
 8004cc0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc2:	f7fd fcbb 	bl	800263c <HAL_GetTick>
 8004cc6:	0003      	movs	r3, r0
 8004cc8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ccc:	f7fd fcb6 	bl	800263c <HAL_GetTick>
 8004cd0:	0002      	movs	r2, r0
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e086      	b.n	8004dec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cde:	4b22      	ldr	r3, [pc, #136]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	2380      	movs	r3, #128	; 0x80
 8004ce4:	049b      	lsls	r3, r3, #18
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	d1f0      	bne.n	8004ccc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cea:	4b1f      	ldr	r3, [pc, #124]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cee:	220f      	movs	r2, #15
 8004cf0:	4393      	bics	r3, r2
 8004cf2:	0019      	movs	r1, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cf8:	4b1b      	ldr	r3, [pc, #108]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	62da      	str	r2, [r3, #44]	; 0x2c
 8004cfe:	4b1a      	ldr	r3, [pc, #104]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	4a1e      	ldr	r2, [pc, #120]	; (8004d7c <HAL_RCC_OscConfig+0x690>)
 8004d04:	4013      	ands	r3, r2
 8004d06:	0019      	movs	r1, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d10:	431a      	orrs	r2, r3
 8004d12:	4b15      	ldr	r3, [pc, #84]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004d14:	430a      	orrs	r2, r1
 8004d16:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d18:	4b13      	ldr	r3, [pc, #76]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	4b12      	ldr	r3, [pc, #72]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004d1e:	2180      	movs	r1, #128	; 0x80
 8004d20:	0449      	lsls	r1, r1, #17
 8004d22:	430a      	orrs	r2, r1
 8004d24:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d26:	f7fd fc89 	bl	800263c <HAL_GetTick>
 8004d2a:	0003      	movs	r3, r0
 8004d2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d2e:	e008      	b.n	8004d42 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d30:	f7fd fc84 	bl	800263c <HAL_GetTick>
 8004d34:	0002      	movs	r2, r0
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e054      	b.n	8004dec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d42:	4b09      	ldr	r3, [pc, #36]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	2380      	movs	r3, #128	; 0x80
 8004d48:	049b      	lsls	r3, r3, #18
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	d0f0      	beq.n	8004d30 <HAL_RCC_OscConfig+0x644>
 8004d4e:	e04c      	b.n	8004dea <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d50:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	4b04      	ldr	r3, [pc, #16]	; (8004d68 <HAL_RCC_OscConfig+0x67c>)
 8004d56:	4908      	ldr	r1, [pc, #32]	; (8004d78 <HAL_RCC_OscConfig+0x68c>)
 8004d58:	400a      	ands	r2, r1
 8004d5a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5c:	f7fd fc6e 	bl	800263c <HAL_GetTick>
 8004d60:	0003      	movs	r3, r0
 8004d62:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d64:	e015      	b.n	8004d92 <HAL_RCC_OscConfig+0x6a6>
 8004d66:	46c0      	nop			; (mov r8, r8)
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	00001388 	.word	0x00001388
 8004d70:	efffffff 	.word	0xefffffff
 8004d74:	fffeffff 	.word	0xfffeffff
 8004d78:	feffffff 	.word	0xfeffffff
 8004d7c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d80:	f7fd fc5c 	bl	800263c <HAL_GetTick>
 8004d84:	0002      	movs	r2, r0
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e02c      	b.n	8004dec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d92:	4b18      	ldr	r3, [pc, #96]	; (8004df4 <HAL_RCC_OscConfig+0x708>)
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	2380      	movs	r3, #128	; 0x80
 8004d98:	049b      	lsls	r3, r3, #18
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	d1f0      	bne.n	8004d80 <HAL_RCC_OscConfig+0x694>
 8004d9e:	e024      	b.n	8004dea <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d101      	bne.n	8004dac <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e01f      	b.n	8004dec <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004dac:	4b11      	ldr	r3, [pc, #68]	; (8004df4 <HAL_RCC_OscConfig+0x708>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004db2:	4b10      	ldr	r3, [pc, #64]	; (8004df4 <HAL_RCC_OscConfig+0x708>)
 8004db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	23c0      	movs	r3, #192	; 0xc0
 8004dbc:	025b      	lsls	r3, r3, #9
 8004dbe:	401a      	ands	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d10e      	bne.n	8004de6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	220f      	movs	r2, #15
 8004dcc:	401a      	ands	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d107      	bne.n	8004de6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	23f0      	movs	r3, #240	; 0xf0
 8004dda:	039b      	lsls	r3, r3, #14
 8004ddc:	401a      	ands	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d001      	beq.n	8004dea <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e000      	b.n	8004dec <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	0018      	movs	r0, r3
 8004dee:	46bd      	mov	sp, r7
 8004df0:	b008      	add	sp, #32
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	40021000 	.word	0x40021000

08004df8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e0bf      	b.n	8004f8c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e0c:	4b61      	ldr	r3, [pc, #388]	; (8004f94 <HAL_RCC_ClockConfig+0x19c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2201      	movs	r2, #1
 8004e12:	4013      	ands	r3, r2
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d911      	bls.n	8004e3e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e1a:	4b5e      	ldr	r3, [pc, #376]	; (8004f94 <HAL_RCC_ClockConfig+0x19c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	4393      	bics	r3, r2
 8004e22:	0019      	movs	r1, r3
 8004e24:	4b5b      	ldr	r3, [pc, #364]	; (8004f94 <HAL_RCC_ClockConfig+0x19c>)
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e2c:	4b59      	ldr	r3, [pc, #356]	; (8004f94 <HAL_RCC_ClockConfig+0x19c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2201      	movs	r2, #1
 8004e32:	4013      	ands	r3, r2
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d001      	beq.n	8004e3e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e0a6      	b.n	8004f8c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2202      	movs	r2, #2
 8004e44:	4013      	ands	r3, r2
 8004e46:	d015      	beq.n	8004e74 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2204      	movs	r2, #4
 8004e4e:	4013      	ands	r3, r2
 8004e50:	d006      	beq.n	8004e60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004e52:	4b51      	ldr	r3, [pc, #324]	; (8004f98 <HAL_RCC_ClockConfig+0x1a0>)
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	4b50      	ldr	r3, [pc, #320]	; (8004f98 <HAL_RCC_ClockConfig+0x1a0>)
 8004e58:	21e0      	movs	r1, #224	; 0xe0
 8004e5a:	00c9      	lsls	r1, r1, #3
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e60:	4b4d      	ldr	r3, [pc, #308]	; (8004f98 <HAL_RCC_ClockConfig+0x1a0>)
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	22f0      	movs	r2, #240	; 0xf0
 8004e66:	4393      	bics	r3, r2
 8004e68:	0019      	movs	r1, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	4b4a      	ldr	r3, [pc, #296]	; (8004f98 <HAL_RCC_ClockConfig+0x1a0>)
 8004e70:	430a      	orrs	r2, r1
 8004e72:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	d04c      	beq.n	8004f18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d107      	bne.n	8004e96 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e86:	4b44      	ldr	r3, [pc, #272]	; (8004f98 <HAL_RCC_ClockConfig+0x1a0>)
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	2380      	movs	r3, #128	; 0x80
 8004e8c:	029b      	lsls	r3, r3, #10
 8004e8e:	4013      	ands	r3, r2
 8004e90:	d120      	bne.n	8004ed4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e07a      	b.n	8004f8c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d107      	bne.n	8004eae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e9e:	4b3e      	ldr	r3, [pc, #248]	; (8004f98 <HAL_RCC_ClockConfig+0x1a0>)
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	2380      	movs	r3, #128	; 0x80
 8004ea4:	049b      	lsls	r3, r3, #18
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	d114      	bne.n	8004ed4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e06e      	b.n	8004f8c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b03      	cmp	r3, #3
 8004eb4:	d107      	bne.n	8004ec6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004eb6:	4b38      	ldr	r3, [pc, #224]	; (8004f98 <HAL_RCC_ClockConfig+0x1a0>)
 8004eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eba:	2380      	movs	r3, #128	; 0x80
 8004ebc:	029b      	lsls	r3, r3, #10
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	d108      	bne.n	8004ed4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e062      	b.n	8004f8c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ec6:	4b34      	ldr	r3, [pc, #208]	; (8004f98 <HAL_RCC_ClockConfig+0x1a0>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2202      	movs	r2, #2
 8004ecc:	4013      	ands	r3, r2
 8004ece:	d101      	bne.n	8004ed4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e05b      	b.n	8004f8c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ed4:	4b30      	ldr	r3, [pc, #192]	; (8004f98 <HAL_RCC_ClockConfig+0x1a0>)
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	2203      	movs	r2, #3
 8004eda:	4393      	bics	r3, r2
 8004edc:	0019      	movs	r1, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685a      	ldr	r2, [r3, #4]
 8004ee2:	4b2d      	ldr	r3, [pc, #180]	; (8004f98 <HAL_RCC_ClockConfig+0x1a0>)
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ee8:	f7fd fba8 	bl	800263c <HAL_GetTick>
 8004eec:	0003      	movs	r3, r0
 8004eee:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ef0:	e009      	b.n	8004f06 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ef2:	f7fd fba3 	bl	800263c <HAL_GetTick>
 8004ef6:	0002      	movs	r2, r0
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	4a27      	ldr	r2, [pc, #156]	; (8004f9c <HAL_RCC_ClockConfig+0x1a4>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e042      	b.n	8004f8c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f06:	4b24      	ldr	r3, [pc, #144]	; (8004f98 <HAL_RCC_ClockConfig+0x1a0>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	220c      	movs	r2, #12
 8004f0c:	401a      	ands	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d1ec      	bne.n	8004ef2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f18:	4b1e      	ldr	r3, [pc, #120]	; (8004f94 <HAL_RCC_ClockConfig+0x19c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	4013      	ands	r3, r2
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d211      	bcs.n	8004f4a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f26:	4b1b      	ldr	r3, [pc, #108]	; (8004f94 <HAL_RCC_ClockConfig+0x19c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	4393      	bics	r3, r2
 8004f2e:	0019      	movs	r1, r3
 8004f30:	4b18      	ldr	r3, [pc, #96]	; (8004f94 <HAL_RCC_ClockConfig+0x19c>)
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f38:	4b16      	ldr	r3, [pc, #88]	; (8004f94 <HAL_RCC_ClockConfig+0x19c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	4013      	ands	r3, r2
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d001      	beq.n	8004f4a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e020      	b.n	8004f8c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2204      	movs	r2, #4
 8004f50:	4013      	ands	r3, r2
 8004f52:	d009      	beq.n	8004f68 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004f54:	4b10      	ldr	r3, [pc, #64]	; (8004f98 <HAL_RCC_ClockConfig+0x1a0>)
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	4a11      	ldr	r2, [pc, #68]	; (8004fa0 <HAL_RCC_ClockConfig+0x1a8>)
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	0019      	movs	r1, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68da      	ldr	r2, [r3, #12]
 8004f62:	4b0d      	ldr	r3, [pc, #52]	; (8004f98 <HAL_RCC_ClockConfig+0x1a0>)
 8004f64:	430a      	orrs	r2, r1
 8004f66:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004f68:	f000 f820 	bl	8004fac <HAL_RCC_GetSysClockFreq>
 8004f6c:	0001      	movs	r1, r0
 8004f6e:	4b0a      	ldr	r3, [pc, #40]	; (8004f98 <HAL_RCC_ClockConfig+0x1a0>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	091b      	lsrs	r3, r3, #4
 8004f74:	220f      	movs	r2, #15
 8004f76:	4013      	ands	r3, r2
 8004f78:	4a0a      	ldr	r2, [pc, #40]	; (8004fa4 <HAL_RCC_ClockConfig+0x1ac>)
 8004f7a:	5cd3      	ldrb	r3, [r2, r3]
 8004f7c:	000a      	movs	r2, r1
 8004f7e:	40da      	lsrs	r2, r3
 8004f80:	4b09      	ldr	r3, [pc, #36]	; (8004fa8 <HAL_RCC_ClockConfig+0x1b0>)
 8004f82:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004f84:	2003      	movs	r0, #3
 8004f86:	f7fd fb13 	bl	80025b0 <HAL_InitTick>
  
  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	0018      	movs	r0, r3
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	b004      	add	sp, #16
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	40022000 	.word	0x40022000
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	00001388 	.word	0x00001388
 8004fa0:	fffff8ff 	.word	0xfffff8ff
 8004fa4:	08006968 	.word	0x08006968
 8004fa8:	20000004 	.word	0x20000004

08004fac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60fb      	str	r3, [r7, #12]
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60bb      	str	r3, [r7, #8]
 8004fba:	2300      	movs	r3, #0
 8004fbc:	617b      	str	r3, [r7, #20]
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004fc6:	4b2d      	ldr	r3, [pc, #180]	; (800507c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	220c      	movs	r2, #12
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	2b0c      	cmp	r3, #12
 8004fd4:	d046      	beq.n	8005064 <HAL_RCC_GetSysClockFreq+0xb8>
 8004fd6:	d848      	bhi.n	800506a <HAL_RCC_GetSysClockFreq+0xbe>
 8004fd8:	2b04      	cmp	r3, #4
 8004fda:	d002      	beq.n	8004fe2 <HAL_RCC_GetSysClockFreq+0x36>
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	d003      	beq.n	8004fe8 <HAL_RCC_GetSysClockFreq+0x3c>
 8004fe0:	e043      	b.n	800506a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004fe2:	4b27      	ldr	r3, [pc, #156]	; (8005080 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004fe4:	613b      	str	r3, [r7, #16]
      break;
 8004fe6:	e043      	b.n	8005070 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	0c9b      	lsrs	r3, r3, #18
 8004fec:	220f      	movs	r2, #15
 8004fee:	4013      	ands	r3, r2
 8004ff0:	4a24      	ldr	r2, [pc, #144]	; (8005084 <HAL_RCC_GetSysClockFreq+0xd8>)
 8004ff2:	5cd3      	ldrb	r3, [r2, r3]
 8004ff4:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004ff6:	4b21      	ldr	r3, [pc, #132]	; (800507c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffa:	220f      	movs	r2, #15
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	4a22      	ldr	r2, [pc, #136]	; (8005088 <HAL_RCC_GetSysClockFreq+0xdc>)
 8005000:	5cd3      	ldrb	r3, [r2, r3]
 8005002:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	23c0      	movs	r3, #192	; 0xc0
 8005008:	025b      	lsls	r3, r3, #9
 800500a:	401a      	ands	r2, r3
 800500c:	2380      	movs	r3, #128	; 0x80
 800500e:	025b      	lsls	r3, r3, #9
 8005010:	429a      	cmp	r2, r3
 8005012:	d109      	bne.n	8005028 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005014:	68b9      	ldr	r1, [r7, #8]
 8005016:	481a      	ldr	r0, [pc, #104]	; (8005080 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005018:	f7fb f880 	bl	800011c <__udivsi3>
 800501c:	0003      	movs	r3, r0
 800501e:	001a      	movs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4353      	muls	r3, r2
 8005024:	617b      	str	r3, [r7, #20]
 8005026:	e01a      	b.n	800505e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	23c0      	movs	r3, #192	; 0xc0
 800502c:	025b      	lsls	r3, r3, #9
 800502e:	401a      	ands	r2, r3
 8005030:	23c0      	movs	r3, #192	; 0xc0
 8005032:	025b      	lsls	r3, r3, #9
 8005034:	429a      	cmp	r2, r3
 8005036:	d109      	bne.n	800504c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005038:	68b9      	ldr	r1, [r7, #8]
 800503a:	4814      	ldr	r0, [pc, #80]	; (800508c <HAL_RCC_GetSysClockFreq+0xe0>)
 800503c:	f7fb f86e 	bl	800011c <__udivsi3>
 8005040:	0003      	movs	r3, r0
 8005042:	001a      	movs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4353      	muls	r3, r2
 8005048:	617b      	str	r3, [r7, #20]
 800504a:	e008      	b.n	800505e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800504c:	68b9      	ldr	r1, [r7, #8]
 800504e:	4810      	ldr	r0, [pc, #64]	; (8005090 <HAL_RCC_GetSysClockFreq+0xe4>)
 8005050:	f7fb f864 	bl	800011c <__udivsi3>
 8005054:	0003      	movs	r3, r0
 8005056:	001a      	movs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4353      	muls	r3, r2
 800505c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	613b      	str	r3, [r7, #16]
      break;
 8005062:	e005      	b.n	8005070 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8005064:	4b09      	ldr	r3, [pc, #36]	; (800508c <HAL_RCC_GetSysClockFreq+0xe0>)
 8005066:	613b      	str	r3, [r7, #16]
      break;
 8005068:	e002      	b.n	8005070 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800506a:	4b09      	ldr	r3, [pc, #36]	; (8005090 <HAL_RCC_GetSysClockFreq+0xe4>)
 800506c:	613b      	str	r3, [r7, #16]
      break;
 800506e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005070:	693b      	ldr	r3, [r7, #16]
}
 8005072:	0018      	movs	r0, r3
 8005074:	46bd      	mov	sp, r7
 8005076:	b006      	add	sp, #24
 8005078:	bd80      	pop	{r7, pc}
 800507a:	46c0      	nop			; (mov r8, r8)
 800507c:	40021000 	.word	0x40021000
 8005080:	00f42400 	.word	0x00f42400
 8005084:	08006f74 	.word	0x08006f74
 8005088:	08006f84 	.word	0x08006f84
 800508c:	02dc6c00 	.word	0x02dc6c00
 8005090:	007a1200 	.word	0x007a1200

08005094 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e0a8      	b.n	80051f8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d109      	bne.n	80050c2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	2382      	movs	r3, #130	; 0x82
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d009      	beq.n	80050ce <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	61da      	str	r2, [r3, #28]
 80050c0:	e005      	b.n	80050ce <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	225d      	movs	r2, #93	; 0x5d
 80050d8:	5c9b      	ldrb	r3, [r3, r2]
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d107      	bne.n	80050f0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	225c      	movs	r2, #92	; 0x5c
 80050e4:	2100      	movs	r1, #0
 80050e6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	0018      	movs	r0, r3
 80050ec:	f7fc fdfc 	bl	8001ce8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	225d      	movs	r2, #93	; 0x5d
 80050f4:	2102      	movs	r1, #2
 80050f6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2140      	movs	r1, #64	; 0x40
 8005104:	438a      	bics	r2, r1
 8005106:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	23e0      	movs	r3, #224	; 0xe0
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	429a      	cmp	r2, r3
 8005112:	d902      	bls.n	800511a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005114:	2300      	movs	r3, #0
 8005116:	60fb      	str	r3, [r7, #12]
 8005118:	e002      	b.n	8005120 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800511a:	2380      	movs	r3, #128	; 0x80
 800511c:	015b      	lsls	r3, r3, #5
 800511e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68da      	ldr	r2, [r3, #12]
 8005124:	23f0      	movs	r3, #240	; 0xf0
 8005126:	011b      	lsls	r3, r3, #4
 8005128:	429a      	cmp	r2, r3
 800512a:	d008      	beq.n	800513e <HAL_SPI_Init+0xaa>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68da      	ldr	r2, [r3, #12]
 8005130:	23e0      	movs	r3, #224	; 0xe0
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	429a      	cmp	r2, r3
 8005136:	d002      	beq.n	800513e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	2382      	movs	r3, #130	; 0x82
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	401a      	ands	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6899      	ldr	r1, [r3, #8]
 800514c:	2384      	movs	r3, #132	; 0x84
 800514e:	021b      	lsls	r3, r3, #8
 8005150:	400b      	ands	r3, r1
 8005152:	431a      	orrs	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	2102      	movs	r1, #2
 800515a:	400b      	ands	r3, r1
 800515c:	431a      	orrs	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	2101      	movs	r1, #1
 8005164:	400b      	ands	r3, r1
 8005166:	431a      	orrs	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6999      	ldr	r1, [r3, #24]
 800516c:	2380      	movs	r3, #128	; 0x80
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	400b      	ands	r3, r1
 8005172:	431a      	orrs	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	69db      	ldr	r3, [r3, #28]
 8005178:	2138      	movs	r1, #56	; 0x38
 800517a:	400b      	ands	r3, r1
 800517c:	431a      	orrs	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	2180      	movs	r1, #128	; 0x80
 8005184:	400b      	ands	r3, r1
 8005186:	431a      	orrs	r2, r3
 8005188:	0011      	movs	r1, r2
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800518e:	2380      	movs	r3, #128	; 0x80
 8005190:	019b      	lsls	r3, r3, #6
 8005192:	401a      	ands	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	0c1b      	lsrs	r3, r3, #16
 80051a2:	2204      	movs	r2, #4
 80051a4:	401a      	ands	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	2110      	movs	r1, #16
 80051ac:	400b      	ands	r3, r1
 80051ae:	431a      	orrs	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b4:	2108      	movs	r1, #8
 80051b6:	400b      	ands	r3, r1
 80051b8:	431a      	orrs	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68d9      	ldr	r1, [r3, #12]
 80051be:	23f0      	movs	r3, #240	; 0xf0
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	400b      	ands	r3, r1
 80051c4:	431a      	orrs	r2, r3
 80051c6:	0011      	movs	r1, r2
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	2380      	movs	r3, #128	; 0x80
 80051cc:	015b      	lsls	r3, r3, #5
 80051ce:	401a      	ands	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	69da      	ldr	r2, [r3, #28]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4907      	ldr	r1, [pc, #28]	; (8005200 <HAL_SPI_Init+0x16c>)
 80051e4:	400a      	ands	r2, r1
 80051e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	225d      	movs	r2, #93	; 0x5d
 80051f2:	2101      	movs	r1, #1
 80051f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	0018      	movs	r0, r3
 80051fa:	46bd      	mov	sp, r7
 80051fc:	b004      	add	sp, #16
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	fffff7ff 	.word	0xfffff7ff

08005204 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	603b      	str	r3, [r7, #0]
 8005210:	1dbb      	adds	r3, r7, #6
 8005212:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005214:	231f      	movs	r3, #31
 8005216:	18fb      	adds	r3, r7, r3
 8005218:	2200      	movs	r2, #0
 800521a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	225c      	movs	r2, #92	; 0x5c
 8005220:	5c9b      	ldrb	r3, [r3, r2]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d101      	bne.n	800522a <HAL_SPI_Transmit+0x26>
 8005226:	2302      	movs	r3, #2
 8005228:	e147      	b.n	80054ba <HAL_SPI_Transmit+0x2b6>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	225c      	movs	r2, #92	; 0x5c
 800522e:	2101      	movs	r1, #1
 8005230:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005232:	f7fd fa03 	bl	800263c <HAL_GetTick>
 8005236:	0003      	movs	r3, r0
 8005238:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800523a:	2316      	movs	r3, #22
 800523c:	18fb      	adds	r3, r7, r3
 800523e:	1dba      	adds	r2, r7, #6
 8005240:	8812      	ldrh	r2, [r2, #0]
 8005242:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	225d      	movs	r2, #93	; 0x5d
 8005248:	5c9b      	ldrb	r3, [r3, r2]
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b01      	cmp	r3, #1
 800524e:	d004      	beq.n	800525a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005250:	231f      	movs	r3, #31
 8005252:	18fb      	adds	r3, r7, r3
 8005254:	2202      	movs	r2, #2
 8005256:	701a      	strb	r2, [r3, #0]
    goto error;
 8005258:	e128      	b.n	80054ac <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d003      	beq.n	8005268 <HAL_SPI_Transmit+0x64>
 8005260:	1dbb      	adds	r3, r7, #6
 8005262:	881b      	ldrh	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d104      	bne.n	8005272 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005268:	231f      	movs	r3, #31
 800526a:	18fb      	adds	r3, r7, r3
 800526c:	2201      	movs	r2, #1
 800526e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005270:	e11c      	b.n	80054ac <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	225d      	movs	r2, #93	; 0x5d
 8005276:	2103      	movs	r1, #3
 8005278:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	1dba      	adds	r2, r7, #6
 800528a:	8812      	ldrh	r2, [r2, #0]
 800528c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	1dba      	adds	r2, r7, #6
 8005292:	8812      	ldrh	r2, [r2, #0]
 8005294:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2244      	movs	r2, #68	; 0x44
 80052a0:	2100      	movs	r1, #0
 80052a2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2246      	movs	r2, #70	; 0x46
 80052a8:	2100      	movs	r1, #0
 80052aa:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	2380      	movs	r3, #128	; 0x80
 80052be:	021b      	lsls	r3, r3, #8
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d110      	bne.n	80052e6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2140      	movs	r1, #64	; 0x40
 80052d0:	438a      	bics	r2, r1
 80052d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2180      	movs	r1, #128	; 0x80
 80052e0:	01c9      	lsls	r1, r1, #7
 80052e2:	430a      	orrs	r2, r1
 80052e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2240      	movs	r2, #64	; 0x40
 80052ee:	4013      	ands	r3, r2
 80052f0:	2b40      	cmp	r3, #64	; 0x40
 80052f2:	d007      	beq.n	8005304 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2140      	movs	r1, #64	; 0x40
 8005300:	430a      	orrs	r2, r1
 8005302:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	68da      	ldr	r2, [r3, #12]
 8005308:	23e0      	movs	r3, #224	; 0xe0
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	429a      	cmp	r2, r3
 800530e:	d952      	bls.n	80053b6 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d004      	beq.n	8005322 <HAL_SPI_Transmit+0x11e>
 8005318:	2316      	movs	r3, #22
 800531a:	18fb      	adds	r3, r7, r3
 800531c:	881b      	ldrh	r3, [r3, #0]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d143      	bne.n	80053aa <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005326:	881a      	ldrh	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005332:	1c9a      	adds	r2, r3, #2
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800533c:	b29b      	uxth	r3, r3
 800533e:	3b01      	subs	r3, #1
 8005340:	b29a      	uxth	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005346:	e030      	b.n	80053aa <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	2202      	movs	r2, #2
 8005350:	4013      	ands	r3, r2
 8005352:	2b02      	cmp	r3, #2
 8005354:	d112      	bne.n	800537c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535a:	881a      	ldrh	r2, [r3, #0]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005366:	1c9a      	adds	r2, r3, #2
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005370:	b29b      	uxth	r3, r3
 8005372:	3b01      	subs	r3, #1
 8005374:	b29a      	uxth	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	87da      	strh	r2, [r3, #62]	; 0x3e
 800537a:	e016      	b.n	80053aa <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800537c:	f7fd f95e 	bl	800263c <HAL_GetTick>
 8005380:	0002      	movs	r2, r0
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	429a      	cmp	r2, r3
 800538a:	d802      	bhi.n	8005392 <HAL_SPI_Transmit+0x18e>
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	3301      	adds	r3, #1
 8005390:	d102      	bne.n	8005398 <HAL_SPI_Transmit+0x194>
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d108      	bne.n	80053aa <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8005398:	231f      	movs	r3, #31
 800539a:	18fb      	adds	r3, r7, r3
 800539c:	2203      	movs	r2, #3
 800539e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	225d      	movs	r2, #93	; 0x5d
 80053a4:	2101      	movs	r1, #1
 80053a6:	5499      	strb	r1, [r3, r2]
          goto error;
 80053a8:	e080      	b.n	80054ac <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1c9      	bne.n	8005348 <HAL_SPI_Transmit+0x144>
 80053b4:	e053      	b.n	800545e <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d004      	beq.n	80053c8 <HAL_SPI_Transmit+0x1c4>
 80053be:	2316      	movs	r3, #22
 80053c0:	18fb      	adds	r3, r7, r3
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d145      	bne.n	8005454 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	330c      	adds	r3, #12
 80053d2:	7812      	ldrb	r2, [r2, #0]
 80053d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053da:	1c5a      	adds	r2, r3, #1
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	3b01      	subs	r3, #1
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80053ee:	e031      	b.n	8005454 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	2202      	movs	r2, #2
 80053f8:	4013      	ands	r3, r2
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d113      	bne.n	8005426 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	330c      	adds	r3, #12
 8005408:	7812      	ldrb	r2, [r2, #0]
 800540a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005410:	1c5a      	adds	r2, r3, #1
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800541a:	b29b      	uxth	r3, r3
 800541c:	3b01      	subs	r3, #1
 800541e:	b29a      	uxth	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005424:	e016      	b.n	8005454 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005426:	f7fd f909 	bl	800263c <HAL_GetTick>
 800542a:	0002      	movs	r2, r0
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d802      	bhi.n	800543c <HAL_SPI_Transmit+0x238>
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	3301      	adds	r3, #1
 800543a:	d102      	bne.n	8005442 <HAL_SPI_Transmit+0x23e>
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d108      	bne.n	8005454 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8005442:	231f      	movs	r3, #31
 8005444:	18fb      	adds	r3, r7, r3
 8005446:	2203      	movs	r2, #3
 8005448:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	225d      	movs	r2, #93	; 0x5d
 800544e:	2101      	movs	r1, #1
 8005450:	5499      	strb	r1, [r3, r2]
          goto error;
 8005452:	e02b      	b.n	80054ac <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005458:	b29b      	uxth	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1c8      	bne.n	80053f0 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	6839      	ldr	r1, [r7, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	0018      	movs	r0, r3
 8005466:	f000 fa65 	bl	8005934 <SPI_EndRxTxTransaction>
 800546a:	1e03      	subs	r3, r0, #0
 800546c:	d002      	beq.n	8005474 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2220      	movs	r2, #32
 8005472:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10a      	bne.n	8005492 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800547c:	2300      	movs	r3, #0
 800547e:	613b      	str	r3, [r7, #16]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	613b      	str	r3, [r7, #16]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	613b      	str	r3, [r7, #16]
 8005490:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005496:	2b00      	cmp	r3, #0
 8005498:	d004      	beq.n	80054a4 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800549a:	231f      	movs	r3, #31
 800549c:	18fb      	adds	r3, r7, r3
 800549e:	2201      	movs	r2, #1
 80054a0:	701a      	strb	r2, [r3, #0]
 80054a2:	e003      	b.n	80054ac <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	225d      	movs	r2, #93	; 0x5d
 80054a8:	2101      	movs	r1, #1
 80054aa:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	225c      	movs	r2, #92	; 0x5c
 80054b0:	2100      	movs	r1, #0
 80054b2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80054b4:	231f      	movs	r3, #31
 80054b6:	18fb      	adds	r3, r7, r3
 80054b8:	781b      	ldrb	r3, [r3, #0]
}
 80054ba:	0018      	movs	r0, r3
 80054bc:	46bd      	mov	sp, r7
 80054be:	b008      	add	sp, #32
 80054c0:	bd80      	pop	{r7, pc}
	...

080054c4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b088      	sub	sp, #32
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	2240      	movs	r2, #64	; 0x40
 80054e0:	4013      	ands	r3, r2
 80054e2:	d10d      	bne.n	8005500 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	2201      	movs	r2, #1
 80054e8:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80054ea:	d009      	beq.n	8005500 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	2240      	movs	r2, #64	; 0x40
 80054f0:	4013      	ands	r3, r2
 80054f2:	d005      	beq.n	8005500 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	0010      	movs	r0, r2
 80054fc:	4798      	blx	r3
    return;
 80054fe:	e0c5      	b.n	800568c <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	2202      	movs	r2, #2
 8005504:	4013      	ands	r3, r2
 8005506:	d009      	beq.n	800551c <HAL_SPI_IRQHandler+0x58>
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	2280      	movs	r2, #128	; 0x80
 800550c:	4013      	ands	r3, r2
 800550e:	d005      	beq.n	800551c <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	0010      	movs	r0, r2
 8005518:	4798      	blx	r3
    return;
 800551a:	e0b7      	b.n	800568c <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	2220      	movs	r2, #32
 8005520:	4013      	ands	r3, r2
 8005522:	d109      	bne.n	8005538 <HAL_SPI_IRQHandler+0x74>
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	2240      	movs	r2, #64	; 0x40
 8005528:	4013      	ands	r3, r2
 800552a:	d105      	bne.n	8005538 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	2380      	movs	r3, #128	; 0x80
 8005530:	005b      	lsls	r3, r3, #1
 8005532:	4013      	ands	r3, r2
 8005534:	d100      	bne.n	8005538 <HAL_SPI_IRQHandler+0x74>
 8005536:	e0a9      	b.n	800568c <HAL_SPI_IRQHandler+0x1c8>
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	2220      	movs	r2, #32
 800553c:	4013      	ands	r3, r2
 800553e:	d100      	bne.n	8005542 <HAL_SPI_IRQHandler+0x7e>
 8005540:	e0a4      	b.n	800568c <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	2240      	movs	r2, #64	; 0x40
 8005546:	4013      	ands	r3, r2
 8005548:	d023      	beq.n	8005592 <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	225d      	movs	r2, #93	; 0x5d
 800554e:	5c9b      	ldrb	r3, [r3, r2]
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b03      	cmp	r3, #3
 8005554:	d011      	beq.n	800557a <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800555a:	2204      	movs	r2, #4
 800555c:	431a      	orrs	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005562:	2300      	movs	r3, #0
 8005564:	617b      	str	r3, [r7, #20]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	617b      	str	r3, [r7, #20]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	617b      	str	r3, [r7, #20]
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	e00b      	b.n	8005592 <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800557a:	2300      	movs	r3, #0
 800557c:	613b      	str	r3, [r7, #16]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	613b      	str	r3, [r7, #16]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	613b      	str	r3, [r7, #16]
 800558e:	693b      	ldr	r3, [r7, #16]
        return;
 8005590:	e07c      	b.n	800568c <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	2220      	movs	r2, #32
 8005596:	4013      	ands	r3, r2
 8005598:	d014      	beq.n	80055c4 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800559e:	2201      	movs	r2, #1
 80055a0:	431a      	orrs	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80055a6:	2300      	movs	r3, #0
 80055a8:	60fb      	str	r3, [r7, #12]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	60fb      	str	r3, [r7, #12]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2140      	movs	r1, #64	; 0x40
 80055be:	438a      	bics	r2, r1
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	2380      	movs	r3, #128	; 0x80
 80055c8:	005b      	lsls	r3, r3, #1
 80055ca:	4013      	ands	r3, r2
 80055cc:	d00c      	beq.n	80055e8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055d2:	2208      	movs	r2, #8
 80055d4:	431a      	orrs	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80055da:	2300      	movs	r3, #0
 80055dc:	60bb      	str	r3, [r7, #8]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	60bb      	str	r3, [r7, #8]
 80055e6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d04c      	beq.n	800568a <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	21e0      	movs	r1, #224	; 0xe0
 80055fc:	438a      	bics	r2, r1
 80055fe:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	225d      	movs	r2, #93	; 0x5d
 8005604:	2101      	movs	r1, #1
 8005606:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	2202      	movs	r2, #2
 800560c:	4013      	ands	r3, r2
 800560e:	d103      	bne.n	8005618 <HAL_SPI_IRQHandler+0x154>
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	2201      	movs	r2, #1
 8005614:	4013      	ands	r3, r2
 8005616:	d032      	beq.n	800567e <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2103      	movs	r1, #3
 8005624:	438a      	bics	r2, r1
 8005626:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800562c:	2b00      	cmp	r3, #0
 800562e:	d010      	beq.n	8005652 <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005634:	4a17      	ldr	r2, [pc, #92]	; (8005694 <HAL_SPI_IRQHandler+0x1d0>)
 8005636:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800563c:	0018      	movs	r0, r3
 800563e:	f7fe fd75 	bl	800412c <HAL_DMA_Abort_IT>
 8005642:	1e03      	subs	r3, r0, #0
 8005644:	d005      	beq.n	8005652 <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800564a:	2240      	movs	r2, #64	; 0x40
 800564c:	431a      	orrs	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005656:	2b00      	cmp	r3, #0
 8005658:	d016      	beq.n	8005688 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565e:	4a0d      	ldr	r2, [pc, #52]	; (8005694 <HAL_SPI_IRQHandler+0x1d0>)
 8005660:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005666:	0018      	movs	r0, r3
 8005668:	f7fe fd60 	bl	800412c <HAL_DMA_Abort_IT>
 800566c:	1e03      	subs	r3, r0, #0
 800566e:	d00b      	beq.n	8005688 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005674:	2240      	movs	r2, #64	; 0x40
 8005676:	431a      	orrs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800567c:	e004      	b.n	8005688 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	0018      	movs	r0, r3
 8005682:	f000 f809 	bl	8005698 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005686:	e000      	b.n	800568a <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8005688:	46c0      	nop			; (mov r8, r8)
    return;
 800568a:	46c0      	nop			; (mov r8, r8)
  }
}
 800568c:	46bd      	mov	sp, r7
 800568e:	b008      	add	sp, #32
 8005690:	bd80      	pop	{r7, pc}
 8005692:	46c0      	nop			; (mov r8, r8)
 8005694:	080056a9 	.word	0x080056a9

08005698 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80056a0:	46c0      	nop			; (mov r8, r8)
 80056a2:	46bd      	mov	sp, r7
 80056a4:	b002      	add	sp, #8
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2246      	movs	r2, #70	; 0x46
 80056ba:	2100      	movs	r1, #0
 80056bc:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	0018      	movs	r0, r3
 80056c8:	f7ff ffe6 	bl	8005698 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80056cc:	46c0      	nop			; (mov r8, r8)
 80056ce:	46bd      	mov	sp, r7
 80056d0:	b004      	add	sp, #16
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b088      	sub	sp, #32
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	603b      	str	r3, [r7, #0]
 80056e0:	1dfb      	adds	r3, r7, #7
 80056e2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056e4:	f7fc ffaa 	bl	800263c <HAL_GetTick>
 80056e8:	0002      	movs	r2, r0
 80056ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ec:	1a9b      	subs	r3, r3, r2
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	18d3      	adds	r3, r2, r3
 80056f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056f4:	f7fc ffa2 	bl	800263c <HAL_GetTick>
 80056f8:	0003      	movs	r3, r0
 80056fa:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056fc:	4b3a      	ldr	r3, [pc, #232]	; (80057e8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	015b      	lsls	r3, r3, #5
 8005702:	0d1b      	lsrs	r3, r3, #20
 8005704:	69fa      	ldr	r2, [r7, #28]
 8005706:	4353      	muls	r3, r2
 8005708:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800570a:	e058      	b.n	80057be <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	3301      	adds	r3, #1
 8005710:	d055      	beq.n	80057be <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005712:	f7fc ff93 	bl	800263c <HAL_GetTick>
 8005716:	0002      	movs	r2, r0
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	69fa      	ldr	r2, [r7, #28]
 800571e:	429a      	cmp	r2, r3
 8005720:	d902      	bls.n	8005728 <SPI_WaitFlagStateUntilTimeout+0x54>
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d142      	bne.n	80057ae <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	21e0      	movs	r1, #224	; 0xe0
 8005734:	438a      	bics	r2, r1
 8005736:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	2382      	movs	r3, #130	; 0x82
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	429a      	cmp	r2, r3
 8005742:	d113      	bne.n	800576c <SPI_WaitFlagStateUntilTimeout+0x98>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	689a      	ldr	r2, [r3, #8]
 8005748:	2380      	movs	r3, #128	; 0x80
 800574a:	021b      	lsls	r3, r3, #8
 800574c:	429a      	cmp	r2, r3
 800574e:	d005      	beq.n	800575c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	2380      	movs	r3, #128	; 0x80
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	429a      	cmp	r2, r3
 800575a:	d107      	bne.n	800576c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2140      	movs	r1, #64	; 0x40
 8005768:	438a      	bics	r2, r1
 800576a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005770:	2380      	movs	r3, #128	; 0x80
 8005772:	019b      	lsls	r3, r3, #6
 8005774:	429a      	cmp	r2, r3
 8005776:	d110      	bne.n	800579a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	491a      	ldr	r1, [pc, #104]	; (80057ec <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005784:	400a      	ands	r2, r1
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2180      	movs	r1, #128	; 0x80
 8005794:	0189      	lsls	r1, r1, #6
 8005796:	430a      	orrs	r2, r1
 8005798:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	225d      	movs	r2, #93	; 0x5d
 800579e:	2101      	movs	r1, #1
 80057a0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	225c      	movs	r2, #92	; 0x5c
 80057a6:	2100      	movs	r1, #0
 80057a8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e017      	b.n	80057de <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80057b4:	2300      	movs	r3, #0
 80057b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	3b01      	subs	r3, #1
 80057bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	4013      	ands	r3, r2
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	425a      	negs	r2, r3
 80057ce:	4153      	adcs	r3, r2
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	001a      	movs	r2, r3
 80057d4:	1dfb      	adds	r3, r7, #7
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d197      	bne.n	800570c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	0018      	movs	r0, r3
 80057e0:	46bd      	mov	sp, r7
 80057e2:	b008      	add	sp, #32
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	46c0      	nop			; (mov r8, r8)
 80057e8:	20000004 	.word	0x20000004
 80057ec:	ffffdfff 	.word	0xffffdfff

080057f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b08a      	sub	sp, #40	; 0x28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
 80057fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80057fe:	2317      	movs	r3, #23
 8005800:	18fb      	adds	r3, r7, r3
 8005802:	2200      	movs	r2, #0
 8005804:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005806:	f7fc ff19 	bl	800263c <HAL_GetTick>
 800580a:	0002      	movs	r2, r0
 800580c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580e:	1a9b      	subs	r3, r3, r2
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	18d3      	adds	r3, r2, r3
 8005814:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005816:	f7fc ff11 	bl	800263c <HAL_GetTick>
 800581a:	0003      	movs	r3, r0
 800581c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	330c      	adds	r3, #12
 8005824:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005826:	4b41      	ldr	r3, [pc, #260]	; (800592c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	0013      	movs	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	189b      	adds	r3, r3, r2
 8005830:	00da      	lsls	r2, r3, #3
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	0d1b      	lsrs	r3, r3, #20
 8005836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005838:	4353      	muls	r3, r2
 800583a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800583c:	e068      	b.n	8005910 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	23c0      	movs	r3, #192	; 0xc0
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	429a      	cmp	r2, r3
 8005846:	d10a      	bne.n	800585e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d107      	bne.n	800585e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	b2da      	uxtb	r2, r3
 8005854:	2117      	movs	r1, #23
 8005856:	187b      	adds	r3, r7, r1
 8005858:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800585a:	187b      	adds	r3, r7, r1
 800585c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	3301      	adds	r3, #1
 8005862:	d055      	beq.n	8005910 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005864:	f7fc feea 	bl	800263c <HAL_GetTick>
 8005868:	0002      	movs	r2, r0
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005870:	429a      	cmp	r2, r3
 8005872:	d902      	bls.n	800587a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	2b00      	cmp	r3, #0
 8005878:	d142      	bne.n	8005900 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	21e0      	movs	r1, #224	; 0xe0
 8005886:	438a      	bics	r2, r1
 8005888:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	2382      	movs	r3, #130	; 0x82
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	429a      	cmp	r2, r3
 8005894:	d113      	bne.n	80058be <SPI_WaitFifoStateUntilTimeout+0xce>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	689a      	ldr	r2, [r3, #8]
 800589a:	2380      	movs	r3, #128	; 0x80
 800589c:	021b      	lsls	r3, r3, #8
 800589e:	429a      	cmp	r2, r3
 80058a0:	d005      	beq.n	80058ae <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	689a      	ldr	r2, [r3, #8]
 80058a6:	2380      	movs	r3, #128	; 0x80
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d107      	bne.n	80058be <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2140      	movs	r1, #64	; 0x40
 80058ba:	438a      	bics	r2, r1
 80058bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058c2:	2380      	movs	r3, #128	; 0x80
 80058c4:	019b      	lsls	r3, r3, #6
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d110      	bne.n	80058ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4916      	ldr	r1, [pc, #88]	; (8005930 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80058d6:	400a      	ands	r2, r1
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2180      	movs	r1, #128	; 0x80
 80058e6:	0189      	lsls	r1, r1, #6
 80058e8:	430a      	orrs	r2, r1
 80058ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	225d      	movs	r2, #93	; 0x5d
 80058f0:	2101      	movs	r1, #1
 80058f2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	225c      	movs	r2, #92	; 0x5c
 80058f8:	2100      	movs	r1, #0
 80058fa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e010      	b.n	8005922 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8005906:	2300      	movs	r3, #0
 8005908:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	3b01      	subs	r3, #1
 800590e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	4013      	ands	r3, r2
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	429a      	cmp	r2, r3
 800591e:	d18e      	bne.n	800583e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	0018      	movs	r0, r3
 8005924:	46bd      	mov	sp, r7
 8005926:	b00a      	add	sp, #40	; 0x28
 8005928:	bd80      	pop	{r7, pc}
 800592a:	46c0      	nop			; (mov r8, r8)
 800592c:	20000004 	.word	0x20000004
 8005930:	ffffdfff 	.word	0xffffdfff

08005934 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af02      	add	r7, sp, #8
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	23c0      	movs	r3, #192	; 0xc0
 8005944:	0159      	lsls	r1, r3, #5
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	0013      	movs	r3, r2
 800594e:	2200      	movs	r2, #0
 8005950:	f7ff ff4e 	bl	80057f0 <SPI_WaitFifoStateUntilTimeout>
 8005954:	1e03      	subs	r3, r0, #0
 8005956:	d007      	beq.n	8005968 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800595c:	2220      	movs	r2, #32
 800595e:	431a      	orrs	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e027      	b.n	80059b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	0013      	movs	r3, r2
 8005972:	2200      	movs	r2, #0
 8005974:	2180      	movs	r1, #128	; 0x80
 8005976:	f7ff fead 	bl	80056d4 <SPI_WaitFlagStateUntilTimeout>
 800597a:	1e03      	subs	r3, r0, #0
 800597c:	d007      	beq.n	800598e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005982:	2220      	movs	r2, #32
 8005984:	431a      	orrs	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e014      	b.n	80059b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	23c0      	movs	r3, #192	; 0xc0
 8005992:	00d9      	lsls	r1, r3, #3
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	0013      	movs	r3, r2
 800599c:	2200      	movs	r2, #0
 800599e:	f7ff ff27 	bl	80057f0 <SPI_WaitFifoStateUntilTimeout>
 80059a2:	1e03      	subs	r3, r0, #0
 80059a4:	d007      	beq.n	80059b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059aa:	2220      	movs	r2, #32
 80059ac:	431a      	orrs	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e000      	b.n	80059b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	0018      	movs	r0, r3
 80059ba:	46bd      	mov	sp, r7
 80059bc:	b004      	add	sp, #16
 80059be:	bd80      	pop	{r7, pc}

080059c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e042      	b.n	8005a58 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	223d      	movs	r2, #61	; 0x3d
 80059d6:	5c9b      	ldrb	r3, [r3, r2]
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d107      	bne.n	80059ee <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	223c      	movs	r2, #60	; 0x3c
 80059e2:	2100      	movs	r1, #0
 80059e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	0018      	movs	r0, r3
 80059ea:	f7fc fa3d 	bl	8001e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	223d      	movs	r2, #61	; 0x3d
 80059f2:	2102      	movs	r1, #2
 80059f4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	3304      	adds	r3, #4
 80059fe:	0019      	movs	r1, r3
 8005a00:	0010      	movs	r0, r2
 8005a02:	f000 f94b 	bl	8005c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2246      	movs	r2, #70	; 0x46
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	223e      	movs	r2, #62	; 0x3e
 8005a12:	2101      	movs	r1, #1
 8005a14:	5499      	strb	r1, [r3, r2]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	223f      	movs	r2, #63	; 0x3f
 8005a1a:	2101      	movs	r1, #1
 8005a1c:	5499      	strb	r1, [r3, r2]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2240      	movs	r2, #64	; 0x40
 8005a22:	2101      	movs	r1, #1
 8005a24:	5499      	strb	r1, [r3, r2]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2241      	movs	r2, #65	; 0x41
 8005a2a:	2101      	movs	r1, #1
 8005a2c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2242      	movs	r2, #66	; 0x42
 8005a32:	2101      	movs	r1, #1
 8005a34:	5499      	strb	r1, [r3, r2]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2243      	movs	r2, #67	; 0x43
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	5499      	strb	r1, [r3, r2]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2244      	movs	r2, #68	; 0x44
 8005a42:	2101      	movs	r1, #1
 8005a44:	5499      	strb	r1, [r3, r2]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2245      	movs	r2, #69	; 0x45
 8005a4a:	2101      	movs	r1, #1
 8005a4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	223d      	movs	r2, #61	; 0x3d
 8005a52:	2101      	movs	r1, #1
 8005a54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	0018      	movs	r0, r3
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	b002      	add	sp, #8
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	223d      	movs	r2, #61	; 0x3d
 8005a6c:	5c9b      	ldrb	r3, [r3, r2]
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d001      	beq.n	8005a78 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e033      	b.n	8005ae0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	223d      	movs	r2, #61	; 0x3d
 8005a7c:	2102      	movs	r1, #2
 8005a7e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a18      	ldr	r2, [pc, #96]	; (8005ae8 <HAL_TIM_Base_Start+0x88>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d00f      	beq.n	8005aaa <HAL_TIM_Base_Start+0x4a>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	2380      	movs	r3, #128	; 0x80
 8005a90:	05db      	lsls	r3, r3, #23
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d009      	beq.n	8005aaa <HAL_TIM_Base_Start+0x4a>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a14      	ldr	r2, [pc, #80]	; (8005aec <HAL_TIM_Base_Start+0x8c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d004      	beq.n	8005aaa <HAL_TIM_Base_Start+0x4a>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a12      	ldr	r2, [pc, #72]	; (8005af0 <HAL_TIM_Base_Start+0x90>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d111      	bne.n	8005ace <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	2207      	movs	r2, #7
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b06      	cmp	r3, #6
 8005aba:	d010      	beq.n	8005ade <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2101      	movs	r1, #1
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005acc:	e007      	b.n	8005ade <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2101      	movs	r1, #1
 8005ada:	430a      	orrs	r2, r1
 8005adc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	b004      	add	sp, #16
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	40012c00 	.word	0x40012c00
 8005aec:	40000400 	.word	0x40000400
 8005af0:	40014000 	.word	0x40014000

08005af4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005afe:	230f      	movs	r3, #15
 8005b00:	18fb      	adds	r3, r7, r3
 8005b02:	2200      	movs	r2, #0
 8005b04:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	223c      	movs	r2, #60	; 0x3c
 8005b0a:	5c9b      	ldrb	r3, [r3, r2]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d101      	bne.n	8005b14 <HAL_TIM_ConfigClockSource+0x20>
 8005b10:	2302      	movs	r3, #2
 8005b12:	e0bc      	b.n	8005c8e <HAL_TIM_ConfigClockSource+0x19a>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	223c      	movs	r2, #60	; 0x3c
 8005b18:	2101      	movs	r1, #1
 8005b1a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	223d      	movs	r2, #61	; 0x3d
 8005b20:	2102      	movs	r1, #2
 8005b22:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2277      	movs	r2, #119	; 0x77
 8005b30:	4393      	bics	r3, r2
 8005b32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	4a58      	ldr	r2, [pc, #352]	; (8005c98 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005b38:	4013      	ands	r3, r2
 8005b3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2280      	movs	r2, #128	; 0x80
 8005b4a:	0192      	lsls	r2, r2, #6
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d040      	beq.n	8005bd2 <HAL_TIM_ConfigClockSource+0xde>
 8005b50:	2280      	movs	r2, #128	; 0x80
 8005b52:	0192      	lsls	r2, r2, #6
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d900      	bls.n	8005b5a <HAL_TIM_ConfigClockSource+0x66>
 8005b58:	e088      	b.n	8005c6c <HAL_TIM_ConfigClockSource+0x178>
 8005b5a:	2280      	movs	r2, #128	; 0x80
 8005b5c:	0152      	lsls	r2, r2, #5
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d100      	bne.n	8005b64 <HAL_TIM_ConfigClockSource+0x70>
 8005b62:	e088      	b.n	8005c76 <HAL_TIM_ConfigClockSource+0x182>
 8005b64:	2280      	movs	r2, #128	; 0x80
 8005b66:	0152      	lsls	r2, r2, #5
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d900      	bls.n	8005b6e <HAL_TIM_ConfigClockSource+0x7a>
 8005b6c:	e07e      	b.n	8005c6c <HAL_TIM_ConfigClockSource+0x178>
 8005b6e:	2b70      	cmp	r3, #112	; 0x70
 8005b70:	d018      	beq.n	8005ba4 <HAL_TIM_ConfigClockSource+0xb0>
 8005b72:	d900      	bls.n	8005b76 <HAL_TIM_ConfigClockSource+0x82>
 8005b74:	e07a      	b.n	8005c6c <HAL_TIM_ConfigClockSource+0x178>
 8005b76:	2b60      	cmp	r3, #96	; 0x60
 8005b78:	d04f      	beq.n	8005c1a <HAL_TIM_ConfigClockSource+0x126>
 8005b7a:	d900      	bls.n	8005b7e <HAL_TIM_ConfigClockSource+0x8a>
 8005b7c:	e076      	b.n	8005c6c <HAL_TIM_ConfigClockSource+0x178>
 8005b7e:	2b50      	cmp	r3, #80	; 0x50
 8005b80:	d03b      	beq.n	8005bfa <HAL_TIM_ConfigClockSource+0x106>
 8005b82:	d900      	bls.n	8005b86 <HAL_TIM_ConfigClockSource+0x92>
 8005b84:	e072      	b.n	8005c6c <HAL_TIM_ConfigClockSource+0x178>
 8005b86:	2b40      	cmp	r3, #64	; 0x40
 8005b88:	d057      	beq.n	8005c3a <HAL_TIM_ConfigClockSource+0x146>
 8005b8a:	d900      	bls.n	8005b8e <HAL_TIM_ConfigClockSource+0x9a>
 8005b8c:	e06e      	b.n	8005c6c <HAL_TIM_ConfigClockSource+0x178>
 8005b8e:	2b30      	cmp	r3, #48	; 0x30
 8005b90:	d063      	beq.n	8005c5a <HAL_TIM_ConfigClockSource+0x166>
 8005b92:	d86b      	bhi.n	8005c6c <HAL_TIM_ConfigClockSource+0x178>
 8005b94:	2b20      	cmp	r3, #32
 8005b96:	d060      	beq.n	8005c5a <HAL_TIM_ConfigClockSource+0x166>
 8005b98:	d868      	bhi.n	8005c6c <HAL_TIM_ConfigClockSource+0x178>
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d05d      	beq.n	8005c5a <HAL_TIM_ConfigClockSource+0x166>
 8005b9e:	2b10      	cmp	r3, #16
 8005ba0:	d05b      	beq.n	8005c5a <HAL_TIM_ConfigClockSource+0x166>
 8005ba2:	e063      	b.n	8005c6c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bb4:	f000 f96c 	bl	8005e90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2277      	movs	r2, #119	; 0x77
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	609a      	str	r2, [r3, #8]
      break;
 8005bd0:	e052      	b.n	8005c78 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005be2:	f000 f955 	bl	8005e90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	689a      	ldr	r2, [r3, #8]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2180      	movs	r1, #128	; 0x80
 8005bf2:	01c9      	lsls	r1, r1, #7
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	609a      	str	r2, [r3, #8]
      break;
 8005bf8:	e03e      	b.n	8005c78 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c06:	001a      	movs	r2, r3
 8005c08:	f000 f8c8 	bl	8005d9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2150      	movs	r1, #80	; 0x50
 8005c12:	0018      	movs	r0, r3
 8005c14:	f000 f922 	bl	8005e5c <TIM_ITRx_SetConfig>
      break;
 8005c18:	e02e      	b.n	8005c78 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c26:	001a      	movs	r2, r3
 8005c28:	f000 f8e6 	bl	8005df8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2160      	movs	r1, #96	; 0x60
 8005c32:	0018      	movs	r0, r3
 8005c34:	f000 f912 	bl	8005e5c <TIM_ITRx_SetConfig>
      break;
 8005c38:	e01e      	b.n	8005c78 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c46:	001a      	movs	r2, r3
 8005c48:	f000 f8a8 	bl	8005d9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2140      	movs	r1, #64	; 0x40
 8005c52:	0018      	movs	r0, r3
 8005c54:	f000 f902 	bl	8005e5c <TIM_ITRx_SetConfig>
      break;
 8005c58:	e00e      	b.n	8005c78 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	0019      	movs	r1, r3
 8005c64:	0010      	movs	r0, r2
 8005c66:	f000 f8f9 	bl	8005e5c <TIM_ITRx_SetConfig>
      break;
 8005c6a:	e005      	b.n	8005c78 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005c6c:	230f      	movs	r3, #15
 8005c6e:	18fb      	adds	r3, r7, r3
 8005c70:	2201      	movs	r2, #1
 8005c72:	701a      	strb	r2, [r3, #0]
      break;
 8005c74:	e000      	b.n	8005c78 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005c76:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	223d      	movs	r2, #61	; 0x3d
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	223c      	movs	r2, #60	; 0x3c
 8005c84:	2100      	movs	r1, #0
 8005c86:	5499      	strb	r1, [r3, r2]

  return status;
 8005c88:	230f      	movs	r3, #15
 8005c8a:	18fb      	adds	r3, r7, r3
 8005c8c:	781b      	ldrb	r3, [r3, #0]
}
 8005c8e:	0018      	movs	r0, r3
 8005c90:	46bd      	mov	sp, r7
 8005c92:	b004      	add	sp, #16
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	46c0      	nop			; (mov r8, r8)
 8005c98:	ffff00ff 	.word	0xffff00ff

08005c9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a34      	ldr	r2, [pc, #208]	; (8005d80 <TIM_Base_SetConfig+0xe4>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d008      	beq.n	8005cc6 <TIM_Base_SetConfig+0x2a>
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	2380      	movs	r3, #128	; 0x80
 8005cb8:	05db      	lsls	r3, r3, #23
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d003      	beq.n	8005cc6 <TIM_Base_SetConfig+0x2a>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a30      	ldr	r2, [pc, #192]	; (8005d84 <TIM_Base_SetConfig+0xe8>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d108      	bne.n	8005cd8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2270      	movs	r2, #112	; 0x70
 8005cca:	4393      	bics	r3, r2
 8005ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a29      	ldr	r2, [pc, #164]	; (8005d80 <TIM_Base_SetConfig+0xe4>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d018      	beq.n	8005d12 <TIM_Base_SetConfig+0x76>
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	2380      	movs	r3, #128	; 0x80
 8005ce4:	05db      	lsls	r3, r3, #23
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d013      	beq.n	8005d12 <TIM_Base_SetConfig+0x76>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a25      	ldr	r2, [pc, #148]	; (8005d84 <TIM_Base_SetConfig+0xe8>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d00f      	beq.n	8005d12 <TIM_Base_SetConfig+0x76>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a24      	ldr	r2, [pc, #144]	; (8005d88 <TIM_Base_SetConfig+0xec>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d00b      	beq.n	8005d12 <TIM_Base_SetConfig+0x76>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a23      	ldr	r2, [pc, #140]	; (8005d8c <TIM_Base_SetConfig+0xf0>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d007      	beq.n	8005d12 <TIM_Base_SetConfig+0x76>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a22      	ldr	r2, [pc, #136]	; (8005d90 <TIM_Base_SetConfig+0xf4>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d003      	beq.n	8005d12 <TIM_Base_SetConfig+0x76>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a21      	ldr	r2, [pc, #132]	; (8005d94 <TIM_Base_SetConfig+0xf8>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d108      	bne.n	8005d24 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	4a20      	ldr	r2, [pc, #128]	; (8005d98 <TIM_Base_SetConfig+0xfc>)
 8005d16:	4013      	ands	r3, r2
 8005d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2280      	movs	r2, #128	; 0x80
 8005d28:	4393      	bics	r3, r2
 8005d2a:	001a      	movs	r2, r3
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	689a      	ldr	r2, [r3, #8]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a0c      	ldr	r2, [pc, #48]	; (8005d80 <TIM_Base_SetConfig+0xe4>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d00b      	beq.n	8005d6a <TIM_Base_SetConfig+0xce>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a0d      	ldr	r2, [pc, #52]	; (8005d8c <TIM_Base_SetConfig+0xf0>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d007      	beq.n	8005d6a <TIM_Base_SetConfig+0xce>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a0c      	ldr	r2, [pc, #48]	; (8005d90 <TIM_Base_SetConfig+0xf4>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d003      	beq.n	8005d6a <TIM_Base_SetConfig+0xce>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a0b      	ldr	r2, [pc, #44]	; (8005d94 <TIM_Base_SetConfig+0xf8>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d103      	bne.n	8005d72 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	691a      	ldr	r2, [r3, #16]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	615a      	str	r2, [r3, #20]
}
 8005d78:	46c0      	nop			; (mov r8, r8)
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	b004      	add	sp, #16
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	40012c00 	.word	0x40012c00
 8005d84:	40000400 	.word	0x40000400
 8005d88:	40002000 	.word	0x40002000
 8005d8c:	40014000 	.word	0x40014000
 8005d90:	40014400 	.word	0x40014400
 8005d94:	40014800 	.word	0x40014800
 8005d98:	fffffcff 	.word	0xfffffcff

08005d9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	2201      	movs	r2, #1
 8005db4:	4393      	bics	r3, r2
 8005db6:	001a      	movs	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	22f0      	movs	r2, #240	; 0xf0
 8005dc6:	4393      	bics	r3, r2
 8005dc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	011b      	lsls	r3, r3, #4
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	220a      	movs	r2, #10
 8005dd8:	4393      	bics	r3, r2
 8005dda:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	621a      	str	r2, [r3, #32]
}
 8005df0:	46c0      	nop			; (mov r8, r8)
 8005df2:	46bd      	mov	sp, r7
 8005df4:	b006      	add	sp, #24
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6a1b      	ldr	r3, [r3, #32]
 8005e08:	2210      	movs	r2, #16
 8005e0a:	4393      	bics	r3, r2
 8005e0c:	001a      	movs	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	4a0d      	ldr	r2, [pc, #52]	; (8005e58 <TIM_TI2_ConfigInputStage+0x60>)
 8005e22:	4013      	ands	r3, r2
 8005e24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	031b      	lsls	r3, r3, #12
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	22a0      	movs	r2, #160	; 0xa0
 8005e34:	4393      	bics	r3, r2
 8005e36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	011b      	lsls	r3, r3, #4
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	621a      	str	r2, [r3, #32]
}
 8005e4e:	46c0      	nop			; (mov r8, r8)
 8005e50:	46bd      	mov	sp, r7
 8005e52:	b006      	add	sp, #24
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	46c0      	nop			; (mov r8, r8)
 8005e58:	ffff0fff 	.word	0xffff0fff

08005e5c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2270      	movs	r2, #112	; 0x70
 8005e70:	4393      	bics	r3, r2
 8005e72:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e74:	683a      	ldr	r2, [r7, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	2207      	movs	r2, #7
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	609a      	str	r2, [r3, #8]
}
 8005e86:	46c0      	nop			; (mov r8, r8)
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	b004      	add	sp, #16
 8005e8c:	bd80      	pop	{r7, pc}
	...

08005e90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
 8005e9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	4a09      	ldr	r2, [pc, #36]	; (8005ecc <TIM_ETR_SetConfig+0x3c>)
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	021a      	lsls	r2, r3, #8
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	609a      	str	r2, [r3, #8]
}
 8005ec4:	46c0      	nop			; (mov r8, r8)
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	b006      	add	sp, #24
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	ffff00ff 	.word	0xffff00ff

08005ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	223c      	movs	r2, #60	; 0x3c
 8005ede:	5c9b      	ldrb	r3, [r3, r2]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d101      	bne.n	8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	e047      	b.n	8005f78 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	223c      	movs	r2, #60	; 0x3c
 8005eec:	2101      	movs	r1, #1
 8005eee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	223d      	movs	r2, #61	; 0x3d
 8005ef4:	2102      	movs	r1, #2
 8005ef6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2270      	movs	r2, #112	; 0x70
 8005f0c:	4393      	bics	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a16      	ldr	r2, [pc, #88]	; (8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d00f      	beq.n	8005f4c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	2380      	movs	r3, #128	; 0x80
 8005f32:	05db      	lsls	r3, r3, #23
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d009      	beq.n	8005f4c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a11      	ldr	r2, [pc, #68]	; (8005f84 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d004      	beq.n	8005f4c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a10      	ldr	r2, [pc, #64]	; (8005f88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d10c      	bne.n	8005f66 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2280      	movs	r2, #128	; 0x80
 8005f50:	4393      	bics	r3, r2
 8005f52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	223d      	movs	r2, #61	; 0x3d
 8005f6a:	2101      	movs	r1, #1
 8005f6c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	223c      	movs	r2, #60	; 0x3c
 8005f72:	2100      	movs	r1, #0
 8005f74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	0018      	movs	r0, r3
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	b004      	add	sp, #16
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	40012c00 	.word	0x40012c00
 8005f84:	40000400 	.word	0x40000400
 8005f88:	40014000 	.word	0x40014000

08005f8c <sniprintf>:
 8005f8c:	b40c      	push	{r2, r3}
 8005f8e:	b530      	push	{r4, r5, lr}
 8005f90:	4b17      	ldr	r3, [pc, #92]	; (8005ff0 <sniprintf+0x64>)
 8005f92:	000c      	movs	r4, r1
 8005f94:	681d      	ldr	r5, [r3, #0]
 8005f96:	b09d      	sub	sp, #116	; 0x74
 8005f98:	2900      	cmp	r1, #0
 8005f9a:	da08      	bge.n	8005fae <sniprintf+0x22>
 8005f9c:	238b      	movs	r3, #139	; 0x8b
 8005f9e:	2001      	movs	r0, #1
 8005fa0:	602b      	str	r3, [r5, #0]
 8005fa2:	4240      	negs	r0, r0
 8005fa4:	b01d      	add	sp, #116	; 0x74
 8005fa6:	bc30      	pop	{r4, r5}
 8005fa8:	bc08      	pop	{r3}
 8005faa:	b002      	add	sp, #8
 8005fac:	4718      	bx	r3
 8005fae:	2382      	movs	r3, #130	; 0x82
 8005fb0:	466a      	mov	r2, sp
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	8293      	strh	r3, [r2, #20]
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	9002      	str	r0, [sp, #8]
 8005fba:	9006      	str	r0, [sp, #24]
 8005fbc:	4299      	cmp	r1, r3
 8005fbe:	d000      	beq.n	8005fc2 <sniprintf+0x36>
 8005fc0:	1e4b      	subs	r3, r1, #1
 8005fc2:	9304      	str	r3, [sp, #16]
 8005fc4:	9307      	str	r3, [sp, #28]
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	466a      	mov	r2, sp
 8005fca:	425b      	negs	r3, r3
 8005fcc:	82d3      	strh	r3, [r2, #22]
 8005fce:	0028      	movs	r0, r5
 8005fd0:	ab21      	add	r3, sp, #132	; 0x84
 8005fd2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005fd4:	a902      	add	r1, sp, #8
 8005fd6:	9301      	str	r3, [sp, #4]
 8005fd8:	f000 f9aa 	bl	8006330 <_svfiprintf_r>
 8005fdc:	1c43      	adds	r3, r0, #1
 8005fde:	da01      	bge.n	8005fe4 <sniprintf+0x58>
 8005fe0:	238b      	movs	r3, #139	; 0x8b
 8005fe2:	602b      	str	r3, [r5, #0]
 8005fe4:	2c00      	cmp	r4, #0
 8005fe6:	d0dd      	beq.n	8005fa4 <sniprintf+0x18>
 8005fe8:	2200      	movs	r2, #0
 8005fea:	9b02      	ldr	r3, [sp, #8]
 8005fec:	701a      	strb	r2, [r3, #0]
 8005fee:	e7d9      	b.n	8005fa4 <sniprintf+0x18>
 8005ff0:	2000005c 	.word	0x2000005c

08005ff4 <memset>:
 8005ff4:	0003      	movs	r3, r0
 8005ff6:	1882      	adds	r2, r0, r2
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d100      	bne.n	8005ffe <memset+0xa>
 8005ffc:	4770      	bx	lr
 8005ffe:	7019      	strb	r1, [r3, #0]
 8006000:	3301      	adds	r3, #1
 8006002:	e7f9      	b.n	8005ff8 <memset+0x4>

08006004 <__errno>:
 8006004:	4b01      	ldr	r3, [pc, #4]	; (800600c <__errno+0x8>)
 8006006:	6818      	ldr	r0, [r3, #0]
 8006008:	4770      	bx	lr
 800600a:	46c0      	nop			; (mov r8, r8)
 800600c:	2000005c 	.word	0x2000005c

08006010 <__libc_init_array>:
 8006010:	b570      	push	{r4, r5, r6, lr}
 8006012:	2600      	movs	r6, #0
 8006014:	4c0c      	ldr	r4, [pc, #48]	; (8006048 <__libc_init_array+0x38>)
 8006016:	4d0d      	ldr	r5, [pc, #52]	; (800604c <__libc_init_array+0x3c>)
 8006018:	1b64      	subs	r4, r4, r5
 800601a:	10a4      	asrs	r4, r4, #2
 800601c:	42a6      	cmp	r6, r4
 800601e:	d109      	bne.n	8006034 <__libc_init_array+0x24>
 8006020:	2600      	movs	r6, #0
 8006022:	f000 fc6d 	bl	8006900 <_init>
 8006026:	4c0a      	ldr	r4, [pc, #40]	; (8006050 <__libc_init_array+0x40>)
 8006028:	4d0a      	ldr	r5, [pc, #40]	; (8006054 <__libc_init_array+0x44>)
 800602a:	1b64      	subs	r4, r4, r5
 800602c:	10a4      	asrs	r4, r4, #2
 800602e:	42a6      	cmp	r6, r4
 8006030:	d105      	bne.n	800603e <__libc_init_array+0x2e>
 8006032:	bd70      	pop	{r4, r5, r6, pc}
 8006034:	00b3      	lsls	r3, r6, #2
 8006036:	58eb      	ldr	r3, [r5, r3]
 8006038:	4798      	blx	r3
 800603a:	3601      	adds	r6, #1
 800603c:	e7ee      	b.n	800601c <__libc_init_array+0xc>
 800603e:	00b3      	lsls	r3, r6, #2
 8006040:	58eb      	ldr	r3, [r5, r3]
 8006042:	4798      	blx	r3
 8006044:	3601      	adds	r6, #1
 8006046:	e7f2      	b.n	800602e <__libc_init_array+0x1e>
 8006048:	08006fc8 	.word	0x08006fc8
 800604c:	08006fc8 	.word	0x08006fc8
 8006050:	08006fcc 	.word	0x08006fcc
 8006054:	08006fc8 	.word	0x08006fc8

08006058 <__retarget_lock_acquire_recursive>:
 8006058:	4770      	bx	lr

0800605a <__retarget_lock_release_recursive>:
 800605a:	4770      	bx	lr

0800605c <memcpy>:
 800605c:	2300      	movs	r3, #0
 800605e:	b510      	push	{r4, lr}
 8006060:	429a      	cmp	r2, r3
 8006062:	d100      	bne.n	8006066 <memcpy+0xa>
 8006064:	bd10      	pop	{r4, pc}
 8006066:	5ccc      	ldrb	r4, [r1, r3]
 8006068:	54c4      	strb	r4, [r0, r3]
 800606a:	3301      	adds	r3, #1
 800606c:	e7f8      	b.n	8006060 <memcpy+0x4>
	...

08006070 <_free_r>:
 8006070:	b570      	push	{r4, r5, r6, lr}
 8006072:	0005      	movs	r5, r0
 8006074:	2900      	cmp	r1, #0
 8006076:	d010      	beq.n	800609a <_free_r+0x2a>
 8006078:	1f0c      	subs	r4, r1, #4
 800607a:	6823      	ldr	r3, [r4, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	da00      	bge.n	8006082 <_free_r+0x12>
 8006080:	18e4      	adds	r4, r4, r3
 8006082:	0028      	movs	r0, r5
 8006084:	f000 f8e2 	bl	800624c <__malloc_lock>
 8006088:	4a1d      	ldr	r2, [pc, #116]	; (8006100 <_free_r+0x90>)
 800608a:	6813      	ldr	r3, [r2, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d105      	bne.n	800609c <_free_r+0x2c>
 8006090:	6063      	str	r3, [r4, #4]
 8006092:	6014      	str	r4, [r2, #0]
 8006094:	0028      	movs	r0, r5
 8006096:	f000 f8e1 	bl	800625c <__malloc_unlock>
 800609a:	bd70      	pop	{r4, r5, r6, pc}
 800609c:	42a3      	cmp	r3, r4
 800609e:	d908      	bls.n	80060b2 <_free_r+0x42>
 80060a0:	6820      	ldr	r0, [r4, #0]
 80060a2:	1821      	adds	r1, r4, r0
 80060a4:	428b      	cmp	r3, r1
 80060a6:	d1f3      	bne.n	8006090 <_free_r+0x20>
 80060a8:	6819      	ldr	r1, [r3, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	1809      	adds	r1, r1, r0
 80060ae:	6021      	str	r1, [r4, #0]
 80060b0:	e7ee      	b.n	8006090 <_free_r+0x20>
 80060b2:	001a      	movs	r2, r3
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <_free_r+0x4e>
 80060ba:	42a3      	cmp	r3, r4
 80060bc:	d9f9      	bls.n	80060b2 <_free_r+0x42>
 80060be:	6811      	ldr	r1, [r2, #0]
 80060c0:	1850      	adds	r0, r2, r1
 80060c2:	42a0      	cmp	r0, r4
 80060c4:	d10b      	bne.n	80060de <_free_r+0x6e>
 80060c6:	6820      	ldr	r0, [r4, #0]
 80060c8:	1809      	adds	r1, r1, r0
 80060ca:	1850      	adds	r0, r2, r1
 80060cc:	6011      	str	r1, [r2, #0]
 80060ce:	4283      	cmp	r3, r0
 80060d0:	d1e0      	bne.n	8006094 <_free_r+0x24>
 80060d2:	6818      	ldr	r0, [r3, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	1841      	adds	r1, r0, r1
 80060d8:	6011      	str	r1, [r2, #0]
 80060da:	6053      	str	r3, [r2, #4]
 80060dc:	e7da      	b.n	8006094 <_free_r+0x24>
 80060de:	42a0      	cmp	r0, r4
 80060e0:	d902      	bls.n	80060e8 <_free_r+0x78>
 80060e2:	230c      	movs	r3, #12
 80060e4:	602b      	str	r3, [r5, #0]
 80060e6:	e7d5      	b.n	8006094 <_free_r+0x24>
 80060e8:	6820      	ldr	r0, [r4, #0]
 80060ea:	1821      	adds	r1, r4, r0
 80060ec:	428b      	cmp	r3, r1
 80060ee:	d103      	bne.n	80060f8 <_free_r+0x88>
 80060f0:	6819      	ldr	r1, [r3, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	1809      	adds	r1, r1, r0
 80060f6:	6021      	str	r1, [r4, #0]
 80060f8:	6063      	str	r3, [r4, #4]
 80060fa:	6054      	str	r4, [r2, #4]
 80060fc:	e7ca      	b.n	8006094 <_free_r+0x24>
 80060fe:	46c0      	nop			; (mov r8, r8)
 8006100:	2000115c 	.word	0x2000115c

08006104 <sbrk_aligned>:
 8006104:	b570      	push	{r4, r5, r6, lr}
 8006106:	4e0f      	ldr	r6, [pc, #60]	; (8006144 <sbrk_aligned+0x40>)
 8006108:	000d      	movs	r5, r1
 800610a:	6831      	ldr	r1, [r6, #0]
 800610c:	0004      	movs	r4, r0
 800610e:	2900      	cmp	r1, #0
 8006110:	d102      	bne.n	8006118 <sbrk_aligned+0x14>
 8006112:	f000 fba1 	bl	8006858 <_sbrk_r>
 8006116:	6030      	str	r0, [r6, #0]
 8006118:	0029      	movs	r1, r5
 800611a:	0020      	movs	r0, r4
 800611c:	f000 fb9c 	bl	8006858 <_sbrk_r>
 8006120:	1c43      	adds	r3, r0, #1
 8006122:	d00a      	beq.n	800613a <sbrk_aligned+0x36>
 8006124:	2303      	movs	r3, #3
 8006126:	1cc5      	adds	r5, r0, #3
 8006128:	439d      	bics	r5, r3
 800612a:	42a8      	cmp	r0, r5
 800612c:	d007      	beq.n	800613e <sbrk_aligned+0x3a>
 800612e:	1a29      	subs	r1, r5, r0
 8006130:	0020      	movs	r0, r4
 8006132:	f000 fb91 	bl	8006858 <_sbrk_r>
 8006136:	3001      	adds	r0, #1
 8006138:	d101      	bne.n	800613e <sbrk_aligned+0x3a>
 800613a:	2501      	movs	r5, #1
 800613c:	426d      	negs	r5, r5
 800613e:	0028      	movs	r0, r5
 8006140:	bd70      	pop	{r4, r5, r6, pc}
 8006142:	46c0      	nop			; (mov r8, r8)
 8006144:	20001160 	.word	0x20001160

08006148 <_malloc_r>:
 8006148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800614a:	2203      	movs	r2, #3
 800614c:	1ccb      	adds	r3, r1, #3
 800614e:	4393      	bics	r3, r2
 8006150:	3308      	adds	r3, #8
 8006152:	0006      	movs	r6, r0
 8006154:	001f      	movs	r7, r3
 8006156:	2b0c      	cmp	r3, #12
 8006158:	d238      	bcs.n	80061cc <_malloc_r+0x84>
 800615a:	270c      	movs	r7, #12
 800615c:	42b9      	cmp	r1, r7
 800615e:	d837      	bhi.n	80061d0 <_malloc_r+0x88>
 8006160:	0030      	movs	r0, r6
 8006162:	f000 f873 	bl	800624c <__malloc_lock>
 8006166:	4b38      	ldr	r3, [pc, #224]	; (8006248 <_malloc_r+0x100>)
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	001c      	movs	r4, r3
 800616e:	2c00      	cmp	r4, #0
 8006170:	d133      	bne.n	80061da <_malloc_r+0x92>
 8006172:	0039      	movs	r1, r7
 8006174:	0030      	movs	r0, r6
 8006176:	f7ff ffc5 	bl	8006104 <sbrk_aligned>
 800617a:	0004      	movs	r4, r0
 800617c:	1c43      	adds	r3, r0, #1
 800617e:	d15e      	bne.n	800623e <_malloc_r+0xf6>
 8006180:	9b00      	ldr	r3, [sp, #0]
 8006182:	681c      	ldr	r4, [r3, #0]
 8006184:	0025      	movs	r5, r4
 8006186:	2d00      	cmp	r5, #0
 8006188:	d14e      	bne.n	8006228 <_malloc_r+0xe0>
 800618a:	2c00      	cmp	r4, #0
 800618c:	d051      	beq.n	8006232 <_malloc_r+0xea>
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	0029      	movs	r1, r5
 8006192:	18e3      	adds	r3, r4, r3
 8006194:	0030      	movs	r0, r6
 8006196:	9301      	str	r3, [sp, #4]
 8006198:	f000 fb5e 	bl	8006858 <_sbrk_r>
 800619c:	9b01      	ldr	r3, [sp, #4]
 800619e:	4283      	cmp	r3, r0
 80061a0:	d147      	bne.n	8006232 <_malloc_r+0xea>
 80061a2:	6823      	ldr	r3, [r4, #0]
 80061a4:	0030      	movs	r0, r6
 80061a6:	1aff      	subs	r7, r7, r3
 80061a8:	0039      	movs	r1, r7
 80061aa:	f7ff ffab 	bl	8006104 <sbrk_aligned>
 80061ae:	3001      	adds	r0, #1
 80061b0:	d03f      	beq.n	8006232 <_malloc_r+0xea>
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	19db      	adds	r3, r3, r7
 80061b6:	6023      	str	r3, [r4, #0]
 80061b8:	9b00      	ldr	r3, [sp, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d040      	beq.n	8006242 <_malloc_r+0xfa>
 80061c0:	685a      	ldr	r2, [r3, #4]
 80061c2:	42a2      	cmp	r2, r4
 80061c4:	d133      	bne.n	800622e <_malloc_r+0xe6>
 80061c6:	2200      	movs	r2, #0
 80061c8:	605a      	str	r2, [r3, #4]
 80061ca:	e014      	b.n	80061f6 <_malloc_r+0xae>
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	dac5      	bge.n	800615c <_malloc_r+0x14>
 80061d0:	230c      	movs	r3, #12
 80061d2:	2500      	movs	r5, #0
 80061d4:	6033      	str	r3, [r6, #0]
 80061d6:	0028      	movs	r0, r5
 80061d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80061da:	6821      	ldr	r1, [r4, #0]
 80061dc:	1bc9      	subs	r1, r1, r7
 80061de:	d420      	bmi.n	8006222 <_malloc_r+0xda>
 80061e0:	290b      	cmp	r1, #11
 80061e2:	d918      	bls.n	8006216 <_malloc_r+0xce>
 80061e4:	19e2      	adds	r2, r4, r7
 80061e6:	6027      	str	r7, [r4, #0]
 80061e8:	42a3      	cmp	r3, r4
 80061ea:	d112      	bne.n	8006212 <_malloc_r+0xca>
 80061ec:	9b00      	ldr	r3, [sp, #0]
 80061ee:	601a      	str	r2, [r3, #0]
 80061f0:	6863      	ldr	r3, [r4, #4]
 80061f2:	6011      	str	r1, [r2, #0]
 80061f4:	6053      	str	r3, [r2, #4]
 80061f6:	0030      	movs	r0, r6
 80061f8:	0025      	movs	r5, r4
 80061fa:	f000 f82f 	bl	800625c <__malloc_unlock>
 80061fe:	2207      	movs	r2, #7
 8006200:	350b      	adds	r5, #11
 8006202:	1d23      	adds	r3, r4, #4
 8006204:	4395      	bics	r5, r2
 8006206:	1aea      	subs	r2, r5, r3
 8006208:	429d      	cmp	r5, r3
 800620a:	d0e4      	beq.n	80061d6 <_malloc_r+0x8e>
 800620c:	1b5b      	subs	r3, r3, r5
 800620e:	50a3      	str	r3, [r4, r2]
 8006210:	e7e1      	b.n	80061d6 <_malloc_r+0x8e>
 8006212:	605a      	str	r2, [r3, #4]
 8006214:	e7ec      	b.n	80061f0 <_malloc_r+0xa8>
 8006216:	6862      	ldr	r2, [r4, #4]
 8006218:	42a3      	cmp	r3, r4
 800621a:	d1d5      	bne.n	80061c8 <_malloc_r+0x80>
 800621c:	9b00      	ldr	r3, [sp, #0]
 800621e:	601a      	str	r2, [r3, #0]
 8006220:	e7e9      	b.n	80061f6 <_malloc_r+0xae>
 8006222:	0023      	movs	r3, r4
 8006224:	6864      	ldr	r4, [r4, #4]
 8006226:	e7a2      	b.n	800616e <_malloc_r+0x26>
 8006228:	002c      	movs	r4, r5
 800622a:	686d      	ldr	r5, [r5, #4]
 800622c:	e7ab      	b.n	8006186 <_malloc_r+0x3e>
 800622e:	0013      	movs	r3, r2
 8006230:	e7c4      	b.n	80061bc <_malloc_r+0x74>
 8006232:	230c      	movs	r3, #12
 8006234:	0030      	movs	r0, r6
 8006236:	6033      	str	r3, [r6, #0]
 8006238:	f000 f810 	bl	800625c <__malloc_unlock>
 800623c:	e7cb      	b.n	80061d6 <_malloc_r+0x8e>
 800623e:	6027      	str	r7, [r4, #0]
 8006240:	e7d9      	b.n	80061f6 <_malloc_r+0xae>
 8006242:	605b      	str	r3, [r3, #4]
 8006244:	deff      	udf	#255	; 0xff
 8006246:	46c0      	nop			; (mov r8, r8)
 8006248:	2000115c 	.word	0x2000115c

0800624c <__malloc_lock>:
 800624c:	b510      	push	{r4, lr}
 800624e:	4802      	ldr	r0, [pc, #8]	; (8006258 <__malloc_lock+0xc>)
 8006250:	f7ff ff02 	bl	8006058 <__retarget_lock_acquire_recursive>
 8006254:	bd10      	pop	{r4, pc}
 8006256:	46c0      	nop			; (mov r8, r8)
 8006258:	20001158 	.word	0x20001158

0800625c <__malloc_unlock>:
 800625c:	b510      	push	{r4, lr}
 800625e:	4802      	ldr	r0, [pc, #8]	; (8006268 <__malloc_unlock+0xc>)
 8006260:	f7ff fefb 	bl	800605a <__retarget_lock_release_recursive>
 8006264:	bd10      	pop	{r4, pc}
 8006266:	46c0      	nop			; (mov r8, r8)
 8006268:	20001158 	.word	0x20001158

0800626c <__ssputs_r>:
 800626c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800626e:	b085      	sub	sp, #20
 8006270:	9301      	str	r3, [sp, #4]
 8006272:	9203      	str	r2, [sp, #12]
 8006274:	688e      	ldr	r6, [r1, #8]
 8006276:	9a01      	ldr	r2, [sp, #4]
 8006278:	0007      	movs	r7, r0
 800627a:	000c      	movs	r4, r1
 800627c:	680b      	ldr	r3, [r1, #0]
 800627e:	4296      	cmp	r6, r2
 8006280:	d831      	bhi.n	80062e6 <__ssputs_r+0x7a>
 8006282:	898a      	ldrh	r2, [r1, #12]
 8006284:	2190      	movs	r1, #144	; 0x90
 8006286:	00c9      	lsls	r1, r1, #3
 8006288:	420a      	tst	r2, r1
 800628a:	d029      	beq.n	80062e0 <__ssputs_r+0x74>
 800628c:	2003      	movs	r0, #3
 800628e:	6921      	ldr	r1, [r4, #16]
 8006290:	1a5b      	subs	r3, r3, r1
 8006292:	9302      	str	r3, [sp, #8]
 8006294:	6963      	ldr	r3, [r4, #20]
 8006296:	4343      	muls	r3, r0
 8006298:	0fdd      	lsrs	r5, r3, #31
 800629a:	18ed      	adds	r5, r5, r3
 800629c:	9b01      	ldr	r3, [sp, #4]
 800629e:	9802      	ldr	r0, [sp, #8]
 80062a0:	3301      	adds	r3, #1
 80062a2:	181b      	adds	r3, r3, r0
 80062a4:	106d      	asrs	r5, r5, #1
 80062a6:	42ab      	cmp	r3, r5
 80062a8:	d900      	bls.n	80062ac <__ssputs_r+0x40>
 80062aa:	001d      	movs	r5, r3
 80062ac:	0552      	lsls	r2, r2, #21
 80062ae:	d529      	bpl.n	8006304 <__ssputs_r+0x98>
 80062b0:	0029      	movs	r1, r5
 80062b2:	0038      	movs	r0, r7
 80062b4:	f7ff ff48 	bl	8006148 <_malloc_r>
 80062b8:	1e06      	subs	r6, r0, #0
 80062ba:	d02d      	beq.n	8006318 <__ssputs_r+0xac>
 80062bc:	9a02      	ldr	r2, [sp, #8]
 80062be:	6921      	ldr	r1, [r4, #16]
 80062c0:	f7ff fecc 	bl	800605c <memcpy>
 80062c4:	89a2      	ldrh	r2, [r4, #12]
 80062c6:	4b19      	ldr	r3, [pc, #100]	; (800632c <__ssputs_r+0xc0>)
 80062c8:	401a      	ands	r2, r3
 80062ca:	2380      	movs	r3, #128	; 0x80
 80062cc:	4313      	orrs	r3, r2
 80062ce:	81a3      	strh	r3, [r4, #12]
 80062d0:	9b02      	ldr	r3, [sp, #8]
 80062d2:	6126      	str	r6, [r4, #16]
 80062d4:	18f6      	adds	r6, r6, r3
 80062d6:	6026      	str	r6, [r4, #0]
 80062d8:	6165      	str	r5, [r4, #20]
 80062da:	9e01      	ldr	r6, [sp, #4]
 80062dc:	1aed      	subs	r5, r5, r3
 80062de:	60a5      	str	r5, [r4, #8]
 80062e0:	9b01      	ldr	r3, [sp, #4]
 80062e2:	429e      	cmp	r6, r3
 80062e4:	d900      	bls.n	80062e8 <__ssputs_r+0x7c>
 80062e6:	9e01      	ldr	r6, [sp, #4]
 80062e8:	0032      	movs	r2, r6
 80062ea:	9903      	ldr	r1, [sp, #12]
 80062ec:	6820      	ldr	r0, [r4, #0]
 80062ee:	f000 fa9f 	bl	8006830 <memmove>
 80062f2:	2000      	movs	r0, #0
 80062f4:	68a3      	ldr	r3, [r4, #8]
 80062f6:	1b9b      	subs	r3, r3, r6
 80062f8:	60a3      	str	r3, [r4, #8]
 80062fa:	6823      	ldr	r3, [r4, #0]
 80062fc:	199b      	adds	r3, r3, r6
 80062fe:	6023      	str	r3, [r4, #0]
 8006300:	b005      	add	sp, #20
 8006302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006304:	002a      	movs	r2, r5
 8006306:	0038      	movs	r0, r7
 8006308:	f000 fac3 	bl	8006892 <_realloc_r>
 800630c:	1e06      	subs	r6, r0, #0
 800630e:	d1df      	bne.n	80062d0 <__ssputs_r+0x64>
 8006310:	0038      	movs	r0, r7
 8006312:	6921      	ldr	r1, [r4, #16]
 8006314:	f7ff feac 	bl	8006070 <_free_r>
 8006318:	230c      	movs	r3, #12
 800631a:	2001      	movs	r0, #1
 800631c:	603b      	str	r3, [r7, #0]
 800631e:	89a2      	ldrh	r2, [r4, #12]
 8006320:	3334      	adds	r3, #52	; 0x34
 8006322:	4313      	orrs	r3, r2
 8006324:	81a3      	strh	r3, [r4, #12]
 8006326:	4240      	negs	r0, r0
 8006328:	e7ea      	b.n	8006300 <__ssputs_r+0x94>
 800632a:	46c0      	nop			; (mov r8, r8)
 800632c:	fffffb7f 	.word	0xfffffb7f

08006330 <_svfiprintf_r>:
 8006330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006332:	b0a1      	sub	sp, #132	; 0x84
 8006334:	9003      	str	r0, [sp, #12]
 8006336:	001d      	movs	r5, r3
 8006338:	898b      	ldrh	r3, [r1, #12]
 800633a:	000f      	movs	r7, r1
 800633c:	0016      	movs	r6, r2
 800633e:	061b      	lsls	r3, r3, #24
 8006340:	d511      	bpl.n	8006366 <_svfiprintf_r+0x36>
 8006342:	690b      	ldr	r3, [r1, #16]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10e      	bne.n	8006366 <_svfiprintf_r+0x36>
 8006348:	2140      	movs	r1, #64	; 0x40
 800634a:	f7ff fefd 	bl	8006148 <_malloc_r>
 800634e:	6038      	str	r0, [r7, #0]
 8006350:	6138      	str	r0, [r7, #16]
 8006352:	2800      	cmp	r0, #0
 8006354:	d105      	bne.n	8006362 <_svfiprintf_r+0x32>
 8006356:	230c      	movs	r3, #12
 8006358:	9a03      	ldr	r2, [sp, #12]
 800635a:	3801      	subs	r0, #1
 800635c:	6013      	str	r3, [r2, #0]
 800635e:	b021      	add	sp, #132	; 0x84
 8006360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006362:	2340      	movs	r3, #64	; 0x40
 8006364:	617b      	str	r3, [r7, #20]
 8006366:	2300      	movs	r3, #0
 8006368:	ac08      	add	r4, sp, #32
 800636a:	6163      	str	r3, [r4, #20]
 800636c:	3320      	adds	r3, #32
 800636e:	7663      	strb	r3, [r4, #25]
 8006370:	3310      	adds	r3, #16
 8006372:	76a3      	strb	r3, [r4, #26]
 8006374:	9507      	str	r5, [sp, #28]
 8006376:	0035      	movs	r5, r6
 8006378:	782b      	ldrb	r3, [r5, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <_svfiprintf_r+0x52>
 800637e:	2b25      	cmp	r3, #37	; 0x25
 8006380:	d148      	bne.n	8006414 <_svfiprintf_r+0xe4>
 8006382:	1bab      	subs	r3, r5, r6
 8006384:	9305      	str	r3, [sp, #20]
 8006386:	42b5      	cmp	r5, r6
 8006388:	d00b      	beq.n	80063a2 <_svfiprintf_r+0x72>
 800638a:	0032      	movs	r2, r6
 800638c:	0039      	movs	r1, r7
 800638e:	9803      	ldr	r0, [sp, #12]
 8006390:	f7ff ff6c 	bl	800626c <__ssputs_r>
 8006394:	3001      	adds	r0, #1
 8006396:	d100      	bne.n	800639a <_svfiprintf_r+0x6a>
 8006398:	e0af      	b.n	80064fa <_svfiprintf_r+0x1ca>
 800639a:	6963      	ldr	r3, [r4, #20]
 800639c:	9a05      	ldr	r2, [sp, #20]
 800639e:	189b      	adds	r3, r3, r2
 80063a0:	6163      	str	r3, [r4, #20]
 80063a2:	782b      	ldrb	r3, [r5, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d100      	bne.n	80063aa <_svfiprintf_r+0x7a>
 80063a8:	e0a7      	b.n	80064fa <_svfiprintf_r+0x1ca>
 80063aa:	2201      	movs	r2, #1
 80063ac:	2300      	movs	r3, #0
 80063ae:	4252      	negs	r2, r2
 80063b0:	6062      	str	r2, [r4, #4]
 80063b2:	a904      	add	r1, sp, #16
 80063b4:	3254      	adds	r2, #84	; 0x54
 80063b6:	1852      	adds	r2, r2, r1
 80063b8:	1c6e      	adds	r6, r5, #1
 80063ba:	6023      	str	r3, [r4, #0]
 80063bc:	60e3      	str	r3, [r4, #12]
 80063be:	60a3      	str	r3, [r4, #8]
 80063c0:	7013      	strb	r3, [r2, #0]
 80063c2:	65a3      	str	r3, [r4, #88]	; 0x58
 80063c4:	4b55      	ldr	r3, [pc, #340]	; (800651c <_svfiprintf_r+0x1ec>)
 80063c6:	2205      	movs	r2, #5
 80063c8:	0018      	movs	r0, r3
 80063ca:	7831      	ldrb	r1, [r6, #0]
 80063cc:	9305      	str	r3, [sp, #20]
 80063ce:	f000 fa55 	bl	800687c <memchr>
 80063d2:	1c75      	adds	r5, r6, #1
 80063d4:	2800      	cmp	r0, #0
 80063d6:	d11f      	bne.n	8006418 <_svfiprintf_r+0xe8>
 80063d8:	6822      	ldr	r2, [r4, #0]
 80063da:	06d3      	lsls	r3, r2, #27
 80063dc:	d504      	bpl.n	80063e8 <_svfiprintf_r+0xb8>
 80063de:	2353      	movs	r3, #83	; 0x53
 80063e0:	a904      	add	r1, sp, #16
 80063e2:	185b      	adds	r3, r3, r1
 80063e4:	2120      	movs	r1, #32
 80063e6:	7019      	strb	r1, [r3, #0]
 80063e8:	0713      	lsls	r3, r2, #28
 80063ea:	d504      	bpl.n	80063f6 <_svfiprintf_r+0xc6>
 80063ec:	2353      	movs	r3, #83	; 0x53
 80063ee:	a904      	add	r1, sp, #16
 80063f0:	185b      	adds	r3, r3, r1
 80063f2:	212b      	movs	r1, #43	; 0x2b
 80063f4:	7019      	strb	r1, [r3, #0]
 80063f6:	7833      	ldrb	r3, [r6, #0]
 80063f8:	2b2a      	cmp	r3, #42	; 0x2a
 80063fa:	d016      	beq.n	800642a <_svfiprintf_r+0xfa>
 80063fc:	0035      	movs	r5, r6
 80063fe:	2100      	movs	r1, #0
 8006400:	200a      	movs	r0, #10
 8006402:	68e3      	ldr	r3, [r4, #12]
 8006404:	782a      	ldrb	r2, [r5, #0]
 8006406:	1c6e      	adds	r6, r5, #1
 8006408:	3a30      	subs	r2, #48	; 0x30
 800640a:	2a09      	cmp	r2, #9
 800640c:	d94e      	bls.n	80064ac <_svfiprintf_r+0x17c>
 800640e:	2900      	cmp	r1, #0
 8006410:	d111      	bne.n	8006436 <_svfiprintf_r+0x106>
 8006412:	e017      	b.n	8006444 <_svfiprintf_r+0x114>
 8006414:	3501      	adds	r5, #1
 8006416:	e7af      	b.n	8006378 <_svfiprintf_r+0x48>
 8006418:	9b05      	ldr	r3, [sp, #20]
 800641a:	6822      	ldr	r2, [r4, #0]
 800641c:	1ac0      	subs	r0, r0, r3
 800641e:	2301      	movs	r3, #1
 8006420:	4083      	lsls	r3, r0
 8006422:	4313      	orrs	r3, r2
 8006424:	002e      	movs	r6, r5
 8006426:	6023      	str	r3, [r4, #0]
 8006428:	e7cc      	b.n	80063c4 <_svfiprintf_r+0x94>
 800642a:	9b07      	ldr	r3, [sp, #28]
 800642c:	1d19      	adds	r1, r3, #4
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	9107      	str	r1, [sp, #28]
 8006432:	2b00      	cmp	r3, #0
 8006434:	db01      	blt.n	800643a <_svfiprintf_r+0x10a>
 8006436:	930b      	str	r3, [sp, #44]	; 0x2c
 8006438:	e004      	b.n	8006444 <_svfiprintf_r+0x114>
 800643a:	425b      	negs	r3, r3
 800643c:	60e3      	str	r3, [r4, #12]
 800643e:	2302      	movs	r3, #2
 8006440:	4313      	orrs	r3, r2
 8006442:	6023      	str	r3, [r4, #0]
 8006444:	782b      	ldrb	r3, [r5, #0]
 8006446:	2b2e      	cmp	r3, #46	; 0x2e
 8006448:	d10a      	bne.n	8006460 <_svfiprintf_r+0x130>
 800644a:	786b      	ldrb	r3, [r5, #1]
 800644c:	2b2a      	cmp	r3, #42	; 0x2a
 800644e:	d135      	bne.n	80064bc <_svfiprintf_r+0x18c>
 8006450:	9b07      	ldr	r3, [sp, #28]
 8006452:	3502      	adds	r5, #2
 8006454:	1d1a      	adds	r2, r3, #4
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	9207      	str	r2, [sp, #28]
 800645a:	2b00      	cmp	r3, #0
 800645c:	db2b      	blt.n	80064b6 <_svfiprintf_r+0x186>
 800645e:	9309      	str	r3, [sp, #36]	; 0x24
 8006460:	4e2f      	ldr	r6, [pc, #188]	; (8006520 <_svfiprintf_r+0x1f0>)
 8006462:	2203      	movs	r2, #3
 8006464:	0030      	movs	r0, r6
 8006466:	7829      	ldrb	r1, [r5, #0]
 8006468:	f000 fa08 	bl	800687c <memchr>
 800646c:	2800      	cmp	r0, #0
 800646e:	d006      	beq.n	800647e <_svfiprintf_r+0x14e>
 8006470:	2340      	movs	r3, #64	; 0x40
 8006472:	1b80      	subs	r0, r0, r6
 8006474:	4083      	lsls	r3, r0
 8006476:	6822      	ldr	r2, [r4, #0]
 8006478:	3501      	adds	r5, #1
 800647a:	4313      	orrs	r3, r2
 800647c:	6023      	str	r3, [r4, #0]
 800647e:	7829      	ldrb	r1, [r5, #0]
 8006480:	2206      	movs	r2, #6
 8006482:	4828      	ldr	r0, [pc, #160]	; (8006524 <_svfiprintf_r+0x1f4>)
 8006484:	1c6e      	adds	r6, r5, #1
 8006486:	7621      	strb	r1, [r4, #24]
 8006488:	f000 f9f8 	bl	800687c <memchr>
 800648c:	2800      	cmp	r0, #0
 800648e:	d03c      	beq.n	800650a <_svfiprintf_r+0x1da>
 8006490:	4b25      	ldr	r3, [pc, #148]	; (8006528 <_svfiprintf_r+0x1f8>)
 8006492:	2b00      	cmp	r3, #0
 8006494:	d125      	bne.n	80064e2 <_svfiprintf_r+0x1b2>
 8006496:	2207      	movs	r2, #7
 8006498:	9b07      	ldr	r3, [sp, #28]
 800649a:	3307      	adds	r3, #7
 800649c:	4393      	bics	r3, r2
 800649e:	3308      	adds	r3, #8
 80064a0:	9307      	str	r3, [sp, #28]
 80064a2:	6963      	ldr	r3, [r4, #20]
 80064a4:	9a04      	ldr	r2, [sp, #16]
 80064a6:	189b      	adds	r3, r3, r2
 80064a8:	6163      	str	r3, [r4, #20]
 80064aa:	e764      	b.n	8006376 <_svfiprintf_r+0x46>
 80064ac:	4343      	muls	r3, r0
 80064ae:	0035      	movs	r5, r6
 80064b0:	2101      	movs	r1, #1
 80064b2:	189b      	adds	r3, r3, r2
 80064b4:	e7a6      	b.n	8006404 <_svfiprintf_r+0xd4>
 80064b6:	2301      	movs	r3, #1
 80064b8:	425b      	negs	r3, r3
 80064ba:	e7d0      	b.n	800645e <_svfiprintf_r+0x12e>
 80064bc:	2300      	movs	r3, #0
 80064be:	200a      	movs	r0, #10
 80064c0:	001a      	movs	r2, r3
 80064c2:	3501      	adds	r5, #1
 80064c4:	6063      	str	r3, [r4, #4]
 80064c6:	7829      	ldrb	r1, [r5, #0]
 80064c8:	1c6e      	adds	r6, r5, #1
 80064ca:	3930      	subs	r1, #48	; 0x30
 80064cc:	2909      	cmp	r1, #9
 80064ce:	d903      	bls.n	80064d8 <_svfiprintf_r+0x1a8>
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d0c5      	beq.n	8006460 <_svfiprintf_r+0x130>
 80064d4:	9209      	str	r2, [sp, #36]	; 0x24
 80064d6:	e7c3      	b.n	8006460 <_svfiprintf_r+0x130>
 80064d8:	4342      	muls	r2, r0
 80064da:	0035      	movs	r5, r6
 80064dc:	2301      	movs	r3, #1
 80064de:	1852      	adds	r2, r2, r1
 80064e0:	e7f1      	b.n	80064c6 <_svfiprintf_r+0x196>
 80064e2:	aa07      	add	r2, sp, #28
 80064e4:	9200      	str	r2, [sp, #0]
 80064e6:	0021      	movs	r1, r4
 80064e8:	003a      	movs	r2, r7
 80064ea:	4b10      	ldr	r3, [pc, #64]	; (800652c <_svfiprintf_r+0x1fc>)
 80064ec:	9803      	ldr	r0, [sp, #12]
 80064ee:	e000      	b.n	80064f2 <_svfiprintf_r+0x1c2>
 80064f0:	bf00      	nop
 80064f2:	9004      	str	r0, [sp, #16]
 80064f4:	9b04      	ldr	r3, [sp, #16]
 80064f6:	3301      	adds	r3, #1
 80064f8:	d1d3      	bne.n	80064a2 <_svfiprintf_r+0x172>
 80064fa:	89bb      	ldrh	r3, [r7, #12]
 80064fc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80064fe:	065b      	lsls	r3, r3, #25
 8006500:	d400      	bmi.n	8006504 <_svfiprintf_r+0x1d4>
 8006502:	e72c      	b.n	800635e <_svfiprintf_r+0x2e>
 8006504:	2001      	movs	r0, #1
 8006506:	4240      	negs	r0, r0
 8006508:	e729      	b.n	800635e <_svfiprintf_r+0x2e>
 800650a:	aa07      	add	r2, sp, #28
 800650c:	9200      	str	r2, [sp, #0]
 800650e:	0021      	movs	r1, r4
 8006510:	003a      	movs	r2, r7
 8006512:	4b06      	ldr	r3, [pc, #24]	; (800652c <_svfiprintf_r+0x1fc>)
 8006514:	9803      	ldr	r0, [sp, #12]
 8006516:	f000 f87b 	bl	8006610 <_printf_i>
 800651a:	e7ea      	b.n	80064f2 <_svfiprintf_r+0x1c2>
 800651c:	08006f94 	.word	0x08006f94
 8006520:	08006f9a 	.word	0x08006f9a
 8006524:	08006f9e 	.word	0x08006f9e
 8006528:	00000000 	.word	0x00000000
 800652c:	0800626d 	.word	0x0800626d

08006530 <_printf_common>:
 8006530:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006532:	0016      	movs	r6, r2
 8006534:	9301      	str	r3, [sp, #4]
 8006536:	688a      	ldr	r2, [r1, #8]
 8006538:	690b      	ldr	r3, [r1, #16]
 800653a:	000c      	movs	r4, r1
 800653c:	9000      	str	r0, [sp, #0]
 800653e:	4293      	cmp	r3, r2
 8006540:	da00      	bge.n	8006544 <_printf_common+0x14>
 8006542:	0013      	movs	r3, r2
 8006544:	0022      	movs	r2, r4
 8006546:	6033      	str	r3, [r6, #0]
 8006548:	3243      	adds	r2, #67	; 0x43
 800654a:	7812      	ldrb	r2, [r2, #0]
 800654c:	2a00      	cmp	r2, #0
 800654e:	d001      	beq.n	8006554 <_printf_common+0x24>
 8006550:	3301      	adds	r3, #1
 8006552:	6033      	str	r3, [r6, #0]
 8006554:	6823      	ldr	r3, [r4, #0]
 8006556:	069b      	lsls	r3, r3, #26
 8006558:	d502      	bpl.n	8006560 <_printf_common+0x30>
 800655a:	6833      	ldr	r3, [r6, #0]
 800655c:	3302      	adds	r3, #2
 800655e:	6033      	str	r3, [r6, #0]
 8006560:	6822      	ldr	r2, [r4, #0]
 8006562:	2306      	movs	r3, #6
 8006564:	0015      	movs	r5, r2
 8006566:	401d      	ands	r5, r3
 8006568:	421a      	tst	r2, r3
 800656a:	d027      	beq.n	80065bc <_printf_common+0x8c>
 800656c:	0023      	movs	r3, r4
 800656e:	3343      	adds	r3, #67	; 0x43
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	1e5a      	subs	r2, r3, #1
 8006574:	4193      	sbcs	r3, r2
 8006576:	6822      	ldr	r2, [r4, #0]
 8006578:	0692      	lsls	r2, r2, #26
 800657a:	d430      	bmi.n	80065de <_printf_common+0xae>
 800657c:	0022      	movs	r2, r4
 800657e:	9901      	ldr	r1, [sp, #4]
 8006580:	9800      	ldr	r0, [sp, #0]
 8006582:	9d08      	ldr	r5, [sp, #32]
 8006584:	3243      	adds	r2, #67	; 0x43
 8006586:	47a8      	blx	r5
 8006588:	3001      	adds	r0, #1
 800658a:	d025      	beq.n	80065d8 <_printf_common+0xa8>
 800658c:	2206      	movs	r2, #6
 800658e:	6823      	ldr	r3, [r4, #0]
 8006590:	2500      	movs	r5, #0
 8006592:	4013      	ands	r3, r2
 8006594:	2b04      	cmp	r3, #4
 8006596:	d105      	bne.n	80065a4 <_printf_common+0x74>
 8006598:	6833      	ldr	r3, [r6, #0]
 800659a:	68e5      	ldr	r5, [r4, #12]
 800659c:	1aed      	subs	r5, r5, r3
 800659e:	43eb      	mvns	r3, r5
 80065a0:	17db      	asrs	r3, r3, #31
 80065a2:	401d      	ands	r5, r3
 80065a4:	68a3      	ldr	r3, [r4, #8]
 80065a6:	6922      	ldr	r2, [r4, #16]
 80065a8:	4293      	cmp	r3, r2
 80065aa:	dd01      	ble.n	80065b0 <_printf_common+0x80>
 80065ac:	1a9b      	subs	r3, r3, r2
 80065ae:	18ed      	adds	r5, r5, r3
 80065b0:	2600      	movs	r6, #0
 80065b2:	42b5      	cmp	r5, r6
 80065b4:	d120      	bne.n	80065f8 <_printf_common+0xc8>
 80065b6:	2000      	movs	r0, #0
 80065b8:	e010      	b.n	80065dc <_printf_common+0xac>
 80065ba:	3501      	adds	r5, #1
 80065bc:	68e3      	ldr	r3, [r4, #12]
 80065be:	6832      	ldr	r2, [r6, #0]
 80065c0:	1a9b      	subs	r3, r3, r2
 80065c2:	42ab      	cmp	r3, r5
 80065c4:	ddd2      	ble.n	800656c <_printf_common+0x3c>
 80065c6:	0022      	movs	r2, r4
 80065c8:	2301      	movs	r3, #1
 80065ca:	9901      	ldr	r1, [sp, #4]
 80065cc:	9800      	ldr	r0, [sp, #0]
 80065ce:	9f08      	ldr	r7, [sp, #32]
 80065d0:	3219      	adds	r2, #25
 80065d2:	47b8      	blx	r7
 80065d4:	3001      	adds	r0, #1
 80065d6:	d1f0      	bne.n	80065ba <_printf_common+0x8a>
 80065d8:	2001      	movs	r0, #1
 80065da:	4240      	negs	r0, r0
 80065dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80065de:	2030      	movs	r0, #48	; 0x30
 80065e0:	18e1      	adds	r1, r4, r3
 80065e2:	3143      	adds	r1, #67	; 0x43
 80065e4:	7008      	strb	r0, [r1, #0]
 80065e6:	0021      	movs	r1, r4
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	3145      	adds	r1, #69	; 0x45
 80065ec:	7809      	ldrb	r1, [r1, #0]
 80065ee:	18a2      	adds	r2, r4, r2
 80065f0:	3243      	adds	r2, #67	; 0x43
 80065f2:	3302      	adds	r3, #2
 80065f4:	7011      	strb	r1, [r2, #0]
 80065f6:	e7c1      	b.n	800657c <_printf_common+0x4c>
 80065f8:	0022      	movs	r2, r4
 80065fa:	2301      	movs	r3, #1
 80065fc:	9901      	ldr	r1, [sp, #4]
 80065fe:	9800      	ldr	r0, [sp, #0]
 8006600:	9f08      	ldr	r7, [sp, #32]
 8006602:	321a      	adds	r2, #26
 8006604:	47b8      	blx	r7
 8006606:	3001      	adds	r0, #1
 8006608:	d0e6      	beq.n	80065d8 <_printf_common+0xa8>
 800660a:	3601      	adds	r6, #1
 800660c:	e7d1      	b.n	80065b2 <_printf_common+0x82>
	...

08006610 <_printf_i>:
 8006610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006612:	b08b      	sub	sp, #44	; 0x2c
 8006614:	9206      	str	r2, [sp, #24]
 8006616:	000a      	movs	r2, r1
 8006618:	3243      	adds	r2, #67	; 0x43
 800661a:	9307      	str	r3, [sp, #28]
 800661c:	9005      	str	r0, [sp, #20]
 800661e:	9204      	str	r2, [sp, #16]
 8006620:	7e0a      	ldrb	r2, [r1, #24]
 8006622:	000c      	movs	r4, r1
 8006624:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006626:	2a78      	cmp	r2, #120	; 0x78
 8006628:	d809      	bhi.n	800663e <_printf_i+0x2e>
 800662a:	2a62      	cmp	r2, #98	; 0x62
 800662c:	d80b      	bhi.n	8006646 <_printf_i+0x36>
 800662e:	2a00      	cmp	r2, #0
 8006630:	d100      	bne.n	8006634 <_printf_i+0x24>
 8006632:	e0be      	b.n	80067b2 <_printf_i+0x1a2>
 8006634:	497c      	ldr	r1, [pc, #496]	; (8006828 <_printf_i+0x218>)
 8006636:	9103      	str	r1, [sp, #12]
 8006638:	2a58      	cmp	r2, #88	; 0x58
 800663a:	d100      	bne.n	800663e <_printf_i+0x2e>
 800663c:	e093      	b.n	8006766 <_printf_i+0x156>
 800663e:	0026      	movs	r6, r4
 8006640:	3642      	adds	r6, #66	; 0x42
 8006642:	7032      	strb	r2, [r6, #0]
 8006644:	e022      	b.n	800668c <_printf_i+0x7c>
 8006646:	0010      	movs	r0, r2
 8006648:	3863      	subs	r0, #99	; 0x63
 800664a:	2815      	cmp	r0, #21
 800664c:	d8f7      	bhi.n	800663e <_printf_i+0x2e>
 800664e:	f7f9 fd5b 	bl	8000108 <__gnu_thumb1_case_shi>
 8006652:	0016      	.short	0x0016
 8006654:	fff6001f 	.word	0xfff6001f
 8006658:	fff6fff6 	.word	0xfff6fff6
 800665c:	001ffff6 	.word	0x001ffff6
 8006660:	fff6fff6 	.word	0xfff6fff6
 8006664:	fff6fff6 	.word	0xfff6fff6
 8006668:	003600a3 	.word	0x003600a3
 800666c:	fff60083 	.word	0xfff60083
 8006670:	00b4fff6 	.word	0x00b4fff6
 8006674:	0036fff6 	.word	0x0036fff6
 8006678:	fff6fff6 	.word	0xfff6fff6
 800667c:	0087      	.short	0x0087
 800667e:	0026      	movs	r6, r4
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	3642      	adds	r6, #66	; 0x42
 8006684:	1d11      	adds	r1, r2, #4
 8006686:	6019      	str	r1, [r3, #0]
 8006688:	6813      	ldr	r3, [r2, #0]
 800668a:	7033      	strb	r3, [r6, #0]
 800668c:	2301      	movs	r3, #1
 800668e:	e0a2      	b.n	80067d6 <_printf_i+0x1c6>
 8006690:	6818      	ldr	r0, [r3, #0]
 8006692:	6809      	ldr	r1, [r1, #0]
 8006694:	1d02      	adds	r2, r0, #4
 8006696:	060d      	lsls	r5, r1, #24
 8006698:	d50b      	bpl.n	80066b2 <_printf_i+0xa2>
 800669a:	6805      	ldr	r5, [r0, #0]
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	2d00      	cmp	r5, #0
 80066a0:	da03      	bge.n	80066aa <_printf_i+0x9a>
 80066a2:	232d      	movs	r3, #45	; 0x2d
 80066a4:	9a04      	ldr	r2, [sp, #16]
 80066a6:	426d      	negs	r5, r5
 80066a8:	7013      	strb	r3, [r2, #0]
 80066aa:	4b5f      	ldr	r3, [pc, #380]	; (8006828 <_printf_i+0x218>)
 80066ac:	270a      	movs	r7, #10
 80066ae:	9303      	str	r3, [sp, #12]
 80066b0:	e01b      	b.n	80066ea <_printf_i+0xda>
 80066b2:	6805      	ldr	r5, [r0, #0]
 80066b4:	601a      	str	r2, [r3, #0]
 80066b6:	0649      	lsls	r1, r1, #25
 80066b8:	d5f1      	bpl.n	800669e <_printf_i+0x8e>
 80066ba:	b22d      	sxth	r5, r5
 80066bc:	e7ef      	b.n	800669e <_printf_i+0x8e>
 80066be:	680d      	ldr	r5, [r1, #0]
 80066c0:	6819      	ldr	r1, [r3, #0]
 80066c2:	1d08      	adds	r0, r1, #4
 80066c4:	6018      	str	r0, [r3, #0]
 80066c6:	062e      	lsls	r6, r5, #24
 80066c8:	d501      	bpl.n	80066ce <_printf_i+0xbe>
 80066ca:	680d      	ldr	r5, [r1, #0]
 80066cc:	e003      	b.n	80066d6 <_printf_i+0xc6>
 80066ce:	066d      	lsls	r5, r5, #25
 80066d0:	d5fb      	bpl.n	80066ca <_printf_i+0xba>
 80066d2:	680d      	ldr	r5, [r1, #0]
 80066d4:	b2ad      	uxth	r5, r5
 80066d6:	4b54      	ldr	r3, [pc, #336]	; (8006828 <_printf_i+0x218>)
 80066d8:	2708      	movs	r7, #8
 80066da:	9303      	str	r3, [sp, #12]
 80066dc:	2a6f      	cmp	r2, #111	; 0x6f
 80066de:	d000      	beq.n	80066e2 <_printf_i+0xd2>
 80066e0:	3702      	adds	r7, #2
 80066e2:	0023      	movs	r3, r4
 80066e4:	2200      	movs	r2, #0
 80066e6:	3343      	adds	r3, #67	; 0x43
 80066e8:	701a      	strb	r2, [r3, #0]
 80066ea:	6863      	ldr	r3, [r4, #4]
 80066ec:	60a3      	str	r3, [r4, #8]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	db03      	blt.n	80066fa <_printf_i+0xea>
 80066f2:	2104      	movs	r1, #4
 80066f4:	6822      	ldr	r2, [r4, #0]
 80066f6:	438a      	bics	r2, r1
 80066f8:	6022      	str	r2, [r4, #0]
 80066fa:	2d00      	cmp	r5, #0
 80066fc:	d102      	bne.n	8006704 <_printf_i+0xf4>
 80066fe:	9e04      	ldr	r6, [sp, #16]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00c      	beq.n	800671e <_printf_i+0x10e>
 8006704:	9e04      	ldr	r6, [sp, #16]
 8006706:	0028      	movs	r0, r5
 8006708:	0039      	movs	r1, r7
 800670a:	f7f9 fd8d 	bl	8000228 <__aeabi_uidivmod>
 800670e:	9b03      	ldr	r3, [sp, #12]
 8006710:	3e01      	subs	r6, #1
 8006712:	5c5b      	ldrb	r3, [r3, r1]
 8006714:	7033      	strb	r3, [r6, #0]
 8006716:	002b      	movs	r3, r5
 8006718:	0005      	movs	r5, r0
 800671a:	429f      	cmp	r7, r3
 800671c:	d9f3      	bls.n	8006706 <_printf_i+0xf6>
 800671e:	2f08      	cmp	r7, #8
 8006720:	d109      	bne.n	8006736 <_printf_i+0x126>
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	07db      	lsls	r3, r3, #31
 8006726:	d506      	bpl.n	8006736 <_printf_i+0x126>
 8006728:	6862      	ldr	r2, [r4, #4]
 800672a:	6923      	ldr	r3, [r4, #16]
 800672c:	429a      	cmp	r2, r3
 800672e:	dc02      	bgt.n	8006736 <_printf_i+0x126>
 8006730:	2330      	movs	r3, #48	; 0x30
 8006732:	3e01      	subs	r6, #1
 8006734:	7033      	strb	r3, [r6, #0]
 8006736:	9b04      	ldr	r3, [sp, #16]
 8006738:	1b9b      	subs	r3, r3, r6
 800673a:	6123      	str	r3, [r4, #16]
 800673c:	9b07      	ldr	r3, [sp, #28]
 800673e:	0021      	movs	r1, r4
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	9805      	ldr	r0, [sp, #20]
 8006744:	9b06      	ldr	r3, [sp, #24]
 8006746:	aa09      	add	r2, sp, #36	; 0x24
 8006748:	f7ff fef2 	bl	8006530 <_printf_common>
 800674c:	3001      	adds	r0, #1
 800674e:	d147      	bne.n	80067e0 <_printf_i+0x1d0>
 8006750:	2001      	movs	r0, #1
 8006752:	4240      	negs	r0, r0
 8006754:	b00b      	add	sp, #44	; 0x2c
 8006756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006758:	2220      	movs	r2, #32
 800675a:	6809      	ldr	r1, [r1, #0]
 800675c:	430a      	orrs	r2, r1
 800675e:	6022      	str	r2, [r4, #0]
 8006760:	2278      	movs	r2, #120	; 0x78
 8006762:	4932      	ldr	r1, [pc, #200]	; (800682c <_printf_i+0x21c>)
 8006764:	9103      	str	r1, [sp, #12]
 8006766:	0021      	movs	r1, r4
 8006768:	3145      	adds	r1, #69	; 0x45
 800676a:	700a      	strb	r2, [r1, #0]
 800676c:	6819      	ldr	r1, [r3, #0]
 800676e:	6822      	ldr	r2, [r4, #0]
 8006770:	c920      	ldmia	r1!, {r5}
 8006772:	0610      	lsls	r0, r2, #24
 8006774:	d402      	bmi.n	800677c <_printf_i+0x16c>
 8006776:	0650      	lsls	r0, r2, #25
 8006778:	d500      	bpl.n	800677c <_printf_i+0x16c>
 800677a:	b2ad      	uxth	r5, r5
 800677c:	6019      	str	r1, [r3, #0]
 800677e:	07d3      	lsls	r3, r2, #31
 8006780:	d502      	bpl.n	8006788 <_printf_i+0x178>
 8006782:	2320      	movs	r3, #32
 8006784:	4313      	orrs	r3, r2
 8006786:	6023      	str	r3, [r4, #0]
 8006788:	2710      	movs	r7, #16
 800678a:	2d00      	cmp	r5, #0
 800678c:	d1a9      	bne.n	80066e2 <_printf_i+0xd2>
 800678e:	2220      	movs	r2, #32
 8006790:	6823      	ldr	r3, [r4, #0]
 8006792:	4393      	bics	r3, r2
 8006794:	6023      	str	r3, [r4, #0]
 8006796:	e7a4      	b.n	80066e2 <_printf_i+0xd2>
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	680d      	ldr	r5, [r1, #0]
 800679c:	1d10      	adds	r0, r2, #4
 800679e:	6949      	ldr	r1, [r1, #20]
 80067a0:	6018      	str	r0, [r3, #0]
 80067a2:	6813      	ldr	r3, [r2, #0]
 80067a4:	062e      	lsls	r6, r5, #24
 80067a6:	d501      	bpl.n	80067ac <_printf_i+0x19c>
 80067a8:	6019      	str	r1, [r3, #0]
 80067aa:	e002      	b.n	80067b2 <_printf_i+0x1a2>
 80067ac:	066d      	lsls	r5, r5, #25
 80067ae:	d5fb      	bpl.n	80067a8 <_printf_i+0x198>
 80067b0:	8019      	strh	r1, [r3, #0]
 80067b2:	2300      	movs	r3, #0
 80067b4:	9e04      	ldr	r6, [sp, #16]
 80067b6:	6123      	str	r3, [r4, #16]
 80067b8:	e7c0      	b.n	800673c <_printf_i+0x12c>
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	1d11      	adds	r1, r2, #4
 80067be:	6019      	str	r1, [r3, #0]
 80067c0:	6816      	ldr	r6, [r2, #0]
 80067c2:	2100      	movs	r1, #0
 80067c4:	0030      	movs	r0, r6
 80067c6:	6862      	ldr	r2, [r4, #4]
 80067c8:	f000 f858 	bl	800687c <memchr>
 80067cc:	2800      	cmp	r0, #0
 80067ce:	d001      	beq.n	80067d4 <_printf_i+0x1c4>
 80067d0:	1b80      	subs	r0, r0, r6
 80067d2:	6060      	str	r0, [r4, #4]
 80067d4:	6863      	ldr	r3, [r4, #4]
 80067d6:	6123      	str	r3, [r4, #16]
 80067d8:	2300      	movs	r3, #0
 80067da:	9a04      	ldr	r2, [sp, #16]
 80067dc:	7013      	strb	r3, [r2, #0]
 80067de:	e7ad      	b.n	800673c <_printf_i+0x12c>
 80067e0:	0032      	movs	r2, r6
 80067e2:	6923      	ldr	r3, [r4, #16]
 80067e4:	9906      	ldr	r1, [sp, #24]
 80067e6:	9805      	ldr	r0, [sp, #20]
 80067e8:	9d07      	ldr	r5, [sp, #28]
 80067ea:	47a8      	blx	r5
 80067ec:	3001      	adds	r0, #1
 80067ee:	d0af      	beq.n	8006750 <_printf_i+0x140>
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	079b      	lsls	r3, r3, #30
 80067f4:	d415      	bmi.n	8006822 <_printf_i+0x212>
 80067f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067f8:	68e0      	ldr	r0, [r4, #12]
 80067fa:	4298      	cmp	r0, r3
 80067fc:	daaa      	bge.n	8006754 <_printf_i+0x144>
 80067fe:	0018      	movs	r0, r3
 8006800:	e7a8      	b.n	8006754 <_printf_i+0x144>
 8006802:	0022      	movs	r2, r4
 8006804:	2301      	movs	r3, #1
 8006806:	9906      	ldr	r1, [sp, #24]
 8006808:	9805      	ldr	r0, [sp, #20]
 800680a:	9e07      	ldr	r6, [sp, #28]
 800680c:	3219      	adds	r2, #25
 800680e:	47b0      	blx	r6
 8006810:	3001      	adds	r0, #1
 8006812:	d09d      	beq.n	8006750 <_printf_i+0x140>
 8006814:	3501      	adds	r5, #1
 8006816:	68e3      	ldr	r3, [r4, #12]
 8006818:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800681a:	1a9b      	subs	r3, r3, r2
 800681c:	42ab      	cmp	r3, r5
 800681e:	dcf0      	bgt.n	8006802 <_printf_i+0x1f2>
 8006820:	e7e9      	b.n	80067f6 <_printf_i+0x1e6>
 8006822:	2500      	movs	r5, #0
 8006824:	e7f7      	b.n	8006816 <_printf_i+0x206>
 8006826:	46c0      	nop			; (mov r8, r8)
 8006828:	08006fa5 	.word	0x08006fa5
 800682c:	08006fb6 	.word	0x08006fb6

08006830 <memmove>:
 8006830:	b510      	push	{r4, lr}
 8006832:	4288      	cmp	r0, r1
 8006834:	d902      	bls.n	800683c <memmove+0xc>
 8006836:	188b      	adds	r3, r1, r2
 8006838:	4298      	cmp	r0, r3
 800683a:	d303      	bcc.n	8006844 <memmove+0x14>
 800683c:	2300      	movs	r3, #0
 800683e:	e007      	b.n	8006850 <memmove+0x20>
 8006840:	5c8b      	ldrb	r3, [r1, r2]
 8006842:	5483      	strb	r3, [r0, r2]
 8006844:	3a01      	subs	r2, #1
 8006846:	d2fb      	bcs.n	8006840 <memmove+0x10>
 8006848:	bd10      	pop	{r4, pc}
 800684a:	5ccc      	ldrb	r4, [r1, r3]
 800684c:	54c4      	strb	r4, [r0, r3]
 800684e:	3301      	adds	r3, #1
 8006850:	429a      	cmp	r2, r3
 8006852:	d1fa      	bne.n	800684a <memmove+0x1a>
 8006854:	e7f8      	b.n	8006848 <memmove+0x18>
	...

08006858 <_sbrk_r>:
 8006858:	2300      	movs	r3, #0
 800685a:	b570      	push	{r4, r5, r6, lr}
 800685c:	4d06      	ldr	r5, [pc, #24]	; (8006878 <_sbrk_r+0x20>)
 800685e:	0004      	movs	r4, r0
 8006860:	0008      	movs	r0, r1
 8006862:	602b      	str	r3, [r5, #0]
 8006864:	f7fb fb76 	bl	8001f54 <_sbrk>
 8006868:	1c43      	adds	r3, r0, #1
 800686a:	d103      	bne.n	8006874 <_sbrk_r+0x1c>
 800686c:	682b      	ldr	r3, [r5, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d000      	beq.n	8006874 <_sbrk_r+0x1c>
 8006872:	6023      	str	r3, [r4, #0]
 8006874:	bd70      	pop	{r4, r5, r6, pc}
 8006876:	46c0      	nop			; (mov r8, r8)
 8006878:	20001154 	.word	0x20001154

0800687c <memchr>:
 800687c:	b2c9      	uxtb	r1, r1
 800687e:	1882      	adds	r2, r0, r2
 8006880:	4290      	cmp	r0, r2
 8006882:	d101      	bne.n	8006888 <memchr+0xc>
 8006884:	2000      	movs	r0, #0
 8006886:	4770      	bx	lr
 8006888:	7803      	ldrb	r3, [r0, #0]
 800688a:	428b      	cmp	r3, r1
 800688c:	d0fb      	beq.n	8006886 <memchr+0xa>
 800688e:	3001      	adds	r0, #1
 8006890:	e7f6      	b.n	8006880 <memchr+0x4>

08006892 <_realloc_r>:
 8006892:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006894:	0007      	movs	r7, r0
 8006896:	000e      	movs	r6, r1
 8006898:	0014      	movs	r4, r2
 800689a:	2900      	cmp	r1, #0
 800689c:	d105      	bne.n	80068aa <_realloc_r+0x18>
 800689e:	0011      	movs	r1, r2
 80068a0:	f7ff fc52 	bl	8006148 <_malloc_r>
 80068a4:	0005      	movs	r5, r0
 80068a6:	0028      	movs	r0, r5
 80068a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80068aa:	2a00      	cmp	r2, #0
 80068ac:	d103      	bne.n	80068b6 <_realloc_r+0x24>
 80068ae:	f7ff fbdf 	bl	8006070 <_free_r>
 80068b2:	0025      	movs	r5, r4
 80068b4:	e7f7      	b.n	80068a6 <_realloc_r+0x14>
 80068b6:	f000 f81b 	bl	80068f0 <_malloc_usable_size_r>
 80068ba:	9001      	str	r0, [sp, #4]
 80068bc:	4284      	cmp	r4, r0
 80068be:	d803      	bhi.n	80068c8 <_realloc_r+0x36>
 80068c0:	0035      	movs	r5, r6
 80068c2:	0843      	lsrs	r3, r0, #1
 80068c4:	42a3      	cmp	r3, r4
 80068c6:	d3ee      	bcc.n	80068a6 <_realloc_r+0x14>
 80068c8:	0021      	movs	r1, r4
 80068ca:	0038      	movs	r0, r7
 80068cc:	f7ff fc3c 	bl	8006148 <_malloc_r>
 80068d0:	1e05      	subs	r5, r0, #0
 80068d2:	d0e8      	beq.n	80068a6 <_realloc_r+0x14>
 80068d4:	9b01      	ldr	r3, [sp, #4]
 80068d6:	0022      	movs	r2, r4
 80068d8:	429c      	cmp	r4, r3
 80068da:	d900      	bls.n	80068de <_realloc_r+0x4c>
 80068dc:	001a      	movs	r2, r3
 80068de:	0031      	movs	r1, r6
 80068e0:	0028      	movs	r0, r5
 80068e2:	f7ff fbbb 	bl	800605c <memcpy>
 80068e6:	0031      	movs	r1, r6
 80068e8:	0038      	movs	r0, r7
 80068ea:	f7ff fbc1 	bl	8006070 <_free_r>
 80068ee:	e7da      	b.n	80068a6 <_realloc_r+0x14>

080068f0 <_malloc_usable_size_r>:
 80068f0:	1f0b      	subs	r3, r1, #4
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	1f18      	subs	r0, r3, #4
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	da01      	bge.n	80068fe <_malloc_usable_size_r+0xe>
 80068fa:	580b      	ldr	r3, [r1, r0]
 80068fc:	18c0      	adds	r0, r0, r3
 80068fe:	4770      	bx	lr

08006900 <_init>:
 8006900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006902:	46c0      	nop			; (mov r8, r8)
 8006904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006906:	bc08      	pop	{r3}
 8006908:	469e      	mov	lr, r3
 800690a:	4770      	bx	lr

0800690c <_fini>:
 800690c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800690e:	46c0      	nop			; (mov r8, r8)
 8006910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006912:	bc08      	pop	{r3}
 8006914:	469e      	mov	lr, r3
 8006916:	4770      	bx	lr
